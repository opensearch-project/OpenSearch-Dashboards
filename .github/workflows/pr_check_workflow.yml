# This workflow will do a clean install of node dependencies, build the source code and run tests across different versions of node
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-nodejs-with-github-actions

name: Build and test

# trigger on every commit push and PR for all branches except feature branches
on:
  push:
    branches: [ '**', '!feature/**' ]
  pull_request:
    branches: [ '**', '!feature/**' ]

env:
  CACHE_NAME: osd-node-modules
  TEST_BROWSER_HEADLESS: 1
  CI: 1
  GCS_UPLOAD_PREFIX: fake
  TEST_OPENSEARCH_DASHBOARDS_HOST: localhost
  TEST_OPENSEARCH_DASHBOARDS_PORT: 6610
  TEST_OPENSEARCH_TRANSPORT_PORT: 9403
  TEST_OPENSEARCH_PORT: 9400
  OSD_SNAPSHOT_SKIP_VERIFY_CHECKSUM: true

jobs:
  build-lint-test-linux:
    runs-on: ubuntu-latest
    name: Build and Verify
    steps:
      # Access a cache of set results from a previous run of the job
      # This is to prevent re-running steps that were already successful since it is not native to github actions
      # Can be used to verify flaky steps with reduced times
      - name: Restore the cached run
        uses: actions/cache@v2
        with:
          path: |
            job_successful
            linter_results
            unit_tests_results
            integration_tests_results
          key: ${{ github.run_id }}-${{ github.job }}-${{ github.sha }}
          restore-keys: |
            ${{ github.run_id }}-${{ github.job }}-${{ github.sha }}

      - name: Get if previous job was successful
        id: job_successful
        run: cat job_successful 2>/dev/null || echo 'false'

      - name: Get the previous linter results
        id: linter_results
        run: cat linter_results 2>/dev/null || echo 'default'

      - name: Get the previous unit tests results
        id: unit_tests_results
        run: cat unit_tests_results 2>/dev/null || echo 'default'

      - name: Get the previous integration tests results
        id: integration_tests_results
        run: cat integration_tests_results 2>/dev/null || echo 'default'

      - name: Checkout code
        if: steps.job_successful.outputs.job_successful != 'true'
        uses: actions/checkout@v3

      - name: Setup Node
        if: steps.job_successful.outputs.job_successful != 'true'
        uses: actions/setup-node@v3
        with:
          node-version-file: ".nvmrc"
          registry-url: 'https://registry.npmjs.org'

      - name: Setup Yarn
        if: steps.job_successful.outputs.job_successful != 'true'
        run: |
          npm uninstall -g yarn
          npm i -g yarn@1.22.10

      - name: Run bootstrap
        if: steps.job_successful.outputs.job_successful != 'true'
        run: yarn osd bootstrap

      - name: Run linter
        if: steps.linter_results.outputs.linter_results != 'success'
        id: linter
        run: yarn lint

      # Runs unit tests while limiting workers because github actions will spawn more than it can handle and crash
      # Continues on error but will create a comment on the pull request if this step failed.
      - name: Run unit tests
        if: steps.unit_tests_results.outputs.unit_tests_results != 'success'
        id: unit-tests
        continue-on-error: true
        run: node scripts/jest --ci --colors --maxWorkers=10
        env:
          SKIP_BAD_APPLES: true

      - run: echo Unit tests completed unsuccessfully. However, unit tests are inconsistent on the CI so please verify locally with `yarn test:jest`.
        if: steps.unit_tests_results.outputs.unit_tests_results != 'success' && steps.unit-tests.outcome != 'success'

      - name: Run integration tests
        if: steps.integration_tests_results.outputs.integration_tests_results != 'success'
        id: integration-tests
        run: node scripts/jest_integration --ci --colors --max-old-space-size=5120

      # Set cache if linter, unit tests, and integration tests were successful then the job will be marked successful
      # Sets individual results to empower re-runs of the same build without re-running successful steps.
      - if: |
          (steps.linter.outcome == 'success' || steps.linter.outcome == 'skipped') &&
          (steps.unit-tests.outcome == 'success' || steps.unit-tests.outcome == 'skipped') &&
          (steps.integration-tests.outcome == 'success' || steps.integration-tests.outcome == 'skipped')
        run: echo "::set-output name=job_successful::true" > job_successful
      - if: steps.linter.outcome == 'success' || steps.linter.outcome == 'skipped'
        run: echo "::set-output name=linter_results::success" > linter_results
      - if: steps.unit-tests.outcome == 'success' || steps.unit-tests.outcome == 'skipped'
        run: echo "::set-output name=unit_tests_results::success" > unit_tests_results
      - if: steps.integration-tests.outcome == 'success' || steps.integration-tests.outcome == 'skipped'
        run: echo "::set-output name=integration_tests_results::success" > integration_tests_results

  build-lint-test-windows:
    runs-on: windows-latest
    name: Build and Verify on Windows
    steps:
      - name: Configure git's autocrlf
        run: |
          git config --global core.autocrlf false

      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup JDK
        uses: actions/setup-java@v3
        with:
          java-version: '11'
          distribution: 'adopt'

      - name: Setup Node
        uses: actions/setup-node@v3
        with:
          node-version-file: '.nvmrc'
          registry-url: 'https://registry.npmjs.org'

      - name: Setup Yarn
        run: |
          npm uninstall -g yarn
          npm i -g yarn@1.22.10

      - name: Run bootstrap
        run: yarn osd bootstrap

      - name: Run linter
        id: linter
        run: yarn lint

      - name: Run unit tests with coverage
        id: unit-tests
        run: yarn test:jest:ci:coverage

      - name: Run mocha tests with coverage
        id: mocha-tests
        run: yarn test:mocha:coverage

      - name: Upload Code Coverage
        id: upload-code-coverage
        uses: codecov/codecov-action@v3
        with:
          directory: ./target/opensearch-dashboards-coverage
          flags: Windows

      - name: Run integration tests
        id: integration-tests
        run: yarn test:jest_integration:ci
  
  functional-tests-linux:
    needs: [ build-lint-test-linux ]
    runs-on: ubuntu-latest
    name: Run functional tests
    strategy:
      matrix:
        group: [ 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12 ]
    steps:
      - run: echo Running functional tests for ciGroup${{ matrix.group }}

      # Access a cache of set results from a previous run of the job
      # This is to prevent re-running a CI group that was already successful since it is not native to github actions
      # Can be used to verify flaky steps with reduced times
      - name: Restore the cached run
        uses: actions/cache@v2
        with:
          path: |
            ftr_tests_results
          key: ${{ github.run_id }}-${{ github.job }}-${{ matrix.group }}-${{ github.sha }}
          restore-keys: |
            ${{ github.run_id }}-${{ github.job }}-${{ matrix.group }}-${{ github.sha }}

      - name: Get the cached tests results
        id: ftr_tests_results
        run: cat ftr_tests_results 2>/dev/null || echo 'default'

      - name: Checkout code
        if: steps.ftr_tests_results.outputs.ftr_tests_results != 'success'
        uses: actions/checkout@v3

      - name: Setup Node
        if: steps.ftr_tests_results.outputs.ftr_tests_results != 'success'
        uses: actions/setup-node@v3
        with:
          node-version-file: ".nvmrc"
          registry-url: 'https://registry.npmjs.org'

      - name: Setup Yarn
        if: steps.ftr_tests_results.outputs.ftr_tests_results != 'success'
        run: |
          npm uninstall -g yarn
          npm i -g yarn@1.22.10

      - name: Get cache path
        if: steps.ftr_tests_results.outputs.ftr_tests_results != 'success'
        id: cache-path
        run: echo "::set-output name=CACHE_DIR::$(yarn cache dir)"

      - name: Setup cache
        if: steps.ftr_tests_results.outputs.ftr_tests_results != 'success'
        uses: actions/cache@v2
        with:
          path: ${{ steps.cache-path.outputs.CACHE_DIR }}
          key: ${{ runner.os }}-yarn-${{ env.CACHE_NAME }}-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-${{ env.CACHE_NAME }}-
            ${{ runner.os }}-yarn-
            ${{ runner.os }}-

      # github virtual env is the latest chrome
      - name: Setup chromedriver
        if: steps.ftr_tests_results.outputs.ftr_tests_results != 'success'
        run: node scripts/upgrade_chromedriver.js

      - name: Run bootstrap
        if: steps.ftr_tests_results.outputs.ftr_tests_results != 'success'
        run: yarn osd bootstrap

      - name: Build plugins
        if: steps.ftr_tests_results.outputs.ftr_tests_results != 'success'
        run: node scripts/build_opensearch_dashboards_platform_plugins --no-examples --workers 10

      - if: steps.ftr_tests_results.outputs.ftr_tests_results != 'success'
        id: ftr-tests
        run: node scripts/functional_tests.js --config test/functional/config.js --include ciGroup${{ matrix.group }}
        env:
          CI_GROUP: ciGroup${{ matrix.group }}
          CI_PARALLEL_PROCESS_NUMBER: ciGroup${{ matrix.group }}
          JOB: ci${{ matrix.group }}
          CACHE_DIR: ciGroup${{ matrix.group }}

      - if: steps.ftr-tests.outcome == 'success' || steps.ftr-tests.outcome == 'skipped'
        run: echo "::set-output name=ftr_tests_results::success" > ftr_tests_results

  functional-tests-windows:
    runs-on: windows-latest
    name: Run functional tests on Windows
    strategy:
      matrix:
        group: [ 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13 ]
    steps:
      - run: echo Running functional tests for ciGroup${{ matrix.group }}

      - name: Configure git's autocrlf
        run: |
          git config --global core.autocrlf false

      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup JDK
        uses: actions/setup-java@v3
        with:
          java-version: '11'
          distribution: 'adopt'

      - name: Setup Node
        uses: actions/setup-node@v3
        with:
          node-version-file: '.nvmrc'
          registry-url: 'https://registry.npmjs.org'

      - name: Setup Yarn
        run: |
          npm uninstall -g yarn
          npm i -g yarn@1.22.10

      # image has the latest chrome v99
      - name: Setup chromedriver
        run: node scripts/upgrade_chromedriver.js

      - name: Run bootstrap
        run: yarn osd bootstrap

      - name: Build plugins
        run: node scripts/build_opensearch_dashboards_platform_plugins --no-examples --workers 10

      - name: Run CI test group ${{ matrix.group }}
        id: ftr-tests
        run: node scripts/functional_tests.js --config test/functional/config.js --include ciGroup${{ matrix.group }}
        env:
          CI_GROUP: ciGroup${{ matrix.group }}
          CI_PARALLEL_PROCESS_NUMBER: ciGroup${{ matrix.group }}
          JOB: ci${{ matrix.group }}
          CACHE_DIR: ciGroup${{ matrix.group }}
