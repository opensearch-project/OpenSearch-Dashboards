name: Post Performance Comment

on:
  workflow_run:
    workflows:
      - 'Performance CI'
    types:
      - completed

jobs:
  post-comment:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      issues: write
      pull-requests: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Download Lighthouse Results
        uses: actions/download-artifact@v2
        with:
          name: lighthouse-results
          path: lighthouse-results
        continue-on-error: true

      - name: Download Bundle Analysis Results
        uses: actions/download-artifact@v2
        with:
          name: bundle-analysis-results
          path: bundle-analysis-results
        continue-on-error: true

      - name: Prepare Combined Comment
        id: prepare_comment
        run: |
          COMMENT="### üö® Performance Issues Detected!!\n\n"
          HAS_ARTIFACT=false
          # Lighthouse results
          if [ -f lighthouse-results/assertion-results.json ]; then
            HAS_ARTIFACT=true
            if ! jq empty lighthouse-results/assertion-results.json; then
              echo "‚ùå Invalid JSON format in Lighthouse assertion results."
              exit 1
            fi

            BASELINE=$(cat ./baselines/lighthouse_baseline.json)
            FAILURES=$(jq --argjson baseline "$BASELINE" -r '[.[] | select(.passed==false) | {metric: .auditId, expected: ($baseline[(.url | sub("^.*?//[^/]+"; ""))][.auditId] // "N/A"), actual: (if .actual then (.actual | floor) else "N/A" end), url: .url}]' lighthouse-results/assertion-results.json)

            if [ ! -f lighthouse-results/links.json ]; then
              echo "{}" > lighthouse-results/links.json
            fi

            URL_REPORT_MAP=$(jq -c '.' lighthouse-results/links.json)
            FAILURES_WITH_REPORTS=$(jq --argjson url_report_map "$URL_REPORT_MAP" 'map(. + {reportUrl: $url_report_map[.url]})' <<< "$FAILURES")

            if [[ "$FAILURES_WITH_REPORTS" != "[]" ]]; then
              COMMENT+="### ‚ö° Lighthouse CI Performance Issues ‚ö°\n\n"
              COMMENT+="| Metric | Expected | Actual | URL | Report |\n"
              COMMENT+="|--------|----------|--------|-----|--------|\n"
              while IFS= read -r line; do
                COMMENT+="| $(echo "$line" | jq -r '.metric') | $(echo "$line" | jq -r '.expected') | $(echo "$line" | jq -r '.actual') | $(echo "$line" | jq -r '.url') | [Report]($(echo "$line" | jq -r '.reportUrl')) |\n"
              done <<< "$(echo "$FAILURES_WITH_REPORTS" | jq -c '.[]')"
              COMMENT+="\n\n"
            fi
          fi

          # Bundle size results
          if [ -f bundle-analysis-results/bundle_analysis.txt ]; then
            HAS_ARTIFACT=true
            COMMENT+="### üì¶ Bundle Size Analysis üì¶\n\n"
            COMMENT+="\`\`\`\n$(cat bundle-analysis-results/bundle_analysis.txt)\n\`\`\`\n"
          fi

          if [ "$HAS_ARTIFACT" = false ]; then
            echo "SKIP_COMMENT=true" >> $GITHUB_OUTPUT
          else
            echo "COMMENT_BODY<<EOF" >> $GITHUB_ENV
            echo "$COMMENT" >> $GITHUB_ENV
            echo "EOF" >> $GITHUB_ENV
            echo "SKIP_COMMENT=false" >> $GITHUB_OUTPUT
          fi

      - name: Post PR Comment
        if: steps.prepare_comment.outputs.SKIP_COMMENT == 'false'
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const prNumber = context.payload.workflow_run.pull_requests[0]?.number;
            if (!prNumber) {
              core.setFailed("‚ùå Could not determine PR number from workflow_run payload.");
              return;
            }

            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: prNumber,
              body: process.env.COMMENT_BODY
            });
