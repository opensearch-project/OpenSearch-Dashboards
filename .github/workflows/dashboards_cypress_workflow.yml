name: Orchestrator cypress workflow
run-name: dashboards_cypress_workflow ${{ inputs.UNIQUE_ID != '' && inputs.UNIQUE_ID || '' }} # Unique id number appended to the workflow run-name to reference the run within the orchestrator.
# Trigger on dispatch event sent from FT repo orchestrator
on:
  workflow_dispatch:
    inputs:
      test_repo:
        description: 'Cypress test repo'
        default: ''
        required: false
        type: string
      test_branch:
        description: 'Cypress test branch (default: source branch)'
        required: false
        type: string
      specs:
        description: 'Test group to run'
        required: false
        type: string
      build_id:
        description: 'Build Id'
        required: false
        type: string
      OS_URL:
        description: 'OpenSearch release artifact'
        required: false
        type: string
      OSD_URL:
        description: 'OpenSearch Dashboards release artifact'
        required: false
        type: string
      UNIQUE_ID:
        description: 'Unique Id for the workflow execution'
        required: true
        type: string
      SECURITY_ENABLED:
        required: false
        type: string

env:
  TEST_REPO: ${{ inputs.test_repo != '' && inputs.test_repo || github.repository }}
  TEST_BRANCH: "${{ inputs.test_branch != '' && inputs.test_branch || github.base_ref }}"
  OSD_PATH: 'osd'
  CYPRESS_BROWSER: 'chromium'
  JOB_ID: ${{ inputs.UNIQUE_ID}}
  OPENSEARCH:  ${{ inputs.OS_URL != '' && inputs.OS_URL  || 'https://ci.opensearch.org/ci/dbc/distribution-build-opensearch/$VERSION/latest/linux/x64/tar/dist/opensearch/opensearch-$VERSION-linux-x64.tar.gz' }}
  DASHBOARDS: ${{ inputs.OSD_URL != '' && inputs.OSD_URL  || 'https://ci.opensearch.org/ci/dbc/distribution-build-opensearch-dashboards/$VERSION/latest/linux/x64/tar/dist/opensearch-dashboards/opensearch-dashboards-$VERSION-linux-x64.tar.gz' }}
  OPENSEARCH_DIR: 'cypress/opensearch'
  DASHBOARDS_DIR: 'cypress/opensearch-dashboards'
  SECURITY_ENABLED: ${{ inputs.SECURITY_ENABLED != '' && inputs.SECURITY_ENABLED || 'false' }}
  SPEC: 'cypress/integration/core_opensearch_dashboards/*'

jobs:
  cypress-tests:
    runs-on: ubuntu-latest
    container:
      image: docker://opensearchstaging/ci-runner:ci-runner-rockylinux8-opensearch-dashboards-integtest-v2
      options: --user 1001
    env:
      # prevents extra Cypress installation progress messages
      CI: 1
      # avoid warnings like "tput: No value for $TERM and no -T specified"
      TERM: xterm
    name: Run cypress tests ${{ inputs.UNIQUE_ID}}
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
        with:
          path: ./${{ env.OSD_PATH }}
          repository: ${{ env.TEST_REPO }}
          ref: '${{ env.TEST_BRANCH }}'

      - name: Setup Node
        uses: actions/setup-node@v3
        with:
          node-version-file: './${{ env.OSD_PATH }}/.nvmrc'
          registry-url: 'https://registry.npmjs.org'

      - name: Setup Yarn
        run: |
          npm uninstall -g yarn
          npm i -g yarn@1.22.10
          yarn config set network-timeout 1000000 -g

      - name: Get Cypress version
        id: cypress_version
        run: |
          echo "name=cypress_version::$(cat ./${{ env.OSD_PATH }}/package.json | jq '.devDependencies.cypress' | tr -d '"')" >> $GITHUB_OUTPUT
    
      - name: Cache Cypress
        id: cache-cypress
        uses: actions/cache@v1
        with:
          path: ~/.cache/Cypress
          key: cypress-cache-v2-${{ runner.os }}-${{ hashFiles('**/package.json') }}
        env:
          CYPRESS_INSTALL_BINARY: ${{ steps.cypress_version.outputs.cypress_version }}
      - run: npx cypress cache list
      - run: npx cypress cache path

      - name: Get package version (Linux)
        run: |
          cd ${{ env.OSD_PATH }}
          echo "VERSION=$(yarn --silent pkg-version)" >> $GITHUB_ENV

      - name: Run bootstrap
        run: |
          cd ${{ env.OSD_PATH }}
          yarn osd bootstrap

      - name: Download and extract Opensearch artifacts
        run: |
          CWD=$(pwd)
          mkdir -p $CWD/${{ env.OPENSEARCH_DIR }}
          source ${{ env.OSD_PATH }}/scripts/common/utils.sh
          open_artifact $CWD/${{ env.OPENSEARCH_DIR }} ${{ env.OPENSEARCH }}
      
      - name: Download and extract Opensearch Dashboards artifacts
        run: |
          CWD=$(pwd)
          mkdir -p $CWD/${{ env.DASHBOARDS_DIR }}
          source ${{ env.OSD_PATH }}/scripts/common/utils.sh
          open_artifact $CWD/${{ env.DASHBOARDS_DIR }} ${{ env.DASHBOARDS }}

      - name: Run Cypress tests 
        run: |
          source ${{ env.OSD_PATH }}/scripts/cypress_tests.sh
          run_dashboards_cypress_tests  

      # Screenshots are only captured on failures
      - uses: actions/upload-artifact@v3
        if: failure()
        with:
          name: osd-cypress-screenshots
          path: ${{ env.OSD_PATH }}/cypress/screenshots
          retention-days: 1
      
      - uses: actions/upload-artifact@v3
        if: always()
        with:
          name: osd-cypress-videos
          path: ${{ env.OSD_PATH }}/cypress/videos
          retention-days: 1
