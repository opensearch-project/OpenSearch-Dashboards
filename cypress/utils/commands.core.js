/*
 * Copyright OpenSearch Contributors
 * SPDX-License-Identifier: Apache-2.0
 */

import initCommandNamespace from './command_namespace';
import { PATHS, INDEX_WITH_TIME_1, INDEX_PATTERN_WITH_TIME } from './constants';
import { ADMIN_AUTH } from './commands';

initCommandNamespace(cy, 'core');

const id = Date.now();

export const DEFAULT_OPTIONS = {
  workspace: {
    name: `wksp-${id}`,
    description: 'Workspace generated by Cypress',
    features: ['use-case-observability'],
  },
  dataSource: {
    title: `ds-${id}`,
    description: 'Data source added by Cypress',
    auth: { type: 'no_auth' },
    endpoint: PATHS.ENGINE,
    dataSourceVersion: '2.14.0',
    dataSourceEngineType: 'OpenSearch',
  },
  fixture: {
    mappingPath: `query_enhancements/data_logs_1/${INDEX_WITH_TIME_1}.mapping.json`,
    dataPath: `query_enhancements/data_logs_1/${INDEX_WITH_TIME_1}.data.ndjson`,
  },
  index: INDEX_WITH_TIME_1,
  dataset: {
    title: INDEX_PATTERN_WITH_TIME,
    timeFieldName: 'timestamp',
    type: 'INDEX_PATTERN',
    fieldAttrs: '{}',
    fieldFormats: '{}',
    fields: JSON.stringify([
      {
        count: 0,
        name: 'category',
        type: 'string',
        esTypes: ['keyword'],
        scripted: false,
        searchable: true,
        aggregatable: true,
        readFromDocValues: true,
      },
      {
        count: 0,
        name: 'request_url',
        type: 'string',
        esTypes: ['keyword'],
        scripted: false,
        searchable: true,
        aggregatable: true,
        readFromDocValues: true,
      },
      {
        count: 0,
        name: 'service_endpoint',
        type: 'string',
        esTypes: ['keyword'],
        scripted: false,
        searchable: true,
        aggregatable: true,
        readFromDocValues: true,
      },
      {
        count: 0,
        name: 'status_code',
        type: 'number',
        esTypes: ['integer'],
        scripted: false,
        searchable: true,
        aggregatable: true,
        readFromDocValues: true,
      },
      {
        count: 0,
        name: 'timestamp',
        type: 'date',
        esTypes: ['date'],
        scripted: false,
        searchable: true,
        aggregatable: true,
        readFromDocValues: true,
      },
    ]),
  },
  search: {
    title: `ss-${id}`,
    description: 'Saved search created by Cypress',
    query: {
      query: `source = ${INDEX_PATTERN_WITH_TIME} | where category = "Network"`,
      language: 'PPL',
    },
    columns: ['_source'],
    sort: [['timestamp', 'desc']],
  },
};

cy.core.add('createWorkspace', (options = {}) => {
  const { workspace } = { ...DEFAULT_OPTIONS, ...options };

  cy.request({
    method: 'POST',
    url: '/api/workspaces',
    headers: { 'osd-xsrf': true },
    body: {
      attributes: workspace,
    },
  }).then((resp) => {
    expect(resp.body.success).to.eq(true);
    const workspaceId = resp.body.result.id;
    cy.wrap(workspaceId).as('WORKSPACE_ID');
    return cy.wrap(workspaceId);
  });
});

cy.core.add('createDataSource', (options = {}) => {
  const { dataSource } = { ...DEFAULT_OPTIONS, ...options };

  return cy
    .request({
      method: 'POST',
      url: '/api/saved_objects/data-source',
      headers: {
        'osd-xsrf': true,
      },
      auth: ADMIN_AUTH,
      body: {
        attributes: dataSource,
      },
    })
    .then((resp) => {
      if (resp && resp.body && resp.body.id) {
        const dataSourceId = resp.body.id;
        cy.wrap(dataSourceId).as('DATA_SOURCE_ID');
        return cy.wrap(dataSourceId);
      }
    });
});

cy.core.add('associateDataSourcesToWorkspace', (workspaceId, dataSourceIds) => {
  const savedObjects = dataSourceIds.map((id) => ({ id, type: 'data-source' }));

  cy.request({
    method: 'POST',
    url: `/w/${workspaceId}/api/workspaces/_associate`,
    headers: { 'osd-xsrf': true },
    body: {
      savedObjects,
      workspaceId,
    },
  }).then((resp) => {
    expect(resp.body.success).to.eq(true);
    return cy.wrap(resp);
  });
});

cy.core.add('createDataset', (workspaceId, dataSourceId, options = {}) => {
  const { dataset } = {
    ...DEFAULT_OPTIONS,
    ...options,
  };

  cy.log(`Creating dataset: { title: ${dataset.title}, type: ${dataset.type} }: `);

  return cy
    .request({
      method: 'POST',
      url: `/w/${workspaceId}/api/saved_objects/index-pattern`,
      headers: {
        'osd-xsrf': 'osd-fetch',
      },
      body: {
        attributes: {
          ...dataset,
          type: undefined,
        },
        references: [{ name: 'dataSource', type: 'data-source', id: dataSourceId }],
        workspaces: [workspaceId],
      },
    })
    .then((resp) => {
      expect(resp.status).to.eq(200);
      const datasetId = resp.body.id;
      cy.wrap(datasetId).as('DATASET_ID');
      return cy.wrap(datasetId);
    });
});

cy.core.add('deleteDataset', (datasetId) => {
  cy.log(`Deleting dataset: ${datasetId}`);

  return cy.request({
    method: 'DELETE',
    url: `/api/saved_objects/index-pattern/${datasetId}?force=true`,
    headers: { 'osd-xsrf': true },
    failOnStatusCode: false,
  });
});

cy.core.add('selectDataset', (title) => {
  cy.log(`Selecting dataset: ${title}`);

  cy.intercept('GET', '**/api/assistant/agent_config*', (req) => {
    req.continue((res) => {
      if (res.statusCode === 404) {
        res.send(200, { status: 'ok', data: {} });
      }
    });
  }).as('agentConfigRequest');

  cy.getElementByTestId('datasetSelectButton').should('be.visible').click();
  cy.getElementByTestId('datasetSelectSelectable')
    .should('be.visible')
    .getElementByTestId(`datasetSelectOption-${title}`)
    .should('be.visible')
    .click();
  cy.getElementByTestId('datasetSelectButton').should('contain.text', `${title}`);
  cy.wait(1000);
});

cy.core.add('setUiSettings', (workspaceId, changes = {}) => {
  return cy
    .request({
      method: 'POST',
      url: `/w/${workspaceId}/api/opensearch-dashboards/settings`,
      headers: {
        'osd-xsrf': 'osd-fetch',
      },
      body: {
        changes,
      },
    })
    .then((resp) => {
      expect(resp.status).to.eq(200);
      return cy.wrap(resp);
    });
});

cy.core.add('createSavedSearch', (workspaceId, dataSourceId, datasetId, options = {}) => {
  const {
    search: { title, description, query, columns, sort },
    dataset: { timeFieldName, type: datasetType, title: datasetTitle },
  } = { ...DEFAULT_OPTIONS, ...options };

  cy.log(`Creating saved search: { title: ${title} }`);

  const searchSourceJSON = {
    index: datasetId,
    query: query,
    highlightAll: true,
    version: true,
    filter: [],
    dataset: {
      id: datasetId,
      timeFieldName,
      title: datasetTitle,
      type: datasetType,
      dataSource: {
        id: dataSourceId,
        type: 'data-source',
      },
    },
  };

  return cy
    .request({
      method: 'POST',
      url: `/w/${workspaceId}/api/saved_objects/search`,
      headers: {
        'osd-xsrf': 'true',
      },
      body: {
        attributes: {
          title,
          description,
          columns,
          sort,
          hits: 0,
          version: 1,
          kibanaSavedObjectMeta: {
            searchSourceJSON: JSON.stringify(searchSourceJSON),
          },
        },
        references: [
          {
            id: datasetId,
            name: 'kibanaSavedObjectMeta.searchSourceJSON.index',
            type: 'index-pattern',
          },
          {
            id: dataSourceId,
            name: 'dataSource',
            type: 'data-source',
          },
        ],
        workspaces: [workspaceId],
      },
    })
    .then((resp) => {
      expect(resp.status).to.eq(200);
      const searchId = resp.body.id;
      cy.wrap(searchId).as('SAVED_SEARCH_ID');
      cy.log(`Saved search created with ID: ${searchId}`);
      return cy.wrap(searchId);
    });
});

cy.core.add('setupTestResources', (options = {}) => {
  const {
    dataSource: { endpoint },
    fixture: { dataPath },
    dataset,
    index,
  } = {
    ...DEFAULT_OPTIONS,
    ...options,
  };

  cy.log(`Setting up resources: { endpoint: ${endpoint}, dataPath: ${dataPath}, index: ${index} }`);

  return cy.core.setupTestData(endpoint, dataPath, index).then(() =>
    cy.core.createDataSource().then((dataSourceId) => {
      return cy.core.createWorkspace().then((workspaceId) => {
        cy.core.setUiSettings(workspaceId, {
          defaultWorkspace: workspaceId,
          defaultDataSource: dataSourceId,
        });
        cy.core.associateDataSourcesToWorkspace(workspaceId, [dataSourceId]);
        return cy.core.createDataset(workspaceId, dataSourceId, { dataset }).then((datasetId) => {
          cy.core.setUiSettings(workspaceId, {
            defaultIndex: datasetId,
          });
          cy.log(
            `Resources created: { workspaceId: ${workspaceId}, dataSourceId: ${dataSourceId}, datasetId: ${datasetId} }`
          );
          return cy.wrap({
            workspaceId,
            dataSourceId,
            datasetId,
          });
        });
      });
    })
  );
});

cy.core.add('cleanupTestResources', (options = {}) => {
  const { index, workspaceId, dataSourceId, datasetId } = { ...DEFAULT_OPTIONS, ...options };

  cy.log(
    `Cleaning up resources: { workspaceId: ${workspaceId}, dataSourceId: ${dataSourceId}, datasetId: ${datasetId} }`
  );

  cy.osd.deleteIndex(index);

  cy.request({
    method: 'DELETE',
    url: `/api/saved_objects/index-pattern/${datasetId}?force=true`,
    headers: { 'osd-xsrf': true },
    failOnStatusCode: false,
  });

  cy.request({
    method: 'DELETE',
    url: `/api/workspaces/${workspaceId}`,
    headers: { 'osd-xsrf': true },
    failOnStatusCode: false,
  });

  cy.request({
    method: 'DELETE',
    url: `/api/saved_objects/data-source/${dataSourceId}?force=true`,
    headers: { 'osd-xsrf': true },
    failOnStatusCode: false,
  });

  cy.clearLocalStorage();
});

cy.core.add('setupTestData', (endpoint, fixturePath, index, options = {}) => {
  if (Cypress.env('CYPRESS_RUNTIME_ENV') !== 'osd') {
    return true;
  }
  return cy.core.bulkUploadDocs(endpoint, fixturePath, index, options);
});

cy.core.add('bulkUploadDocs', (endpoint, fixturePath, index) => {
  const sendBulkAPIRequest = (ndjson) => {
    const url = index ? `${endpoint}/${index}/_bulk` : `${endpoint}/_bulk`;
    cy.log('bulkUploadDocs')
      .request({
        method: 'POST',
        url,
        headers: {
          'content-type': 'application/json;charset=UTF-8',
          'osd-xsrf': true,
        },
        body: ndjson,
      })
      .then((response) => {
        if (response.body.errors) {
          console.error(response.body.items);
          throw new Error('Bulk upload failed');
        }
      });
  };

  cy.fixture(fixturePath, 'utf8').then((ndjson) => {
    sendBulkAPIRequest(ndjson);
  });

  cy.request({
    method: 'POST',
    url: `${endpoint}/_all/_refresh`,
  });
});

cy.core.add('waitForDatasetsToLoad', () => {
  cy.getElementByTestId('datasetSelectButton').should('be.visible').should('not.be.disabled');
});
