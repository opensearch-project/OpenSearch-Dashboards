// Generated from ./src/opensearch_ppl_simplified/grammar/OpenSearchPPLParser.g4 by ANTLR 4.13.1

import * as antlr from "antlr4ng";
import { Token } from "antlr4ng";

import { OpenSearchPPLParserVisitor } from "./OpenSearchPPLParserVisitor.js";

// for running tests with parameters, TODO: discuss strategy for typed parameters in CI
// eslint-disable-next-line no-unused-vars
type int = number;


export class OpenSearchPPLParser extends antlr.Parser {
    public static readonly SPACE = 1;
    public static readonly SEARCH = 2;
    public static readonly DESCRIBE = 3;
    public static readonly SHOW = 4;
    public static readonly EXPLAIN = 5;
    public static readonly FROM = 6;
    public static readonly WHERE = 7;
    public static readonly FIELDS = 8;
    public static readonly FIELD = 9;
    public static readonly TABLE = 10;
    public static readonly RENAME = 11;
    public static readonly STATS = 12;
    public static readonly EVENTSTATS = 13;
    public static readonly DEDUP = 14;
    public static readonly SORT = 15;
    public static readonly EVAL = 16;
    public static readonly HEAD = 17;
    public static readonly BIN = 18;
    public static readonly TOP = 19;
    public static readonly RARE = 20;
    public static readonly PARSE = 21;
    public static readonly SPATH = 22;
    public static readonly REGEX = 23;
    public static readonly REX = 24;
    public static readonly SED = 25;
    public static readonly PUNCT = 26;
    public static readonly GROK = 27;
    public static readonly PATTERN = 28;
    public static readonly PATTERNS = 29;
    public static readonly NEW_FIELD = 30;
    public static readonly KMEANS = 31;
    public static readonly AD = 32;
    public static readonly ML = 33;
    public static readonly FILLNULL = 34;
    public static readonly FLATTEN = 35;
    public static readonly TRENDLINE = 36;
    public static readonly TIMECHART = 37;
    public static readonly APPENDCOL = 38;
    public static readonly EXPAND = 39;
    public static readonly SIMPLE_PATTERN = 40;
    public static readonly BRAIN = 41;
    public static readonly VARIABLE_COUNT_THRESHOLD = 42;
    public static readonly FREQUENCY_THRESHOLD_PERCENTAGE = 43;
    public static readonly METHOD = 44;
    public static readonly MAX_SAMPLE_COUNT = 45;
    public static readonly MAX_MATCH = 46;
    public static readonly OFFSET_FIELD = 47;
    public static readonly BUFFER_LIMIT = 48;
    public static readonly LABEL = 49;
    public static readonly AGGREGATION = 50;
    public static readonly JOIN = 51;
    public static readonly ON = 52;
    public static readonly INNER = 53;
    public static readonly OUTER = 54;
    public static readonly FULL = 55;
    public static readonly SEMI = 56;
    public static readonly ANTI = 57;
    public static readonly CROSS = 58;
    public static readonly LEFT_HINT = 59;
    public static readonly RIGHT_HINT = 60;
    public static readonly AS = 61;
    public static readonly BY = 62;
    public static readonly SOURCE = 63;
    public static readonly INDEX = 64;
    public static readonly A = 65;
    public static readonly ASC = 66;
    public static readonly D = 67;
    public static readonly DESC = 68;
    public static readonly DATASOURCES = 69;
    public static readonly USING = 70;
    public static readonly WITH = 71;
    public static readonly SIMPLE = 72;
    public static readonly STANDARD = 73;
    public static readonly COST = 74;
    public static readonly EXTENDED = 75;
    public static readonly OVERRIDE = 76;
    public static readonly OVERWRITE = 77;
    public static readonly AUTO = 78;
    public static readonly STR = 79;
    public static readonly NUM = 80;
    public static readonly SMA = 81;
    public static readonly WMA = 82;
    public static readonly KEEPEMPTY = 83;
    public static readonly CONSECUTIVE = 84;
    public static readonly DEDUP_SPLITVALUES = 85;
    public static readonly PARTITIONS = 86;
    public static readonly ALLNUM = 87;
    public static readonly DELIM = 88;
    public static readonly BUCKET_NULLABLE = 89;
    public static readonly CENTROIDS = 90;
    public static readonly ITERATIONS = 91;
    public static readonly DISTANCE_TYPE = 92;
    public static readonly NUMBER_OF_TREES = 93;
    public static readonly SHINGLE_SIZE = 94;
    public static readonly SAMPLE_SIZE = 95;
    public static readonly OUTPUT_AFTER = 96;
    public static readonly TIME_DECAY = 97;
    public static readonly ANOMALY_RATE = 98;
    public static readonly CATEGORY_FIELD = 99;
    public static readonly TIME_FIELD = 100;
    public static readonly TIME_ZONE = 101;
    public static readonly TRAINING_DATA_SIZE = 102;
    public static readonly ANOMALY_SCORE_THRESHOLD = 103;
    public static readonly APPEND = 104;
    public static readonly COUNTFIELD = 105;
    public static readonly SHOWCOUNT = 106;
    public static readonly LIMIT = 107;
    public static readonly USEOTHER = 108;
    public static readonly INPUT = 109;
    public static readonly OUTPUT = 110;
    public static readonly PATH = 111;
    public static readonly CASE = 112;
    public static readonly ELSE = 113;
    public static readonly IN = 114;
    public static readonly EXISTS = 115;
    public static readonly GEOIP = 116;
    public static readonly NOT = 117;
    public static readonly OR = 118;
    public static readonly AND = 119;
    public static readonly XOR = 120;
    public static readonly TRUE = 121;
    public static readonly FALSE = 122;
    public static readonly REGEXP = 123;
    public static readonly REGEX_MATCH = 124;
    public static readonly CONVERT_TZ = 125;
    public static readonly DATETIME = 126;
    public static readonly DAY = 127;
    public static readonly DAY_HOUR = 128;
    public static readonly DAY_MICROSECOND = 129;
    public static readonly DAY_MINUTE = 130;
    public static readonly DAY_OF_YEAR = 131;
    public static readonly DAY_SECOND = 132;
    public static readonly HOUR = 133;
    public static readonly HOUR_MICROSECOND = 134;
    public static readonly HOUR_MINUTE = 135;
    public static readonly HOUR_OF_DAY = 136;
    public static readonly HOUR_SECOND = 137;
    public static readonly INTERVAL = 138;
    public static readonly MICROSECOND = 139;
    public static readonly MILLISECOND = 140;
    public static readonly MINUTE = 141;
    public static readonly MINUTE_MICROSECOND = 142;
    public static readonly MINUTE_OF_DAY = 143;
    public static readonly MINUTE_OF_HOUR = 144;
    public static readonly MINUTE_SECOND = 145;
    public static readonly MONTH = 146;
    public static readonly MONTH_OF_YEAR = 147;
    public static readonly QUARTER = 148;
    public static readonly SECOND = 149;
    public static readonly SECOND_MICROSECOND = 150;
    public static readonly SECOND_OF_MINUTE = 151;
    public static readonly WEEK = 152;
    public static readonly WEEK_OF_YEAR = 153;
    public static readonly YEAR = 154;
    public static readonly YEAR_MONTH = 155;
    public static readonly DATAMODEL = 156;
    public static readonly LOOKUP = 157;
    public static readonly SAVEDSEARCH = 158;
    public static readonly INT = 159;
    public static readonly INTEGER = 160;
    public static readonly DOUBLE = 161;
    public static readonly LONG = 162;
    public static readonly FLOAT = 163;
    public static readonly STRING = 164;
    public static readonly BOOLEAN = 165;
    public static readonly IP = 166;
    public static readonly PIPE = 167;
    public static readonly COMMA = 168;
    public static readonly DOT = 169;
    public static readonly EQUAL = 170;
    public static readonly DOUBLE_EQUAL = 171;
    public static readonly GREATER = 172;
    public static readonly LESS = 173;
    public static readonly NOT_GREATER = 174;
    public static readonly NOT_LESS = 175;
    public static readonly NOT_EQUAL = 176;
    public static readonly PLUS = 177;
    public static readonly MINUS = 178;
    public static readonly STAR = 179;
    public static readonly DIVIDE = 180;
    public static readonly MODULE = 181;
    public static readonly EXCLAMATION_SYMBOL = 182;
    public static readonly COLON = 183;
    public static readonly LT_PRTHS = 184;
    public static readonly RT_PRTHS = 185;
    public static readonly LT_SQR_PRTHS = 186;
    public static readonly RT_SQR_PRTHS = 187;
    public static readonly LT_CURLY = 188;
    public static readonly RT_CURLY = 189;
    public static readonly SINGLE_QUOTE = 190;
    public static readonly DOUBLE_QUOTE = 191;
    public static readonly BACKTICK = 192;
    public static readonly ARROW = 193;
    public static readonly BIT_NOT_OP = 194;
    public static readonly BIT_AND_OP = 195;
    public static readonly BIT_XOR_OP = 196;
    public static readonly AVG = 197;
    public static readonly COUNT = 198;
    public static readonly DISTINCT_COUNT = 199;
    public static readonly DISTINCT_COUNT_APPROX = 200;
    public static readonly ESTDC = 201;
    public static readonly ESTDC_ERROR = 202;
    public static readonly MAX = 203;
    public static readonly MEAN = 204;
    public static readonly MEDIAN = 205;
    public static readonly MIN = 206;
    public static readonly MODE = 207;
    public static readonly RANGE = 208;
    public static readonly STDEV = 209;
    public static readonly STDEVP = 210;
    public static readonly SUM = 211;
    public static readonly SUMSQ = 212;
    public static readonly VAR_SAMP = 213;
    public static readonly VAR_POP = 214;
    public static readonly STDDEV_SAMP = 215;
    public static readonly STDDEV_POP = 216;
    public static readonly PERC = 217;
    public static readonly PERCENTILE = 218;
    public static readonly PERCENTILE_APPROX = 219;
    public static readonly EARLIEST = 220;
    public static readonly LATEST = 221;
    public static readonly TAKE = 222;
    public static readonly LIST = 223;
    public static readonly VALUES = 224;
    public static readonly PER_DAY = 225;
    public static readonly PER_HOUR = 226;
    public static readonly PER_MINUTE = 227;
    public static readonly PER_SECOND = 228;
    public static readonly RATE = 229;
    public static readonly SPARKLINE = 230;
    public static readonly C = 231;
    public static readonly DC = 232;
    public static readonly ROW_NUMBER = 233;
    public static readonly RANK = 234;
    public static readonly DENSE_RANK = 235;
    public static readonly PERCENT_RANK = 236;
    public static readonly CUME_DIST = 237;
    public static readonly FIRST = 238;
    public static readonly LAST = 239;
    public static readonly NTH = 240;
    public static readonly NTILE = 241;
    public static readonly PLUS_FUCTION = 242;
    public static readonly MINUS_FUCTION = 243;
    public static readonly STAR_FUNCTION = 244;
    public static readonly DIVIDE_FUNCTION = 245;
    public static readonly ABS = 246;
    public static readonly CBRT = 247;
    public static readonly CEIL = 248;
    public static readonly CEILING = 249;
    public static readonly CONV = 250;
    public static readonly CRC32 = 251;
    public static readonly E = 252;
    public static readonly EXP = 253;
    public static readonly EXPM1 = 254;
    public static readonly FLOOR = 255;
    public static readonly LN = 256;
    public static readonly LOG = 257;
    public static readonly LOG_WITH_BASE = 258;
    public static readonly MOD = 259;
    public static readonly MODULUS = 260;
    public static readonly PI = 261;
    public static readonly POSITION = 262;
    public static readonly POW = 263;
    public static readonly POWER = 264;
    public static readonly RAND = 265;
    public static readonly ROUND = 266;
    public static readonly SIGN = 267;
    public static readonly SQRT = 268;
    public static readonly TRUNCATE = 269;
    public static readonly RINT = 270;
    public static readonly SIGNUM = 271;
    public static readonly ACOS = 272;
    public static readonly ASIN = 273;
    public static readonly ATAN = 274;
    public static readonly ATAN2 = 275;
    public static readonly COS = 276;
    public static readonly COSH = 277;
    public static readonly COT = 278;
    public static readonly DEGREES = 279;
    public static readonly RADIANS = 280;
    public static readonly SIN = 281;
    public static readonly SINH = 282;
    public static readonly TAN = 283;
    public static readonly MD5 = 284;
    public static readonly SHA1 = 285;
    public static readonly SHA2 = 286;
    public static readonly ADDDATE = 287;
    public static readonly ADDTIME = 288;
    public static readonly CURDATE = 289;
    public static readonly CURRENT_DATE = 290;
    public static readonly CURRENT_TIME = 291;
    public static readonly CURRENT_TIMESTAMP = 292;
    public static readonly CURTIME = 293;
    public static readonly DATE = 294;
    public static readonly DATEDIFF = 295;
    public static readonly DATE_ADD = 296;
    public static readonly DATE_FORMAT = 297;
    public static readonly DATE_SUB = 298;
    public static readonly DAYNAME = 299;
    public static readonly DAYOFMONTH = 300;
    public static readonly DAYOFWEEK = 301;
    public static readonly DAYOFYEAR = 302;
    public static readonly DAY_OF_MONTH = 303;
    public static readonly DAY_OF_WEEK = 304;
    public static readonly EXTRACT = 305;
    public static readonly FROM_DAYS = 306;
    public static readonly FROM_UNIXTIME = 307;
    public static readonly GET_FORMAT = 308;
    public static readonly LAST_DAY = 309;
    public static readonly LOCALTIME = 310;
    public static readonly LOCALTIMESTAMP = 311;
    public static readonly MAKEDATE = 312;
    public static readonly MAKETIME = 313;
    public static readonly MONTHNAME = 314;
    public static readonly NOW = 315;
    public static readonly PERIOD_ADD = 316;
    public static readonly PERIOD_DIFF = 317;
    public static readonly SEC_TO_TIME = 318;
    public static readonly STR_TO_DATE = 319;
    public static readonly SUBDATE = 320;
    public static readonly SUBTIME = 321;
    public static readonly SYSDATE = 322;
    public static readonly TIME = 323;
    public static readonly TIMEDIFF = 324;
    public static readonly TIMESTAMP = 325;
    public static readonly TIMESTAMPADD = 326;
    public static readonly TIMESTAMPDIFF = 327;
    public static readonly TIME_FORMAT = 328;
    public static readonly TIME_TO_SEC = 329;
    public static readonly TO_DAYS = 330;
    public static readonly TO_SECONDS = 331;
    public static readonly UNIX_TIMESTAMP = 332;
    public static readonly UTC_DATE = 333;
    public static readonly UTC_TIME = 334;
    public static readonly UTC_TIMESTAMP = 335;
    public static readonly WEEKDAY = 336;
    public static readonly YEARWEEK = 337;
    public static readonly STRFTIME = 338;
    public static readonly SUBSTR = 339;
    public static readonly SUBSTRING = 340;
    public static readonly LTRIM = 341;
    public static readonly RTRIM = 342;
    public static readonly TRIM = 343;
    public static readonly TO = 344;
    public static readonly LOWER = 345;
    public static readonly UPPER = 346;
    public static readonly CONCAT = 347;
    public static readonly CONCAT_WS = 348;
    public static readonly LENGTH = 349;
    public static readonly STRCMP = 350;
    public static readonly RIGHT = 351;
    public static readonly LEFT = 352;
    public static readonly ASCII = 353;
    public static readonly LOCATE = 354;
    public static readonly REPLACE = 355;
    public static readonly REVERSE = 356;
    public static readonly CAST = 357;
    public static readonly LIKE = 358;
    public static readonly ISNULL = 359;
    public static readonly ISNOTNULL = 360;
    public static readonly CIDRMATCH = 361;
    public static readonly BETWEEN = 362;
    public static readonly ISPRESENT = 363;
    public static readonly ISEMPTY = 364;
    public static readonly ISBLANK = 365;
    public static readonly ARRAY = 366;
    public static readonly ARRAY_LENGTH = 367;
    public static readonly MVJOIN = 368;
    public static readonly FORALL = 369;
    public static readonly FILTER = 370;
    public static readonly TRANSFORM = 371;
    public static readonly REDUCE = 372;
    public static readonly JSON_VALID = 373;
    public static readonly JSON = 374;
    public static readonly JSON_OBJECT = 375;
    public static readonly JSON_ARRAY = 376;
    public static readonly JSON_ARRAY_LENGTH = 377;
    public static readonly JSON_EXTRACT = 378;
    public static readonly JSON_KEYS = 379;
    public static readonly JSON_SET = 380;
    public static readonly JSON_DELETE = 381;
    public static readonly JSON_APPEND = 382;
    public static readonly JSON_EXTEND = 383;
    public static readonly IFNULL = 384;
    public static readonly NULLIF = 385;
    public static readonly IF = 386;
    public static readonly TYPEOF = 387;
    public static readonly COALESCE = 388;
    public static readonly MATCH = 389;
    public static readonly MATCH_PHRASE = 390;
    public static readonly MATCH_PHRASE_PREFIX = 391;
    public static readonly MATCH_BOOL_PREFIX = 392;
    public static readonly SIMPLE_QUERY_STRING = 393;
    public static readonly MULTI_MATCH = 394;
    public static readonly QUERY_STRING = 395;
    public static readonly ALLOW_LEADING_WILDCARD = 396;
    public static readonly ANALYZE_WILDCARD = 397;
    public static readonly ANALYZER = 398;
    public static readonly AUTO_GENERATE_SYNONYMS_PHRASE_QUERY = 399;
    public static readonly BOOST = 400;
    public static readonly CUTOFF_FREQUENCY = 401;
    public static readonly DEFAULT_FIELD = 402;
    public static readonly DEFAULT_OPERATOR = 403;
    public static readonly ENABLE_POSITION_INCREMENTS = 404;
    public static readonly ESCAPE = 405;
    public static readonly FLAGS = 406;
    public static readonly FUZZY_MAX_EXPANSIONS = 407;
    public static readonly FUZZY_PREFIX_LENGTH = 408;
    public static readonly FUZZY_TRANSPOSITIONS = 409;
    public static readonly FUZZY_REWRITE = 410;
    public static readonly FUZZINESS = 411;
    public static readonly LENIENT = 412;
    public static readonly LOW_FREQ_OPERATOR = 413;
    public static readonly MAX_DETERMINIZED_STATES = 414;
    public static readonly MAX_EXPANSIONS = 415;
    public static readonly MINIMUM_SHOULD_MATCH = 416;
    public static readonly OPERATOR = 417;
    public static readonly PHRASE_SLOP = 418;
    public static readonly PREFIX_LENGTH = 419;
    public static readonly QUOTE_ANALYZER = 420;
    public static readonly QUOTE_FIELD_SUFFIX = 421;
    public static readonly REWRITE = 422;
    public static readonly SLOP = 423;
    public static readonly TIE_BREAKER = 424;
    public static readonly TYPE = 425;
    public static readonly ZERO_TERMS_QUERY = 426;
    public static readonly SPAN = 427;
    public static readonly BINS = 428;
    public static readonly MINSPAN = 429;
    public static readonly START = 430;
    public static readonly END = 431;
    public static readonly ALIGNTIME = 432;
    public static readonly MS = 433;
    public static readonly S = 434;
    public static readonly M = 435;
    public static readonly H = 436;
    public static readonly W = 437;
    public static readonly Q = 438;
    public static readonly Y = 439;
    public static readonly SEC = 440;
    public static readonly SECS = 441;
    public static readonly SECONDS = 442;
    public static readonly MINS = 443;
    public static readonly MINUTES = 444;
    public static readonly HR = 445;
    public static readonly HRS = 446;
    public static readonly HOURS = 447;
    public static readonly DAYS = 448;
    public static readonly MON = 449;
    public static readonly MONTHS = 450;
    public static readonly US = 451;
    public static readonly CS = 452;
    public static readonly DS = 453;
    public static readonly PERCENTILE_SHORTCUT = 454;
    public static readonly ID = 455;
    public static readonly CLUSTER = 456;
    public static readonly INTEGER_LITERAL = 457;
    public static readonly DECIMAL_LITERAL = 458;
    public static readonly FLOAT_LITERAL = 459;
    public static readonly DOUBLE_LITERAL = 460;
    public static readonly ID_DATE_SUFFIX = 461;
    public static readonly DQUOTA_STRING = 462;
    public static readonly SQUOTA_STRING = 463;
    public static readonly BQUOTA_STRING = 464;
    public static readonly LINE_COMMENT = 465;
    public static readonly BLOCK_COMMENT = 466;
    public static readonly ERROR_RECOGNITION = 467;
    public static readonly RULE_root = 0;
    public static readonly RULE_pplStatement = 1;
    public static readonly RULE_queryStatement = 2;
    public static readonly RULE_explainStatement = 3;
    public static readonly RULE_explainMode = 4;
    public static readonly RULE_subSearch = 5;
    public static readonly RULE_pplCommands = 6;
    public static readonly RULE_commands = 7;
    public static readonly RULE_commandName = 8;
    public static readonly RULE_searchCommand = 9;
    public static readonly RULE_searchExpression = 10;
    public static readonly RULE_searchTerm = 11;
    public static readonly RULE_searchLiteral = 12;
    public static readonly RULE_searchFieldComparison = 13;
    public static readonly RULE_searchFieldInList = 14;
    public static readonly RULE_searchLiteralList = 15;
    public static readonly RULE_searchComparisonOperator = 16;
    public static readonly RULE_describeCommand = 17;
    public static readonly RULE_showDataSourcesCommand = 18;
    public static readonly RULE_whereCommand = 19;
    public static readonly RULE_fieldsCommand = 20;
    public static readonly RULE_tableCommand = 21;
    public static readonly RULE_fieldsCommandBody = 22;
    public static readonly RULE_wcFieldList = 23;
    public static readonly RULE_renameCommand = 24;
    public static readonly RULE_statsCommand = 25;
    public static readonly RULE_statsArgs = 26;
    public static readonly RULE_partitionsArg = 27;
    public static readonly RULE_allnumArg = 28;
    public static readonly RULE_delimArg = 29;
    public static readonly RULE_bucketNullableArg = 30;
    public static readonly RULE_dedupSplitArg = 31;
    public static readonly RULE_eventstatsCommand = 32;
    public static readonly RULE_dedupCommand = 33;
    public static readonly RULE_sortCommand = 34;
    public static readonly RULE_reverseCommand = 35;
    public static readonly RULE_timechartCommand = 36;
    public static readonly RULE_timechartParameter = 37;
    public static readonly RULE_timechartArg = 38;
    public static readonly RULE_spanLiteral = 39;
    public static readonly RULE_evalCommand = 40;
    public static readonly RULE_headCommand = 41;
    public static readonly RULE_binCommand = 42;
    public static readonly RULE_binOption = 43;
    public static readonly RULE_aligntimeValue = 44;
    public static readonly RULE_spanValue = 45;
    public static readonly RULE_logSpanValue = 46;
    public static readonly RULE_topCommand = 47;
    public static readonly RULE_rareCommand = 48;
    public static readonly RULE_grokCommand = 49;
    public static readonly RULE_parseCommand = 50;
    public static readonly RULE_spathCommand = 51;
    public static readonly RULE_spathParameter = 52;
    public static readonly RULE_indexablePath = 53;
    public static readonly RULE_pathElement = 54;
    public static readonly RULE_pathArrayAccess = 55;
    public static readonly RULE_regexCommand = 56;
    public static readonly RULE_regexExpr = 57;
    public static readonly RULE_rexCommand = 58;
    public static readonly RULE_rexExpr = 59;
    public static readonly RULE_rexOption = 60;
    public static readonly RULE_patternsMethod = 61;
    public static readonly RULE_patternsCommand = 62;
    public static readonly RULE_patternsParameter = 63;
    public static readonly RULE_patternMethod = 64;
    public static readonly RULE_patternMode = 65;
    public static readonly RULE_lookupCommand = 66;
    public static readonly RULE_lookupMappingList = 67;
    public static readonly RULE_outputCandidateList = 68;
    public static readonly RULE_lookupPair = 69;
    public static readonly RULE_fillnullCommand = 70;
    public static readonly RULE_fillNullWith = 71;
    public static readonly RULE_fillNullUsing = 72;
    public static readonly RULE_replacementPair = 73;
    public static readonly RULE_trendlineCommand = 74;
    public static readonly RULE_trendlineClause = 75;
    public static readonly RULE_trendlineType = 76;
    public static readonly RULE_expandCommand = 77;
    public static readonly RULE_flattenCommand = 78;
    public static readonly RULE_appendcolCommand = 79;
    public static readonly RULE_appendCommand = 80;
    public static readonly RULE_kmeansCommand = 81;
    public static readonly RULE_kmeansParameter = 82;
    public static readonly RULE_adCommand = 83;
    public static readonly RULE_adParameter = 84;
    public static readonly RULE_mlCommand = 85;
    public static readonly RULE_mlArg = 86;
    public static readonly RULE_fromClause = 87;
    public static readonly RULE_tableOrSubqueryClause = 88;
    public static readonly RULE_tableSourceClause = 89;
    public static readonly RULE_dynamicSourceClause = 90;
    public static readonly RULE_sourceReferences = 91;
    public static readonly RULE_sourceReference = 92;
    public static readonly RULE_sourceFilterArgs = 93;
    public static readonly RULE_sourceFilterArg = 94;
    public static readonly RULE_joinCommand = 95;
    public static readonly RULE_sqlLikeJoinType = 96;
    public static readonly RULE_joinType = 97;
    public static readonly RULE_sideAlias = 98;
    public static readonly RULE_joinCriteria = 99;
    public static readonly RULE_joinHintList = 100;
    public static readonly RULE_hintPair = 101;
    public static readonly RULE_joinOption = 102;
    public static readonly RULE_renameClasue = 103;
    public static readonly RULE_byClause = 104;
    public static readonly RULE_statsByClause = 105;
    public static readonly RULE_bySpanClause = 106;
    public static readonly RULE_spanClause = 107;
    public static readonly RULE_sortbyClause = 108;
    public static readonly RULE_evalClause = 109;
    public static readonly RULE_eventstatsAggTerm = 110;
    public static readonly RULE_windowFunction = 111;
    public static readonly RULE_windowFunctionName = 112;
    public static readonly RULE_scalarWindowFunctionName = 113;
    public static readonly RULE_statsAggTerm = 114;
    public static readonly RULE_statsFunction = 115;
    public static readonly RULE_statsFunctionName = 116;
    public static readonly RULE_takeAggFunction = 117;
    public static readonly RULE_percentileApproxFunction = 118;
    public static readonly RULE_numericLiteral = 119;
    public static readonly RULE_logicalExpression = 120;
    public static readonly RULE_expression = 121;
    public static readonly RULE_valueExpression = 122;
    public static readonly RULE_evalExpression = 123;
    public static readonly RULE_functionCall = 124;
    public static readonly RULE_positionFunctionCall = 125;
    public static readonly RULE_caseFunctionCall = 126;
    public static readonly RULE_relevanceExpression = 127;
    public static readonly RULE_singleFieldRelevanceFunction = 128;
    public static readonly RULE_multiFieldRelevanceFunction = 129;
    public static readonly RULE_tableSource = 130;
    public static readonly RULE_tableFunction = 131;
    public static readonly RULE_fieldList = 132;
    public static readonly RULE_sortField = 133;
    public static readonly RULE_sortFieldExpression = 134;
    public static readonly RULE_fieldExpression = 135;
    public static readonly RULE_wcFieldExpression = 136;
    public static readonly RULE_selectFieldExpression = 137;
    public static readonly RULE_renameFieldExpression = 138;
    public static readonly RULE_evalFunctionCall = 139;
    public static readonly RULE_dataTypeFunctionCall = 140;
    public static readonly RULE_convertedDataType = 141;
    public static readonly RULE_evalFunctionName = 142;
    public static readonly RULE_functionArgs = 143;
    public static readonly RULE_namedFunctionArgs = 144;
    public static readonly RULE_functionArg = 145;
    public static readonly RULE_namedFunctionArg = 146;
    public static readonly RULE_functionArgExpression = 147;
    public static readonly RULE_lambda = 148;
    public static readonly RULE_relevanceArg = 149;
    public static readonly RULE_relevanceArgName = 150;
    public static readonly RULE_relevanceFieldAndWeight = 151;
    public static readonly RULE_relevanceFieldWeight = 152;
    public static readonly RULE_relevanceField = 153;
    public static readonly RULE_relevanceQuery = 154;
    public static readonly RULE_relevanceArgValue = 155;
    public static readonly RULE_mathematicalFunctionName = 156;
    public static readonly RULE_geoipFunctionName = 157;
    public static readonly RULE_collectionFunctionName = 158;
    public static readonly RULE_trigonometricFunctionName = 159;
    public static readonly RULE_jsonFunctionName = 160;
    public static readonly RULE_cryptographicFunctionName = 161;
    public static readonly RULE_dateTimeFunctionName = 162;
    public static readonly RULE_getFormatFunctionCall = 163;
    public static readonly RULE_getFormatType = 164;
    public static readonly RULE_extractFunctionCall = 165;
    public static readonly RULE_simpleDateTimePart = 166;
    public static readonly RULE_complexDateTimePart = 167;
    public static readonly RULE_datetimePart = 168;
    public static readonly RULE_timestampFunctionCall = 169;
    public static readonly RULE_timestampFunctionName = 170;
    public static readonly RULE_conditionFunctionName = 171;
    public static readonly RULE_flowControlFunctionName = 172;
    public static readonly RULE_systemFunctionName = 173;
    public static readonly RULE_textFunctionName = 174;
    public static readonly RULE_positionFunctionName = 175;
    public static readonly RULE_comparisonOperator = 176;
    public static readonly RULE_singleFieldRelevanceFunctionName = 177;
    public static readonly RULE_multiFieldRelevanceFunctionName = 178;
    public static readonly RULE_literalValue = 179;
    public static readonly RULE_intervalLiteral = 180;
    public static readonly RULE_stringLiteral = 181;
    public static readonly RULE_integerLiteral = 182;
    public static readonly RULE_decimalLiteral = 183;
    public static readonly RULE_doubleLiteral = 184;
    public static readonly RULE_floatLiteral = 185;
    public static readonly RULE_booleanLiteral = 186;
    public static readonly RULE_datetimeLiteral = 187;
    public static readonly RULE_dateLiteral = 188;
    public static readonly RULE_timeLiteral = 189;
    public static readonly RULE_timestampLiteral = 190;
    public static readonly RULE_intervalUnit = 191;
    public static readonly RULE_timespanUnit = 192;
    public static readonly RULE_valueList = 193;
    public static readonly RULE_qualifiedName = 194;
    public static readonly RULE_tableQualifiedName = 195;
    public static readonly RULE_wcQualifiedName = 196;
    public static readonly RULE_identifierSeq = 197;
    public static readonly RULE_ident = 198;
    public static readonly RULE_tableIdent = 199;
    public static readonly RULE_wildcard = 200;
    public static readonly RULE_keywordsCanBeId = 201;
    public static readonly RULE_searchableKeyWord = 202;

    public static readonly literalNames = [
        null, null, "'SEARCH'", "'DESCRIBE'", "'SHOW'", "'EXPLAIN'", "'FROM'", 
        "'WHERE'", "'FIELDS'", "'FIELD'", "'TABLE'", "'RENAME'", "'STATS'", 
        "'EVENTSTATS'", "'DEDUP'", "'SORT'", "'EVAL'", "'HEAD'", "'BIN'", 
        "'TOP'", "'RARE'", "'PARSE'", "'SPATH'", "'REGEX'", "'REX'", "'SED'", 
        "'PUNCT'", "'GROK'", "'PATTERN'", "'PATTERNS'", "'NEW_FIELD'", "'KMEANS'", 
        "'AD'", "'ML'", "'FILLNULL'", "'FLATTEN'", "'TRENDLINE'", "'TIMECHART'", 
        "'APPENDCOL'", "'EXPAND'", "'SIMPLE_PATTERN'", "'BRAIN'", "'VARIABLE_COUNT_THRESHOLD'", 
        "'FREQUENCY_THRESHOLD_PERCENTAGE'", "'METHOD'", "'MAX_SAMPLE_COUNT'", 
        "'MAX_MATCH'", "'OFFSET_FIELD'", "'BUFFER_LIMIT'", "'LABEL'", "'AGGREGATION'", 
        "'JOIN'", "'ON'", "'INNER'", "'OUTER'", "'FULL'", "'SEMI'", "'ANTI'", 
        "'CROSS'", "'HINT.LEFT'", "'HINT.RIGHT'", "'AS'", "'BY'", "'SOURCE'", 
        "'INDEX'", "'A'", "'ASC'", "'D'", "'DESC'", "'DATASOURCES'", "'USING'", 
        "'WITH'", "'SIMPLE'", "'STANDARD'", "'COST'", "'EXTENDED'", "'OVERRIDE'", 
        "'OVERWRITE'", "'AUTO'", "'STR'", "'NUM'", "'SMA'", "'WMA'", "'KEEPEMPTY'", 
        "'CONSECUTIVE'", "'DEDUP_SPLITVALUES'", "'PARTITIONS'", "'ALLNUM'", 
        "'DELIM'", "'BUCKET_NULLABLE'", "'CENTROIDS'", "'ITERATIONS'", "'DISTANCE_TYPE'", 
        "'NUMBER_OF_TREES'", "'SHINGLE_SIZE'", "'SAMPLE_SIZE'", "'OUTPUT_AFTER'", 
        "'TIME_DECAY'", "'ANOMALY_RATE'", "'CATEGORY_FIELD'", "'TIME_FIELD'", 
        "'TIME_ZONE'", "'TRAINING_DATA_SIZE'", "'ANOMALY_SCORE_THRESHOLD'", 
        "'APPEND'", "'COUNTFIELD'", "'SHOWCOUNT'", "'LIMIT'", "'USEOTHER'", 
        "'INPUT'", "'OUTPUT'", "'PATH'", "'CASE'", "'ELSE'", "'IN'", "'EXISTS'", 
        "'GEOIP'", "'NOT'", "'OR'", "'AND'", "'XOR'", "'TRUE'", "'FALSE'", 
        "'REGEXP'", "'REGEX_MATCH'", "'CONVERT_TZ'", "'DATETIME'", "'DAY'", 
        "'DAY_HOUR'", "'DAY_MICROSECOND'", "'DAY_MINUTE'", "'DAY_OF_YEAR'", 
        "'DAY_SECOND'", "'HOUR'", "'HOUR_MICROSECOND'", "'HOUR_MINUTE'", 
        "'HOUR_OF_DAY'", "'HOUR_SECOND'", "'INTERVAL'", "'MICROSECOND'", 
        "'MILLISECOND'", "'MINUTE'", "'MINUTE_MICROSECOND'", "'MINUTE_OF_DAY'", 
        "'MINUTE_OF_HOUR'", "'MINUTE_SECOND'", "'MONTH'", "'MONTH_OF_YEAR'", 
        "'QUARTER'", "'SECOND'", "'SECOND_MICROSECOND'", "'SECOND_OF_MINUTE'", 
        "'WEEK'", "'WEEK_OF_YEAR'", "'YEAR'", "'YEAR_MONTH'", "'DATAMODEL'", 
        "'LOOKUP'", "'SAVEDSEARCH'", "'INT'", "'INTEGER'", "'DOUBLE'", "'LONG'", 
        "'FLOAT'", "'STRING'", "'BOOLEAN'", "'IP'", "'|'", "','", "'.'", 
        "'='", "'=='", "'>'", "'<'", null, null, null, "'+'", "'-'", "'*'", 
        "'/'", "'%'", "'!'", "':'", "'('", "')'", "'['", "']'", "'{'", "'}'", 
        "'''", "'\"'", "'`'", "'->'", "'~'", "'&'", "'^'", "'AVG'", "'COUNT'", 
        "'DISTINCT_COUNT'", "'DISTINCT_COUNT_APPROX'", "'ESTDC'", "'ESTDC_ERROR'", 
        "'MAX'", "'MEAN'", "'MEDIAN'", "'MIN'", "'MODE'", "'RANGE'", "'STDEV'", 
        "'STDEVP'", "'SUM'", "'SUMSQ'", "'VAR_SAMP'", "'VAR_POP'", "'STDDEV_SAMP'", 
        "'STDDEV_POP'", "'PERC'", "'PERCENTILE'", "'PERCENTILE_APPROX'", 
        "'EARLIEST'", "'LATEST'", "'TAKE'", "'LIST'", "'VALUES'", "'PER_DAY'", 
        "'PER_HOUR'", "'PER_MINUTE'", "'PER_SECOND'", "'RATE'", "'SPARKLINE'", 
        "'C'", "'DC'", "'ROW_NUMBER'", "'RANK'", "'DENSE_RANK'", "'PERCENT_RANK'", 
        "'CUME_DIST'", "'FIRST'", "'LAST'", "'NTH'", "'NTILE'", "'ADD'", 
        "'SUBTRACT'", "'MULTIPLY'", "'DIVIDE'", "'ABS'", "'CBRT'", "'CEIL'", 
        "'CEILING'", "'CONV'", "'CRC32'", "'E'", "'EXP'", "'EXPM1'", "'FLOOR'", 
        "'LN'", "'LOG'", null, "'MOD'", "'MODULUS'", "'PI'", "'POSITION'", 
        "'POW'", "'POWER'", "'RAND'", "'ROUND'", "'SIGN'", "'SQRT'", "'TRUNCATE'", 
        "'RINT'", "'SIGNUM'", "'ACOS'", "'ASIN'", "'ATAN'", "'ATAN2'", "'COS'", 
        "'COSH'", "'COT'", "'DEGREES'", "'RADIANS'", "'SIN'", "'SINH'", 
        "'TAN'", "'MD5'", "'SHA1'", "'SHA2'", "'ADDDATE'", "'ADDTIME'", 
        "'CURDATE'", "'CURRENT_DATE'", "'CURRENT_TIME'", "'CURRENT_TIMESTAMP'", 
        "'CURTIME'", "'DATE'", "'DATEDIFF'", "'DATE_ADD'", "'DATE_FORMAT'", 
        "'DATE_SUB'", "'DAYNAME'", "'DAYOFMONTH'", "'DAYOFWEEK'", "'DAYOFYEAR'", 
        "'DAY_OF_MONTH'", "'DAY_OF_WEEK'", "'EXTRACT'", "'FROM_DAYS'", "'FROM_UNIXTIME'", 
        "'GET_FORMAT'", "'LAST_DAY'", "'LOCALTIME'", "'LOCALTIMESTAMP'", 
        "'MAKEDATE'", "'MAKETIME'", "'MONTHNAME'", "'NOW'", "'PERIOD_ADD'", 
        "'PERIOD_DIFF'", "'SEC_TO_TIME'", "'STR_TO_DATE'", "'SUBDATE'", 
        "'SUBTIME'", "'SYSDATE'", "'TIME'", "'TIMEDIFF'", "'TIMESTAMP'", 
        "'TIMESTAMPADD'", "'TIMESTAMPDIFF'", "'TIME_FORMAT'", "'TIME_TO_SEC'", 
        "'TO_DAYS'", "'TO_SECONDS'", "'UNIX_TIMESTAMP'", "'UTC_DATE'", "'UTC_TIME'", 
        "'UTC_TIMESTAMP'", "'WEEKDAY'", "'YEARWEEK'", "'STRFTIME'", "'SUBSTR'", 
        "'SUBSTRING'", "'LTRIM'", "'RTRIM'", "'TRIM'", "'TO'", "'LOWER'", 
        "'UPPER'", "'CONCAT'", "'CONCAT_WS'", "'LENGTH'", "'STRCMP'", "'RIGHT'", 
        "'LEFT'", "'ASCII'", "'LOCATE'", "'REPLACE'", "'REVERSE'", "'CAST'", 
        "'LIKE'", "'ISNULL'", "'ISNOTNULL'", "'CIDRMATCH'", "'BETWEEN'", 
        "'ISPRESENT'", "'ISEMPTY'", "'ISBLANK'", "'ARRAY'", "'ARRAY_LENGTH'", 
        "'MVJOIN'", "'FORALL'", "'FILTER'", "'TRANSFORM'", "'REDUCE'", "'JSON_VALID'", 
        "'JSON'", "'JSON_OBJECT'", "'JSON_ARRAY'", "'JSON_ARRAY_LENGTH'", 
        "'JSON_EXTRACT'", "'JSON_KEYS'", "'JSON_SET'", "'JSON_DELETE'", 
        "'JSON_APPEND'", "'JSON_EXTEND'", "'IFNULL'", "'NULLIF'", "'IF'", 
        "'TYPEOF'", "'COALESCE'", "'MATCH'", "'MATCH_PHRASE'", "'MATCH_PHRASE_PREFIX'", 
        "'MATCH_BOOL_PREFIX'", "'SIMPLE_QUERY_STRING'", "'MULTI_MATCH'", 
        "'QUERY_STRING'", "'ALLOW_LEADING_WILDCARD'", "'ANALYZE_WILDCARD'", 
        "'ANALYZER'", "'AUTO_GENERATE_SYNONYMS_PHRASE_QUERY'", "'BOOST'", 
        "'CUTOFF_FREQUENCY'", "'DEFAULT_FIELD'", "'DEFAULT_OPERATOR'", "'ENABLE_POSITION_INCREMENTS'", 
        "'ESCAPE'", "'FLAGS'", "'FUZZY_MAX_EXPANSIONS'", "'FUZZY_PREFIX_LENGTH'", 
        "'FUZZY_TRANSPOSITIONS'", "'FUZZY_REWRITE'", "'FUZZINESS'", "'LENIENT'", 
        "'LOW_FREQ_OPERATOR'", "'MAX_DETERMINIZED_STATES'", "'MAX_EXPANSIONS'", 
        "'MINIMUM_SHOULD_MATCH'", "'OPERATOR'", "'PHRASE_SLOP'", "'PREFIX_LENGTH'", 
        "'QUOTE_ANALYZER'", "'QUOTE_FIELD_SUFFIX'", "'REWRITE'", "'SLOP'", 
        "'TIE_BREAKER'", "'TYPE'", "'ZERO_TERMS_QUERY'", "'SPAN'", "'BINS'", 
        "'MINSPAN'", "'START'", "'END'", "'ALIGNTIME'", "'MS'", "'S'", "'M'", 
        "'H'", "'W'", "'Q'", "'Y'", "'SEC'", "'SECS'", "'SECONDS'", "'MINS'", 
        "'MINUTES'", "'HR'", "'HRS'", "'HOURS'", "'DAYS'", "'MON'", "'MONTHS'", 
        "'US'", "'CS'", "'DS'"
    ];

    public static readonly symbolicNames = [
        null, "SPACE", "SEARCH", "DESCRIBE", "SHOW", "EXPLAIN", "FROM", 
        "WHERE", "FIELDS", "FIELD", "TABLE", "RENAME", "STATS", "EVENTSTATS", 
        "DEDUP", "SORT", "EVAL", "HEAD", "BIN", "TOP", "RARE", "PARSE", 
        "SPATH", "REGEX", "REX", "SED", "PUNCT", "GROK", "PATTERN", "PATTERNS", 
        "NEW_FIELD", "KMEANS", "AD", "ML", "FILLNULL", "FLATTEN", "TRENDLINE", 
        "TIMECHART", "APPENDCOL", "EXPAND", "SIMPLE_PATTERN", "BRAIN", "VARIABLE_COUNT_THRESHOLD", 
        "FREQUENCY_THRESHOLD_PERCENTAGE", "METHOD", "MAX_SAMPLE_COUNT", 
        "MAX_MATCH", "OFFSET_FIELD", "BUFFER_LIMIT", "LABEL", "AGGREGATION", 
        "JOIN", "ON", "INNER", "OUTER", "FULL", "SEMI", "ANTI", "CROSS", 
        "LEFT_HINT", "RIGHT_HINT", "AS", "BY", "SOURCE", "INDEX", "A", "ASC", 
        "D", "DESC", "DATASOURCES", "USING", "WITH", "SIMPLE", "STANDARD", 
        "COST", "EXTENDED", "OVERRIDE", "OVERWRITE", "AUTO", "STR", "NUM", 
        "SMA", "WMA", "KEEPEMPTY", "CONSECUTIVE", "DEDUP_SPLITVALUES", "PARTITIONS", 
        "ALLNUM", "DELIM", "BUCKET_NULLABLE", "CENTROIDS", "ITERATIONS", 
        "DISTANCE_TYPE", "NUMBER_OF_TREES", "SHINGLE_SIZE", "SAMPLE_SIZE", 
        "OUTPUT_AFTER", "TIME_DECAY", "ANOMALY_RATE", "CATEGORY_FIELD", 
        "TIME_FIELD", "TIME_ZONE", "TRAINING_DATA_SIZE", "ANOMALY_SCORE_THRESHOLD", 
        "APPEND", "COUNTFIELD", "SHOWCOUNT", "LIMIT", "USEOTHER", "INPUT", 
        "OUTPUT", "PATH", "CASE", "ELSE", "IN", "EXISTS", "GEOIP", "NOT", 
        "OR", "AND", "XOR", "TRUE", "FALSE", "REGEXP", "REGEX_MATCH", "CONVERT_TZ", 
        "DATETIME", "DAY", "DAY_HOUR", "DAY_MICROSECOND", "DAY_MINUTE", 
        "DAY_OF_YEAR", "DAY_SECOND", "HOUR", "HOUR_MICROSECOND", "HOUR_MINUTE", 
        "HOUR_OF_DAY", "HOUR_SECOND", "INTERVAL", "MICROSECOND", "MILLISECOND", 
        "MINUTE", "MINUTE_MICROSECOND", "MINUTE_OF_DAY", "MINUTE_OF_HOUR", 
        "MINUTE_SECOND", "MONTH", "MONTH_OF_YEAR", "QUARTER", "SECOND", 
        "SECOND_MICROSECOND", "SECOND_OF_MINUTE", "WEEK", "WEEK_OF_YEAR", 
        "YEAR", "YEAR_MONTH", "DATAMODEL", "LOOKUP", "SAVEDSEARCH", "INT", 
        "INTEGER", "DOUBLE", "LONG", "FLOAT", "STRING", "BOOLEAN", "IP", 
        "PIPE", "COMMA", "DOT", "EQUAL", "DOUBLE_EQUAL", "GREATER", "LESS", 
        "NOT_GREATER", "NOT_LESS", "NOT_EQUAL", "PLUS", "MINUS", "STAR", 
        "DIVIDE", "MODULE", "EXCLAMATION_SYMBOL", "COLON", "LT_PRTHS", "RT_PRTHS", 
        "LT_SQR_PRTHS", "RT_SQR_PRTHS", "LT_CURLY", "RT_CURLY", "SINGLE_QUOTE", 
        "DOUBLE_QUOTE", "BACKTICK", "ARROW", "BIT_NOT_OP", "BIT_AND_OP", 
        "BIT_XOR_OP", "AVG", "COUNT", "DISTINCT_COUNT", "DISTINCT_COUNT_APPROX", 
        "ESTDC", "ESTDC_ERROR", "MAX", "MEAN", "MEDIAN", "MIN", "MODE", 
        "RANGE", "STDEV", "STDEVP", "SUM", "SUMSQ", "VAR_SAMP", "VAR_POP", 
        "STDDEV_SAMP", "STDDEV_POP", "PERC", "PERCENTILE", "PERCENTILE_APPROX", 
        "EARLIEST", "LATEST", "TAKE", "LIST", "VALUES", "PER_DAY", "PER_HOUR", 
        "PER_MINUTE", "PER_SECOND", "RATE", "SPARKLINE", "C", "DC", "ROW_NUMBER", 
        "RANK", "DENSE_RANK", "PERCENT_RANK", "CUME_DIST", "FIRST", "LAST", 
        "NTH", "NTILE", "PLUS_FUCTION", "MINUS_FUCTION", "STAR_FUNCTION", 
        "DIVIDE_FUNCTION", "ABS", "CBRT", "CEIL", "CEILING", "CONV", "CRC32", 
        "E", "EXP", "EXPM1", "FLOOR", "LN", "LOG", "LOG_WITH_BASE", "MOD", 
        "MODULUS", "PI", "POSITION", "POW", "POWER", "RAND", "ROUND", "SIGN", 
        "SQRT", "TRUNCATE", "RINT", "SIGNUM", "ACOS", "ASIN", "ATAN", "ATAN2", 
        "COS", "COSH", "COT", "DEGREES", "RADIANS", "SIN", "SINH", "TAN", 
        "MD5", "SHA1", "SHA2", "ADDDATE", "ADDTIME", "CURDATE", "CURRENT_DATE", 
        "CURRENT_TIME", "CURRENT_TIMESTAMP", "CURTIME", "DATE", "DATEDIFF", 
        "DATE_ADD", "DATE_FORMAT", "DATE_SUB", "DAYNAME", "DAYOFMONTH", 
        "DAYOFWEEK", "DAYOFYEAR", "DAY_OF_MONTH", "DAY_OF_WEEK", "EXTRACT", 
        "FROM_DAYS", "FROM_UNIXTIME", "GET_FORMAT", "LAST_DAY", "LOCALTIME", 
        "LOCALTIMESTAMP", "MAKEDATE", "MAKETIME", "MONTHNAME", "NOW", "PERIOD_ADD", 
        "PERIOD_DIFF", "SEC_TO_TIME", "STR_TO_DATE", "SUBDATE", "SUBTIME", 
        "SYSDATE", "TIME", "TIMEDIFF", "TIMESTAMP", "TIMESTAMPADD", "TIMESTAMPDIFF", 
        "TIME_FORMAT", "TIME_TO_SEC", "TO_DAYS", "TO_SECONDS", "UNIX_TIMESTAMP", 
        "UTC_DATE", "UTC_TIME", "UTC_TIMESTAMP", "WEEKDAY", "YEARWEEK", 
        "STRFTIME", "SUBSTR", "SUBSTRING", "LTRIM", "RTRIM", "TRIM", "TO", 
        "LOWER", "UPPER", "CONCAT", "CONCAT_WS", "LENGTH", "STRCMP", "RIGHT", 
        "LEFT", "ASCII", "LOCATE", "REPLACE", "REVERSE", "CAST", "LIKE", 
        "ISNULL", "ISNOTNULL", "CIDRMATCH", "BETWEEN", "ISPRESENT", "ISEMPTY", 
        "ISBLANK", "ARRAY", "ARRAY_LENGTH", "MVJOIN", "FORALL", "FILTER", 
        "TRANSFORM", "REDUCE", "JSON_VALID", "JSON", "JSON_OBJECT", "JSON_ARRAY", 
        "JSON_ARRAY_LENGTH", "JSON_EXTRACT", "JSON_KEYS", "JSON_SET", "JSON_DELETE", 
        "JSON_APPEND", "JSON_EXTEND", "IFNULL", "NULLIF", "IF", "TYPEOF", 
        "COALESCE", "MATCH", "MATCH_PHRASE", "MATCH_PHRASE_PREFIX", "MATCH_BOOL_PREFIX", 
        "SIMPLE_QUERY_STRING", "MULTI_MATCH", "QUERY_STRING", "ALLOW_LEADING_WILDCARD", 
        "ANALYZE_WILDCARD", "ANALYZER", "AUTO_GENERATE_SYNONYMS_PHRASE_QUERY", 
        "BOOST", "CUTOFF_FREQUENCY", "DEFAULT_FIELD", "DEFAULT_OPERATOR", 
        "ENABLE_POSITION_INCREMENTS", "ESCAPE", "FLAGS", "FUZZY_MAX_EXPANSIONS", 
        "FUZZY_PREFIX_LENGTH", "FUZZY_TRANSPOSITIONS", "FUZZY_REWRITE", 
        "FUZZINESS", "LENIENT", "LOW_FREQ_OPERATOR", "MAX_DETERMINIZED_STATES", 
        "MAX_EXPANSIONS", "MINIMUM_SHOULD_MATCH", "OPERATOR", "PHRASE_SLOP", 
        "PREFIX_LENGTH", "QUOTE_ANALYZER", "QUOTE_FIELD_SUFFIX", "REWRITE", 
        "SLOP", "TIE_BREAKER", "TYPE", "ZERO_TERMS_QUERY", "SPAN", "BINS", 
        "MINSPAN", "START", "END", "ALIGNTIME", "MS", "S", "M", "H", "W", 
        "Q", "Y", "SEC", "SECS", "SECONDS", "MINS", "MINUTES", "HR", "HRS", 
        "HOURS", "DAYS", "MON", "MONTHS", "US", "CS", "DS", "PERCENTILE_SHORTCUT", 
        "ID", "CLUSTER", "INTEGER_LITERAL", "DECIMAL_LITERAL", "FLOAT_LITERAL", 
        "DOUBLE_LITERAL", "ID_DATE_SUFFIX", "DQUOTA_STRING", "SQUOTA_STRING", 
        "BQUOTA_STRING", "LINE_COMMENT", "BLOCK_COMMENT", "ERROR_RECOGNITION"
    ];
    public static readonly ruleNames = [
        "root", "pplStatement", "queryStatement", "explainStatement", "explainMode", 
        "subSearch", "pplCommands", "commands", "commandName", "searchCommand", 
        "searchExpression", "searchTerm", "searchLiteral", "searchFieldComparison", 
        "searchFieldInList", "searchLiteralList", "searchComparisonOperator", 
        "describeCommand", "showDataSourcesCommand", "whereCommand", "fieldsCommand", 
        "tableCommand", "fieldsCommandBody", "wcFieldList", "renameCommand", 
        "statsCommand", "statsArgs", "partitionsArg", "allnumArg", "delimArg", 
        "bucketNullableArg", "dedupSplitArg", "eventstatsCommand", "dedupCommand", 
        "sortCommand", "reverseCommand", "timechartCommand", "timechartParameter", 
        "timechartArg", "spanLiteral", "evalCommand", "headCommand", "binCommand", 
        "binOption", "aligntimeValue", "spanValue", "logSpanValue", "topCommand", 
        "rareCommand", "grokCommand", "parseCommand", "spathCommand", "spathParameter", 
        "indexablePath", "pathElement", "pathArrayAccess", "regexCommand", 
        "regexExpr", "rexCommand", "rexExpr", "rexOption", "patternsMethod", 
        "patternsCommand", "patternsParameter", "patternMethod", "patternMode", 
        "lookupCommand", "lookupMappingList", "outputCandidateList", "lookupPair", 
        "fillnullCommand", "fillNullWith", "fillNullUsing", "replacementPair", 
        "trendlineCommand", "trendlineClause", "trendlineType", "expandCommand", 
        "flattenCommand", "appendcolCommand", "appendCommand", "kmeansCommand", 
        "kmeansParameter", "adCommand", "adParameter", "mlCommand", "mlArg", 
        "fromClause", "tableOrSubqueryClause", "tableSourceClause", "dynamicSourceClause", 
        "sourceReferences", "sourceReference", "sourceFilterArgs", "sourceFilterArg", 
        "joinCommand", "sqlLikeJoinType", "joinType", "sideAlias", "joinCriteria", 
        "joinHintList", "hintPair", "joinOption", "renameClasue", "byClause", 
        "statsByClause", "bySpanClause", "spanClause", "sortbyClause", "evalClause", 
        "eventstatsAggTerm", "windowFunction", "windowFunctionName", "scalarWindowFunctionName", 
        "statsAggTerm", "statsFunction", "statsFunctionName", "takeAggFunction", 
        "percentileApproxFunction", "numericLiteral", "logicalExpression", 
        "expression", "valueExpression", "evalExpression", "functionCall", 
        "positionFunctionCall", "caseFunctionCall", "relevanceExpression", 
        "singleFieldRelevanceFunction", "multiFieldRelevanceFunction", "tableSource", 
        "tableFunction", "fieldList", "sortField", "sortFieldExpression", 
        "fieldExpression", "wcFieldExpression", "selectFieldExpression", 
        "renameFieldExpression", "evalFunctionCall", "dataTypeFunctionCall", 
        "convertedDataType", "evalFunctionName", "functionArgs", "namedFunctionArgs", 
        "functionArg", "namedFunctionArg", "functionArgExpression", "lambda", 
        "relevanceArg", "relevanceArgName", "relevanceFieldAndWeight", "relevanceFieldWeight", 
        "relevanceField", "relevanceQuery", "relevanceArgValue", "mathematicalFunctionName", 
        "geoipFunctionName", "collectionFunctionName", "trigonometricFunctionName", 
        "jsonFunctionName", "cryptographicFunctionName", "dateTimeFunctionName", 
        "getFormatFunctionCall", "getFormatType", "extractFunctionCall", 
        "simpleDateTimePart", "complexDateTimePart", "datetimePart", "timestampFunctionCall", 
        "timestampFunctionName", "conditionFunctionName", "flowControlFunctionName", 
        "systemFunctionName", "textFunctionName", "positionFunctionName", 
        "comparisonOperator", "singleFieldRelevanceFunctionName", "multiFieldRelevanceFunctionName", 
        "literalValue", "intervalLiteral", "stringLiteral", "integerLiteral", 
        "decimalLiteral", "doubleLiteral", "floatLiteral", "booleanLiteral", 
        "datetimeLiteral", "dateLiteral", "timeLiteral", "timestampLiteral", 
        "intervalUnit", "timespanUnit", "valueList", "qualifiedName", "tableQualifiedName", 
        "wcQualifiedName", "identifierSeq", "ident", "tableIdent", "wildcard", 
        "keywordsCanBeId", "searchableKeyWord",
    ];

    public get grammarFileName(): string { return "OpenSearchPPLParser.g4"; }
    public get literalNames(): (string | null)[] { return OpenSearchPPLParser.literalNames; }
    public get symbolicNames(): (string | null)[] { return OpenSearchPPLParser.symbolicNames; }
    public get ruleNames(): string[] { return OpenSearchPPLParser.ruleNames; }
    public get serializedATN(): number[] { return OpenSearchPPLParser._serializedATN; }

    protected createFailedPredicateException(predicate?: string, message?: string): antlr.FailedPredicateException {
        return new antlr.FailedPredicateException(this, predicate, message);
    }

    public constructor(input: antlr.TokenStream) {
        super(input);
        this.interpreter = new antlr.ParserATNSimulator(this, OpenSearchPPLParser._ATN, OpenSearchPPLParser.decisionsToDFA, new antlr.PredictionContextCache());
    }
    public root(): RootContext {
        let localContext = new RootContext(this.context, this.state);
        this.enterRule(localContext, 0, OpenSearchPPLParser.RULE_root);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 407;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 0, this.context) ) {
            case 1:
                {
                this.state = 406;
                this.pplStatement();
                }
                break;
            }
            this.state = 409;
            this.match(OpenSearchPPLParser.EOF);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public pplStatement(): PplStatementContext {
        let localContext = new PplStatementContext(this.context, this.state);
        this.enterRule(localContext, 2, OpenSearchPPLParser.RULE_pplStatement);
        try {
            this.state = 413;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 1, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 411;
                this.explainStatement();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 412;
                this.queryStatement();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public queryStatement(): QueryStatementContext {
        let localContext = new QueryStatementContext(this.context, this.state);
        this.enterRule(localContext, 4, OpenSearchPPLParser.RULE_queryStatement);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 415;
            this.pplCommands();
            this.state = 420;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 167) {
                {
                {
                this.state = 416;
                this.match(OpenSearchPPLParser.PIPE);
                this.state = 417;
                this.commands();
                }
                }
                this.state = 422;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public explainStatement(): ExplainStatementContext {
        let localContext = new ExplainStatementContext(this.context, this.state);
        this.enterRule(localContext, 6, OpenSearchPPLParser.RULE_explainStatement);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 423;
            this.match(OpenSearchPPLParser.EXPLAIN);
            this.state = 425;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 3, this.context) ) {
            case 1:
                {
                this.state = 424;
                this.explainMode();
                }
                break;
            }
            this.state = 427;
            this.queryStatement();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public explainMode(): ExplainModeContext {
        let localContext = new ExplainModeContext(this.context, this.state);
        this.enterRule(localContext, 8, OpenSearchPPLParser.RULE_explainMode);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 429;
            _la = this.tokenStream.LA(1);
            if(!(((((_la - 72)) & ~0x1F) === 0 && ((1 << (_la - 72)) & 15) !== 0))) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public subSearch(): SubSearchContext {
        let localContext = new SubSearchContext(this.context, this.state);
        this.enterRule(localContext, 10, OpenSearchPPLParser.RULE_subSearch);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 431;
            this.searchCommand();
            this.state = 436;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 167) {
                {
                {
                this.state = 432;
                this.match(OpenSearchPPLParser.PIPE);
                this.state = 433;
                this.commands();
                }
                }
                this.state = 438;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public pplCommands(): PplCommandsContext {
        let localContext = new PplCommandsContext(this.context, this.state);
        this.enterRule(localContext, 12, OpenSearchPPLParser.RULE_pplCommands);
        try {
            this.state = 442;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 5, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 439;
                this.describeCommand();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 440;
                this.showDataSourcesCommand();
                }
                break;
            case 3:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 441;
                this.searchCommand();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public commands(): CommandsContext {
        let localContext = new CommandsContext(this.context, this.state);
        this.enterRule(localContext, 14, OpenSearchPPLParser.RULE_commands);
        try {
            this.state = 476;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case OpenSearchPPLParser.WHERE:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 444;
                this.whereCommand();
                }
                break;
            case OpenSearchPPLParser.FIELDS:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 445;
                this.fieldsCommand();
                }
                break;
            case OpenSearchPPLParser.TABLE:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 446;
                this.tableCommand();
                }
                break;
            case OpenSearchPPLParser.JOIN:
            case OpenSearchPPLParser.INNER:
            case OpenSearchPPLParser.OUTER:
            case OpenSearchPPLParser.FULL:
            case OpenSearchPPLParser.SEMI:
            case OpenSearchPPLParser.ANTI:
            case OpenSearchPPLParser.CROSS:
            case OpenSearchPPLParser.RIGHT:
            case OpenSearchPPLParser.LEFT:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 447;
                this.joinCommand();
                }
                break;
            case OpenSearchPPLParser.RENAME:
                this.enterOuterAlt(localContext, 5);
                {
                this.state = 448;
                this.renameCommand();
                }
                break;
            case OpenSearchPPLParser.STATS:
                this.enterOuterAlt(localContext, 6);
                {
                this.state = 449;
                this.statsCommand();
                }
                break;
            case OpenSearchPPLParser.EVENTSTATS:
                this.enterOuterAlt(localContext, 7);
                {
                this.state = 450;
                this.eventstatsCommand();
                }
                break;
            case OpenSearchPPLParser.DEDUP:
                this.enterOuterAlt(localContext, 8);
                {
                this.state = 451;
                this.dedupCommand();
                }
                break;
            case OpenSearchPPLParser.SORT:
                this.enterOuterAlt(localContext, 9);
                {
                this.state = 452;
                this.sortCommand();
                }
                break;
            case OpenSearchPPLParser.EVAL:
                this.enterOuterAlt(localContext, 10);
                {
                this.state = 453;
                this.evalCommand();
                }
                break;
            case OpenSearchPPLParser.HEAD:
                this.enterOuterAlt(localContext, 11);
                {
                this.state = 454;
                this.headCommand();
                }
                break;
            case OpenSearchPPLParser.BIN:
                this.enterOuterAlt(localContext, 12);
                {
                this.state = 455;
                this.binCommand();
                }
                break;
            case OpenSearchPPLParser.TOP:
                this.enterOuterAlt(localContext, 13);
                {
                this.state = 456;
                this.topCommand();
                }
                break;
            case OpenSearchPPLParser.RARE:
                this.enterOuterAlt(localContext, 14);
                {
                this.state = 457;
                this.rareCommand();
                }
                break;
            case OpenSearchPPLParser.GROK:
                this.enterOuterAlt(localContext, 15);
                {
                this.state = 458;
                this.grokCommand();
                }
                break;
            case OpenSearchPPLParser.PARSE:
                this.enterOuterAlt(localContext, 16);
                {
                this.state = 459;
                this.parseCommand();
                }
                break;
            case OpenSearchPPLParser.SPATH:
                this.enterOuterAlt(localContext, 17);
                {
                this.state = 460;
                this.spathCommand();
                }
                break;
            case OpenSearchPPLParser.PATTERNS:
                this.enterOuterAlt(localContext, 18);
                {
                this.state = 461;
                this.patternsCommand();
                }
                break;
            case OpenSearchPPLParser.LOOKUP:
                this.enterOuterAlt(localContext, 19);
                {
                this.state = 462;
                this.lookupCommand();
                }
                break;
            case OpenSearchPPLParser.KMEANS:
                this.enterOuterAlt(localContext, 20);
                {
                this.state = 463;
                this.kmeansCommand();
                }
                break;
            case OpenSearchPPLParser.AD:
                this.enterOuterAlt(localContext, 21);
                {
                this.state = 464;
                this.adCommand();
                }
                break;
            case OpenSearchPPLParser.ML:
                this.enterOuterAlt(localContext, 22);
                {
                this.state = 465;
                this.mlCommand();
                }
                break;
            case OpenSearchPPLParser.FILLNULL:
                this.enterOuterAlt(localContext, 23);
                {
                this.state = 466;
                this.fillnullCommand();
                }
                break;
            case OpenSearchPPLParser.TRENDLINE:
                this.enterOuterAlt(localContext, 24);
                {
                this.state = 467;
                this.trendlineCommand();
                }
                break;
            case OpenSearchPPLParser.APPENDCOL:
                this.enterOuterAlt(localContext, 25);
                {
                this.state = 468;
                this.appendcolCommand();
                }
                break;
            case OpenSearchPPLParser.APPEND:
                this.enterOuterAlt(localContext, 26);
                {
                this.state = 469;
                this.appendCommand();
                }
                break;
            case OpenSearchPPLParser.EXPAND:
                this.enterOuterAlt(localContext, 27);
                {
                this.state = 470;
                this.expandCommand();
                }
                break;
            case OpenSearchPPLParser.FLATTEN:
                this.enterOuterAlt(localContext, 28);
                {
                this.state = 471;
                this.flattenCommand();
                }
                break;
            case OpenSearchPPLParser.REVERSE:
                this.enterOuterAlt(localContext, 29);
                {
                this.state = 472;
                this.reverseCommand();
                }
                break;
            case OpenSearchPPLParser.REGEX:
                this.enterOuterAlt(localContext, 30);
                {
                this.state = 473;
                this.regexCommand();
                }
                break;
            case OpenSearchPPLParser.TIMECHART:
                this.enterOuterAlt(localContext, 31);
                {
                this.state = 474;
                this.timechartCommand();
                }
                break;
            case OpenSearchPPLParser.REX:
                this.enterOuterAlt(localContext, 32);
                {
                this.state = 475;
                this.rexCommand();
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public commandName(): CommandNameContext {
        let localContext = new CommandNameContext(this.context, this.state);
        this.enterRule(localContext, 16, OpenSearchPPLParser.RULE_commandName);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 478;
            _la = this.tokenStream.LA(1);
            if(!((((_la) & ~0x1F) === 0 && ((1 << _la) & 2847931836) !== 0) || ((((_la - 32)) & ~0x1F) === 0 && ((1 << (_la - 32)) & 524479) !== 0) || _la === 104 || _la === 157 || _la === 356)) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public searchCommand(): SearchCommandContext {
        let localContext = new SearchCommandContext(this.context, this.state);
        this.enterRule(localContext, 18, OpenSearchPPLParser.RULE_searchCommand);
        let _la: number;
        try {
            let alternative: number;
            localContext = new SearchFromContext(localContext);
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 481;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 7, this.context) ) {
            case 1:
                {
                this.state = 480;
                this.match(OpenSearchPPLParser.SEARCH);
                }
                break;
            }
            this.state = 486;
            this.errorHandler.sync(this);
            alternative = this.interpreter.adaptivePredict(this.tokenStream, 8, this.context);
            while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER) {
                if (alternative === 1) {
                    {
                    {
                    this.state = 483;
                    this.searchExpression(0);
                    }
                    }
                }
                this.state = 488;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 8, this.context);
            }
            this.state = 490;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 9, this.context) ) {
            case 1:
                {
                this.state = 489;
                this.fromClause();
                }
                break;
            }
            this.state = 495;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while ((((_la) & ~0x1F) === 0 && ((1 << _la) & 4257218044) !== 0) || ((((_la - 32)) & ~0x1F) === 0 && ((1 << (_la - 32)) & 2682862783) !== 0) || ((((_la - 64)) & ~0x1F) === 0 && ((1 << (_la - 64)) & 4294959103) !== 0) || ((((_la - 96)) & ~0x1F) === 0 && ((1 << (_la - 96)) & 4265601023) !== 0) || ((((_la - 128)) & ~0x1F) === 0 && ((1 << (_la - 128)) & 805306367) !== 0) || ((((_la - 166)) & ~0x1F) === 0 && ((1 << (_la - 166)) & 2349078537) !== 0) || ((((_la - 198)) & ~0x1F) === 0 && ((1 << (_la - 198)) & 4294443007) !== 0) || ((((_la - 230)) & ~0x1F) === 0 && ((1 << (_la - 230)) & 4294967295) !== 0) || ((((_la - 262)) & ~0x1F) === 0 && ((1 << (_la - 262)) & 4294967295) !== 0) || ((((_la - 294)) & ~0x1F) === 0 && ((1 << (_la - 294)) & 4294967295) !== 0) || ((((_la - 328)) & ~0x1F) === 0 && ((1 << (_la - 328)) & 4294901759) !== 0) || ((((_la - 360)) & ~0x1F) === 0 && ((1 << (_la - 360)) & 4294967295) !== 0) || ((((_la - 392)) & ~0x1F) === 0 && ((1 << (_la - 392)) & 4294967295) !== 0) || ((((_la - 424)) & ~0x1F) === 0 && ((1 << (_la - 424)) & 4294966799) !== 0) || ((((_la - 457)) & ~0x1F) === 0 && ((1 << (_la - 457)) & 239) !== 0)) {
                {
                {
                this.state = 492;
                this.searchExpression(0);
                }
                }
                this.state = 497;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }

    public searchExpression(): SearchExpressionContext;
    public searchExpression(_p: number): SearchExpressionContext;
    public searchExpression(_p?: number): SearchExpressionContext {
        if (_p === undefined) {
            _p = 0;
        }

        let parentContext = this.context;
        let parentState = this.state;
        let localContext = new SearchExpressionContext(this.context, parentState);
        let previousContext = localContext;
        let _startState = 20;
        this.enterRecursionRule(localContext, 20, OpenSearchPPLParser.RULE_searchExpression, _p);
        try {
            let alternative: number;
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 506;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case OpenSearchPPLParser.LT_PRTHS:
                {
                localContext = new GroupedExpressionContext(localContext);
                this.context = localContext;
                previousContext = localContext;

                this.state = 499;
                this.match(OpenSearchPPLParser.LT_PRTHS);
                this.state = 500;
                this.searchExpression(0);
                this.state = 501;
                this.match(OpenSearchPPLParser.RT_PRTHS);
                }
                break;
            case OpenSearchPPLParser.NOT:
                {
                localContext = new NotExpressionContext(localContext);
                this.context = localContext;
                previousContext = localContext;
                this.state = 503;
                this.match(OpenSearchPPLParser.NOT);
                this.state = 504;
                this.searchExpression(4);
                }
                break;
            case OpenSearchPPLParser.SEARCH:
            case OpenSearchPPLParser.DESCRIBE:
            case OpenSearchPPLParser.SHOW:
            case OpenSearchPPLParser.EXPLAIN:
            case OpenSearchPPLParser.FROM:
            case OpenSearchPPLParser.WHERE:
            case OpenSearchPPLParser.FIELDS:
            case OpenSearchPPLParser.TABLE:
            case OpenSearchPPLParser.RENAME:
            case OpenSearchPPLParser.STATS:
            case OpenSearchPPLParser.EVENTSTATS:
            case OpenSearchPPLParser.DEDUP:
            case OpenSearchPPLParser.SORT:
            case OpenSearchPPLParser.EVAL:
            case OpenSearchPPLParser.HEAD:
            case OpenSearchPPLParser.BIN:
            case OpenSearchPPLParser.TOP:
            case OpenSearchPPLParser.RARE:
            case OpenSearchPPLParser.PARSE:
            case OpenSearchPPLParser.REGEX:
            case OpenSearchPPLParser.REX:
            case OpenSearchPPLParser.PUNCT:
            case OpenSearchPPLParser.GROK:
            case OpenSearchPPLParser.PATTERN:
            case OpenSearchPPLParser.PATTERNS:
            case OpenSearchPPLParser.NEW_FIELD:
            case OpenSearchPPLParser.KMEANS:
            case OpenSearchPPLParser.AD:
            case OpenSearchPPLParser.ML:
            case OpenSearchPPLParser.FILLNULL:
            case OpenSearchPPLParser.FLATTEN:
            case OpenSearchPPLParser.TRENDLINE:
            case OpenSearchPPLParser.TIMECHART:
            case OpenSearchPPLParser.EXPAND:
            case OpenSearchPPLParser.VARIABLE_COUNT_THRESHOLD:
            case OpenSearchPPLParser.FREQUENCY_THRESHOLD_PERCENTAGE:
            case OpenSearchPPLParser.METHOD:
            case OpenSearchPPLParser.MAX_SAMPLE_COUNT:
            case OpenSearchPPLParser.BUFFER_LIMIT:
            case OpenSearchPPLParser.JOIN:
            case OpenSearchPPLParser.INNER:
            case OpenSearchPPLParser.OUTER:
            case OpenSearchPPLParser.FULL:
            case OpenSearchPPLParser.SEMI:
            case OpenSearchPPLParser.ANTI:
            case OpenSearchPPLParser.CROSS:
            case OpenSearchPPLParser.LEFT_HINT:
            case OpenSearchPPLParser.RIGHT_HINT:
            case OpenSearchPPLParser.SOURCE:
            case OpenSearchPPLParser.INDEX:
            case OpenSearchPPLParser.A:
            case OpenSearchPPLParser.ASC:
            case OpenSearchPPLParser.D:
            case OpenSearchPPLParser.DESC:
            case OpenSearchPPLParser.DATASOURCES:
            case OpenSearchPPLParser.USING:
            case OpenSearchPPLParser.WITH:
            case OpenSearchPPLParser.SIMPLE:
            case OpenSearchPPLParser.STANDARD:
            case OpenSearchPPLParser.COST:
            case OpenSearchPPLParser.EXTENDED:
            case OpenSearchPPLParser.OVERRIDE:
            case OpenSearchPPLParser.AUTO:
            case OpenSearchPPLParser.STR:
            case OpenSearchPPLParser.NUM:
            case OpenSearchPPLParser.SMA:
            case OpenSearchPPLParser.WMA:
            case OpenSearchPPLParser.KEEPEMPTY:
            case OpenSearchPPLParser.CONSECUTIVE:
            case OpenSearchPPLParser.DEDUP_SPLITVALUES:
            case OpenSearchPPLParser.PARTITIONS:
            case OpenSearchPPLParser.ALLNUM:
            case OpenSearchPPLParser.DELIM:
            case OpenSearchPPLParser.BUCKET_NULLABLE:
            case OpenSearchPPLParser.CENTROIDS:
            case OpenSearchPPLParser.ITERATIONS:
            case OpenSearchPPLParser.DISTANCE_TYPE:
            case OpenSearchPPLParser.NUMBER_OF_TREES:
            case OpenSearchPPLParser.SHINGLE_SIZE:
            case OpenSearchPPLParser.SAMPLE_SIZE:
            case OpenSearchPPLParser.OUTPUT_AFTER:
            case OpenSearchPPLParser.TIME_DECAY:
            case OpenSearchPPLParser.ANOMALY_RATE:
            case OpenSearchPPLParser.CATEGORY_FIELD:
            case OpenSearchPPLParser.TIME_FIELD:
            case OpenSearchPPLParser.TIME_ZONE:
            case OpenSearchPPLParser.TRAINING_DATA_SIZE:
            case OpenSearchPPLParser.ANOMALY_SCORE_THRESHOLD:
            case OpenSearchPPLParser.APPEND:
            case OpenSearchPPLParser.COUNTFIELD:
            case OpenSearchPPLParser.SHOWCOUNT:
            case OpenSearchPPLParser.INPUT:
            case OpenSearchPPLParser.OUTPUT:
            case OpenSearchPPLParser.PATH:
            case OpenSearchPPLParser.CASE:
            case OpenSearchPPLParser.ELSE:
            case OpenSearchPPLParser.IN:
            case OpenSearchPPLParser.EXISTS:
            case OpenSearchPPLParser.GEOIP:
            case OpenSearchPPLParser.TRUE:
            case OpenSearchPPLParser.FALSE:
            case OpenSearchPPLParser.REGEXP:
            case OpenSearchPPLParser.REGEX_MATCH:
            case OpenSearchPPLParser.CONVERT_TZ:
            case OpenSearchPPLParser.DATETIME:
            case OpenSearchPPLParser.DAY:
            case OpenSearchPPLParser.DAY_HOUR:
            case OpenSearchPPLParser.DAY_MICROSECOND:
            case OpenSearchPPLParser.DAY_MINUTE:
            case OpenSearchPPLParser.DAY_OF_YEAR:
            case OpenSearchPPLParser.DAY_SECOND:
            case OpenSearchPPLParser.HOUR:
            case OpenSearchPPLParser.HOUR_MICROSECOND:
            case OpenSearchPPLParser.HOUR_MINUTE:
            case OpenSearchPPLParser.HOUR_OF_DAY:
            case OpenSearchPPLParser.HOUR_SECOND:
            case OpenSearchPPLParser.INTERVAL:
            case OpenSearchPPLParser.MICROSECOND:
            case OpenSearchPPLParser.MILLISECOND:
            case OpenSearchPPLParser.MINUTE:
            case OpenSearchPPLParser.MINUTE_MICROSECOND:
            case OpenSearchPPLParser.MINUTE_OF_DAY:
            case OpenSearchPPLParser.MINUTE_OF_HOUR:
            case OpenSearchPPLParser.MINUTE_SECOND:
            case OpenSearchPPLParser.MONTH:
            case OpenSearchPPLParser.MONTH_OF_YEAR:
            case OpenSearchPPLParser.QUARTER:
            case OpenSearchPPLParser.SECOND:
            case OpenSearchPPLParser.SECOND_MICROSECOND:
            case OpenSearchPPLParser.SECOND_OF_MINUTE:
            case OpenSearchPPLParser.WEEK:
            case OpenSearchPPLParser.WEEK_OF_YEAR:
            case OpenSearchPPLParser.YEAR:
            case OpenSearchPPLParser.YEAR_MONTH:
            case OpenSearchPPLParser.LOOKUP:
            case OpenSearchPPLParser.IP:
            case OpenSearchPPLParser.DOT:
            case OpenSearchPPLParser.PLUS:
            case OpenSearchPPLParser.MINUS:
            case OpenSearchPPLParser.BACKTICK:
            case OpenSearchPPLParser.ARROW:
            case OpenSearchPPLParser.AVG:
            case OpenSearchPPLParser.COUNT:
            case OpenSearchPPLParser.DISTINCT_COUNT:
            case OpenSearchPPLParser.DISTINCT_COUNT_APPROX:
            case OpenSearchPPLParser.ESTDC:
            case OpenSearchPPLParser.ESTDC_ERROR:
            case OpenSearchPPLParser.MAX:
            case OpenSearchPPLParser.MEAN:
            case OpenSearchPPLParser.MEDIAN:
            case OpenSearchPPLParser.MIN:
            case OpenSearchPPLParser.MODE:
            case OpenSearchPPLParser.RANGE:
            case OpenSearchPPLParser.STDEV:
            case OpenSearchPPLParser.STDEVP:
            case OpenSearchPPLParser.SUM:
            case OpenSearchPPLParser.SUMSQ:
            case OpenSearchPPLParser.VAR_SAMP:
            case OpenSearchPPLParser.VAR_POP:
            case OpenSearchPPLParser.STDDEV_SAMP:
            case OpenSearchPPLParser.STDDEV_POP:
            case OpenSearchPPLParser.PERCENTILE:
            case OpenSearchPPLParser.PERCENTILE_APPROX:
            case OpenSearchPPLParser.EARLIEST:
            case OpenSearchPPLParser.LATEST:
            case OpenSearchPPLParser.TAKE:
            case OpenSearchPPLParser.LIST:
            case OpenSearchPPLParser.VALUES:
            case OpenSearchPPLParser.PER_DAY:
            case OpenSearchPPLParser.PER_HOUR:
            case OpenSearchPPLParser.PER_MINUTE:
            case OpenSearchPPLParser.PER_SECOND:
            case OpenSearchPPLParser.RATE:
            case OpenSearchPPLParser.SPARKLINE:
            case OpenSearchPPLParser.C:
            case OpenSearchPPLParser.DC:
            case OpenSearchPPLParser.ROW_NUMBER:
            case OpenSearchPPLParser.RANK:
            case OpenSearchPPLParser.DENSE_RANK:
            case OpenSearchPPLParser.PERCENT_RANK:
            case OpenSearchPPLParser.CUME_DIST:
            case OpenSearchPPLParser.FIRST:
            case OpenSearchPPLParser.LAST:
            case OpenSearchPPLParser.NTH:
            case OpenSearchPPLParser.NTILE:
            case OpenSearchPPLParser.PLUS_FUCTION:
            case OpenSearchPPLParser.MINUS_FUCTION:
            case OpenSearchPPLParser.STAR_FUNCTION:
            case OpenSearchPPLParser.DIVIDE_FUNCTION:
            case OpenSearchPPLParser.ABS:
            case OpenSearchPPLParser.CBRT:
            case OpenSearchPPLParser.CEIL:
            case OpenSearchPPLParser.CEILING:
            case OpenSearchPPLParser.CONV:
            case OpenSearchPPLParser.CRC32:
            case OpenSearchPPLParser.E:
            case OpenSearchPPLParser.EXP:
            case OpenSearchPPLParser.EXPM1:
            case OpenSearchPPLParser.FLOOR:
            case OpenSearchPPLParser.LN:
            case OpenSearchPPLParser.LOG:
            case OpenSearchPPLParser.LOG_WITH_BASE:
            case OpenSearchPPLParser.MOD:
            case OpenSearchPPLParser.MODULUS:
            case OpenSearchPPLParser.PI:
            case OpenSearchPPLParser.POSITION:
            case OpenSearchPPLParser.POW:
            case OpenSearchPPLParser.POWER:
            case OpenSearchPPLParser.RAND:
            case OpenSearchPPLParser.ROUND:
            case OpenSearchPPLParser.SIGN:
            case OpenSearchPPLParser.SQRT:
            case OpenSearchPPLParser.TRUNCATE:
            case OpenSearchPPLParser.RINT:
            case OpenSearchPPLParser.SIGNUM:
            case OpenSearchPPLParser.ACOS:
            case OpenSearchPPLParser.ASIN:
            case OpenSearchPPLParser.ATAN:
            case OpenSearchPPLParser.ATAN2:
            case OpenSearchPPLParser.COS:
            case OpenSearchPPLParser.COSH:
            case OpenSearchPPLParser.COT:
            case OpenSearchPPLParser.DEGREES:
            case OpenSearchPPLParser.RADIANS:
            case OpenSearchPPLParser.SIN:
            case OpenSearchPPLParser.SINH:
            case OpenSearchPPLParser.TAN:
            case OpenSearchPPLParser.MD5:
            case OpenSearchPPLParser.SHA1:
            case OpenSearchPPLParser.SHA2:
            case OpenSearchPPLParser.ADDDATE:
            case OpenSearchPPLParser.ADDTIME:
            case OpenSearchPPLParser.CURDATE:
            case OpenSearchPPLParser.CURRENT_DATE:
            case OpenSearchPPLParser.CURRENT_TIME:
            case OpenSearchPPLParser.CURRENT_TIMESTAMP:
            case OpenSearchPPLParser.CURTIME:
            case OpenSearchPPLParser.DATE:
            case OpenSearchPPLParser.DATEDIFF:
            case OpenSearchPPLParser.DATE_ADD:
            case OpenSearchPPLParser.DATE_FORMAT:
            case OpenSearchPPLParser.DATE_SUB:
            case OpenSearchPPLParser.DAYNAME:
            case OpenSearchPPLParser.DAYOFMONTH:
            case OpenSearchPPLParser.DAYOFWEEK:
            case OpenSearchPPLParser.DAYOFYEAR:
            case OpenSearchPPLParser.DAY_OF_MONTH:
            case OpenSearchPPLParser.DAY_OF_WEEK:
            case OpenSearchPPLParser.EXTRACT:
            case OpenSearchPPLParser.FROM_DAYS:
            case OpenSearchPPLParser.FROM_UNIXTIME:
            case OpenSearchPPLParser.GET_FORMAT:
            case OpenSearchPPLParser.LAST_DAY:
            case OpenSearchPPLParser.LOCALTIME:
            case OpenSearchPPLParser.LOCALTIMESTAMP:
            case OpenSearchPPLParser.MAKEDATE:
            case OpenSearchPPLParser.MAKETIME:
            case OpenSearchPPLParser.MONTHNAME:
            case OpenSearchPPLParser.NOW:
            case OpenSearchPPLParser.PERIOD_ADD:
            case OpenSearchPPLParser.PERIOD_DIFF:
            case OpenSearchPPLParser.SEC_TO_TIME:
            case OpenSearchPPLParser.STR_TO_DATE:
            case OpenSearchPPLParser.SUBDATE:
            case OpenSearchPPLParser.SUBTIME:
            case OpenSearchPPLParser.SYSDATE:
            case OpenSearchPPLParser.TIME:
            case OpenSearchPPLParser.TIMEDIFF:
            case OpenSearchPPLParser.TIMESTAMP:
            case OpenSearchPPLParser.TIME_FORMAT:
            case OpenSearchPPLParser.TIME_TO_SEC:
            case OpenSearchPPLParser.TO_DAYS:
            case OpenSearchPPLParser.TO_SECONDS:
            case OpenSearchPPLParser.UNIX_TIMESTAMP:
            case OpenSearchPPLParser.UTC_DATE:
            case OpenSearchPPLParser.UTC_TIME:
            case OpenSearchPPLParser.UTC_TIMESTAMP:
            case OpenSearchPPLParser.WEEKDAY:
            case OpenSearchPPLParser.YEARWEEK:
            case OpenSearchPPLParser.STRFTIME:
            case OpenSearchPPLParser.SUBSTR:
            case OpenSearchPPLParser.SUBSTRING:
            case OpenSearchPPLParser.LTRIM:
            case OpenSearchPPLParser.RTRIM:
            case OpenSearchPPLParser.TRIM:
            case OpenSearchPPLParser.LOWER:
            case OpenSearchPPLParser.UPPER:
            case OpenSearchPPLParser.CONCAT:
            case OpenSearchPPLParser.CONCAT_WS:
            case OpenSearchPPLParser.LENGTH:
            case OpenSearchPPLParser.STRCMP:
            case OpenSearchPPLParser.RIGHT:
            case OpenSearchPPLParser.LEFT:
            case OpenSearchPPLParser.ASCII:
            case OpenSearchPPLParser.LOCATE:
            case OpenSearchPPLParser.REPLACE:
            case OpenSearchPPLParser.REVERSE:
            case OpenSearchPPLParser.CAST:
            case OpenSearchPPLParser.LIKE:
            case OpenSearchPPLParser.ISNULL:
            case OpenSearchPPLParser.ISNOTNULL:
            case OpenSearchPPLParser.CIDRMATCH:
            case OpenSearchPPLParser.BETWEEN:
            case OpenSearchPPLParser.ISPRESENT:
            case OpenSearchPPLParser.ISEMPTY:
            case OpenSearchPPLParser.ISBLANK:
            case OpenSearchPPLParser.ARRAY:
            case OpenSearchPPLParser.ARRAY_LENGTH:
            case OpenSearchPPLParser.MVJOIN:
            case OpenSearchPPLParser.FORALL:
            case OpenSearchPPLParser.FILTER:
            case OpenSearchPPLParser.TRANSFORM:
            case OpenSearchPPLParser.REDUCE:
            case OpenSearchPPLParser.JSON_VALID:
            case OpenSearchPPLParser.JSON:
            case OpenSearchPPLParser.JSON_OBJECT:
            case OpenSearchPPLParser.JSON_ARRAY:
            case OpenSearchPPLParser.JSON_ARRAY_LENGTH:
            case OpenSearchPPLParser.JSON_EXTRACT:
            case OpenSearchPPLParser.JSON_KEYS:
            case OpenSearchPPLParser.JSON_SET:
            case OpenSearchPPLParser.JSON_DELETE:
            case OpenSearchPPLParser.JSON_APPEND:
            case OpenSearchPPLParser.JSON_EXTEND:
            case OpenSearchPPLParser.IFNULL:
            case OpenSearchPPLParser.NULLIF:
            case OpenSearchPPLParser.IF:
            case OpenSearchPPLParser.TYPEOF:
            case OpenSearchPPLParser.COALESCE:
            case OpenSearchPPLParser.MATCH:
            case OpenSearchPPLParser.MATCH_PHRASE:
            case OpenSearchPPLParser.MATCH_PHRASE_PREFIX:
            case OpenSearchPPLParser.MATCH_BOOL_PREFIX:
            case OpenSearchPPLParser.SIMPLE_QUERY_STRING:
            case OpenSearchPPLParser.MULTI_MATCH:
            case OpenSearchPPLParser.QUERY_STRING:
            case OpenSearchPPLParser.ALLOW_LEADING_WILDCARD:
            case OpenSearchPPLParser.ANALYZE_WILDCARD:
            case OpenSearchPPLParser.ANALYZER:
            case OpenSearchPPLParser.AUTO_GENERATE_SYNONYMS_PHRASE_QUERY:
            case OpenSearchPPLParser.BOOST:
            case OpenSearchPPLParser.CUTOFF_FREQUENCY:
            case OpenSearchPPLParser.DEFAULT_FIELD:
            case OpenSearchPPLParser.DEFAULT_OPERATOR:
            case OpenSearchPPLParser.ENABLE_POSITION_INCREMENTS:
            case OpenSearchPPLParser.ESCAPE:
            case OpenSearchPPLParser.FLAGS:
            case OpenSearchPPLParser.FUZZY_MAX_EXPANSIONS:
            case OpenSearchPPLParser.FUZZY_PREFIX_LENGTH:
            case OpenSearchPPLParser.FUZZY_TRANSPOSITIONS:
            case OpenSearchPPLParser.FUZZY_REWRITE:
            case OpenSearchPPLParser.FUZZINESS:
            case OpenSearchPPLParser.LENIENT:
            case OpenSearchPPLParser.LOW_FREQ_OPERATOR:
            case OpenSearchPPLParser.MAX_DETERMINIZED_STATES:
            case OpenSearchPPLParser.MAX_EXPANSIONS:
            case OpenSearchPPLParser.MINIMUM_SHOULD_MATCH:
            case OpenSearchPPLParser.OPERATOR:
            case OpenSearchPPLParser.PHRASE_SLOP:
            case OpenSearchPPLParser.PREFIX_LENGTH:
            case OpenSearchPPLParser.QUOTE_ANALYZER:
            case OpenSearchPPLParser.QUOTE_FIELD_SUFFIX:
            case OpenSearchPPLParser.REWRITE:
            case OpenSearchPPLParser.SLOP:
            case OpenSearchPPLParser.TIE_BREAKER:
            case OpenSearchPPLParser.TYPE:
            case OpenSearchPPLParser.ZERO_TERMS_QUERY:
            case OpenSearchPPLParser.SPAN:
            case OpenSearchPPLParser.MS:
            case OpenSearchPPLParser.S:
            case OpenSearchPPLParser.M:
            case OpenSearchPPLParser.H:
            case OpenSearchPPLParser.W:
            case OpenSearchPPLParser.Q:
            case OpenSearchPPLParser.Y:
            case OpenSearchPPLParser.SEC:
            case OpenSearchPPLParser.SECS:
            case OpenSearchPPLParser.SECONDS:
            case OpenSearchPPLParser.MINS:
            case OpenSearchPPLParser.MINUTES:
            case OpenSearchPPLParser.HR:
            case OpenSearchPPLParser.HRS:
            case OpenSearchPPLParser.HOURS:
            case OpenSearchPPLParser.DAYS:
            case OpenSearchPPLParser.MON:
            case OpenSearchPPLParser.MONTHS:
            case OpenSearchPPLParser.US:
            case OpenSearchPPLParser.CS:
            case OpenSearchPPLParser.DS:
            case OpenSearchPPLParser.PERCENTILE_SHORTCUT:
            case OpenSearchPPLParser.ID:
            case OpenSearchPPLParser.INTEGER_LITERAL:
            case OpenSearchPPLParser.DECIMAL_LITERAL:
            case OpenSearchPPLParser.FLOAT_LITERAL:
            case OpenSearchPPLParser.DOUBLE_LITERAL:
            case OpenSearchPPLParser.DQUOTA_STRING:
            case OpenSearchPPLParser.SQUOTA_STRING:
            case OpenSearchPPLParser.BQUOTA_STRING:
                {
                localContext = new TermExpressionContext(localContext);
                this.context = localContext;
                previousContext = localContext;
                this.state = 505;
                this.searchTerm();
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
            this.context!.stop = this.tokenStream.LT(-1);
            this.state = 516;
            this.errorHandler.sync(this);
            alternative = this.interpreter.adaptivePredict(this.tokenStream, 13, this.context);
            while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER) {
                if (alternative === 1) {
                    if (this.parseListeners != null) {
                        this.triggerExitRuleEvent();
                    }
                    previousContext = localContext;
                    {
                    this.state = 514;
                    this.errorHandler.sync(this);
                    switch (this.interpreter.adaptivePredict(this.tokenStream, 12, this.context) ) {
                    case 1:
                        {
                        localContext = new OrExpressionContext(new SearchExpressionContext(parentContext, parentState));
                        this.pushNewRecursionContext(localContext, _startState, OpenSearchPPLParser.RULE_searchExpression);
                        this.state = 508;
                        if (!(this.precpred(this.context, 3))) {
                            throw this.createFailedPredicateException("this.precpred(this.context, 3)");
                        }
                        this.state = 509;
                        this.match(OpenSearchPPLParser.OR);
                        this.state = 510;
                        this.searchExpression(4);
                        }
                        break;
                    case 2:
                        {
                        localContext = new AndExpressionContext(new SearchExpressionContext(parentContext, parentState));
                        this.pushNewRecursionContext(localContext, _startState, OpenSearchPPLParser.RULE_searchExpression);
                        this.state = 511;
                        if (!(this.precpred(this.context, 2))) {
                            throw this.createFailedPredicateException("this.precpred(this.context, 2)");
                        }
                        this.state = 512;
                        this.match(OpenSearchPPLParser.AND);
                        this.state = 513;
                        this.searchExpression(3);
                        }
                        break;
                    }
                    }
                }
                this.state = 518;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 13, this.context);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.unrollRecursionContexts(parentContext);
        }
        return localContext;
    }
    public searchTerm(): SearchTermContext {
        let localContext = new SearchTermContext(this.context, this.state);
        this.enterRule(localContext, 22, OpenSearchPPLParser.RULE_searchTerm);
        try {
            this.state = 522;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 14, this.context) ) {
            case 1:
                localContext = new SearchComparisonTermContext(localContext);
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 519;
                this.searchFieldComparison();
                }
                break;
            case 2:
                localContext = new SearchInListTermContext(localContext);
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 520;
                this.searchFieldInList();
                }
                break;
            case 3:
                localContext = new SearchLiteralTermContext(localContext);
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 521;
                this.searchLiteral();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public searchLiteral(): SearchLiteralContext {
        let localContext = new SearchLiteralContext(this.context, this.state);
        this.enterRule(localContext, 24, OpenSearchPPLParser.RULE_searchLiteral);
        try {
            this.state = 529;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 15, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 524;
                this.numericLiteral();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 525;
                this.booleanLiteral();
                }
                break;
            case 3:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 526;
                this.match(OpenSearchPPLParser.ID);
                }
                break;
            case 4:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 527;
                this.stringLiteral();
                }
                break;
            case 5:
                this.enterOuterAlt(localContext, 5);
                {
                this.state = 528;
                this.searchableKeyWord();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public searchFieldComparison(): SearchFieldComparisonContext {
        let localContext = new SearchFieldComparisonContext(this.context, this.state);
        this.enterRule(localContext, 26, OpenSearchPPLParser.RULE_searchFieldComparison);
        try {
            localContext = new SearchFieldCompareContext(localContext);
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 531;
            this.fieldExpression();
            this.state = 532;
            this.searchComparisonOperator();
            this.state = 533;
            this.searchLiteral();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public searchFieldInList(): SearchFieldInListContext {
        let localContext = new SearchFieldInListContext(this.context, this.state);
        this.enterRule(localContext, 28, OpenSearchPPLParser.RULE_searchFieldInList);
        try {
            localContext = new SearchFieldInValuesContext(localContext);
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 535;
            this.fieldExpression();
            this.state = 536;
            this.match(OpenSearchPPLParser.IN);
            this.state = 537;
            this.match(OpenSearchPPLParser.LT_PRTHS);
            this.state = 538;
            this.searchLiteralList();
            this.state = 539;
            this.match(OpenSearchPPLParser.RT_PRTHS);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public searchLiteralList(): SearchLiteralListContext {
        let localContext = new SearchLiteralListContext(this.context, this.state);
        this.enterRule(localContext, 30, OpenSearchPPLParser.RULE_searchLiteralList);
        let _la: number;
        try {
            localContext = new SearchLiteralsContext(localContext);
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 541;
            this.searchLiteral();
            this.state = 546;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 168) {
                {
                {
                this.state = 542;
                this.match(OpenSearchPPLParser.COMMA);
                this.state = 543;
                this.searchLiteral();
                }
                }
                this.state = 548;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public searchComparisonOperator(): SearchComparisonOperatorContext {
        let localContext = new SearchComparisonOperatorContext(this.context, this.state);
        this.enterRule(localContext, 32, OpenSearchPPLParser.RULE_searchComparisonOperator);
        try {
            this.state = 555;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case OpenSearchPPLParser.EQUAL:
                localContext = new EqualsContext(localContext);
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 549;
                this.match(OpenSearchPPLParser.EQUAL);
                }
                break;
            case OpenSearchPPLParser.NOT_EQUAL:
                localContext = new NotEqualsContext(localContext);
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 550;
                this.match(OpenSearchPPLParser.NOT_EQUAL);
                }
                break;
            case OpenSearchPPLParser.LESS:
                localContext = new LessThanContext(localContext);
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 551;
                this.match(OpenSearchPPLParser.LESS);
                }
                break;
            case OpenSearchPPLParser.NOT_GREATER:
                localContext = new LessOrEqualContext(localContext);
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 552;
                this.match(OpenSearchPPLParser.NOT_GREATER);
                }
                break;
            case OpenSearchPPLParser.GREATER:
                localContext = new GreaterThanContext(localContext);
                this.enterOuterAlt(localContext, 5);
                {
                this.state = 553;
                this.match(OpenSearchPPLParser.GREATER);
                }
                break;
            case OpenSearchPPLParser.NOT_LESS:
                localContext = new GreaterOrEqualContext(localContext);
                this.enterOuterAlt(localContext, 6);
                {
                this.state = 554;
                this.match(OpenSearchPPLParser.NOT_LESS);
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public describeCommand(): DescribeCommandContext {
        let localContext = new DescribeCommandContext(this.context, this.state);
        this.enterRule(localContext, 34, OpenSearchPPLParser.RULE_describeCommand);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 557;
            this.match(OpenSearchPPLParser.DESCRIBE);
            this.state = 558;
            this.tableSourceClause();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public showDataSourcesCommand(): ShowDataSourcesCommandContext {
        let localContext = new ShowDataSourcesCommandContext(this.context, this.state);
        this.enterRule(localContext, 36, OpenSearchPPLParser.RULE_showDataSourcesCommand);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 560;
            this.match(OpenSearchPPLParser.SHOW);
            this.state = 561;
            this.match(OpenSearchPPLParser.DATASOURCES);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public whereCommand(): WhereCommandContext {
        let localContext = new WhereCommandContext(this.context, this.state);
        this.enterRule(localContext, 38, OpenSearchPPLParser.RULE_whereCommand);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 563;
            this.match(OpenSearchPPLParser.WHERE);
            this.state = 564;
            this.logicalExpression(0);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public fieldsCommand(): FieldsCommandContext {
        let localContext = new FieldsCommandContext(this.context, this.state);
        this.enterRule(localContext, 40, OpenSearchPPLParser.RULE_fieldsCommand);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 566;
            this.match(OpenSearchPPLParser.FIELDS);
            this.state = 567;
            this.fieldsCommandBody();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public tableCommand(): TableCommandContext {
        let localContext = new TableCommandContext(this.context, this.state);
        this.enterRule(localContext, 42, OpenSearchPPLParser.RULE_tableCommand);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 569;
            this.match(OpenSearchPPLParser.TABLE);
            this.state = 570;
            this.fieldsCommandBody();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public fieldsCommandBody(): FieldsCommandBodyContext {
        let localContext = new FieldsCommandBodyContext(this.context, this.state);
        this.enterRule(localContext, 44, OpenSearchPPLParser.RULE_fieldsCommandBody);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 573;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 18, this.context) ) {
            case 1:
                {
                this.state = 572;
                _la = this.tokenStream.LA(1);
                if(!(_la === 177 || _la === 178)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                }
                break;
            }
            this.state = 575;
            this.wcFieldList();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public wcFieldList(): WcFieldListContext {
        let localContext = new WcFieldListContext(this.context, this.state);
        this.enterRule(localContext, 46, OpenSearchPPLParser.RULE_wcFieldList);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 577;
            this.selectFieldExpression();
            this.state = 584;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while ((((_la) & ~0x1F) === 0 && ((1 << _la) & 4257218044) !== 0) || ((((_la - 32)) & ~0x1F) === 0 && ((1 << (_la - 32)) & 2682862783) !== 0) || ((((_la - 64)) & ~0x1F) === 0 && ((1 << (_la - 64)) & 4294959103) !== 0) || ((((_la - 96)) & ~0x1F) === 0 && ((1 << (_la - 96)) & 4162840575) !== 0) || ((((_la - 128)) & ~0x1F) === 0 && ((1 << (_la - 128)) & 805306367) !== 0) || ((((_la - 166)) & ~0x1F) === 0 && ((1 << (_la - 166)) & 2399156237) !== 0) || ((((_la - 198)) & ~0x1F) === 0 && ((1 << (_la - 198)) & 4294443007) !== 0) || ((((_la - 230)) & ~0x1F) === 0 && ((1 << (_la - 230)) & 4294967295) !== 0) || ((((_la - 262)) & ~0x1F) === 0 && ((1 << (_la - 262)) & 4294967295) !== 0) || ((((_la - 294)) & ~0x1F) === 0 && ((1 << (_la - 294)) & 4294967295) !== 0) || ((((_la - 328)) & ~0x1F) === 0 && ((1 << (_la - 328)) & 4294901759) !== 0) || ((((_la - 360)) & ~0x1F) === 0 && ((1 << (_la - 360)) & 4294967295) !== 0) || ((((_la - 392)) & ~0x1F) === 0 && ((1 << (_la - 392)) & 4294967295) !== 0) || ((((_la - 424)) & ~0x1F) === 0 && ((1 << (_la - 424)) & 4294966799) !== 0) || _la === 464) {
                {
                {
                this.state = 579;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 168) {
                    {
                    this.state = 578;
                    this.match(OpenSearchPPLParser.COMMA);
                    }
                }

                this.state = 581;
                this.selectFieldExpression();
                }
                }
                this.state = 586;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public renameCommand(): RenameCommandContext {
        let localContext = new RenameCommandContext(this.context, this.state);
        this.enterRule(localContext, 48, OpenSearchPPLParser.RULE_renameCommand);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 587;
            this.match(OpenSearchPPLParser.RENAME);
            this.state = 588;
            this.renameClasue();
            this.state = 595;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while ((((_la) & ~0x1F) === 0 && ((1 << _la) & 4257218044) !== 0) || ((((_la - 32)) & ~0x1F) === 0 && ((1 << (_la - 32)) & 2682862783) !== 0) || ((((_la - 64)) & ~0x1F) === 0 && ((1 << (_la - 64)) & 4294959103) !== 0) || ((((_la - 96)) & ~0x1F) === 0 && ((1 << (_la - 96)) & 4162840575) !== 0) || ((((_la - 128)) & ~0x1F) === 0 && ((1 << (_la - 128)) & 805306367) !== 0) || ((((_la - 166)) & ~0x1F) === 0 && ((1 << (_la - 166)) & 2399156237) !== 0) || ((((_la - 198)) & ~0x1F) === 0 && ((1 << (_la - 198)) & 4294443007) !== 0) || ((((_la - 230)) & ~0x1F) === 0 && ((1 << (_la - 230)) & 4294967295) !== 0) || ((((_la - 262)) & ~0x1F) === 0 && ((1 << (_la - 262)) & 4294967295) !== 0) || ((((_la - 294)) & ~0x1F) === 0 && ((1 << (_la - 294)) & 4294967295) !== 0) || ((((_la - 328)) & ~0x1F) === 0 && ((1 << (_la - 328)) & 4294901759) !== 0) || ((((_la - 360)) & ~0x1F) === 0 && ((1 << (_la - 360)) & 4294967295) !== 0) || ((((_la - 392)) & ~0x1F) === 0 && ((1 << (_la - 392)) & 4294967295) !== 0) || ((((_la - 424)) & ~0x1F) === 0 && ((1 << (_la - 424)) & 4294966799) !== 0) || _la === 464) {
                {
                {
                this.state = 590;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 168) {
                    {
                    this.state = 589;
                    this.match(OpenSearchPPLParser.COMMA);
                    }
                }

                this.state = 592;
                this.renameClasue();
                }
                }
                this.state = 597;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public statsCommand(): StatsCommandContext {
        let localContext = new StatsCommandContext(this.context, this.state);
        this.enterRule(localContext, 50, OpenSearchPPLParser.RULE_statsCommand);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 598;
            this.match(OpenSearchPPLParser.STATS);
            this.state = 599;
            this.statsArgs();
            this.state = 600;
            this.statsAggTerm();
            this.state = 605;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 168) {
                {
                {
                this.state = 601;
                this.match(OpenSearchPPLParser.COMMA);
                this.state = 602;
                this.statsAggTerm();
                }
                }
                this.state = 607;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            this.state = 609;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 62) {
                {
                this.state = 608;
                this.statsByClause();
                }
            }

            this.state = 612;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 85) {
                {
                this.state = 611;
                this.dedupSplitArg();
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public statsArgs(): StatsArgsContext {
        let localContext = new StatsArgsContext(this.context, this.state);
        this.enterRule(localContext, 52, OpenSearchPPLParser.RULE_statsArgs);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 620;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (((((_la - 86)) & ~0x1F) === 0 && ((1 << (_la - 86)) & 15) !== 0)) {
                {
                this.state = 618;
                this.errorHandler.sync(this);
                switch (this.tokenStream.LA(1)) {
                case OpenSearchPPLParser.PARTITIONS:
                    {
                    this.state = 614;
                    this.partitionsArg();
                    }
                    break;
                case OpenSearchPPLParser.ALLNUM:
                    {
                    this.state = 615;
                    this.allnumArg();
                    }
                    break;
                case OpenSearchPPLParser.DELIM:
                    {
                    this.state = 616;
                    this.delimArg();
                    }
                    break;
                case OpenSearchPPLParser.BUCKET_NULLABLE:
                    {
                    this.state = 617;
                    this.bucketNullableArg();
                    }
                    break;
                default:
                    throw new antlr.NoViableAltException(this);
                }
                }
                this.state = 622;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public partitionsArg(): PartitionsArgContext {
        let localContext = new PartitionsArgContext(this.context, this.state);
        this.enterRule(localContext, 54, OpenSearchPPLParser.RULE_partitionsArg);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 623;
            this.match(OpenSearchPPLParser.PARTITIONS);
            this.state = 624;
            this.match(OpenSearchPPLParser.EQUAL);
            this.state = 625;
            localContext._partitions = this.integerLiteral();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public allnumArg(): AllnumArgContext {
        let localContext = new AllnumArgContext(this.context, this.state);
        this.enterRule(localContext, 56, OpenSearchPPLParser.RULE_allnumArg);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 627;
            this.match(OpenSearchPPLParser.ALLNUM);
            this.state = 628;
            this.match(OpenSearchPPLParser.EQUAL);
            this.state = 629;
            localContext._allnum = this.booleanLiteral();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public delimArg(): DelimArgContext {
        let localContext = new DelimArgContext(this.context, this.state);
        this.enterRule(localContext, 58, OpenSearchPPLParser.RULE_delimArg);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 631;
            this.match(OpenSearchPPLParser.DELIM);
            this.state = 632;
            this.match(OpenSearchPPLParser.EQUAL);
            this.state = 633;
            localContext._delim = this.stringLiteral();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public bucketNullableArg(): BucketNullableArgContext {
        let localContext = new BucketNullableArgContext(this.context, this.state);
        this.enterRule(localContext, 60, OpenSearchPPLParser.RULE_bucketNullableArg);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 635;
            this.match(OpenSearchPPLParser.BUCKET_NULLABLE);
            this.state = 636;
            this.match(OpenSearchPPLParser.EQUAL);
            this.state = 637;
            localContext._bucket_nullable = this.booleanLiteral();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public dedupSplitArg(): DedupSplitArgContext {
        let localContext = new DedupSplitArgContext(this.context, this.state);
        this.enterRule(localContext, 62, OpenSearchPPLParser.RULE_dedupSplitArg);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 639;
            this.match(OpenSearchPPLParser.DEDUP_SPLITVALUES);
            this.state = 640;
            this.match(OpenSearchPPLParser.EQUAL);
            this.state = 641;
            localContext._dedupsplit = this.booleanLiteral();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public eventstatsCommand(): EventstatsCommandContext {
        let localContext = new EventstatsCommandContext(this.context, this.state);
        this.enterRule(localContext, 64, OpenSearchPPLParser.RULE_eventstatsCommand);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 643;
            this.match(OpenSearchPPLParser.EVENTSTATS);
            this.state = 644;
            this.eventstatsAggTerm();
            this.state = 649;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 168) {
                {
                {
                this.state = 645;
                this.match(OpenSearchPPLParser.COMMA);
                this.state = 646;
                this.eventstatsAggTerm();
                }
                }
                this.state = 651;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            this.state = 653;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 62) {
                {
                this.state = 652;
                this.statsByClause();
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public dedupCommand(): DedupCommandContext {
        let localContext = new DedupCommandContext(this.context, this.state);
        this.enterRule(localContext, 66, OpenSearchPPLParser.RULE_dedupCommand);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 655;
            this.match(OpenSearchPPLParser.DEDUP);
            this.state = 657;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 30, this.context) ) {
            case 1:
                {
                this.state = 656;
                localContext._number_ = this.integerLiteral();
                }
                break;
            }
            this.state = 659;
            this.fieldList();
            this.state = 663;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 83) {
                {
                this.state = 660;
                this.match(OpenSearchPPLParser.KEEPEMPTY);
                this.state = 661;
                this.match(OpenSearchPPLParser.EQUAL);
                this.state = 662;
                localContext._keepempty = this.booleanLiteral();
                }
            }

            this.state = 668;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 84) {
                {
                this.state = 665;
                this.match(OpenSearchPPLParser.CONSECUTIVE);
                this.state = 666;
                this.match(OpenSearchPPLParser.EQUAL);
                this.state = 667;
                localContext._consecutive = this.booleanLiteral();
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public sortCommand(): SortCommandContext {
        let localContext = new SortCommandContext(this.context, this.state);
        this.enterRule(localContext, 68, OpenSearchPPLParser.RULE_sortCommand);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 670;
            this.match(OpenSearchPPLParser.SORT);
            this.state = 672;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 33, this.context) ) {
            case 1:
                {
                this.state = 671;
                localContext._count = this.integerLiteral();
                }
                break;
            }
            this.state = 674;
            this.sortbyClause();
            this.state = 676;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (((((_la - 65)) & ~0x1F) === 0 && ((1 << (_la - 65)) & 15) !== 0)) {
                {
                this.state = 675;
                _la = this.tokenStream.LA(1);
                if(!(((((_la - 65)) & ~0x1F) === 0 && ((1 << (_la - 65)) & 15) !== 0))) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public reverseCommand(): ReverseCommandContext {
        let localContext = new ReverseCommandContext(this.context, this.state);
        this.enterRule(localContext, 70, OpenSearchPPLParser.RULE_reverseCommand);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 678;
            this.match(OpenSearchPPLParser.REVERSE);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public timechartCommand(): TimechartCommandContext {
        let localContext = new TimechartCommandContext(this.context, this.state);
        this.enterRule(localContext, 72, OpenSearchPPLParser.RULE_timechartCommand);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 680;
            this.match(OpenSearchPPLParser.TIMECHART);
            this.state = 684;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 107 || _la === 108 || _la === 427) {
                {
                {
                this.state = 681;
                this.timechartParameter();
                }
                }
                this.state = 686;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            this.state = 687;
            this.statsFunction();
            this.state = 690;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 62) {
                {
                this.state = 688;
                this.match(OpenSearchPPLParser.BY);
                this.state = 689;
                this.fieldExpression();
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public timechartParameter(): TimechartParameterContext {
        let localContext = new TimechartParameterContext(this.context, this.state);
        this.enterRule(localContext, 74, OpenSearchPPLParser.RULE_timechartParameter);
        try {
            this.state = 699;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case OpenSearchPPLParser.SPAN:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 696;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 37, this.context) ) {
                case 1:
                    {
                    this.state = 692;
                    this.spanClause();
                    }
                    break;
                case 2:
                    {
                    this.state = 693;
                    this.match(OpenSearchPPLParser.SPAN);
                    this.state = 694;
                    this.match(OpenSearchPPLParser.EQUAL);
                    this.state = 695;
                    this.spanLiteral();
                    }
                    break;
                }
                }
                break;
            case OpenSearchPPLParser.LIMIT:
            case OpenSearchPPLParser.USEOTHER:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 698;
                this.timechartArg();
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public timechartArg(): TimechartArgContext {
        let localContext = new TimechartArgContext(this.context, this.state);
        this.enterRule(localContext, 76, OpenSearchPPLParser.RULE_timechartArg);
        try {
            this.state = 710;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case OpenSearchPPLParser.LIMIT:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 701;
                this.match(OpenSearchPPLParser.LIMIT);
                this.state = 702;
                this.match(OpenSearchPPLParser.EQUAL);
                this.state = 703;
                this.integerLiteral();
                }
                break;
            case OpenSearchPPLParser.USEOTHER:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 704;
                this.match(OpenSearchPPLParser.USEOTHER);
                this.state = 705;
                this.match(OpenSearchPPLParser.EQUAL);
                this.state = 708;
                this.errorHandler.sync(this);
                switch (this.tokenStream.LA(1)) {
                case OpenSearchPPLParser.TRUE:
                case OpenSearchPPLParser.FALSE:
                    {
                    this.state = 706;
                    this.booleanLiteral();
                    }
                    break;
                case OpenSearchPPLParser.SEARCH:
                case OpenSearchPPLParser.DESCRIBE:
                case OpenSearchPPLParser.SHOW:
                case OpenSearchPPLParser.EXPLAIN:
                case OpenSearchPPLParser.FROM:
                case OpenSearchPPLParser.WHERE:
                case OpenSearchPPLParser.FIELDS:
                case OpenSearchPPLParser.TABLE:
                case OpenSearchPPLParser.RENAME:
                case OpenSearchPPLParser.STATS:
                case OpenSearchPPLParser.EVENTSTATS:
                case OpenSearchPPLParser.DEDUP:
                case OpenSearchPPLParser.SORT:
                case OpenSearchPPLParser.EVAL:
                case OpenSearchPPLParser.HEAD:
                case OpenSearchPPLParser.BIN:
                case OpenSearchPPLParser.TOP:
                case OpenSearchPPLParser.RARE:
                case OpenSearchPPLParser.PARSE:
                case OpenSearchPPLParser.REGEX:
                case OpenSearchPPLParser.REX:
                case OpenSearchPPLParser.PUNCT:
                case OpenSearchPPLParser.GROK:
                case OpenSearchPPLParser.PATTERN:
                case OpenSearchPPLParser.PATTERNS:
                case OpenSearchPPLParser.NEW_FIELD:
                case OpenSearchPPLParser.KMEANS:
                case OpenSearchPPLParser.AD:
                case OpenSearchPPLParser.ML:
                case OpenSearchPPLParser.FILLNULL:
                case OpenSearchPPLParser.FLATTEN:
                case OpenSearchPPLParser.TRENDLINE:
                case OpenSearchPPLParser.TIMECHART:
                case OpenSearchPPLParser.EXPAND:
                case OpenSearchPPLParser.VARIABLE_COUNT_THRESHOLD:
                case OpenSearchPPLParser.FREQUENCY_THRESHOLD_PERCENTAGE:
                case OpenSearchPPLParser.METHOD:
                case OpenSearchPPLParser.MAX_SAMPLE_COUNT:
                case OpenSearchPPLParser.BUFFER_LIMIT:
                case OpenSearchPPLParser.JOIN:
                case OpenSearchPPLParser.INNER:
                case OpenSearchPPLParser.OUTER:
                case OpenSearchPPLParser.FULL:
                case OpenSearchPPLParser.SEMI:
                case OpenSearchPPLParser.ANTI:
                case OpenSearchPPLParser.CROSS:
                case OpenSearchPPLParser.LEFT_HINT:
                case OpenSearchPPLParser.RIGHT_HINT:
                case OpenSearchPPLParser.SOURCE:
                case OpenSearchPPLParser.INDEX:
                case OpenSearchPPLParser.A:
                case OpenSearchPPLParser.ASC:
                case OpenSearchPPLParser.D:
                case OpenSearchPPLParser.DESC:
                case OpenSearchPPLParser.DATASOURCES:
                case OpenSearchPPLParser.USING:
                case OpenSearchPPLParser.WITH:
                case OpenSearchPPLParser.SIMPLE:
                case OpenSearchPPLParser.STANDARD:
                case OpenSearchPPLParser.COST:
                case OpenSearchPPLParser.EXTENDED:
                case OpenSearchPPLParser.OVERRIDE:
                case OpenSearchPPLParser.AUTO:
                case OpenSearchPPLParser.STR:
                case OpenSearchPPLParser.NUM:
                case OpenSearchPPLParser.SMA:
                case OpenSearchPPLParser.WMA:
                case OpenSearchPPLParser.KEEPEMPTY:
                case OpenSearchPPLParser.CONSECUTIVE:
                case OpenSearchPPLParser.DEDUP_SPLITVALUES:
                case OpenSearchPPLParser.PARTITIONS:
                case OpenSearchPPLParser.ALLNUM:
                case OpenSearchPPLParser.DELIM:
                case OpenSearchPPLParser.BUCKET_NULLABLE:
                case OpenSearchPPLParser.CENTROIDS:
                case OpenSearchPPLParser.ITERATIONS:
                case OpenSearchPPLParser.DISTANCE_TYPE:
                case OpenSearchPPLParser.NUMBER_OF_TREES:
                case OpenSearchPPLParser.SHINGLE_SIZE:
                case OpenSearchPPLParser.SAMPLE_SIZE:
                case OpenSearchPPLParser.OUTPUT_AFTER:
                case OpenSearchPPLParser.TIME_DECAY:
                case OpenSearchPPLParser.ANOMALY_RATE:
                case OpenSearchPPLParser.CATEGORY_FIELD:
                case OpenSearchPPLParser.TIME_FIELD:
                case OpenSearchPPLParser.TIME_ZONE:
                case OpenSearchPPLParser.TRAINING_DATA_SIZE:
                case OpenSearchPPLParser.ANOMALY_SCORE_THRESHOLD:
                case OpenSearchPPLParser.APPEND:
                case OpenSearchPPLParser.COUNTFIELD:
                case OpenSearchPPLParser.SHOWCOUNT:
                case OpenSearchPPLParser.INPUT:
                case OpenSearchPPLParser.OUTPUT:
                case OpenSearchPPLParser.PATH:
                case OpenSearchPPLParser.CASE:
                case OpenSearchPPLParser.ELSE:
                case OpenSearchPPLParser.IN:
                case OpenSearchPPLParser.EXISTS:
                case OpenSearchPPLParser.GEOIP:
                case OpenSearchPPLParser.REGEXP:
                case OpenSearchPPLParser.REGEX_MATCH:
                case OpenSearchPPLParser.CONVERT_TZ:
                case OpenSearchPPLParser.DATETIME:
                case OpenSearchPPLParser.DAY:
                case OpenSearchPPLParser.DAY_HOUR:
                case OpenSearchPPLParser.DAY_MICROSECOND:
                case OpenSearchPPLParser.DAY_MINUTE:
                case OpenSearchPPLParser.DAY_OF_YEAR:
                case OpenSearchPPLParser.DAY_SECOND:
                case OpenSearchPPLParser.HOUR:
                case OpenSearchPPLParser.HOUR_MICROSECOND:
                case OpenSearchPPLParser.HOUR_MINUTE:
                case OpenSearchPPLParser.HOUR_OF_DAY:
                case OpenSearchPPLParser.HOUR_SECOND:
                case OpenSearchPPLParser.INTERVAL:
                case OpenSearchPPLParser.MICROSECOND:
                case OpenSearchPPLParser.MILLISECOND:
                case OpenSearchPPLParser.MINUTE:
                case OpenSearchPPLParser.MINUTE_MICROSECOND:
                case OpenSearchPPLParser.MINUTE_OF_DAY:
                case OpenSearchPPLParser.MINUTE_OF_HOUR:
                case OpenSearchPPLParser.MINUTE_SECOND:
                case OpenSearchPPLParser.MONTH:
                case OpenSearchPPLParser.MONTH_OF_YEAR:
                case OpenSearchPPLParser.QUARTER:
                case OpenSearchPPLParser.SECOND:
                case OpenSearchPPLParser.SECOND_MICROSECOND:
                case OpenSearchPPLParser.SECOND_OF_MINUTE:
                case OpenSearchPPLParser.WEEK:
                case OpenSearchPPLParser.WEEK_OF_YEAR:
                case OpenSearchPPLParser.YEAR:
                case OpenSearchPPLParser.YEAR_MONTH:
                case OpenSearchPPLParser.LOOKUP:
                case OpenSearchPPLParser.IP:
                case OpenSearchPPLParser.DOT:
                case OpenSearchPPLParser.PLUS:
                case OpenSearchPPLParser.MINUS:
                case OpenSearchPPLParser.BACKTICK:
                case OpenSearchPPLParser.ARROW:
                case OpenSearchPPLParser.AVG:
                case OpenSearchPPLParser.COUNT:
                case OpenSearchPPLParser.DISTINCT_COUNT:
                case OpenSearchPPLParser.DISTINCT_COUNT_APPROX:
                case OpenSearchPPLParser.ESTDC:
                case OpenSearchPPLParser.ESTDC_ERROR:
                case OpenSearchPPLParser.MAX:
                case OpenSearchPPLParser.MEAN:
                case OpenSearchPPLParser.MEDIAN:
                case OpenSearchPPLParser.MIN:
                case OpenSearchPPLParser.MODE:
                case OpenSearchPPLParser.RANGE:
                case OpenSearchPPLParser.STDEV:
                case OpenSearchPPLParser.STDEVP:
                case OpenSearchPPLParser.SUM:
                case OpenSearchPPLParser.SUMSQ:
                case OpenSearchPPLParser.VAR_SAMP:
                case OpenSearchPPLParser.VAR_POP:
                case OpenSearchPPLParser.STDDEV_SAMP:
                case OpenSearchPPLParser.STDDEV_POP:
                case OpenSearchPPLParser.PERCENTILE:
                case OpenSearchPPLParser.PERCENTILE_APPROX:
                case OpenSearchPPLParser.EARLIEST:
                case OpenSearchPPLParser.LATEST:
                case OpenSearchPPLParser.TAKE:
                case OpenSearchPPLParser.LIST:
                case OpenSearchPPLParser.VALUES:
                case OpenSearchPPLParser.PER_DAY:
                case OpenSearchPPLParser.PER_HOUR:
                case OpenSearchPPLParser.PER_MINUTE:
                case OpenSearchPPLParser.PER_SECOND:
                case OpenSearchPPLParser.RATE:
                case OpenSearchPPLParser.SPARKLINE:
                case OpenSearchPPLParser.C:
                case OpenSearchPPLParser.DC:
                case OpenSearchPPLParser.ROW_NUMBER:
                case OpenSearchPPLParser.RANK:
                case OpenSearchPPLParser.DENSE_RANK:
                case OpenSearchPPLParser.PERCENT_RANK:
                case OpenSearchPPLParser.CUME_DIST:
                case OpenSearchPPLParser.FIRST:
                case OpenSearchPPLParser.LAST:
                case OpenSearchPPLParser.NTH:
                case OpenSearchPPLParser.NTILE:
                case OpenSearchPPLParser.PLUS_FUCTION:
                case OpenSearchPPLParser.MINUS_FUCTION:
                case OpenSearchPPLParser.STAR_FUNCTION:
                case OpenSearchPPLParser.DIVIDE_FUNCTION:
                case OpenSearchPPLParser.ABS:
                case OpenSearchPPLParser.CBRT:
                case OpenSearchPPLParser.CEIL:
                case OpenSearchPPLParser.CEILING:
                case OpenSearchPPLParser.CONV:
                case OpenSearchPPLParser.CRC32:
                case OpenSearchPPLParser.E:
                case OpenSearchPPLParser.EXP:
                case OpenSearchPPLParser.EXPM1:
                case OpenSearchPPLParser.FLOOR:
                case OpenSearchPPLParser.LN:
                case OpenSearchPPLParser.LOG:
                case OpenSearchPPLParser.LOG_WITH_BASE:
                case OpenSearchPPLParser.MOD:
                case OpenSearchPPLParser.MODULUS:
                case OpenSearchPPLParser.PI:
                case OpenSearchPPLParser.POSITION:
                case OpenSearchPPLParser.POW:
                case OpenSearchPPLParser.POWER:
                case OpenSearchPPLParser.RAND:
                case OpenSearchPPLParser.ROUND:
                case OpenSearchPPLParser.SIGN:
                case OpenSearchPPLParser.SQRT:
                case OpenSearchPPLParser.TRUNCATE:
                case OpenSearchPPLParser.RINT:
                case OpenSearchPPLParser.SIGNUM:
                case OpenSearchPPLParser.ACOS:
                case OpenSearchPPLParser.ASIN:
                case OpenSearchPPLParser.ATAN:
                case OpenSearchPPLParser.ATAN2:
                case OpenSearchPPLParser.COS:
                case OpenSearchPPLParser.COSH:
                case OpenSearchPPLParser.COT:
                case OpenSearchPPLParser.DEGREES:
                case OpenSearchPPLParser.RADIANS:
                case OpenSearchPPLParser.SIN:
                case OpenSearchPPLParser.SINH:
                case OpenSearchPPLParser.TAN:
                case OpenSearchPPLParser.MD5:
                case OpenSearchPPLParser.SHA1:
                case OpenSearchPPLParser.SHA2:
                case OpenSearchPPLParser.ADDDATE:
                case OpenSearchPPLParser.ADDTIME:
                case OpenSearchPPLParser.CURDATE:
                case OpenSearchPPLParser.CURRENT_DATE:
                case OpenSearchPPLParser.CURRENT_TIME:
                case OpenSearchPPLParser.CURRENT_TIMESTAMP:
                case OpenSearchPPLParser.CURTIME:
                case OpenSearchPPLParser.DATE:
                case OpenSearchPPLParser.DATEDIFF:
                case OpenSearchPPLParser.DATE_ADD:
                case OpenSearchPPLParser.DATE_FORMAT:
                case OpenSearchPPLParser.DATE_SUB:
                case OpenSearchPPLParser.DAYNAME:
                case OpenSearchPPLParser.DAYOFMONTH:
                case OpenSearchPPLParser.DAYOFWEEK:
                case OpenSearchPPLParser.DAYOFYEAR:
                case OpenSearchPPLParser.DAY_OF_MONTH:
                case OpenSearchPPLParser.DAY_OF_WEEK:
                case OpenSearchPPLParser.EXTRACT:
                case OpenSearchPPLParser.FROM_DAYS:
                case OpenSearchPPLParser.FROM_UNIXTIME:
                case OpenSearchPPLParser.GET_FORMAT:
                case OpenSearchPPLParser.LAST_DAY:
                case OpenSearchPPLParser.LOCALTIME:
                case OpenSearchPPLParser.LOCALTIMESTAMP:
                case OpenSearchPPLParser.MAKEDATE:
                case OpenSearchPPLParser.MAKETIME:
                case OpenSearchPPLParser.MONTHNAME:
                case OpenSearchPPLParser.NOW:
                case OpenSearchPPLParser.PERIOD_ADD:
                case OpenSearchPPLParser.PERIOD_DIFF:
                case OpenSearchPPLParser.SEC_TO_TIME:
                case OpenSearchPPLParser.STR_TO_DATE:
                case OpenSearchPPLParser.SUBDATE:
                case OpenSearchPPLParser.SUBTIME:
                case OpenSearchPPLParser.SYSDATE:
                case OpenSearchPPLParser.TIME:
                case OpenSearchPPLParser.TIMEDIFF:
                case OpenSearchPPLParser.TIMESTAMP:
                case OpenSearchPPLParser.TIME_FORMAT:
                case OpenSearchPPLParser.TIME_TO_SEC:
                case OpenSearchPPLParser.TO_DAYS:
                case OpenSearchPPLParser.TO_SECONDS:
                case OpenSearchPPLParser.UNIX_TIMESTAMP:
                case OpenSearchPPLParser.UTC_DATE:
                case OpenSearchPPLParser.UTC_TIME:
                case OpenSearchPPLParser.UTC_TIMESTAMP:
                case OpenSearchPPLParser.WEEKDAY:
                case OpenSearchPPLParser.YEARWEEK:
                case OpenSearchPPLParser.STRFTIME:
                case OpenSearchPPLParser.SUBSTR:
                case OpenSearchPPLParser.SUBSTRING:
                case OpenSearchPPLParser.LTRIM:
                case OpenSearchPPLParser.RTRIM:
                case OpenSearchPPLParser.TRIM:
                case OpenSearchPPLParser.LOWER:
                case OpenSearchPPLParser.UPPER:
                case OpenSearchPPLParser.CONCAT:
                case OpenSearchPPLParser.CONCAT_WS:
                case OpenSearchPPLParser.LENGTH:
                case OpenSearchPPLParser.STRCMP:
                case OpenSearchPPLParser.RIGHT:
                case OpenSearchPPLParser.LEFT:
                case OpenSearchPPLParser.ASCII:
                case OpenSearchPPLParser.LOCATE:
                case OpenSearchPPLParser.REPLACE:
                case OpenSearchPPLParser.REVERSE:
                case OpenSearchPPLParser.CAST:
                case OpenSearchPPLParser.LIKE:
                case OpenSearchPPLParser.ISNULL:
                case OpenSearchPPLParser.ISNOTNULL:
                case OpenSearchPPLParser.CIDRMATCH:
                case OpenSearchPPLParser.BETWEEN:
                case OpenSearchPPLParser.ISPRESENT:
                case OpenSearchPPLParser.ISEMPTY:
                case OpenSearchPPLParser.ISBLANK:
                case OpenSearchPPLParser.ARRAY:
                case OpenSearchPPLParser.ARRAY_LENGTH:
                case OpenSearchPPLParser.MVJOIN:
                case OpenSearchPPLParser.FORALL:
                case OpenSearchPPLParser.FILTER:
                case OpenSearchPPLParser.TRANSFORM:
                case OpenSearchPPLParser.REDUCE:
                case OpenSearchPPLParser.JSON_VALID:
                case OpenSearchPPLParser.JSON:
                case OpenSearchPPLParser.JSON_OBJECT:
                case OpenSearchPPLParser.JSON_ARRAY:
                case OpenSearchPPLParser.JSON_ARRAY_LENGTH:
                case OpenSearchPPLParser.JSON_EXTRACT:
                case OpenSearchPPLParser.JSON_KEYS:
                case OpenSearchPPLParser.JSON_SET:
                case OpenSearchPPLParser.JSON_DELETE:
                case OpenSearchPPLParser.JSON_APPEND:
                case OpenSearchPPLParser.JSON_EXTEND:
                case OpenSearchPPLParser.IFNULL:
                case OpenSearchPPLParser.NULLIF:
                case OpenSearchPPLParser.IF:
                case OpenSearchPPLParser.TYPEOF:
                case OpenSearchPPLParser.COALESCE:
                case OpenSearchPPLParser.MATCH:
                case OpenSearchPPLParser.MATCH_PHRASE:
                case OpenSearchPPLParser.MATCH_PHRASE_PREFIX:
                case OpenSearchPPLParser.MATCH_BOOL_PREFIX:
                case OpenSearchPPLParser.SIMPLE_QUERY_STRING:
                case OpenSearchPPLParser.MULTI_MATCH:
                case OpenSearchPPLParser.QUERY_STRING:
                case OpenSearchPPLParser.ALLOW_LEADING_WILDCARD:
                case OpenSearchPPLParser.ANALYZE_WILDCARD:
                case OpenSearchPPLParser.ANALYZER:
                case OpenSearchPPLParser.AUTO_GENERATE_SYNONYMS_PHRASE_QUERY:
                case OpenSearchPPLParser.BOOST:
                case OpenSearchPPLParser.CUTOFF_FREQUENCY:
                case OpenSearchPPLParser.DEFAULT_FIELD:
                case OpenSearchPPLParser.DEFAULT_OPERATOR:
                case OpenSearchPPLParser.ENABLE_POSITION_INCREMENTS:
                case OpenSearchPPLParser.ESCAPE:
                case OpenSearchPPLParser.FLAGS:
                case OpenSearchPPLParser.FUZZY_MAX_EXPANSIONS:
                case OpenSearchPPLParser.FUZZY_PREFIX_LENGTH:
                case OpenSearchPPLParser.FUZZY_TRANSPOSITIONS:
                case OpenSearchPPLParser.FUZZY_REWRITE:
                case OpenSearchPPLParser.FUZZINESS:
                case OpenSearchPPLParser.LENIENT:
                case OpenSearchPPLParser.LOW_FREQ_OPERATOR:
                case OpenSearchPPLParser.MAX_DETERMINIZED_STATES:
                case OpenSearchPPLParser.MAX_EXPANSIONS:
                case OpenSearchPPLParser.MINIMUM_SHOULD_MATCH:
                case OpenSearchPPLParser.OPERATOR:
                case OpenSearchPPLParser.PHRASE_SLOP:
                case OpenSearchPPLParser.PREFIX_LENGTH:
                case OpenSearchPPLParser.QUOTE_ANALYZER:
                case OpenSearchPPLParser.QUOTE_FIELD_SUFFIX:
                case OpenSearchPPLParser.REWRITE:
                case OpenSearchPPLParser.SLOP:
                case OpenSearchPPLParser.TIE_BREAKER:
                case OpenSearchPPLParser.TYPE:
                case OpenSearchPPLParser.ZERO_TERMS_QUERY:
                case OpenSearchPPLParser.SPAN:
                case OpenSearchPPLParser.MS:
                case OpenSearchPPLParser.S:
                case OpenSearchPPLParser.M:
                case OpenSearchPPLParser.H:
                case OpenSearchPPLParser.W:
                case OpenSearchPPLParser.Q:
                case OpenSearchPPLParser.Y:
                case OpenSearchPPLParser.SEC:
                case OpenSearchPPLParser.SECS:
                case OpenSearchPPLParser.SECONDS:
                case OpenSearchPPLParser.MINS:
                case OpenSearchPPLParser.MINUTES:
                case OpenSearchPPLParser.HR:
                case OpenSearchPPLParser.HRS:
                case OpenSearchPPLParser.HOURS:
                case OpenSearchPPLParser.DAYS:
                case OpenSearchPPLParser.MON:
                case OpenSearchPPLParser.MONTHS:
                case OpenSearchPPLParser.US:
                case OpenSearchPPLParser.CS:
                case OpenSearchPPLParser.DS:
                case OpenSearchPPLParser.PERCENTILE_SHORTCUT:
                case OpenSearchPPLParser.ID:
                case OpenSearchPPLParser.BQUOTA_STRING:
                    {
                    this.state = 707;
                    this.ident();
                    }
                    break;
                default:
                    throw new antlr.NoViableAltException(this);
                }
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public spanLiteral(): SpanLiteralContext {
        let localContext = new SpanLiteralContext(this.context, this.state);
        this.enterRule(localContext, 78, OpenSearchPPLParser.RULE_spanLiteral);
        try {
            this.state = 716;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case OpenSearchPPLParser.PLUS:
            case OpenSearchPPLParser.MINUS:
            case OpenSearchPPLParser.INTEGER_LITERAL:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 712;
                this.integerLiteral();
                this.state = 713;
                this.timespanUnit();
                }
                break;
            case OpenSearchPPLParser.DQUOTA_STRING:
            case OpenSearchPPLParser.SQUOTA_STRING:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 715;
                this.stringLiteral();
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public evalCommand(): EvalCommandContext {
        let localContext = new EvalCommandContext(this.context, this.state);
        this.enterRule(localContext, 80, OpenSearchPPLParser.RULE_evalCommand);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 718;
            this.match(OpenSearchPPLParser.EVAL);
            this.state = 719;
            this.evalClause();
            this.state = 724;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 168) {
                {
                {
                this.state = 720;
                this.match(OpenSearchPPLParser.COMMA);
                this.state = 721;
                this.evalClause();
                }
                }
                this.state = 726;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public headCommand(): HeadCommandContext {
        let localContext = new HeadCommandContext(this.context, this.state);
        this.enterRule(localContext, 82, OpenSearchPPLParser.RULE_headCommand);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 727;
            this.match(OpenSearchPPLParser.HEAD);
            this.state = 729;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 177 || _la === 178 || _la === 457) {
                {
                this.state = 728;
                localContext._number_ = this.integerLiteral();
                }
            }

            this.state = 733;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 6) {
                {
                this.state = 731;
                this.match(OpenSearchPPLParser.FROM);
                this.state = 732;
                localContext._from_ = this.integerLiteral();
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public binCommand(): BinCommandContext {
        let localContext = new BinCommandContext(this.context, this.state);
        this.enterRule(localContext, 84, OpenSearchPPLParser.RULE_binCommand);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 735;
            this.match(OpenSearchPPLParser.BIN);
            this.state = 736;
            this.fieldExpression();
            this.state = 740;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (((((_la - 427)) & ~0x1F) === 0 && ((1 << (_la - 427)) & 63) !== 0)) {
                {
                {
                this.state = 737;
                this.binOption();
                }
                }
                this.state = 742;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            this.state = 745;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 61) {
                {
                this.state = 743;
                this.match(OpenSearchPPLParser.AS);
                this.state = 744;
                localContext._alias = this.qualifiedName();
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public binOption(): BinOptionContext {
        let localContext = new BinOptionContext(this.context, this.state);
        this.enterRule(localContext, 86, OpenSearchPPLParser.RULE_binOption);
        let _la: number;
        try {
            this.state = 768;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case OpenSearchPPLParser.SPAN:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 747;
                this.match(OpenSearchPPLParser.SPAN);
                this.state = 748;
                this.match(OpenSearchPPLParser.EQUAL);
                this.state = 749;
                localContext._span = this.spanValue();
                }
                break;
            case OpenSearchPPLParser.BINS:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 750;
                this.match(OpenSearchPPLParser.BINS);
                this.state = 751;
                this.match(OpenSearchPPLParser.EQUAL);
                this.state = 752;
                localContext._bins = this.integerLiteral();
                }
                break;
            case OpenSearchPPLParser.MINSPAN:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 753;
                this.match(OpenSearchPPLParser.MINSPAN);
                this.state = 754;
                this.match(OpenSearchPPLParser.EQUAL);
                this.state = 755;
                localContext._minspan = this.literalValue();
                this.state = 757;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 67 || ((((_la - 127)) & ~0x1F) === 0 && ((1 << (_la - 127)) & 174612545) !== 0) || ((((_la - 433)) & ~0x1F) === 0 && ((1 << (_la - 433)) & 2097151) !== 0)) {
                    {
                    this.state = 756;
                    localContext._minspanUnit = this.timespanUnit();
                    }
                }

                }
                break;
            case OpenSearchPPLParser.ALIGNTIME:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 759;
                this.match(OpenSearchPPLParser.ALIGNTIME);
                this.state = 760;
                this.match(OpenSearchPPLParser.EQUAL);
                this.state = 761;
                localContext._aligntime = this.aligntimeValue();
                }
                break;
            case OpenSearchPPLParser.START:
                this.enterOuterAlt(localContext, 5);
                {
                this.state = 762;
                this.match(OpenSearchPPLParser.START);
                this.state = 763;
                this.match(OpenSearchPPLParser.EQUAL);
                this.state = 764;
                localContext._start = this.numericLiteral();
                }
                break;
            case OpenSearchPPLParser.END:
                this.enterOuterAlt(localContext, 6);
                {
                this.state = 765;
                this.match(OpenSearchPPLParser.END);
                this.state = 766;
                this.match(OpenSearchPPLParser.EQUAL);
                this.state = 767;
                localContext._end = this.numericLiteral();
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public aligntimeValue(): AligntimeValueContext {
        let localContext = new AligntimeValueContext(this.context, this.state);
        this.enterRule(localContext, 88, OpenSearchPPLParser.RULE_aligntimeValue);
        try {
            this.state = 773;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case OpenSearchPPLParser.EARLIEST:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 770;
                this.match(OpenSearchPPLParser.EARLIEST);
                }
                break;
            case OpenSearchPPLParser.LATEST:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 771;
                this.match(OpenSearchPPLParser.LATEST);
                }
                break;
            case OpenSearchPPLParser.TRUE:
            case OpenSearchPPLParser.FALSE:
            case OpenSearchPPLParser.INTERVAL:
            case OpenSearchPPLParser.PLUS:
            case OpenSearchPPLParser.MINUS:
            case OpenSearchPPLParser.DATE:
            case OpenSearchPPLParser.TIME:
            case OpenSearchPPLParser.TIMESTAMP:
            case OpenSearchPPLParser.INTEGER_LITERAL:
            case OpenSearchPPLParser.DECIMAL_LITERAL:
            case OpenSearchPPLParser.FLOAT_LITERAL:
            case OpenSearchPPLParser.DOUBLE_LITERAL:
            case OpenSearchPPLParser.DQUOTA_STRING:
            case OpenSearchPPLParser.SQUOTA_STRING:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 772;
                this.literalValue();
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public spanValue(): SpanValueContext {
        let localContext = new SpanValueContext(this.context, this.state);
        this.enterRule(localContext, 90, OpenSearchPPLParser.RULE_spanValue);
        let _la: number;
        try {
            this.state = 784;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 51, this.context) ) {
            case 1:
                localContext = new NumericSpanValueContext(localContext);
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 775;
                this.literalValue();
                this.state = 777;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 67 || ((((_la - 127)) & ~0x1F) === 0 && ((1 << (_la - 127)) & 174612545) !== 0) || ((((_la - 433)) & ~0x1F) === 0 && ((1 << (_la - 433)) & 2097151) !== 0)) {
                    {
                    this.state = 776;
                    this.timespanUnit();
                    }
                }

                }
                break;
            case 2:
                localContext = new LogBasedSpanValueContext(localContext);
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 779;
                this.logSpanValue();
                }
                break;
            case 3:
                localContext = new ExtendedTimeSpanValueContext(localContext);
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 780;
                this.ident();
                this.state = 781;
                this.timespanUnit();
                }
                break;
            case 4:
                localContext = new IdentifierSpanValueContext(localContext);
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 783;
                this.ident();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public logSpanValue(): LogSpanValueContext {
        let localContext = new LogSpanValueContext(this.context, this.state);
        this.enterRule(localContext, 92, OpenSearchPPLParser.RULE_logSpanValue);
        try {
            localContext = new LogWithBaseSpanContext(localContext);
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 786;
            this.match(OpenSearchPPLParser.LOG_WITH_BASE);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public topCommand(): TopCommandContext {
        let localContext = new TopCommandContext(this.context, this.state);
        this.enterRule(localContext, 94, OpenSearchPPLParser.RULE_topCommand);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 788;
            this.match(OpenSearchPPLParser.TOP);
            this.state = 790;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 52, this.context) ) {
            case 1:
                {
                this.state = 789;
                localContext._number_ = this.integerLiteral();
                }
                break;
            }
            this.state = 795;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 53, this.context) ) {
            case 1:
                {
                this.state = 792;
                this.match(OpenSearchPPLParser.COUNTFIELD);
                this.state = 793;
                this.match(OpenSearchPPLParser.EQUAL);
                this.state = 794;
                localContext._countfield = this.stringLiteral();
                }
                break;
            }
            this.state = 800;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 54, this.context) ) {
            case 1:
                {
                this.state = 797;
                this.match(OpenSearchPPLParser.SHOWCOUNT);
                this.state = 798;
                this.match(OpenSearchPPLParser.EQUAL);
                this.state = 799;
                localContext._showcount = this.booleanLiteral();
                }
                break;
            }
            this.state = 802;
            this.fieldList();
            this.state = 804;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 62) {
                {
                this.state = 803;
                this.byClause();
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public rareCommand(): RareCommandContext {
        let localContext = new RareCommandContext(this.context, this.state);
        this.enterRule(localContext, 96, OpenSearchPPLParser.RULE_rareCommand);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 806;
            this.match(OpenSearchPPLParser.RARE);
            this.state = 808;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 56, this.context) ) {
            case 1:
                {
                this.state = 807;
                localContext._number_ = this.integerLiteral();
                }
                break;
            }
            this.state = 813;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 57, this.context) ) {
            case 1:
                {
                this.state = 810;
                this.match(OpenSearchPPLParser.COUNTFIELD);
                this.state = 811;
                this.match(OpenSearchPPLParser.EQUAL);
                this.state = 812;
                localContext._countfield = this.stringLiteral();
                }
                break;
            }
            this.state = 818;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 58, this.context) ) {
            case 1:
                {
                this.state = 815;
                this.match(OpenSearchPPLParser.SHOWCOUNT);
                this.state = 816;
                this.match(OpenSearchPPLParser.EQUAL);
                this.state = 817;
                localContext._showcount = this.booleanLiteral();
                }
                break;
            }
            this.state = 820;
            this.fieldList();
            this.state = 822;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 62) {
                {
                this.state = 821;
                this.byClause();
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public grokCommand(): GrokCommandContext {
        let localContext = new GrokCommandContext(this.context, this.state);
        this.enterRule(localContext, 98, OpenSearchPPLParser.RULE_grokCommand);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 824;
            this.match(OpenSearchPPLParser.GROK);
            {
            this.state = 825;
            localContext._source_field = this.expression(0);
            }
            {
            this.state = 826;
            localContext._pattern = this.stringLiteral();
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public parseCommand(): ParseCommandContext {
        let localContext = new ParseCommandContext(this.context, this.state);
        this.enterRule(localContext, 100, OpenSearchPPLParser.RULE_parseCommand);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 828;
            this.match(OpenSearchPPLParser.PARSE);
            {
            this.state = 829;
            localContext._source_field = this.expression(0);
            }
            {
            this.state = 830;
            localContext._pattern = this.stringLiteral();
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public spathCommand(): SpathCommandContext {
        let localContext = new SpathCommandContext(this.context, this.state);
        this.enterRule(localContext, 102, OpenSearchPPLParser.RULE_spathCommand);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 832;
            this.match(OpenSearchPPLParser.SPATH);
            this.state = 836;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while ((((_la) & ~0x1F) === 0 && ((1 << _la) & 4257218044) !== 0) || ((((_la - 32)) & ~0x1F) === 0 && ((1 << (_la - 32)) & 2682862783) !== 0) || ((((_la - 64)) & ~0x1F) === 0 && ((1 << (_la - 64)) & 4294959103) !== 0) || ((((_la - 96)) & ~0x1F) === 0 && ((1 << (_la - 96)) & 4162840575) !== 0) || ((((_la - 128)) & ~0x1F) === 0 && ((1 << (_la - 128)) & 805306367) !== 0) || ((((_la - 166)) & ~0x1F) === 0 && ((1 << (_la - 166)) & 2348816393) !== 0) || ((((_la - 198)) & ~0x1F) === 0 && ((1 << (_la - 198)) & 4294443007) !== 0) || ((((_la - 230)) & ~0x1F) === 0 && ((1 << (_la - 230)) & 4294967295) !== 0) || ((((_la - 262)) & ~0x1F) === 0 && ((1 << (_la - 262)) & 4294967295) !== 0) || ((((_la - 294)) & ~0x1F) === 0 && ((1 << (_la - 294)) & 4294967295) !== 0) || ((((_la - 328)) & ~0x1F) === 0 && ((1 << (_la - 328)) & 4294901759) !== 0) || ((((_la - 360)) & ~0x1F) === 0 && ((1 << (_la - 360)) & 4294967295) !== 0) || ((((_la - 392)) & ~0x1F) === 0 && ((1 << (_la - 392)) & 4294967295) !== 0) || ((((_la - 424)) & ~0x1F) === 0 && ((1 << (_la - 424)) & 4294966799) !== 0) || _la === 464) {
                {
                {
                this.state = 833;
                this.spathParameter();
                }
                }
                this.state = 838;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public spathParameter(): SpathParameterContext {
        let localContext = new SpathParameterContext(this.context, this.state);
        this.enterRule(localContext, 104, OpenSearchPPLParser.RULE_spathParameter);
        try {
            this.state = 850;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 62, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                {
                this.state = 839;
                this.match(OpenSearchPPLParser.INPUT);
                this.state = 840;
                this.match(OpenSearchPPLParser.EQUAL);
                this.state = 841;
                localContext._input = this.expression(0);
                }
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                {
                this.state = 842;
                this.match(OpenSearchPPLParser.OUTPUT);
                this.state = 843;
                this.match(OpenSearchPPLParser.EQUAL);
                this.state = 844;
                localContext._output = this.expression(0);
                }
                }
                break;
            case 3:
                this.enterOuterAlt(localContext, 3);
                {
                {
                this.state = 847;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 61, this.context) ) {
                case 1:
                    {
                    this.state = 845;
                    this.match(OpenSearchPPLParser.PATH);
                    this.state = 846;
                    this.match(OpenSearchPPLParser.EQUAL);
                    }
                    break;
                }
                this.state = 849;
                localContext._path = this.indexablePath();
                }
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public indexablePath(): IndexablePathContext {
        let localContext = new IndexablePathContext(this.context, this.state);
        this.enterRule(localContext, 106, OpenSearchPPLParser.RULE_indexablePath);
        try {
            let alternative: number;
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 852;
            this.pathElement();
            this.state = 857;
            this.errorHandler.sync(this);
            alternative = this.interpreter.adaptivePredict(this.tokenStream, 63, this.context);
            while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER) {
                if (alternative === 1) {
                    {
                    {
                    this.state = 853;
                    this.match(OpenSearchPPLParser.DOT);
                    this.state = 854;
                    this.pathElement();
                    }
                    }
                }
                this.state = 859;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 63, this.context);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public pathElement(): PathElementContext {
        let localContext = new PathElementContext(this.context, this.state);
        this.enterRule(localContext, 108, OpenSearchPPLParser.RULE_pathElement);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 860;
            this.ident();
            this.state = 862;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 188) {
                {
                this.state = 861;
                this.pathArrayAccess();
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public pathArrayAccess(): PathArrayAccessContext {
        let localContext = new PathArrayAccessContext(this.context, this.state);
        this.enterRule(localContext, 110, OpenSearchPPLParser.RULE_pathArrayAccess);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 864;
            this.match(OpenSearchPPLParser.LT_CURLY);
            this.state = 866;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 457) {
                {
                this.state = 865;
                this.match(OpenSearchPPLParser.INTEGER_LITERAL);
                }
            }

            this.state = 868;
            this.match(OpenSearchPPLParser.RT_CURLY);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public regexCommand(): RegexCommandContext {
        let localContext = new RegexCommandContext(this.context, this.state);
        this.enterRule(localContext, 112, OpenSearchPPLParser.RULE_regexCommand);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 870;
            this.match(OpenSearchPPLParser.REGEX);
            this.state = 871;
            this.regexExpr();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public regexExpr(): RegexExprContext {
        let localContext = new RegexExprContext(this.context, this.state);
        this.enterRule(localContext, 114, OpenSearchPPLParser.RULE_regexExpr);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 873;
            localContext._field = this.qualifiedName();
            this.state = 874;
            localContext._operator = this.tokenStream.LT(1);
            _la = this.tokenStream.LA(1);
            if(!(_la === 170 || _la === 176)) {
                localContext._operator = this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            this.state = 875;
            localContext._pattern = this.stringLiteral();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public rexCommand(): RexCommandContext {
        let localContext = new RexCommandContext(this.context, this.state);
        this.enterRule(localContext, 116, OpenSearchPPLParser.RULE_rexCommand);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 877;
            this.match(OpenSearchPPLParser.REX);
            this.state = 878;
            this.rexExpr();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public rexExpr(): RexExprContext {
        let localContext = new RexExprContext(this.context, this.state);
        this.enterRule(localContext, 118, OpenSearchPPLParser.RULE_rexExpr);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 880;
            this.match(OpenSearchPPLParser.FIELD);
            this.state = 881;
            this.match(OpenSearchPPLParser.EQUAL);
            this.state = 882;
            localContext._field = this.qualifiedName();
            this.state = 886;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 46 || _la === 47 || _la === 207) {
                {
                {
                this.state = 883;
                this.rexOption();
                }
                }
                this.state = 888;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            this.state = 889;
            localContext._pattern = this.stringLiteral();
            this.state = 893;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 46 || _la === 47 || _la === 207) {
                {
                {
                this.state = 890;
                this.rexOption();
                }
                }
                this.state = 895;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public rexOption(): RexOptionContext {
        let localContext = new RexOptionContext(this.context, this.state);
        this.enterRule(localContext, 120, OpenSearchPPLParser.RULE_rexOption);
        let _la: number;
        try {
            this.state = 905;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case OpenSearchPPLParser.MAX_MATCH:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 896;
                this.match(OpenSearchPPLParser.MAX_MATCH);
                this.state = 897;
                this.match(OpenSearchPPLParser.EQUAL);
                this.state = 898;
                localContext._maxMatch = this.integerLiteral();
                }
                break;
            case OpenSearchPPLParser.MODE:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 899;
                this.match(OpenSearchPPLParser.MODE);
                this.state = 900;
                this.match(OpenSearchPPLParser.EQUAL);
                this.state = 901;
                _la = this.tokenStream.LA(1);
                if(!(_la === 25 || _la === 305)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                }
                break;
            case OpenSearchPPLParser.OFFSET_FIELD:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 902;
                this.match(OpenSearchPPLParser.OFFSET_FIELD);
                this.state = 903;
                this.match(OpenSearchPPLParser.EQUAL);
                this.state = 904;
                localContext._offsetField = this.qualifiedName();
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public patternsMethod(): PatternsMethodContext {
        let localContext = new PatternsMethodContext(this.context, this.state);
        this.enterRule(localContext, 122, OpenSearchPPLParser.RULE_patternsMethod);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 907;
            _la = this.tokenStream.LA(1);
            if(!(_la === 23 || _la === 26)) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public patternsCommand(): PatternsCommandContext {
        let localContext = new PatternsCommandContext(this.context, this.state);
        this.enterRule(localContext, 124, OpenSearchPPLParser.RULE_patternsCommand);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 909;
            this.match(OpenSearchPPLParser.PATTERNS);
            {
            this.state = 910;
            localContext._source_field = this.expression(0);
            }
            this.state = 912;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 62) {
                {
                this.state = 911;
                this.statsByClause();
                }
            }

            this.state = 917;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 44) {
                {
                this.state = 914;
                this.match(OpenSearchPPLParser.METHOD);
                this.state = 915;
                this.match(OpenSearchPPLParser.EQUAL);
                this.state = 916;
                localContext._method = this.patternMethod();
                }
            }

            this.state = 922;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 207) {
                {
                this.state = 919;
                this.match(OpenSearchPPLParser.MODE);
                this.state = 920;
                this.match(OpenSearchPPLParser.EQUAL);
                this.state = 921;
                localContext._pattern_mode = this.patternMode();
                }
            }

            this.state = 927;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 45) {
                {
                this.state = 924;
                this.match(OpenSearchPPLParser.MAX_SAMPLE_COUNT);
                this.state = 925;
                this.match(OpenSearchPPLParser.EQUAL);
                this.state = 926;
                localContext._max_sample_count = this.integerLiteral();
                }
            }

            this.state = 932;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 48) {
                {
                this.state = 929;
                this.match(OpenSearchPPLParser.BUFFER_LIMIT);
                this.state = 930;
                this.match(OpenSearchPPLParser.EQUAL);
                this.state = 931;
                localContext._buffer_limit = this.integerLiteral();
                }
            }

            this.state = 937;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 30) {
                {
                this.state = 934;
                this.match(OpenSearchPPLParser.NEW_FIELD);
                this.state = 935;
                this.match(OpenSearchPPLParser.EQUAL);
                this.state = 936;
                localContext._new_field = this.stringLiteral();
                }
            }

            this.state = 942;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (((((_la - 28)) & ~0x1F) === 0 && ((1 << (_la - 28)) & 49153) !== 0)) {
                {
                {
                this.state = 939;
                this.patternsParameter();
                }
                }
                this.state = 944;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public patternsParameter(): PatternsParameterContext {
        let localContext = new PatternsParameterContext(this.context, this.state);
        this.enterRule(localContext, 126, OpenSearchPPLParser.RULE_patternsParameter);
        try {
            this.state = 954;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case OpenSearchPPLParser.PATTERN:
                this.enterOuterAlt(localContext, 1);
                {
                {
                this.state = 945;
                this.match(OpenSearchPPLParser.PATTERN);
                this.state = 946;
                this.match(OpenSearchPPLParser.EQUAL);
                this.state = 947;
                localContext._pattern = this.stringLiteral();
                }
                }
                break;
            case OpenSearchPPLParser.VARIABLE_COUNT_THRESHOLD:
                this.enterOuterAlt(localContext, 2);
                {
                {
                this.state = 948;
                this.match(OpenSearchPPLParser.VARIABLE_COUNT_THRESHOLD);
                this.state = 949;
                this.match(OpenSearchPPLParser.EQUAL);
                this.state = 950;
                localContext._variable_count_threshold = this.integerLiteral();
                }
                }
                break;
            case OpenSearchPPLParser.FREQUENCY_THRESHOLD_PERCENTAGE:
                this.enterOuterAlt(localContext, 3);
                {
                {
                this.state = 951;
                this.match(OpenSearchPPLParser.FREQUENCY_THRESHOLD_PERCENTAGE);
                this.state = 952;
                this.match(OpenSearchPPLParser.EQUAL);
                this.state = 953;
                localContext._frequency_threshold_percentage = this.decimalLiteral();
                }
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public patternMethod(): PatternMethodContext {
        let localContext = new PatternMethodContext(this.context, this.state);
        this.enterRule(localContext, 128, OpenSearchPPLParser.RULE_patternMethod);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 956;
            _la = this.tokenStream.LA(1);
            if(!(_la === 40 || _la === 41)) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public patternMode(): PatternModeContext {
        let localContext = new PatternModeContext(this.context, this.state);
        this.enterRule(localContext, 130, OpenSearchPPLParser.RULE_patternMode);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 958;
            _la = this.tokenStream.LA(1);
            if(!(_la === 49 || _la === 50)) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public lookupCommand(): LookupCommandContext {
        let localContext = new LookupCommandContext(this.context, this.state);
        this.enterRule(localContext, 132, OpenSearchPPLParser.RULE_lookupCommand);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 960;
            this.match(OpenSearchPPLParser.LOOKUP);
            this.state = 961;
            this.tableSource();
            this.state = 962;
            this.lookupMappingList();
            this.state = 965;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 104 || _la === 355) {
                {
                this.state = 963;
                _la = this.tokenStream.LA(1);
                if(!(_la === 104 || _la === 355)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 964;
                this.outputCandidateList();
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public lookupMappingList(): LookupMappingListContext {
        let localContext = new LookupMappingListContext(this.context, this.state);
        this.enterRule(localContext, 134, OpenSearchPPLParser.RULE_lookupMappingList);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 967;
            this.lookupPair();
            this.state = 972;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 168) {
                {
                {
                this.state = 968;
                this.match(OpenSearchPPLParser.COMMA);
                this.state = 969;
                this.lookupPair();
                }
                }
                this.state = 974;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public outputCandidateList(): OutputCandidateListContext {
        let localContext = new OutputCandidateListContext(this.context, this.state);
        this.enterRule(localContext, 136, OpenSearchPPLParser.RULE_outputCandidateList);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 975;
            this.lookupPair();
            this.state = 980;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 168) {
                {
                {
                this.state = 976;
                this.match(OpenSearchPPLParser.COMMA);
                this.state = 977;
                this.lookupPair();
                }
                }
                this.state = 982;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public lookupPair(): LookupPairContext {
        let localContext = new LookupPairContext(this.context, this.state);
        this.enterRule(localContext, 138, OpenSearchPPLParser.RULE_lookupPair);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 983;
            localContext._inputField = this.fieldExpression();
            this.state = 986;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 61) {
                {
                this.state = 984;
                this.match(OpenSearchPPLParser.AS);
                this.state = 985;
                localContext._outputField = this.fieldExpression();
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public fillnullCommand(): FillnullCommandContext {
        let localContext = new FillnullCommandContext(this.context, this.state);
        this.enterRule(localContext, 140, OpenSearchPPLParser.RULE_fillnullCommand);
        try {
            this.state = 992;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 81, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 988;
                this.match(OpenSearchPPLParser.FILLNULL);
                this.state = 989;
                this.fillNullWith();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 990;
                this.match(OpenSearchPPLParser.FILLNULL);
                this.state = 991;
                this.fillNullUsing();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public fillNullWith(): FillNullWithContext {
        let localContext = new FillNullWithContext(this.context, this.state);
        this.enterRule(localContext, 142, OpenSearchPPLParser.RULE_fillNullWith);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 994;
            this.match(OpenSearchPPLParser.WITH);
            this.state = 995;
            localContext._replacement = this.valueExpression(0);
            this.state = 998;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 114) {
                {
                this.state = 996;
                this.match(OpenSearchPPLParser.IN);
                this.state = 997;
                this.fieldList();
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public fillNullUsing(): FillNullUsingContext {
        let localContext = new FillNullUsingContext(this.context, this.state);
        this.enterRule(localContext, 144, OpenSearchPPLParser.RULE_fillNullUsing);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1000;
            this.match(OpenSearchPPLParser.USING);
            this.state = 1001;
            this.replacementPair();
            this.state = 1006;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 168) {
                {
                {
                this.state = 1002;
                this.match(OpenSearchPPLParser.COMMA);
                this.state = 1003;
                this.replacementPair();
                }
                }
                this.state = 1008;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public replacementPair(): ReplacementPairContext {
        let localContext = new ReplacementPairContext(this.context, this.state);
        this.enterRule(localContext, 146, OpenSearchPPLParser.RULE_replacementPair);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1009;
            this.fieldExpression();
            this.state = 1010;
            this.match(OpenSearchPPLParser.EQUAL);
            this.state = 1011;
            localContext._replacement = this.valueExpression(0);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public trendlineCommand(): TrendlineCommandContext {
        let localContext = new TrendlineCommandContext(this.context, this.state);
        this.enterRule(localContext, 148, OpenSearchPPLParser.RULE_trendlineCommand);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1013;
            this.match(OpenSearchPPLParser.TRENDLINE);
            this.state = 1016;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 15) {
                {
                this.state = 1014;
                this.match(OpenSearchPPLParser.SORT);
                this.state = 1015;
                this.sortField();
                }
            }

            this.state = 1018;
            this.trendlineClause();
            this.state = 1022;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 81 || _la === 82) {
                {
                {
                this.state = 1019;
                this.trendlineClause();
                }
                }
                this.state = 1024;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public trendlineClause(): TrendlineClauseContext {
        let localContext = new TrendlineClauseContext(this.context, this.state);
        this.enterRule(localContext, 150, OpenSearchPPLParser.RULE_trendlineClause);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1025;
            this.trendlineType();
            this.state = 1026;
            this.match(OpenSearchPPLParser.LT_PRTHS);
            this.state = 1027;
            localContext._numberOfDataPoints = this.integerLiteral();
            this.state = 1028;
            this.match(OpenSearchPPLParser.COMMA);
            this.state = 1029;
            localContext._field = this.fieldExpression();
            this.state = 1030;
            this.match(OpenSearchPPLParser.RT_PRTHS);
            this.state = 1033;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 61) {
                {
                this.state = 1031;
                this.match(OpenSearchPPLParser.AS);
                this.state = 1032;
                localContext._alias = this.qualifiedName();
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public trendlineType(): TrendlineTypeContext {
        let localContext = new TrendlineTypeContext(this.context, this.state);
        this.enterRule(localContext, 152, OpenSearchPPLParser.RULE_trendlineType);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1035;
            _la = this.tokenStream.LA(1);
            if(!(_la === 81 || _la === 82)) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public expandCommand(): ExpandCommandContext {
        let localContext = new ExpandCommandContext(this.context, this.state);
        this.enterRule(localContext, 154, OpenSearchPPLParser.RULE_expandCommand);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1037;
            this.match(OpenSearchPPLParser.EXPAND);
            this.state = 1038;
            this.fieldExpression();
            this.state = 1041;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 61) {
                {
                this.state = 1039;
                this.match(OpenSearchPPLParser.AS);
                this.state = 1040;
                localContext._alias = this.qualifiedName();
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public flattenCommand(): FlattenCommandContext {
        let localContext = new FlattenCommandContext(this.context, this.state);
        this.enterRule(localContext, 156, OpenSearchPPLParser.RULE_flattenCommand);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1043;
            this.match(OpenSearchPPLParser.FLATTEN);
            this.state = 1044;
            this.fieldExpression();
            this.state = 1047;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 61) {
                {
                this.state = 1045;
                this.match(OpenSearchPPLParser.AS);
                this.state = 1046;
                localContext._aliases = this.identifierSeq();
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public appendcolCommand(): AppendcolCommandContext {
        let localContext = new AppendcolCommandContext(this.context, this.state);
        this.enterRule(localContext, 158, OpenSearchPPLParser.RULE_appendcolCommand);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1049;
            this.match(OpenSearchPPLParser.APPENDCOL);
            this.state = 1053;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 76) {
                {
                this.state = 1050;
                this.match(OpenSearchPPLParser.OVERRIDE);
                this.state = 1051;
                this.match(OpenSearchPPLParser.EQUAL);
                this.state = 1052;
                localContext._override = this.booleanLiteral();
                }
            }

            this.state = 1055;
            this.match(OpenSearchPPLParser.LT_SQR_PRTHS);
            this.state = 1056;
            this.commands();
            this.state = 1061;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 167) {
                {
                {
                this.state = 1057;
                this.match(OpenSearchPPLParser.PIPE);
                this.state = 1058;
                this.commands();
                }
                }
                this.state = 1063;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            this.state = 1064;
            this.match(OpenSearchPPLParser.RT_SQR_PRTHS);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public appendCommand(): AppendCommandContext {
        let localContext = new AppendCommandContext(this.context, this.state);
        this.enterRule(localContext, 160, OpenSearchPPLParser.RULE_appendCommand);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1066;
            this.match(OpenSearchPPLParser.APPEND);
            this.state = 1067;
            this.match(OpenSearchPPLParser.LT_SQR_PRTHS);
            this.state = 1069;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 91, this.context) ) {
            case 1:
                {
                this.state = 1068;
                this.searchCommand();
                }
                break;
            }
            this.state = 1075;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 167) {
                {
                {
                this.state = 1071;
                this.match(OpenSearchPPLParser.PIPE);
                this.state = 1072;
                this.commands();
                }
                }
                this.state = 1077;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            this.state = 1078;
            this.match(OpenSearchPPLParser.RT_SQR_PRTHS);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public kmeansCommand(): KmeansCommandContext {
        let localContext = new KmeansCommandContext(this.context, this.state);
        this.enterRule(localContext, 162, OpenSearchPPLParser.RULE_kmeansCommand);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1080;
            this.match(OpenSearchPPLParser.KMEANS);
            this.state = 1084;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (((((_la - 90)) & ~0x1F) === 0 && ((1 << (_la - 90)) & 7) !== 0)) {
                {
                {
                this.state = 1081;
                this.kmeansParameter();
                }
                }
                this.state = 1086;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public kmeansParameter(): KmeansParameterContext {
        let localContext = new KmeansParameterContext(this.context, this.state);
        this.enterRule(localContext, 164, OpenSearchPPLParser.RULE_kmeansParameter);
        try {
            this.state = 1096;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case OpenSearchPPLParser.CENTROIDS:
                this.enterOuterAlt(localContext, 1);
                {
                {
                this.state = 1087;
                this.match(OpenSearchPPLParser.CENTROIDS);
                this.state = 1088;
                this.match(OpenSearchPPLParser.EQUAL);
                this.state = 1089;
                localContext._centroids = this.integerLiteral();
                }
                }
                break;
            case OpenSearchPPLParser.ITERATIONS:
                this.enterOuterAlt(localContext, 2);
                {
                {
                this.state = 1090;
                this.match(OpenSearchPPLParser.ITERATIONS);
                this.state = 1091;
                this.match(OpenSearchPPLParser.EQUAL);
                this.state = 1092;
                localContext._iterations = this.integerLiteral();
                }
                }
                break;
            case OpenSearchPPLParser.DISTANCE_TYPE:
                this.enterOuterAlt(localContext, 3);
                {
                {
                this.state = 1093;
                this.match(OpenSearchPPLParser.DISTANCE_TYPE);
                this.state = 1094;
                this.match(OpenSearchPPLParser.EQUAL);
                this.state = 1095;
                localContext._distance_type = this.stringLiteral();
                }
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public adCommand(): AdCommandContext {
        let localContext = new AdCommandContext(this.context, this.state);
        this.enterRule(localContext, 166, OpenSearchPPLParser.RULE_adCommand);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1098;
            this.match(OpenSearchPPLParser.AD);
            this.state = 1102;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (((((_la - 93)) & ~0x1F) === 0 && ((1 << (_la - 93)) & 2047) !== 0) || _la === 297) {
                {
                {
                this.state = 1099;
                this.adParameter();
                }
                }
                this.state = 1104;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public adParameter(): AdParameterContext {
        let localContext = new AdParameterContext(this.context, this.state);
        this.enterRule(localContext, 168, OpenSearchPPLParser.RULE_adParameter);
        try {
            this.state = 1141;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case OpenSearchPPLParser.NUMBER_OF_TREES:
                this.enterOuterAlt(localContext, 1);
                {
                {
                this.state = 1105;
                this.match(OpenSearchPPLParser.NUMBER_OF_TREES);
                this.state = 1106;
                this.match(OpenSearchPPLParser.EQUAL);
                this.state = 1107;
                localContext._number_of_trees = this.integerLiteral();
                }
                }
                break;
            case OpenSearchPPLParser.SHINGLE_SIZE:
                this.enterOuterAlt(localContext, 2);
                {
                {
                this.state = 1108;
                this.match(OpenSearchPPLParser.SHINGLE_SIZE);
                this.state = 1109;
                this.match(OpenSearchPPLParser.EQUAL);
                this.state = 1110;
                localContext._shingle_size = this.integerLiteral();
                }
                }
                break;
            case OpenSearchPPLParser.SAMPLE_SIZE:
                this.enterOuterAlt(localContext, 3);
                {
                {
                this.state = 1111;
                this.match(OpenSearchPPLParser.SAMPLE_SIZE);
                this.state = 1112;
                this.match(OpenSearchPPLParser.EQUAL);
                this.state = 1113;
                localContext._sample_size = this.integerLiteral();
                }
                }
                break;
            case OpenSearchPPLParser.OUTPUT_AFTER:
                this.enterOuterAlt(localContext, 4);
                {
                {
                this.state = 1114;
                this.match(OpenSearchPPLParser.OUTPUT_AFTER);
                this.state = 1115;
                this.match(OpenSearchPPLParser.EQUAL);
                this.state = 1116;
                localContext._output_after = this.integerLiteral();
                }
                }
                break;
            case OpenSearchPPLParser.TIME_DECAY:
                this.enterOuterAlt(localContext, 5);
                {
                {
                this.state = 1117;
                this.match(OpenSearchPPLParser.TIME_DECAY);
                this.state = 1118;
                this.match(OpenSearchPPLParser.EQUAL);
                this.state = 1119;
                localContext._time_decay = this.decimalLiteral();
                }
                }
                break;
            case OpenSearchPPLParser.ANOMALY_RATE:
                this.enterOuterAlt(localContext, 6);
                {
                {
                this.state = 1120;
                this.match(OpenSearchPPLParser.ANOMALY_RATE);
                this.state = 1121;
                this.match(OpenSearchPPLParser.EQUAL);
                this.state = 1122;
                localContext._anomaly_rate = this.decimalLiteral();
                }
                }
                break;
            case OpenSearchPPLParser.CATEGORY_FIELD:
                this.enterOuterAlt(localContext, 7);
                {
                {
                this.state = 1123;
                this.match(OpenSearchPPLParser.CATEGORY_FIELD);
                this.state = 1124;
                this.match(OpenSearchPPLParser.EQUAL);
                this.state = 1125;
                localContext._category_field = this.stringLiteral();
                }
                }
                break;
            case OpenSearchPPLParser.TIME_FIELD:
                this.enterOuterAlt(localContext, 8);
                {
                {
                this.state = 1126;
                this.match(OpenSearchPPLParser.TIME_FIELD);
                this.state = 1127;
                this.match(OpenSearchPPLParser.EQUAL);
                this.state = 1128;
                localContext._time_field = this.stringLiteral();
                }
                }
                break;
            case OpenSearchPPLParser.DATE_FORMAT:
                this.enterOuterAlt(localContext, 9);
                {
                {
                this.state = 1129;
                this.match(OpenSearchPPLParser.DATE_FORMAT);
                this.state = 1130;
                this.match(OpenSearchPPLParser.EQUAL);
                this.state = 1131;
                localContext._date_format = this.stringLiteral();
                }
                }
                break;
            case OpenSearchPPLParser.TIME_ZONE:
                this.enterOuterAlt(localContext, 10);
                {
                {
                this.state = 1132;
                this.match(OpenSearchPPLParser.TIME_ZONE);
                this.state = 1133;
                this.match(OpenSearchPPLParser.EQUAL);
                this.state = 1134;
                localContext._time_zone = this.stringLiteral();
                }
                }
                break;
            case OpenSearchPPLParser.TRAINING_DATA_SIZE:
                this.enterOuterAlt(localContext, 11);
                {
                {
                this.state = 1135;
                this.match(OpenSearchPPLParser.TRAINING_DATA_SIZE);
                this.state = 1136;
                this.match(OpenSearchPPLParser.EQUAL);
                this.state = 1137;
                localContext._training_data_size = this.integerLiteral();
                }
                }
                break;
            case OpenSearchPPLParser.ANOMALY_SCORE_THRESHOLD:
                this.enterOuterAlt(localContext, 12);
                {
                {
                this.state = 1138;
                this.match(OpenSearchPPLParser.ANOMALY_SCORE_THRESHOLD);
                this.state = 1139;
                this.match(OpenSearchPPLParser.EQUAL);
                this.state = 1140;
                localContext._anomaly_score_threshold = this.decimalLiteral();
                }
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public mlCommand(): MlCommandContext {
        let localContext = new MlCommandContext(this.context, this.state);
        this.enterRule(localContext, 170, OpenSearchPPLParser.RULE_mlCommand);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1143;
            this.match(OpenSearchPPLParser.ML);
            this.state = 1147;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while ((((_la) & ~0x1F) === 0 && ((1 << _la) & 4257218044) !== 0) || ((((_la - 32)) & ~0x1F) === 0 && ((1 << (_la - 32)) & 2682862783) !== 0) || ((((_la - 64)) & ~0x1F) === 0 && ((1 << (_la - 64)) & 4294959103) !== 0) || ((((_la - 96)) & ~0x1F) === 0 && ((1 << (_la - 96)) & 4162840575) !== 0) || ((((_la - 128)) & ~0x1F) === 0 && ((1 << (_la - 128)) & 805306367) !== 0) || ((((_la - 166)) & ~0x1F) === 0 && ((1 << (_la - 166)) & 2348816393) !== 0) || ((((_la - 198)) & ~0x1F) === 0 && ((1 << (_la - 198)) & 4294443007) !== 0) || ((((_la - 230)) & ~0x1F) === 0 && ((1 << (_la - 230)) & 4294967295) !== 0) || ((((_la - 262)) & ~0x1F) === 0 && ((1 << (_la - 262)) & 4294967295) !== 0) || ((((_la - 294)) & ~0x1F) === 0 && ((1 << (_la - 294)) & 4294967295) !== 0) || ((((_la - 328)) & ~0x1F) === 0 && ((1 << (_la - 328)) & 4294901759) !== 0) || ((((_la - 360)) & ~0x1F) === 0 && ((1 << (_la - 360)) & 4294967295) !== 0) || ((((_la - 392)) & ~0x1F) === 0 && ((1 << (_la - 392)) & 4294967295) !== 0) || ((((_la - 424)) & ~0x1F) === 0 && ((1 << (_la - 424)) & 4294966799) !== 0) || _la === 464) {
                {
                {
                this.state = 1144;
                this.mlArg();
                }
                }
                this.state = 1149;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public mlArg(): MlArgContext {
        let localContext = new MlArgContext(this.context, this.state);
        this.enterRule(localContext, 172, OpenSearchPPLParser.RULE_mlArg);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            {
            this.state = 1150;
            localContext._argName = this.ident();
            this.state = 1151;
            this.match(OpenSearchPPLParser.EQUAL);
            this.state = 1152;
            localContext._argValue = this.literalValue();
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public fromClause(): FromClauseContext {
        let localContext = new FromClauseContext(this.context, this.state);
        this.enterRule(localContext, 174, OpenSearchPPLParser.RULE_fromClause);
        try {
            this.state = 1172;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 98, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 1154;
                this.match(OpenSearchPPLParser.SOURCE);
                this.state = 1155;
                this.match(OpenSearchPPLParser.EQUAL);
                this.state = 1156;
                this.tableOrSubqueryClause();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 1157;
                this.match(OpenSearchPPLParser.INDEX);
                this.state = 1158;
                this.match(OpenSearchPPLParser.EQUAL);
                this.state = 1159;
                this.tableOrSubqueryClause();
                }
                break;
            case 3:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 1160;
                this.match(OpenSearchPPLParser.SOURCE);
                this.state = 1161;
                this.match(OpenSearchPPLParser.EQUAL);
                this.state = 1162;
                this.tableFunction();
                }
                break;
            case 4:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 1163;
                this.match(OpenSearchPPLParser.INDEX);
                this.state = 1164;
                this.match(OpenSearchPPLParser.EQUAL);
                this.state = 1165;
                this.tableFunction();
                }
                break;
            case 5:
                this.enterOuterAlt(localContext, 5);
                {
                this.state = 1166;
                this.match(OpenSearchPPLParser.SOURCE);
                this.state = 1167;
                this.match(OpenSearchPPLParser.EQUAL);
                this.state = 1168;
                this.dynamicSourceClause();
                }
                break;
            case 6:
                this.enterOuterAlt(localContext, 6);
                {
                this.state = 1169;
                this.match(OpenSearchPPLParser.INDEX);
                this.state = 1170;
                this.match(OpenSearchPPLParser.EQUAL);
                this.state = 1171;
                this.dynamicSourceClause();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public tableOrSubqueryClause(): TableOrSubqueryClauseContext {
        let localContext = new TableOrSubqueryClauseContext(this.context, this.state);
        this.enterRule(localContext, 176, OpenSearchPPLParser.RULE_tableOrSubqueryClause);
        let _la: number;
        try {
            this.state = 1182;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case OpenSearchPPLParser.LT_SQR_PRTHS:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 1174;
                this.match(OpenSearchPPLParser.LT_SQR_PRTHS);
                this.state = 1175;
                this.subSearch();
                this.state = 1176;
                this.match(OpenSearchPPLParser.RT_SQR_PRTHS);
                this.state = 1179;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 61) {
                    {
                    this.state = 1177;
                    this.match(OpenSearchPPLParser.AS);
                    this.state = 1178;
                    localContext._alias = this.qualifiedName();
                    }
                }

                }
                break;
            case OpenSearchPPLParser.SEARCH:
            case OpenSearchPPLParser.DESCRIBE:
            case OpenSearchPPLParser.SHOW:
            case OpenSearchPPLParser.EXPLAIN:
            case OpenSearchPPLParser.FROM:
            case OpenSearchPPLParser.WHERE:
            case OpenSearchPPLParser.FIELDS:
            case OpenSearchPPLParser.TABLE:
            case OpenSearchPPLParser.RENAME:
            case OpenSearchPPLParser.STATS:
            case OpenSearchPPLParser.EVENTSTATS:
            case OpenSearchPPLParser.DEDUP:
            case OpenSearchPPLParser.SORT:
            case OpenSearchPPLParser.EVAL:
            case OpenSearchPPLParser.HEAD:
            case OpenSearchPPLParser.BIN:
            case OpenSearchPPLParser.TOP:
            case OpenSearchPPLParser.RARE:
            case OpenSearchPPLParser.PARSE:
            case OpenSearchPPLParser.REGEX:
            case OpenSearchPPLParser.REX:
            case OpenSearchPPLParser.PUNCT:
            case OpenSearchPPLParser.GROK:
            case OpenSearchPPLParser.PATTERN:
            case OpenSearchPPLParser.PATTERNS:
            case OpenSearchPPLParser.NEW_FIELD:
            case OpenSearchPPLParser.KMEANS:
            case OpenSearchPPLParser.AD:
            case OpenSearchPPLParser.ML:
            case OpenSearchPPLParser.FILLNULL:
            case OpenSearchPPLParser.FLATTEN:
            case OpenSearchPPLParser.TRENDLINE:
            case OpenSearchPPLParser.TIMECHART:
            case OpenSearchPPLParser.EXPAND:
            case OpenSearchPPLParser.VARIABLE_COUNT_THRESHOLD:
            case OpenSearchPPLParser.FREQUENCY_THRESHOLD_PERCENTAGE:
            case OpenSearchPPLParser.METHOD:
            case OpenSearchPPLParser.MAX_SAMPLE_COUNT:
            case OpenSearchPPLParser.BUFFER_LIMIT:
            case OpenSearchPPLParser.JOIN:
            case OpenSearchPPLParser.INNER:
            case OpenSearchPPLParser.OUTER:
            case OpenSearchPPLParser.FULL:
            case OpenSearchPPLParser.SEMI:
            case OpenSearchPPLParser.ANTI:
            case OpenSearchPPLParser.CROSS:
            case OpenSearchPPLParser.LEFT_HINT:
            case OpenSearchPPLParser.RIGHT_HINT:
            case OpenSearchPPLParser.SOURCE:
            case OpenSearchPPLParser.INDEX:
            case OpenSearchPPLParser.A:
            case OpenSearchPPLParser.ASC:
            case OpenSearchPPLParser.D:
            case OpenSearchPPLParser.DESC:
            case OpenSearchPPLParser.DATASOURCES:
            case OpenSearchPPLParser.USING:
            case OpenSearchPPLParser.WITH:
            case OpenSearchPPLParser.SIMPLE:
            case OpenSearchPPLParser.STANDARD:
            case OpenSearchPPLParser.COST:
            case OpenSearchPPLParser.EXTENDED:
            case OpenSearchPPLParser.OVERRIDE:
            case OpenSearchPPLParser.AUTO:
            case OpenSearchPPLParser.STR:
            case OpenSearchPPLParser.NUM:
            case OpenSearchPPLParser.SMA:
            case OpenSearchPPLParser.WMA:
            case OpenSearchPPLParser.KEEPEMPTY:
            case OpenSearchPPLParser.CONSECUTIVE:
            case OpenSearchPPLParser.DEDUP_SPLITVALUES:
            case OpenSearchPPLParser.PARTITIONS:
            case OpenSearchPPLParser.ALLNUM:
            case OpenSearchPPLParser.DELIM:
            case OpenSearchPPLParser.BUCKET_NULLABLE:
            case OpenSearchPPLParser.CENTROIDS:
            case OpenSearchPPLParser.ITERATIONS:
            case OpenSearchPPLParser.DISTANCE_TYPE:
            case OpenSearchPPLParser.NUMBER_OF_TREES:
            case OpenSearchPPLParser.SHINGLE_SIZE:
            case OpenSearchPPLParser.SAMPLE_SIZE:
            case OpenSearchPPLParser.OUTPUT_AFTER:
            case OpenSearchPPLParser.TIME_DECAY:
            case OpenSearchPPLParser.ANOMALY_RATE:
            case OpenSearchPPLParser.CATEGORY_FIELD:
            case OpenSearchPPLParser.TIME_FIELD:
            case OpenSearchPPLParser.TIME_ZONE:
            case OpenSearchPPLParser.TRAINING_DATA_SIZE:
            case OpenSearchPPLParser.ANOMALY_SCORE_THRESHOLD:
            case OpenSearchPPLParser.APPEND:
            case OpenSearchPPLParser.COUNTFIELD:
            case OpenSearchPPLParser.SHOWCOUNT:
            case OpenSearchPPLParser.INPUT:
            case OpenSearchPPLParser.OUTPUT:
            case OpenSearchPPLParser.PATH:
            case OpenSearchPPLParser.CASE:
            case OpenSearchPPLParser.ELSE:
            case OpenSearchPPLParser.IN:
            case OpenSearchPPLParser.EXISTS:
            case OpenSearchPPLParser.GEOIP:
            case OpenSearchPPLParser.REGEXP:
            case OpenSearchPPLParser.REGEX_MATCH:
            case OpenSearchPPLParser.CONVERT_TZ:
            case OpenSearchPPLParser.DATETIME:
            case OpenSearchPPLParser.DAY:
            case OpenSearchPPLParser.DAY_HOUR:
            case OpenSearchPPLParser.DAY_MICROSECOND:
            case OpenSearchPPLParser.DAY_MINUTE:
            case OpenSearchPPLParser.DAY_OF_YEAR:
            case OpenSearchPPLParser.DAY_SECOND:
            case OpenSearchPPLParser.HOUR:
            case OpenSearchPPLParser.HOUR_MICROSECOND:
            case OpenSearchPPLParser.HOUR_MINUTE:
            case OpenSearchPPLParser.HOUR_OF_DAY:
            case OpenSearchPPLParser.HOUR_SECOND:
            case OpenSearchPPLParser.INTERVAL:
            case OpenSearchPPLParser.MICROSECOND:
            case OpenSearchPPLParser.MILLISECOND:
            case OpenSearchPPLParser.MINUTE:
            case OpenSearchPPLParser.MINUTE_MICROSECOND:
            case OpenSearchPPLParser.MINUTE_OF_DAY:
            case OpenSearchPPLParser.MINUTE_OF_HOUR:
            case OpenSearchPPLParser.MINUTE_SECOND:
            case OpenSearchPPLParser.MONTH:
            case OpenSearchPPLParser.MONTH_OF_YEAR:
            case OpenSearchPPLParser.QUARTER:
            case OpenSearchPPLParser.SECOND:
            case OpenSearchPPLParser.SECOND_MICROSECOND:
            case OpenSearchPPLParser.SECOND_OF_MINUTE:
            case OpenSearchPPLParser.WEEK:
            case OpenSearchPPLParser.WEEK_OF_YEAR:
            case OpenSearchPPLParser.YEAR:
            case OpenSearchPPLParser.YEAR_MONTH:
            case OpenSearchPPLParser.LOOKUP:
            case OpenSearchPPLParser.IP:
            case OpenSearchPPLParser.DOT:
            case OpenSearchPPLParser.PLUS:
            case OpenSearchPPLParser.MINUS:
            case OpenSearchPPLParser.BACKTICK:
            case OpenSearchPPLParser.ARROW:
            case OpenSearchPPLParser.AVG:
            case OpenSearchPPLParser.COUNT:
            case OpenSearchPPLParser.DISTINCT_COUNT:
            case OpenSearchPPLParser.DISTINCT_COUNT_APPROX:
            case OpenSearchPPLParser.ESTDC:
            case OpenSearchPPLParser.ESTDC_ERROR:
            case OpenSearchPPLParser.MAX:
            case OpenSearchPPLParser.MEAN:
            case OpenSearchPPLParser.MEDIAN:
            case OpenSearchPPLParser.MIN:
            case OpenSearchPPLParser.MODE:
            case OpenSearchPPLParser.RANGE:
            case OpenSearchPPLParser.STDEV:
            case OpenSearchPPLParser.STDEVP:
            case OpenSearchPPLParser.SUM:
            case OpenSearchPPLParser.SUMSQ:
            case OpenSearchPPLParser.VAR_SAMP:
            case OpenSearchPPLParser.VAR_POP:
            case OpenSearchPPLParser.STDDEV_SAMP:
            case OpenSearchPPLParser.STDDEV_POP:
            case OpenSearchPPLParser.PERCENTILE:
            case OpenSearchPPLParser.PERCENTILE_APPROX:
            case OpenSearchPPLParser.EARLIEST:
            case OpenSearchPPLParser.LATEST:
            case OpenSearchPPLParser.TAKE:
            case OpenSearchPPLParser.LIST:
            case OpenSearchPPLParser.VALUES:
            case OpenSearchPPLParser.PER_DAY:
            case OpenSearchPPLParser.PER_HOUR:
            case OpenSearchPPLParser.PER_MINUTE:
            case OpenSearchPPLParser.PER_SECOND:
            case OpenSearchPPLParser.RATE:
            case OpenSearchPPLParser.SPARKLINE:
            case OpenSearchPPLParser.C:
            case OpenSearchPPLParser.DC:
            case OpenSearchPPLParser.ROW_NUMBER:
            case OpenSearchPPLParser.RANK:
            case OpenSearchPPLParser.DENSE_RANK:
            case OpenSearchPPLParser.PERCENT_RANK:
            case OpenSearchPPLParser.CUME_DIST:
            case OpenSearchPPLParser.FIRST:
            case OpenSearchPPLParser.LAST:
            case OpenSearchPPLParser.NTH:
            case OpenSearchPPLParser.NTILE:
            case OpenSearchPPLParser.PLUS_FUCTION:
            case OpenSearchPPLParser.MINUS_FUCTION:
            case OpenSearchPPLParser.STAR_FUNCTION:
            case OpenSearchPPLParser.DIVIDE_FUNCTION:
            case OpenSearchPPLParser.ABS:
            case OpenSearchPPLParser.CBRT:
            case OpenSearchPPLParser.CEIL:
            case OpenSearchPPLParser.CEILING:
            case OpenSearchPPLParser.CONV:
            case OpenSearchPPLParser.CRC32:
            case OpenSearchPPLParser.E:
            case OpenSearchPPLParser.EXP:
            case OpenSearchPPLParser.EXPM1:
            case OpenSearchPPLParser.FLOOR:
            case OpenSearchPPLParser.LN:
            case OpenSearchPPLParser.LOG:
            case OpenSearchPPLParser.LOG_WITH_BASE:
            case OpenSearchPPLParser.MOD:
            case OpenSearchPPLParser.MODULUS:
            case OpenSearchPPLParser.PI:
            case OpenSearchPPLParser.POSITION:
            case OpenSearchPPLParser.POW:
            case OpenSearchPPLParser.POWER:
            case OpenSearchPPLParser.RAND:
            case OpenSearchPPLParser.ROUND:
            case OpenSearchPPLParser.SIGN:
            case OpenSearchPPLParser.SQRT:
            case OpenSearchPPLParser.TRUNCATE:
            case OpenSearchPPLParser.RINT:
            case OpenSearchPPLParser.SIGNUM:
            case OpenSearchPPLParser.ACOS:
            case OpenSearchPPLParser.ASIN:
            case OpenSearchPPLParser.ATAN:
            case OpenSearchPPLParser.ATAN2:
            case OpenSearchPPLParser.COS:
            case OpenSearchPPLParser.COSH:
            case OpenSearchPPLParser.COT:
            case OpenSearchPPLParser.DEGREES:
            case OpenSearchPPLParser.RADIANS:
            case OpenSearchPPLParser.SIN:
            case OpenSearchPPLParser.SINH:
            case OpenSearchPPLParser.TAN:
            case OpenSearchPPLParser.MD5:
            case OpenSearchPPLParser.SHA1:
            case OpenSearchPPLParser.SHA2:
            case OpenSearchPPLParser.ADDDATE:
            case OpenSearchPPLParser.ADDTIME:
            case OpenSearchPPLParser.CURDATE:
            case OpenSearchPPLParser.CURRENT_DATE:
            case OpenSearchPPLParser.CURRENT_TIME:
            case OpenSearchPPLParser.CURRENT_TIMESTAMP:
            case OpenSearchPPLParser.CURTIME:
            case OpenSearchPPLParser.DATE:
            case OpenSearchPPLParser.DATEDIFF:
            case OpenSearchPPLParser.DATE_ADD:
            case OpenSearchPPLParser.DATE_FORMAT:
            case OpenSearchPPLParser.DATE_SUB:
            case OpenSearchPPLParser.DAYNAME:
            case OpenSearchPPLParser.DAYOFMONTH:
            case OpenSearchPPLParser.DAYOFWEEK:
            case OpenSearchPPLParser.DAYOFYEAR:
            case OpenSearchPPLParser.DAY_OF_MONTH:
            case OpenSearchPPLParser.DAY_OF_WEEK:
            case OpenSearchPPLParser.EXTRACT:
            case OpenSearchPPLParser.FROM_DAYS:
            case OpenSearchPPLParser.FROM_UNIXTIME:
            case OpenSearchPPLParser.GET_FORMAT:
            case OpenSearchPPLParser.LAST_DAY:
            case OpenSearchPPLParser.LOCALTIME:
            case OpenSearchPPLParser.LOCALTIMESTAMP:
            case OpenSearchPPLParser.MAKEDATE:
            case OpenSearchPPLParser.MAKETIME:
            case OpenSearchPPLParser.MONTHNAME:
            case OpenSearchPPLParser.NOW:
            case OpenSearchPPLParser.PERIOD_ADD:
            case OpenSearchPPLParser.PERIOD_DIFF:
            case OpenSearchPPLParser.SEC_TO_TIME:
            case OpenSearchPPLParser.STR_TO_DATE:
            case OpenSearchPPLParser.SUBDATE:
            case OpenSearchPPLParser.SUBTIME:
            case OpenSearchPPLParser.SYSDATE:
            case OpenSearchPPLParser.TIME:
            case OpenSearchPPLParser.TIMEDIFF:
            case OpenSearchPPLParser.TIMESTAMP:
            case OpenSearchPPLParser.TIME_FORMAT:
            case OpenSearchPPLParser.TIME_TO_SEC:
            case OpenSearchPPLParser.TO_DAYS:
            case OpenSearchPPLParser.TO_SECONDS:
            case OpenSearchPPLParser.UNIX_TIMESTAMP:
            case OpenSearchPPLParser.UTC_DATE:
            case OpenSearchPPLParser.UTC_TIME:
            case OpenSearchPPLParser.UTC_TIMESTAMP:
            case OpenSearchPPLParser.WEEKDAY:
            case OpenSearchPPLParser.YEARWEEK:
            case OpenSearchPPLParser.STRFTIME:
            case OpenSearchPPLParser.SUBSTR:
            case OpenSearchPPLParser.SUBSTRING:
            case OpenSearchPPLParser.LTRIM:
            case OpenSearchPPLParser.RTRIM:
            case OpenSearchPPLParser.TRIM:
            case OpenSearchPPLParser.LOWER:
            case OpenSearchPPLParser.UPPER:
            case OpenSearchPPLParser.CONCAT:
            case OpenSearchPPLParser.CONCAT_WS:
            case OpenSearchPPLParser.LENGTH:
            case OpenSearchPPLParser.STRCMP:
            case OpenSearchPPLParser.RIGHT:
            case OpenSearchPPLParser.LEFT:
            case OpenSearchPPLParser.ASCII:
            case OpenSearchPPLParser.LOCATE:
            case OpenSearchPPLParser.REPLACE:
            case OpenSearchPPLParser.REVERSE:
            case OpenSearchPPLParser.CAST:
            case OpenSearchPPLParser.LIKE:
            case OpenSearchPPLParser.ISNULL:
            case OpenSearchPPLParser.ISNOTNULL:
            case OpenSearchPPLParser.CIDRMATCH:
            case OpenSearchPPLParser.BETWEEN:
            case OpenSearchPPLParser.ISPRESENT:
            case OpenSearchPPLParser.ISEMPTY:
            case OpenSearchPPLParser.ISBLANK:
            case OpenSearchPPLParser.ARRAY:
            case OpenSearchPPLParser.ARRAY_LENGTH:
            case OpenSearchPPLParser.MVJOIN:
            case OpenSearchPPLParser.FORALL:
            case OpenSearchPPLParser.FILTER:
            case OpenSearchPPLParser.TRANSFORM:
            case OpenSearchPPLParser.REDUCE:
            case OpenSearchPPLParser.JSON_VALID:
            case OpenSearchPPLParser.JSON:
            case OpenSearchPPLParser.JSON_OBJECT:
            case OpenSearchPPLParser.JSON_ARRAY:
            case OpenSearchPPLParser.JSON_ARRAY_LENGTH:
            case OpenSearchPPLParser.JSON_EXTRACT:
            case OpenSearchPPLParser.JSON_KEYS:
            case OpenSearchPPLParser.JSON_SET:
            case OpenSearchPPLParser.JSON_DELETE:
            case OpenSearchPPLParser.JSON_APPEND:
            case OpenSearchPPLParser.JSON_EXTEND:
            case OpenSearchPPLParser.IFNULL:
            case OpenSearchPPLParser.NULLIF:
            case OpenSearchPPLParser.IF:
            case OpenSearchPPLParser.TYPEOF:
            case OpenSearchPPLParser.COALESCE:
            case OpenSearchPPLParser.MATCH:
            case OpenSearchPPLParser.MATCH_PHRASE:
            case OpenSearchPPLParser.MATCH_PHRASE_PREFIX:
            case OpenSearchPPLParser.MATCH_BOOL_PREFIX:
            case OpenSearchPPLParser.SIMPLE_QUERY_STRING:
            case OpenSearchPPLParser.MULTI_MATCH:
            case OpenSearchPPLParser.QUERY_STRING:
            case OpenSearchPPLParser.ALLOW_LEADING_WILDCARD:
            case OpenSearchPPLParser.ANALYZE_WILDCARD:
            case OpenSearchPPLParser.ANALYZER:
            case OpenSearchPPLParser.AUTO_GENERATE_SYNONYMS_PHRASE_QUERY:
            case OpenSearchPPLParser.BOOST:
            case OpenSearchPPLParser.CUTOFF_FREQUENCY:
            case OpenSearchPPLParser.DEFAULT_FIELD:
            case OpenSearchPPLParser.DEFAULT_OPERATOR:
            case OpenSearchPPLParser.ENABLE_POSITION_INCREMENTS:
            case OpenSearchPPLParser.ESCAPE:
            case OpenSearchPPLParser.FLAGS:
            case OpenSearchPPLParser.FUZZY_MAX_EXPANSIONS:
            case OpenSearchPPLParser.FUZZY_PREFIX_LENGTH:
            case OpenSearchPPLParser.FUZZY_TRANSPOSITIONS:
            case OpenSearchPPLParser.FUZZY_REWRITE:
            case OpenSearchPPLParser.FUZZINESS:
            case OpenSearchPPLParser.LENIENT:
            case OpenSearchPPLParser.LOW_FREQ_OPERATOR:
            case OpenSearchPPLParser.MAX_DETERMINIZED_STATES:
            case OpenSearchPPLParser.MAX_EXPANSIONS:
            case OpenSearchPPLParser.MINIMUM_SHOULD_MATCH:
            case OpenSearchPPLParser.OPERATOR:
            case OpenSearchPPLParser.PHRASE_SLOP:
            case OpenSearchPPLParser.PREFIX_LENGTH:
            case OpenSearchPPLParser.QUOTE_ANALYZER:
            case OpenSearchPPLParser.QUOTE_FIELD_SUFFIX:
            case OpenSearchPPLParser.REWRITE:
            case OpenSearchPPLParser.SLOP:
            case OpenSearchPPLParser.TIE_BREAKER:
            case OpenSearchPPLParser.TYPE:
            case OpenSearchPPLParser.ZERO_TERMS_QUERY:
            case OpenSearchPPLParser.SPAN:
            case OpenSearchPPLParser.MS:
            case OpenSearchPPLParser.S:
            case OpenSearchPPLParser.M:
            case OpenSearchPPLParser.H:
            case OpenSearchPPLParser.W:
            case OpenSearchPPLParser.Q:
            case OpenSearchPPLParser.Y:
            case OpenSearchPPLParser.SEC:
            case OpenSearchPPLParser.SECS:
            case OpenSearchPPLParser.SECONDS:
            case OpenSearchPPLParser.MINS:
            case OpenSearchPPLParser.MINUTES:
            case OpenSearchPPLParser.HR:
            case OpenSearchPPLParser.HRS:
            case OpenSearchPPLParser.HOURS:
            case OpenSearchPPLParser.DAYS:
            case OpenSearchPPLParser.MON:
            case OpenSearchPPLParser.MONTHS:
            case OpenSearchPPLParser.US:
            case OpenSearchPPLParser.CS:
            case OpenSearchPPLParser.DS:
            case OpenSearchPPLParser.PERCENTILE_SHORTCUT:
            case OpenSearchPPLParser.ID:
            case OpenSearchPPLParser.CLUSTER:
            case OpenSearchPPLParser.ID_DATE_SUFFIX:
            case OpenSearchPPLParser.BQUOTA_STRING:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 1181;
                this.tableSourceClause();
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public tableSourceClause(): TableSourceClauseContext {
        let localContext = new TableSourceClauseContext(this.context, this.state);
        this.enterRule(localContext, 178, OpenSearchPPLParser.RULE_tableSourceClause);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1184;
            this.tableSource();
            this.state = 1189;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 168) {
                {
                {
                this.state = 1185;
                this.match(OpenSearchPPLParser.COMMA);
                this.state = 1186;
                this.tableSource();
                }
                }
                this.state = 1191;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            this.state = 1194;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 61) {
                {
                this.state = 1192;
                this.match(OpenSearchPPLParser.AS);
                this.state = 1193;
                localContext._alias = this.qualifiedName();
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public dynamicSourceClause(): DynamicSourceClauseContext {
        let localContext = new DynamicSourceClauseContext(this.context, this.state);
        this.enterRule(localContext, 180, OpenSearchPPLParser.RULE_dynamicSourceClause);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1196;
            this.match(OpenSearchPPLParser.LT_SQR_PRTHS);
            this.state = 1197;
            this.sourceReferences();
            this.state = 1200;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 168) {
                {
                this.state = 1198;
                this.match(OpenSearchPPLParser.COMMA);
                this.state = 1199;
                this.sourceFilterArgs();
                }
            }

            this.state = 1202;
            this.match(OpenSearchPPLParser.RT_SQR_PRTHS);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public sourceReferences(): SourceReferencesContext {
        let localContext = new SourceReferencesContext(this.context, this.state);
        this.enterRule(localContext, 182, OpenSearchPPLParser.RULE_sourceReferences);
        try {
            let alternative: number;
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1204;
            this.sourceReference();
            this.state = 1209;
            this.errorHandler.sync(this);
            alternative = this.interpreter.adaptivePredict(this.tokenStream, 104, this.context);
            while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER) {
                if (alternative === 1) {
                    {
                    {
                    this.state = 1205;
                    this.match(OpenSearchPPLParser.COMMA);
                    this.state = 1206;
                    this.sourceReference();
                    }
                    }
                }
                this.state = 1211;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 104, this.context);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public sourceReference(): SourceReferenceContext {
        let localContext = new SourceReferenceContext(this.context, this.state);
        this.enterRule(localContext, 184, OpenSearchPPLParser.RULE_sourceReference);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1213;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 456) {
                {
                this.state = 1212;
                this.match(OpenSearchPPLParser.CLUSTER);
                }
            }

            this.state = 1215;
            this.wcQualifiedName();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public sourceFilterArgs(): SourceFilterArgsContext {
        let localContext = new SourceFilterArgsContext(this.context, this.state);
        this.enterRule(localContext, 186, OpenSearchPPLParser.RULE_sourceFilterArgs);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1217;
            this.sourceFilterArg();
            this.state = 1222;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 168) {
                {
                {
                this.state = 1218;
                this.match(OpenSearchPPLParser.COMMA);
                this.state = 1219;
                this.sourceFilterArg();
                }
                }
                this.state = 1224;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public sourceFilterArg(): SourceFilterArgContext {
        let localContext = new SourceFilterArgContext(this.context, this.state);
        this.enterRule(localContext, 188, OpenSearchPPLParser.RULE_sourceFilterArg);
        try {
            this.state = 1233;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 107, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 1225;
                this.ident();
                this.state = 1226;
                this.match(OpenSearchPPLParser.EQUAL);
                this.state = 1227;
                this.literalValue();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 1229;
                this.ident();
                this.state = 1230;
                this.match(OpenSearchPPLParser.IN);
                this.state = 1231;
                this.valueList();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public joinCommand(): JoinCommandContext {
        let localContext = new JoinCommandContext(this.context, this.state);
        this.enterRule(localContext, 190, OpenSearchPPLParser.RULE_joinCommand);
        let _la: number;
        try {
            let alternative: number;
            this.state = 1263;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 113, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 1235;
                this.match(OpenSearchPPLParser.JOIN);
                this.state = 1239;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 108, this.context);
                while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER) {
                    if (alternative === 1) {
                        {
                        {
                        this.state = 1236;
                        this.joinOption();
                        }
                        }
                    }
                    this.state = 1241;
                    this.errorHandler.sync(this);
                    alternative = this.interpreter.adaptivePredict(this.tokenStream, 108, this.context);
                }
                this.state = 1243;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 109, this.context) ) {
                case 1:
                    {
                    this.state = 1242;
                    this.fieldList();
                    }
                    break;
                }
                this.state = 1245;
                localContext._right = this.tableOrSubqueryClause();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 1247;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (((((_la - 53)) & ~0x1F) === 0 && ((1 << (_la - 53)) & 63) !== 0) || _la === 351 || _la === 352) {
                    {
                    this.state = 1246;
                    this.sqlLikeJoinType();
                    }
                }

                this.state = 1249;
                this.match(OpenSearchPPLParser.JOIN);
                this.state = 1253;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                while (_la === 77 || _la === 203 || _la === 425) {
                    {
                    {
                    this.state = 1250;
                    this.joinOption();
                    }
                    }
                    this.state = 1255;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                }
                this.state = 1256;
                this.sideAlias();
                this.state = 1258;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 59 || _la === 60) {
                    {
                    this.state = 1257;
                    this.joinHintList();
                    }
                }

                this.state = 1260;
                this.joinCriteria();
                this.state = 1261;
                localContext._right = this.tableOrSubqueryClause();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public sqlLikeJoinType(): SqlLikeJoinTypeContext {
        let localContext = new SqlLikeJoinTypeContext(this.context, this.state);
        this.enterRule(localContext, 192, OpenSearchPPLParser.RULE_sqlLikeJoinType);
        let _la: number;
        try {
            this.state = 1290;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 120, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 1265;
                this.match(OpenSearchPPLParser.INNER);
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 1266;
                this.match(OpenSearchPPLParser.CROSS);
                }
                break;
            case 3:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 1272;
                this.errorHandler.sync(this);
                switch (this.tokenStream.LA(1)) {
                case OpenSearchPPLParser.LEFT:
                    {
                    this.state = 1267;
                    this.match(OpenSearchPPLParser.LEFT);
                    this.state = 1269;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if (_la === 54) {
                        {
                        this.state = 1268;
                        this.match(OpenSearchPPLParser.OUTER);
                        }
                    }

                    }
                    break;
                case OpenSearchPPLParser.OUTER:
                    {
                    this.state = 1271;
                    this.match(OpenSearchPPLParser.OUTER);
                    }
                    break;
                default:
                    throw new antlr.NoViableAltException(this);
                }
                }
                break;
            case 4:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 1274;
                this.match(OpenSearchPPLParser.RIGHT);
                this.state = 1276;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 54) {
                    {
                    this.state = 1275;
                    this.match(OpenSearchPPLParser.OUTER);
                    }
                }

                }
                break;
            case 5:
                this.enterOuterAlt(localContext, 5);
                {
                this.state = 1278;
                this.match(OpenSearchPPLParser.FULL);
                this.state = 1280;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 54) {
                    {
                    this.state = 1279;
                    this.match(OpenSearchPPLParser.OUTER);
                    }
                }

                }
                break;
            case 6:
                this.enterOuterAlt(localContext, 6);
                {
                this.state = 1283;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 352) {
                    {
                    this.state = 1282;
                    this.match(OpenSearchPPLParser.LEFT);
                    }
                }

                this.state = 1285;
                this.match(OpenSearchPPLParser.SEMI);
                }
                break;
            case 7:
                this.enterOuterAlt(localContext, 7);
                {
                this.state = 1287;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 352) {
                    {
                    this.state = 1286;
                    this.match(OpenSearchPPLParser.LEFT);
                    }
                }

                this.state = 1289;
                this.match(OpenSearchPPLParser.ANTI);
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public joinType(): JoinTypeContext {
        let localContext = new JoinTypeContext(this.context, this.state);
        this.enterRule(localContext, 194, OpenSearchPPLParser.RULE_joinType);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1292;
            _la = this.tokenStream.LA(1);
            if(!(((((_la - 53)) & ~0x1F) === 0 && ((1 << (_la - 53)) & 63) !== 0) || _la === 351 || _la === 352)) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public sideAlias(): SideAliasContext {
        let localContext = new SideAliasContext(this.context, this.state);
        this.enterRule(localContext, 196, OpenSearchPPLParser.RULE_sideAlias);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1297;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 352) {
                {
                this.state = 1294;
                this.match(OpenSearchPPLParser.LEFT);
                this.state = 1295;
                this.match(OpenSearchPPLParser.EQUAL);
                this.state = 1296;
                localContext._leftAlias = this.qualifiedName();
                }
            }

            this.state = 1300;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 168) {
                {
                this.state = 1299;
                this.match(OpenSearchPPLParser.COMMA);
                }
            }

            this.state = 1305;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 351) {
                {
                this.state = 1302;
                this.match(OpenSearchPPLParser.RIGHT);
                this.state = 1303;
                this.match(OpenSearchPPLParser.EQUAL);
                this.state = 1304;
                localContext._rightAlias = this.qualifiedName();
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public joinCriteria(): JoinCriteriaContext {
        let localContext = new JoinCriteriaContext(this.context, this.state);
        this.enterRule(localContext, 198, OpenSearchPPLParser.RULE_joinCriteria);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1307;
            _la = this.tokenStream.LA(1);
            if(!(_la === 7 || _la === 52)) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            this.state = 1308;
            this.logicalExpression(0);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public joinHintList(): JoinHintListContext {
        let localContext = new JoinHintListContext(this.context, this.state);
        this.enterRule(localContext, 200, OpenSearchPPLParser.RULE_joinHintList);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1310;
            this.hintPair();
            this.state = 1317;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 59 || _la === 60 || _la === 168) {
                {
                {
                this.state = 1312;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 168) {
                    {
                    this.state = 1311;
                    this.match(OpenSearchPPLParser.COMMA);
                    }
                }

                this.state = 1314;
                this.hintPair();
                }
                }
                this.state = 1319;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public hintPair(): HintPairContext {
        let localContext = new HintPairContext(this.context, this.state);
        this.enterRule(localContext, 202, OpenSearchPPLParser.RULE_hintPair);
        try {
            this.state = 1330;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case OpenSearchPPLParser.LEFT_HINT:
                localContext = new LeftHintContext(localContext);
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 1320;
                (localContext as LeftHintContext)._leftHintKey = this.match(OpenSearchPPLParser.LEFT_HINT);
                this.state = 1321;
                this.match(OpenSearchPPLParser.DOT);
                this.state = 1322;
                this.match(OpenSearchPPLParser.ID);
                this.state = 1323;
                this.match(OpenSearchPPLParser.EQUAL);
                this.state = 1324;
                (localContext as LeftHintContext)._leftHintValue = this.ident();
                }
                break;
            case OpenSearchPPLParser.RIGHT_HINT:
                localContext = new RightHintContext(localContext);
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 1325;
                (localContext as RightHintContext)._rightHintKey = this.match(OpenSearchPPLParser.RIGHT_HINT);
                this.state = 1326;
                this.match(OpenSearchPPLParser.DOT);
                this.state = 1327;
                this.match(OpenSearchPPLParser.ID);
                this.state = 1328;
                this.match(OpenSearchPPLParser.EQUAL);
                this.state = 1329;
                (localContext as RightHintContext)._rightHintValue = this.ident();
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public joinOption(): JoinOptionContext {
        let localContext = new JoinOptionContext(this.context, this.state);
        this.enterRule(localContext, 204, OpenSearchPPLParser.RULE_joinOption);
        try {
            this.state = 1341;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case OpenSearchPPLParser.OVERWRITE:
                localContext = new OverwriteOptionContext(localContext);
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 1332;
                this.match(OpenSearchPPLParser.OVERWRITE);
                this.state = 1333;
                this.match(OpenSearchPPLParser.EQUAL);
                this.state = 1334;
                this.booleanLiteral();
                }
                break;
            case OpenSearchPPLParser.TYPE:
                localContext = new TypeOptionContext(localContext);
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 1335;
                this.match(OpenSearchPPLParser.TYPE);
                this.state = 1336;
                this.match(OpenSearchPPLParser.EQUAL);
                this.state = 1337;
                this.joinType();
                }
                break;
            case OpenSearchPPLParser.MAX:
                localContext = new MaxOptionContext(localContext);
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 1338;
                this.match(OpenSearchPPLParser.MAX);
                this.state = 1339;
                this.match(OpenSearchPPLParser.EQUAL);
                this.state = 1340;
                this.integerLiteral();
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public renameClasue(): RenameClasueContext {
        let localContext = new RenameClasueContext(this.context, this.state);
        this.enterRule(localContext, 206, OpenSearchPPLParser.RULE_renameClasue);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1343;
            localContext._orignalField = this.renameFieldExpression();
            this.state = 1344;
            this.match(OpenSearchPPLParser.AS);
            this.state = 1345;
            localContext._renamedField = this.renameFieldExpression();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public byClause(): ByClauseContext {
        let localContext = new ByClauseContext(this.context, this.state);
        this.enterRule(localContext, 208, OpenSearchPPLParser.RULE_byClause);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1347;
            this.match(OpenSearchPPLParser.BY);
            this.state = 1348;
            this.fieldList();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public statsByClause(): StatsByClauseContext {
        let localContext = new StatsByClauseContext(this.context, this.state);
        this.enterRule(localContext, 210, OpenSearchPPLParser.RULE_statsByClause);
        try {
            this.state = 1364;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 128, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 1350;
                this.match(OpenSearchPPLParser.BY);
                this.state = 1351;
                this.fieldList();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 1352;
                this.match(OpenSearchPPLParser.BY);
                this.state = 1353;
                this.bySpanClause();
                }
                break;
            case 3:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 1354;
                this.match(OpenSearchPPLParser.BY);
                this.state = 1355;
                this.bySpanClause();
                this.state = 1356;
                this.match(OpenSearchPPLParser.COMMA);
                this.state = 1357;
                this.fieldList();
                }
                break;
            case 4:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 1359;
                this.match(OpenSearchPPLParser.BY);
                this.state = 1360;
                this.fieldList();
                this.state = 1361;
                this.match(OpenSearchPPLParser.COMMA);
                this.state = 1362;
                this.bySpanClause();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public bySpanClause(): BySpanClauseContext {
        let localContext = new BySpanClauseContext(this.context, this.state);
        this.enterRule(localContext, 212, OpenSearchPPLParser.RULE_bySpanClause);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1366;
            this.spanClause();
            this.state = 1369;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 61) {
                {
                this.state = 1367;
                this.match(OpenSearchPPLParser.AS);
                this.state = 1368;
                localContext._alias = this.qualifiedName();
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public spanClause(): SpanClauseContext {
        let localContext = new SpanClauseContext(this.context, this.state);
        this.enterRule(localContext, 214, OpenSearchPPLParser.RULE_spanClause);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1371;
            this.match(OpenSearchPPLParser.SPAN);
            this.state = 1372;
            this.match(OpenSearchPPLParser.LT_PRTHS);
            this.state = 1373;
            this.fieldExpression();
            this.state = 1374;
            this.match(OpenSearchPPLParser.COMMA);
            this.state = 1375;
            localContext._value = this.literalValue();
            this.state = 1377;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 67 || ((((_la - 127)) & ~0x1F) === 0 && ((1 << (_la - 127)) & 174612545) !== 0) || ((((_la - 433)) & ~0x1F) === 0 && ((1 << (_la - 433)) & 2097151) !== 0)) {
                {
                this.state = 1376;
                localContext._unit = this.timespanUnit();
                }
            }

            this.state = 1379;
            this.match(OpenSearchPPLParser.RT_PRTHS);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public sortbyClause(): SortbyClauseContext {
        let localContext = new SortbyClauseContext(this.context, this.state);
        this.enterRule(localContext, 216, OpenSearchPPLParser.RULE_sortbyClause);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1381;
            this.sortField();
            this.state = 1386;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 168) {
                {
                {
                this.state = 1382;
                this.match(OpenSearchPPLParser.COMMA);
                this.state = 1383;
                this.sortField();
                }
                }
                this.state = 1388;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public evalClause(): EvalClauseContext {
        let localContext = new EvalClauseContext(this.context, this.state);
        this.enterRule(localContext, 218, OpenSearchPPLParser.RULE_evalClause);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1389;
            this.fieldExpression();
            this.state = 1390;
            this.match(OpenSearchPPLParser.EQUAL);
            this.state = 1391;
            this.logicalExpression(0);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public eventstatsAggTerm(): EventstatsAggTermContext {
        let localContext = new EventstatsAggTermContext(this.context, this.state);
        this.enterRule(localContext, 220, OpenSearchPPLParser.RULE_eventstatsAggTerm);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1393;
            this.windowFunction();
            this.state = 1396;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 61) {
                {
                this.state = 1394;
                this.match(OpenSearchPPLParser.AS);
                this.state = 1395;
                localContext._alias = this.wcFieldExpression();
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public windowFunction(): WindowFunctionContext {
        let localContext = new WindowFunctionContext(this.context, this.state);
        this.enterRule(localContext, 222, OpenSearchPPLParser.RULE_windowFunction);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1398;
            this.windowFunctionName();
            this.state = 1399;
            this.match(OpenSearchPPLParser.LT_PRTHS);
            this.state = 1400;
            this.functionArgs();
            this.state = 1401;
            this.match(OpenSearchPPLParser.RT_PRTHS);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public windowFunctionName(): WindowFunctionNameContext {
        let localContext = new WindowFunctionNameContext(this.context, this.state);
        this.enterRule(localContext, 224, OpenSearchPPLParser.RULE_windowFunctionName);
        try {
            this.state = 1405;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 133, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 1403;
                this.statsFunctionName();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 1404;
                this.scalarWindowFunctionName();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public scalarWindowFunctionName(): ScalarWindowFunctionNameContext {
        let localContext = new ScalarWindowFunctionNameContext(this.context, this.state);
        this.enterRule(localContext, 226, OpenSearchPPLParser.RULE_scalarWindowFunctionName);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1407;
            _la = this.tokenStream.LA(1);
            if(!(_la === 199 || ((((_la - 232)) & ~0x1F) === 0 && ((1 << (_la - 232)) & 1023) !== 0))) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public statsAggTerm(): StatsAggTermContext {
        let localContext = new StatsAggTermContext(this.context, this.state);
        this.enterRule(localContext, 228, OpenSearchPPLParser.RULE_statsAggTerm);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1409;
            this.statsFunction();
            this.state = 1412;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 61) {
                {
                this.state = 1410;
                this.match(OpenSearchPPLParser.AS);
                this.state = 1411;
                localContext._alias = this.wcFieldExpression();
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public statsFunction(): StatsFunctionContext {
        let localContext = new StatsFunctionContext(this.context, this.state);
        this.enterRule(localContext, 230, OpenSearchPPLParser.RULE_statsFunction);
        let _la: number;
        try {
            this.state = 1441;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 136, this.context) ) {
            case 1:
                localContext = new CountEvalFunctionCallContext(localContext);
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 1414;
                _la = this.tokenStream.LA(1);
                if(!(_la === 198 || _la === 231)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 1415;
                this.match(OpenSearchPPLParser.LT_PRTHS);
                this.state = 1416;
                this.evalExpression();
                this.state = 1417;
                this.match(OpenSearchPPLParser.RT_PRTHS);
                }
                break;
            case 2:
                localContext = new CountAllFunctionCallContext(localContext);
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 1419;
                _la = this.tokenStream.LA(1);
                if(!(_la === 198 || _la === 231)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 1422;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 184) {
                    {
                    this.state = 1420;
                    this.match(OpenSearchPPLParser.LT_PRTHS);
                    this.state = 1421;
                    this.match(OpenSearchPPLParser.RT_PRTHS);
                    }
                }

                }
                break;
            case 3:
                localContext = new PercentileShortcutFunctionCallContext(localContext);
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 1424;
                this.match(OpenSearchPPLParser.PERCENTILE_SHORTCUT);
                this.state = 1425;
                this.match(OpenSearchPPLParser.LT_PRTHS);
                this.state = 1426;
                this.valueExpression(0);
                this.state = 1427;
                this.match(OpenSearchPPLParser.RT_PRTHS);
                }
                break;
            case 4:
                localContext = new DistinctCountFunctionCallContext(localContext);
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 1429;
                _la = this.tokenStream.LA(1);
                if(!(_la === 199 || _la === 200 || _la === 232)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 1430;
                this.match(OpenSearchPPLParser.LT_PRTHS);
                this.state = 1431;
                this.valueExpression(0);
                this.state = 1432;
                this.match(OpenSearchPPLParser.RT_PRTHS);
                }
                break;
            case 5:
                localContext = new TakeAggFunctionCallContext(localContext);
                this.enterOuterAlt(localContext, 5);
                {
                this.state = 1434;
                this.takeAggFunction();
                }
                break;
            case 6:
                localContext = new PercentileApproxFunctionCallContext(localContext);
                this.enterOuterAlt(localContext, 6);
                {
                this.state = 1435;
                this.percentileApproxFunction();
                }
                break;
            case 7:
                localContext = new StatsFunctionCallContext(localContext);
                this.enterOuterAlt(localContext, 7);
                {
                this.state = 1436;
                this.statsFunctionName();
                this.state = 1437;
                this.match(OpenSearchPPLParser.LT_PRTHS);
                this.state = 1438;
                this.functionArgs();
                this.state = 1439;
                this.match(OpenSearchPPLParser.RT_PRTHS);
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public statsFunctionName(): StatsFunctionNameContext {
        let localContext = new StatsFunctionNameContext(this.context, this.state);
        this.enterRule(localContext, 232, OpenSearchPPLParser.RULE_statsFunctionName);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1443;
            _la = this.tokenStream.LA(1);
            if(!(((((_la - 197)) & ~0x1F) === 0 && ((1 << (_la - 197)) & 99566403) !== 0) || _la === 238 || _la === 239)) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public takeAggFunction(): TakeAggFunctionContext {
        let localContext = new TakeAggFunctionContext(this.context, this.state);
        this.enterRule(localContext, 234, OpenSearchPPLParser.RULE_takeAggFunction);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1445;
            this.match(OpenSearchPPLParser.TAKE);
            this.state = 1446;
            this.match(OpenSearchPPLParser.LT_PRTHS);
            this.state = 1447;
            this.fieldExpression();
            this.state = 1450;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 168) {
                {
                this.state = 1448;
                this.match(OpenSearchPPLParser.COMMA);
                this.state = 1449;
                localContext._size = this.integerLiteral();
                }
            }

            this.state = 1452;
            this.match(OpenSearchPPLParser.RT_PRTHS);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public percentileApproxFunction(): PercentileApproxFunctionContext {
        let localContext = new PercentileApproxFunctionContext(this.context, this.state);
        this.enterRule(localContext, 236, OpenSearchPPLParser.RULE_percentileApproxFunction);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1454;
            _la = this.tokenStream.LA(1);
            if(!(_la === 218 || _la === 219)) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            this.state = 1455;
            this.match(OpenSearchPPLParser.LT_PRTHS);
            this.state = 1456;
            localContext._aggField = this.valueExpression(0);
            this.state = 1457;
            this.match(OpenSearchPPLParser.COMMA);
            this.state = 1458;
            localContext._percent = this.numericLiteral();
            this.state = 1461;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 168) {
                {
                this.state = 1459;
                this.match(OpenSearchPPLParser.COMMA);
                this.state = 1460;
                localContext._compression = this.numericLiteral();
                }
            }

            this.state = 1463;
            this.match(OpenSearchPPLParser.RT_PRTHS);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public numericLiteral(): NumericLiteralContext {
        let localContext = new NumericLiteralContext(this.context, this.state);
        this.enterRule(localContext, 238, OpenSearchPPLParser.RULE_numericLiteral);
        try {
            this.state = 1469;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 139, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 1465;
                this.integerLiteral();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 1466;
                this.decimalLiteral();
                }
                break;
            case 3:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 1467;
                this.doubleLiteral();
                }
                break;
            case 4:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 1468;
                this.floatLiteral();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }

    public logicalExpression(): LogicalExpressionContext;
    public logicalExpression(_p: number): LogicalExpressionContext;
    public logicalExpression(_p?: number): LogicalExpressionContext {
        if (_p === undefined) {
            _p = 0;
        }

        let parentContext = this.context;
        let parentState = this.state;
        let localContext = new LogicalExpressionContext(this.context, parentState);
        let previousContext = localContext;
        let _startState = 240;
        this.enterRecursionRule(localContext, 240, OpenSearchPPLParser.RULE_logicalExpression, _p);
        try {
            let alternative: number;
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1475;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case OpenSearchPPLParser.NOT:
                {
                localContext = new LogicalNotContext(localContext);
                this.context = localContext;
                previousContext = localContext;

                this.state = 1472;
                this.match(OpenSearchPPLParser.NOT);
                this.state = 1473;
                this.logicalExpression(5);
                }
                break;
            case OpenSearchPPLParser.SEARCH:
            case OpenSearchPPLParser.DESCRIBE:
            case OpenSearchPPLParser.SHOW:
            case OpenSearchPPLParser.EXPLAIN:
            case OpenSearchPPLParser.FROM:
            case OpenSearchPPLParser.WHERE:
            case OpenSearchPPLParser.FIELDS:
            case OpenSearchPPLParser.TABLE:
            case OpenSearchPPLParser.RENAME:
            case OpenSearchPPLParser.STATS:
            case OpenSearchPPLParser.EVENTSTATS:
            case OpenSearchPPLParser.DEDUP:
            case OpenSearchPPLParser.SORT:
            case OpenSearchPPLParser.EVAL:
            case OpenSearchPPLParser.HEAD:
            case OpenSearchPPLParser.BIN:
            case OpenSearchPPLParser.TOP:
            case OpenSearchPPLParser.RARE:
            case OpenSearchPPLParser.PARSE:
            case OpenSearchPPLParser.REGEX:
            case OpenSearchPPLParser.REX:
            case OpenSearchPPLParser.PUNCT:
            case OpenSearchPPLParser.GROK:
            case OpenSearchPPLParser.PATTERN:
            case OpenSearchPPLParser.PATTERNS:
            case OpenSearchPPLParser.NEW_FIELD:
            case OpenSearchPPLParser.KMEANS:
            case OpenSearchPPLParser.AD:
            case OpenSearchPPLParser.ML:
            case OpenSearchPPLParser.FILLNULL:
            case OpenSearchPPLParser.FLATTEN:
            case OpenSearchPPLParser.TRENDLINE:
            case OpenSearchPPLParser.TIMECHART:
            case OpenSearchPPLParser.EXPAND:
            case OpenSearchPPLParser.VARIABLE_COUNT_THRESHOLD:
            case OpenSearchPPLParser.FREQUENCY_THRESHOLD_PERCENTAGE:
            case OpenSearchPPLParser.METHOD:
            case OpenSearchPPLParser.MAX_SAMPLE_COUNT:
            case OpenSearchPPLParser.BUFFER_LIMIT:
            case OpenSearchPPLParser.JOIN:
            case OpenSearchPPLParser.INNER:
            case OpenSearchPPLParser.OUTER:
            case OpenSearchPPLParser.FULL:
            case OpenSearchPPLParser.SEMI:
            case OpenSearchPPLParser.ANTI:
            case OpenSearchPPLParser.CROSS:
            case OpenSearchPPLParser.LEFT_HINT:
            case OpenSearchPPLParser.RIGHT_HINT:
            case OpenSearchPPLParser.SOURCE:
            case OpenSearchPPLParser.INDEX:
            case OpenSearchPPLParser.A:
            case OpenSearchPPLParser.ASC:
            case OpenSearchPPLParser.D:
            case OpenSearchPPLParser.DESC:
            case OpenSearchPPLParser.DATASOURCES:
            case OpenSearchPPLParser.USING:
            case OpenSearchPPLParser.WITH:
            case OpenSearchPPLParser.SIMPLE:
            case OpenSearchPPLParser.STANDARD:
            case OpenSearchPPLParser.COST:
            case OpenSearchPPLParser.EXTENDED:
            case OpenSearchPPLParser.OVERRIDE:
            case OpenSearchPPLParser.AUTO:
            case OpenSearchPPLParser.STR:
            case OpenSearchPPLParser.NUM:
            case OpenSearchPPLParser.SMA:
            case OpenSearchPPLParser.WMA:
            case OpenSearchPPLParser.KEEPEMPTY:
            case OpenSearchPPLParser.CONSECUTIVE:
            case OpenSearchPPLParser.DEDUP_SPLITVALUES:
            case OpenSearchPPLParser.PARTITIONS:
            case OpenSearchPPLParser.ALLNUM:
            case OpenSearchPPLParser.DELIM:
            case OpenSearchPPLParser.BUCKET_NULLABLE:
            case OpenSearchPPLParser.CENTROIDS:
            case OpenSearchPPLParser.ITERATIONS:
            case OpenSearchPPLParser.DISTANCE_TYPE:
            case OpenSearchPPLParser.NUMBER_OF_TREES:
            case OpenSearchPPLParser.SHINGLE_SIZE:
            case OpenSearchPPLParser.SAMPLE_SIZE:
            case OpenSearchPPLParser.OUTPUT_AFTER:
            case OpenSearchPPLParser.TIME_DECAY:
            case OpenSearchPPLParser.ANOMALY_RATE:
            case OpenSearchPPLParser.CATEGORY_FIELD:
            case OpenSearchPPLParser.TIME_FIELD:
            case OpenSearchPPLParser.TIME_ZONE:
            case OpenSearchPPLParser.TRAINING_DATA_SIZE:
            case OpenSearchPPLParser.ANOMALY_SCORE_THRESHOLD:
            case OpenSearchPPLParser.APPEND:
            case OpenSearchPPLParser.COUNTFIELD:
            case OpenSearchPPLParser.SHOWCOUNT:
            case OpenSearchPPLParser.INPUT:
            case OpenSearchPPLParser.OUTPUT:
            case OpenSearchPPLParser.PATH:
            case OpenSearchPPLParser.CASE:
            case OpenSearchPPLParser.ELSE:
            case OpenSearchPPLParser.IN:
            case OpenSearchPPLParser.EXISTS:
            case OpenSearchPPLParser.GEOIP:
            case OpenSearchPPLParser.TRUE:
            case OpenSearchPPLParser.FALSE:
            case OpenSearchPPLParser.REGEXP:
            case OpenSearchPPLParser.REGEX_MATCH:
            case OpenSearchPPLParser.CONVERT_TZ:
            case OpenSearchPPLParser.DATETIME:
            case OpenSearchPPLParser.DAY:
            case OpenSearchPPLParser.DAY_HOUR:
            case OpenSearchPPLParser.DAY_MICROSECOND:
            case OpenSearchPPLParser.DAY_MINUTE:
            case OpenSearchPPLParser.DAY_OF_YEAR:
            case OpenSearchPPLParser.DAY_SECOND:
            case OpenSearchPPLParser.HOUR:
            case OpenSearchPPLParser.HOUR_MICROSECOND:
            case OpenSearchPPLParser.HOUR_MINUTE:
            case OpenSearchPPLParser.HOUR_OF_DAY:
            case OpenSearchPPLParser.HOUR_SECOND:
            case OpenSearchPPLParser.INTERVAL:
            case OpenSearchPPLParser.MICROSECOND:
            case OpenSearchPPLParser.MILLISECOND:
            case OpenSearchPPLParser.MINUTE:
            case OpenSearchPPLParser.MINUTE_MICROSECOND:
            case OpenSearchPPLParser.MINUTE_OF_DAY:
            case OpenSearchPPLParser.MINUTE_OF_HOUR:
            case OpenSearchPPLParser.MINUTE_SECOND:
            case OpenSearchPPLParser.MONTH:
            case OpenSearchPPLParser.MONTH_OF_YEAR:
            case OpenSearchPPLParser.QUARTER:
            case OpenSearchPPLParser.SECOND:
            case OpenSearchPPLParser.SECOND_MICROSECOND:
            case OpenSearchPPLParser.SECOND_OF_MINUTE:
            case OpenSearchPPLParser.WEEK:
            case OpenSearchPPLParser.WEEK_OF_YEAR:
            case OpenSearchPPLParser.YEAR:
            case OpenSearchPPLParser.YEAR_MONTH:
            case OpenSearchPPLParser.LOOKUP:
            case OpenSearchPPLParser.IP:
            case OpenSearchPPLParser.DOT:
            case OpenSearchPPLParser.PLUS:
            case OpenSearchPPLParser.MINUS:
            case OpenSearchPPLParser.LT_PRTHS:
            case OpenSearchPPLParser.LT_SQR_PRTHS:
            case OpenSearchPPLParser.BACKTICK:
            case OpenSearchPPLParser.ARROW:
            case OpenSearchPPLParser.AVG:
            case OpenSearchPPLParser.COUNT:
            case OpenSearchPPLParser.DISTINCT_COUNT:
            case OpenSearchPPLParser.DISTINCT_COUNT_APPROX:
            case OpenSearchPPLParser.ESTDC:
            case OpenSearchPPLParser.ESTDC_ERROR:
            case OpenSearchPPLParser.MAX:
            case OpenSearchPPLParser.MEAN:
            case OpenSearchPPLParser.MEDIAN:
            case OpenSearchPPLParser.MIN:
            case OpenSearchPPLParser.MODE:
            case OpenSearchPPLParser.RANGE:
            case OpenSearchPPLParser.STDEV:
            case OpenSearchPPLParser.STDEVP:
            case OpenSearchPPLParser.SUM:
            case OpenSearchPPLParser.SUMSQ:
            case OpenSearchPPLParser.VAR_SAMP:
            case OpenSearchPPLParser.VAR_POP:
            case OpenSearchPPLParser.STDDEV_SAMP:
            case OpenSearchPPLParser.STDDEV_POP:
            case OpenSearchPPLParser.PERCENTILE:
            case OpenSearchPPLParser.PERCENTILE_APPROX:
            case OpenSearchPPLParser.EARLIEST:
            case OpenSearchPPLParser.LATEST:
            case OpenSearchPPLParser.TAKE:
            case OpenSearchPPLParser.LIST:
            case OpenSearchPPLParser.VALUES:
            case OpenSearchPPLParser.PER_DAY:
            case OpenSearchPPLParser.PER_HOUR:
            case OpenSearchPPLParser.PER_MINUTE:
            case OpenSearchPPLParser.PER_SECOND:
            case OpenSearchPPLParser.RATE:
            case OpenSearchPPLParser.SPARKLINE:
            case OpenSearchPPLParser.C:
            case OpenSearchPPLParser.DC:
            case OpenSearchPPLParser.ROW_NUMBER:
            case OpenSearchPPLParser.RANK:
            case OpenSearchPPLParser.DENSE_RANK:
            case OpenSearchPPLParser.PERCENT_RANK:
            case OpenSearchPPLParser.CUME_DIST:
            case OpenSearchPPLParser.FIRST:
            case OpenSearchPPLParser.LAST:
            case OpenSearchPPLParser.NTH:
            case OpenSearchPPLParser.NTILE:
            case OpenSearchPPLParser.PLUS_FUCTION:
            case OpenSearchPPLParser.MINUS_FUCTION:
            case OpenSearchPPLParser.STAR_FUNCTION:
            case OpenSearchPPLParser.DIVIDE_FUNCTION:
            case OpenSearchPPLParser.ABS:
            case OpenSearchPPLParser.CBRT:
            case OpenSearchPPLParser.CEIL:
            case OpenSearchPPLParser.CEILING:
            case OpenSearchPPLParser.CONV:
            case OpenSearchPPLParser.CRC32:
            case OpenSearchPPLParser.E:
            case OpenSearchPPLParser.EXP:
            case OpenSearchPPLParser.EXPM1:
            case OpenSearchPPLParser.FLOOR:
            case OpenSearchPPLParser.LN:
            case OpenSearchPPLParser.LOG:
            case OpenSearchPPLParser.LOG_WITH_BASE:
            case OpenSearchPPLParser.MOD:
            case OpenSearchPPLParser.MODULUS:
            case OpenSearchPPLParser.PI:
            case OpenSearchPPLParser.POSITION:
            case OpenSearchPPLParser.POW:
            case OpenSearchPPLParser.POWER:
            case OpenSearchPPLParser.RAND:
            case OpenSearchPPLParser.ROUND:
            case OpenSearchPPLParser.SIGN:
            case OpenSearchPPLParser.SQRT:
            case OpenSearchPPLParser.TRUNCATE:
            case OpenSearchPPLParser.RINT:
            case OpenSearchPPLParser.SIGNUM:
            case OpenSearchPPLParser.ACOS:
            case OpenSearchPPLParser.ASIN:
            case OpenSearchPPLParser.ATAN:
            case OpenSearchPPLParser.ATAN2:
            case OpenSearchPPLParser.COS:
            case OpenSearchPPLParser.COSH:
            case OpenSearchPPLParser.COT:
            case OpenSearchPPLParser.DEGREES:
            case OpenSearchPPLParser.RADIANS:
            case OpenSearchPPLParser.SIN:
            case OpenSearchPPLParser.SINH:
            case OpenSearchPPLParser.TAN:
            case OpenSearchPPLParser.MD5:
            case OpenSearchPPLParser.SHA1:
            case OpenSearchPPLParser.SHA2:
            case OpenSearchPPLParser.ADDDATE:
            case OpenSearchPPLParser.ADDTIME:
            case OpenSearchPPLParser.CURDATE:
            case OpenSearchPPLParser.CURRENT_DATE:
            case OpenSearchPPLParser.CURRENT_TIME:
            case OpenSearchPPLParser.CURRENT_TIMESTAMP:
            case OpenSearchPPLParser.CURTIME:
            case OpenSearchPPLParser.DATE:
            case OpenSearchPPLParser.DATEDIFF:
            case OpenSearchPPLParser.DATE_ADD:
            case OpenSearchPPLParser.DATE_FORMAT:
            case OpenSearchPPLParser.DATE_SUB:
            case OpenSearchPPLParser.DAYNAME:
            case OpenSearchPPLParser.DAYOFMONTH:
            case OpenSearchPPLParser.DAYOFWEEK:
            case OpenSearchPPLParser.DAYOFYEAR:
            case OpenSearchPPLParser.DAY_OF_MONTH:
            case OpenSearchPPLParser.DAY_OF_WEEK:
            case OpenSearchPPLParser.EXTRACT:
            case OpenSearchPPLParser.FROM_DAYS:
            case OpenSearchPPLParser.FROM_UNIXTIME:
            case OpenSearchPPLParser.GET_FORMAT:
            case OpenSearchPPLParser.LAST_DAY:
            case OpenSearchPPLParser.LOCALTIME:
            case OpenSearchPPLParser.LOCALTIMESTAMP:
            case OpenSearchPPLParser.MAKEDATE:
            case OpenSearchPPLParser.MAKETIME:
            case OpenSearchPPLParser.MONTHNAME:
            case OpenSearchPPLParser.NOW:
            case OpenSearchPPLParser.PERIOD_ADD:
            case OpenSearchPPLParser.PERIOD_DIFF:
            case OpenSearchPPLParser.SEC_TO_TIME:
            case OpenSearchPPLParser.STR_TO_DATE:
            case OpenSearchPPLParser.SUBDATE:
            case OpenSearchPPLParser.SUBTIME:
            case OpenSearchPPLParser.SYSDATE:
            case OpenSearchPPLParser.TIME:
            case OpenSearchPPLParser.TIMEDIFF:
            case OpenSearchPPLParser.TIMESTAMP:
            case OpenSearchPPLParser.TIMESTAMPADD:
            case OpenSearchPPLParser.TIMESTAMPDIFF:
            case OpenSearchPPLParser.TIME_FORMAT:
            case OpenSearchPPLParser.TIME_TO_SEC:
            case OpenSearchPPLParser.TO_DAYS:
            case OpenSearchPPLParser.TO_SECONDS:
            case OpenSearchPPLParser.UNIX_TIMESTAMP:
            case OpenSearchPPLParser.UTC_DATE:
            case OpenSearchPPLParser.UTC_TIME:
            case OpenSearchPPLParser.UTC_TIMESTAMP:
            case OpenSearchPPLParser.WEEKDAY:
            case OpenSearchPPLParser.YEARWEEK:
            case OpenSearchPPLParser.STRFTIME:
            case OpenSearchPPLParser.SUBSTR:
            case OpenSearchPPLParser.SUBSTRING:
            case OpenSearchPPLParser.LTRIM:
            case OpenSearchPPLParser.RTRIM:
            case OpenSearchPPLParser.TRIM:
            case OpenSearchPPLParser.LOWER:
            case OpenSearchPPLParser.UPPER:
            case OpenSearchPPLParser.CONCAT:
            case OpenSearchPPLParser.CONCAT_WS:
            case OpenSearchPPLParser.LENGTH:
            case OpenSearchPPLParser.STRCMP:
            case OpenSearchPPLParser.RIGHT:
            case OpenSearchPPLParser.LEFT:
            case OpenSearchPPLParser.ASCII:
            case OpenSearchPPLParser.LOCATE:
            case OpenSearchPPLParser.REPLACE:
            case OpenSearchPPLParser.REVERSE:
            case OpenSearchPPLParser.CAST:
            case OpenSearchPPLParser.LIKE:
            case OpenSearchPPLParser.ISNULL:
            case OpenSearchPPLParser.ISNOTNULL:
            case OpenSearchPPLParser.CIDRMATCH:
            case OpenSearchPPLParser.BETWEEN:
            case OpenSearchPPLParser.ISPRESENT:
            case OpenSearchPPLParser.ISEMPTY:
            case OpenSearchPPLParser.ISBLANK:
            case OpenSearchPPLParser.ARRAY:
            case OpenSearchPPLParser.ARRAY_LENGTH:
            case OpenSearchPPLParser.MVJOIN:
            case OpenSearchPPLParser.FORALL:
            case OpenSearchPPLParser.FILTER:
            case OpenSearchPPLParser.TRANSFORM:
            case OpenSearchPPLParser.REDUCE:
            case OpenSearchPPLParser.JSON_VALID:
            case OpenSearchPPLParser.JSON:
            case OpenSearchPPLParser.JSON_OBJECT:
            case OpenSearchPPLParser.JSON_ARRAY:
            case OpenSearchPPLParser.JSON_ARRAY_LENGTH:
            case OpenSearchPPLParser.JSON_EXTRACT:
            case OpenSearchPPLParser.JSON_KEYS:
            case OpenSearchPPLParser.JSON_SET:
            case OpenSearchPPLParser.JSON_DELETE:
            case OpenSearchPPLParser.JSON_APPEND:
            case OpenSearchPPLParser.JSON_EXTEND:
            case OpenSearchPPLParser.IFNULL:
            case OpenSearchPPLParser.NULLIF:
            case OpenSearchPPLParser.IF:
            case OpenSearchPPLParser.TYPEOF:
            case OpenSearchPPLParser.COALESCE:
            case OpenSearchPPLParser.MATCH:
            case OpenSearchPPLParser.MATCH_PHRASE:
            case OpenSearchPPLParser.MATCH_PHRASE_PREFIX:
            case OpenSearchPPLParser.MATCH_BOOL_PREFIX:
            case OpenSearchPPLParser.SIMPLE_QUERY_STRING:
            case OpenSearchPPLParser.MULTI_MATCH:
            case OpenSearchPPLParser.QUERY_STRING:
            case OpenSearchPPLParser.ALLOW_LEADING_WILDCARD:
            case OpenSearchPPLParser.ANALYZE_WILDCARD:
            case OpenSearchPPLParser.ANALYZER:
            case OpenSearchPPLParser.AUTO_GENERATE_SYNONYMS_PHRASE_QUERY:
            case OpenSearchPPLParser.BOOST:
            case OpenSearchPPLParser.CUTOFF_FREQUENCY:
            case OpenSearchPPLParser.DEFAULT_FIELD:
            case OpenSearchPPLParser.DEFAULT_OPERATOR:
            case OpenSearchPPLParser.ENABLE_POSITION_INCREMENTS:
            case OpenSearchPPLParser.ESCAPE:
            case OpenSearchPPLParser.FLAGS:
            case OpenSearchPPLParser.FUZZY_MAX_EXPANSIONS:
            case OpenSearchPPLParser.FUZZY_PREFIX_LENGTH:
            case OpenSearchPPLParser.FUZZY_TRANSPOSITIONS:
            case OpenSearchPPLParser.FUZZY_REWRITE:
            case OpenSearchPPLParser.FUZZINESS:
            case OpenSearchPPLParser.LENIENT:
            case OpenSearchPPLParser.LOW_FREQ_OPERATOR:
            case OpenSearchPPLParser.MAX_DETERMINIZED_STATES:
            case OpenSearchPPLParser.MAX_EXPANSIONS:
            case OpenSearchPPLParser.MINIMUM_SHOULD_MATCH:
            case OpenSearchPPLParser.OPERATOR:
            case OpenSearchPPLParser.PHRASE_SLOP:
            case OpenSearchPPLParser.PREFIX_LENGTH:
            case OpenSearchPPLParser.QUOTE_ANALYZER:
            case OpenSearchPPLParser.QUOTE_FIELD_SUFFIX:
            case OpenSearchPPLParser.REWRITE:
            case OpenSearchPPLParser.SLOP:
            case OpenSearchPPLParser.TIE_BREAKER:
            case OpenSearchPPLParser.TYPE:
            case OpenSearchPPLParser.ZERO_TERMS_QUERY:
            case OpenSearchPPLParser.SPAN:
            case OpenSearchPPLParser.MS:
            case OpenSearchPPLParser.S:
            case OpenSearchPPLParser.M:
            case OpenSearchPPLParser.H:
            case OpenSearchPPLParser.W:
            case OpenSearchPPLParser.Q:
            case OpenSearchPPLParser.Y:
            case OpenSearchPPLParser.SEC:
            case OpenSearchPPLParser.SECS:
            case OpenSearchPPLParser.SECONDS:
            case OpenSearchPPLParser.MINS:
            case OpenSearchPPLParser.MINUTES:
            case OpenSearchPPLParser.HR:
            case OpenSearchPPLParser.HRS:
            case OpenSearchPPLParser.HOURS:
            case OpenSearchPPLParser.DAYS:
            case OpenSearchPPLParser.MON:
            case OpenSearchPPLParser.MONTHS:
            case OpenSearchPPLParser.US:
            case OpenSearchPPLParser.CS:
            case OpenSearchPPLParser.DS:
            case OpenSearchPPLParser.PERCENTILE_SHORTCUT:
            case OpenSearchPPLParser.ID:
            case OpenSearchPPLParser.INTEGER_LITERAL:
            case OpenSearchPPLParser.DECIMAL_LITERAL:
            case OpenSearchPPLParser.FLOAT_LITERAL:
            case OpenSearchPPLParser.DOUBLE_LITERAL:
            case OpenSearchPPLParser.DQUOTA_STRING:
            case OpenSearchPPLParser.SQUOTA_STRING:
            case OpenSearchPPLParser.BQUOTA_STRING:
                {
                localContext = new LogicalExprContext(localContext);
                this.context = localContext;
                previousContext = localContext;
                this.state = 1474;
                this.expression(0);
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
            this.context!.stop = this.tokenStream.LT(-1);
            this.state = 1488;
            this.errorHandler.sync(this);
            alternative = this.interpreter.adaptivePredict(this.tokenStream, 142, this.context);
            while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER) {
                if (alternative === 1) {
                    if (this.parseListeners != null) {
                        this.triggerExitRuleEvent();
                    }
                    previousContext = localContext;
                    {
                    this.state = 1486;
                    this.errorHandler.sync(this);
                    switch (this.interpreter.adaptivePredict(this.tokenStream, 141, this.context) ) {
                    case 1:
                        {
                        localContext = new LogicalAndContext(new LogicalExpressionContext(parentContext, parentState));
                        (localContext as LogicalAndContext)._left = previousContext;
                        this.pushNewRecursionContext(localContext, _startState, OpenSearchPPLParser.RULE_logicalExpression);
                        this.state = 1477;
                        if (!(this.precpred(this.context, 4))) {
                            throw this.createFailedPredicateException("this.precpred(this.context, 4)");
                        }
                        this.state = 1478;
                        this.match(OpenSearchPPLParser.AND);
                        this.state = 1479;
                        (localContext as LogicalAndContext)._right = this.logicalExpression(5);
                        }
                        break;
                    case 2:
                        {
                        localContext = new LogicalXorContext(new LogicalExpressionContext(parentContext, parentState));
                        (localContext as LogicalXorContext)._left = previousContext;
                        this.pushNewRecursionContext(localContext, _startState, OpenSearchPPLParser.RULE_logicalExpression);
                        this.state = 1480;
                        if (!(this.precpred(this.context, 3))) {
                            throw this.createFailedPredicateException("this.precpred(this.context, 3)");
                        }
                        this.state = 1481;
                        this.match(OpenSearchPPLParser.XOR);
                        this.state = 1482;
                        (localContext as LogicalXorContext)._right = this.logicalExpression(4);
                        }
                        break;
                    case 3:
                        {
                        localContext = new LogicalOrContext(new LogicalExpressionContext(parentContext, parentState));
                        (localContext as LogicalOrContext)._left = previousContext;
                        this.pushNewRecursionContext(localContext, _startState, OpenSearchPPLParser.RULE_logicalExpression);
                        this.state = 1483;
                        if (!(this.precpred(this.context, 2))) {
                            throw this.createFailedPredicateException("this.precpred(this.context, 2)");
                        }
                        this.state = 1484;
                        this.match(OpenSearchPPLParser.OR);
                        this.state = 1485;
                        (localContext as LogicalOrContext)._right = this.logicalExpression(3);
                        }
                        break;
                    }
                    }
                }
                this.state = 1490;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 142, this.context);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.unrollRecursionContexts(parentContext);
        }
        return localContext;
    }

    public expression(): ExpressionContext;
    public expression(_p: number): ExpressionContext;
    public expression(_p?: number): ExpressionContext {
        if (_p === undefined) {
            _p = 0;
        }

        let parentContext = this.context;
        let parentState = this.state;
        let localContext = new ExpressionContext(this.context, parentState);
        let previousContext = localContext;
        let _startState = 242;
        this.enterRecursionRule(localContext, 242, OpenSearchPPLParser.RULE_expression, _p);
        let _la: number;
        try {
            let alternative: number;
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1494;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 143, this.context) ) {
            case 1:
                {
                localContext = new ValueExprContext(localContext);
                this.context = localContext;
                previousContext = localContext;

                this.state = 1492;
                this.valueExpression(0);
                }
                break;
            case 2:
                {
                localContext = new RelevanceExprContext(localContext);
                this.context = localContext;
                previousContext = localContext;
                this.state = 1493;
                this.relevanceExpression();
                }
                break;
            }
            this.context!.stop = this.tokenStream.LT(-1);
            this.state = 1517;
            this.errorHandler.sync(this);
            alternative = this.interpreter.adaptivePredict(this.tokenStream, 147, this.context);
            while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER) {
                if (alternative === 1) {
                    if (this.parseListeners != null) {
                        this.triggerExitRuleEvent();
                    }
                    previousContext = localContext;
                    {
                    this.state = 1515;
                    this.errorHandler.sync(this);
                    switch (this.interpreter.adaptivePredict(this.tokenStream, 146, this.context) ) {
                    case 1:
                        {
                        localContext = new CompareExprContext(new ExpressionContext(parentContext, parentState));
                        (localContext as CompareExprContext)._left = previousContext;
                        this.pushNewRecursionContext(localContext, _startState, OpenSearchPPLParser.RULE_expression);
                        this.state = 1496;
                        if (!(this.precpred(this.context, 3))) {
                            throw this.createFailedPredicateException("this.precpred(this.context, 3)");
                        }
                        this.state = 1497;
                        this.comparisonOperator();
                        this.state = 1498;
                        (localContext as CompareExprContext)._right = this.expression(4);
                        }
                        break;
                    case 2:
                        {
                        localContext = new BetweenContext(new ExpressionContext(parentContext, parentState));
                        this.pushNewRecursionContext(localContext, _startState, OpenSearchPPLParser.RULE_expression);
                        this.state = 1500;
                        if (!(this.precpred(this.context, 1))) {
                            throw this.createFailedPredicateException("this.precpred(this.context, 1)");
                        }
                        this.state = 1502;
                        this.errorHandler.sync(this);
                        _la = this.tokenStream.LA(1);
                        if (_la === 117) {
                            {
                            this.state = 1501;
                            this.match(OpenSearchPPLParser.NOT);
                            }
                        }

                        this.state = 1504;
                        this.match(OpenSearchPPLParser.BETWEEN);
                        this.state = 1505;
                        this.expression(0);
                        this.state = 1506;
                        this.match(OpenSearchPPLParser.AND);
                        this.state = 1507;
                        this.expression(2);
                        }
                        break;
                    case 3:
                        {
                        localContext = new InExprContext(new ExpressionContext(parentContext, parentState));
                        this.pushNewRecursionContext(localContext, _startState, OpenSearchPPLParser.RULE_expression);
                        this.state = 1509;
                        if (!(this.precpred(this.context, 2))) {
                            throw this.createFailedPredicateException("this.precpred(this.context, 2)");
                        }
                        this.state = 1511;
                        this.errorHandler.sync(this);
                        _la = this.tokenStream.LA(1);
                        if (_la === 117) {
                            {
                            this.state = 1510;
                            this.match(OpenSearchPPLParser.NOT);
                            }
                        }

                        this.state = 1513;
                        this.match(OpenSearchPPLParser.IN);
                        this.state = 1514;
                        this.valueList();
                        }
                        break;
                    }
                    }
                }
                this.state = 1519;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 147, this.context);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.unrollRecursionContexts(parentContext);
        }
        return localContext;
    }

    public valueExpression(): ValueExpressionContext;
    public valueExpression(_p: number): ValueExpressionContext;
    public valueExpression(_p?: number): ValueExpressionContext {
        if (_p === undefined) {
            _p = 0;
        }

        let parentContext = this.context;
        let parentState = this.state;
        let localContext = new ValueExpressionContext(this.context, parentState);
        let previousContext = localContext;
        let _startState = 244;
        this.enterRecursionRule(localContext, 244, OpenSearchPPLParser.RULE_valueExpression, _p);
        let _la: number;
        try {
            let alternative: number;
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1556;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 150, this.context) ) {
            case 1:
                {
                localContext = new LiteralValueExprContext(localContext);
                this.context = localContext;
                previousContext = localContext;

                this.state = 1521;
                this.literalValue();
                }
                break;
            case 2:
                {
                localContext = new FunctionCallExprContext(localContext);
                this.context = localContext;
                previousContext = localContext;
                this.state = 1522;
                this.functionCall();
                }
                break;
            case 3:
                {
                localContext = new LambdaExprContext(localContext);
                this.context = localContext;
                previousContext = localContext;
                this.state = 1523;
                this.lambda();
                }
                break;
            case 4:
                {
                localContext = new ScalarSubqueryExprContext(localContext);
                this.context = localContext;
                previousContext = localContext;
                this.state = 1524;
                this.match(OpenSearchPPLParser.LT_SQR_PRTHS);
                this.state = 1525;
                this.subSearch();
                this.state = 1526;
                this.match(OpenSearchPPLParser.RT_SQR_PRTHS);
                }
                break;
            case 5:
                {
                localContext = new InSubqueryExprContext(localContext);
                this.context = localContext;
                previousContext = localContext;
                this.state = 1528;
                this.match(OpenSearchPPLParser.LT_PRTHS);
                this.state = 1529;
                this.valueExpression(0);
                this.state = 1534;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                while (_la === 168) {
                    {
                    {
                    this.state = 1530;
                    this.match(OpenSearchPPLParser.COMMA);
                    this.state = 1531;
                    this.valueExpression(0);
                    }
                    }
                    this.state = 1536;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                }
                this.state = 1537;
                this.match(OpenSearchPPLParser.RT_PRTHS);
                this.state = 1539;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 117) {
                    {
                    this.state = 1538;
                    this.match(OpenSearchPPLParser.NOT);
                    }
                }

                this.state = 1541;
                this.match(OpenSearchPPLParser.IN);
                this.state = 1542;
                this.match(OpenSearchPPLParser.LT_SQR_PRTHS);
                this.state = 1543;
                this.subSearch();
                this.state = 1544;
                this.match(OpenSearchPPLParser.RT_SQR_PRTHS);
                }
                break;
            case 6:
                {
                localContext = new ExistsSubqueryExprContext(localContext);
                this.context = localContext;
                previousContext = localContext;
                this.state = 1546;
                this.match(OpenSearchPPLParser.EXISTS);
                this.state = 1547;
                this.match(OpenSearchPPLParser.LT_SQR_PRTHS);
                this.state = 1548;
                this.subSearch();
                this.state = 1549;
                this.match(OpenSearchPPLParser.RT_SQR_PRTHS);
                }
                break;
            case 7:
                {
                localContext = new FieldExprContext(localContext);
                this.context = localContext;
                previousContext = localContext;
                this.state = 1551;
                this.fieldExpression();
                }
                break;
            case 8:
                {
                localContext = new NestedValueExprContext(localContext);
                this.context = localContext;
                previousContext = localContext;
                this.state = 1552;
                this.match(OpenSearchPPLParser.LT_PRTHS);
                this.state = 1553;
                this.logicalExpression(0);
                this.state = 1554;
                this.match(OpenSearchPPLParser.RT_PRTHS);
                }
                break;
            }
            this.context!.stop = this.tokenStream.LT(-1);
            this.state = 1575;
            this.errorHandler.sync(this);
            alternative = this.interpreter.adaptivePredict(this.tokenStream, 153, this.context);
            while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER) {
                if (alternative === 1) {
                    if (this.parseListeners != null) {
                        this.triggerExitRuleEvent();
                    }
                    previousContext = localContext;
                    {
                    this.state = 1573;
                    this.errorHandler.sync(this);
                    switch (this.interpreter.adaptivePredict(this.tokenStream, 152, this.context) ) {
                    case 1:
                        {
                        localContext = new BinaryArithmeticContext(new ValueExpressionContext(parentContext, parentState));
                        (localContext as BinaryArithmeticContext)._left = previousContext;
                        this.pushNewRecursionContext(localContext, _startState, OpenSearchPPLParser.RULE_valueExpression);
                        this.state = 1558;
                        if (!(this.precpred(this.context, 11))) {
                            throw this.createFailedPredicateException("this.precpred(this.context, 11)");
                        }
                        this.state = 1559;
                        (localContext as BinaryArithmeticContext)._binaryOperator = this.tokenStream.LT(1);
                        _la = this.tokenStream.LA(1);
                        if(!(((((_la - 179)) & ~0x1F) === 0 && ((1 << (_la - 179)) & 7) !== 0))) {
                            (localContext as BinaryArithmeticContext)._binaryOperator = this.errorHandler.recoverInline(this);
                        }
                        else {
                            this.errorHandler.reportMatch(this);
                            this.consume();
                        }
                        this.state = 1560;
                        (localContext as BinaryArithmeticContext)._right = this.valueExpression(12);
                        }
                        break;
                    case 2:
                        {
                        localContext = new BinaryArithmeticContext(new ValueExpressionContext(parentContext, parentState));
                        (localContext as BinaryArithmeticContext)._left = previousContext;
                        this.pushNewRecursionContext(localContext, _startState, OpenSearchPPLParser.RULE_valueExpression);
                        this.state = 1561;
                        if (!(this.precpred(this.context, 10))) {
                            throw this.createFailedPredicateException("this.precpred(this.context, 10)");
                        }
                        this.state = 1562;
                        (localContext as BinaryArithmeticContext)._binaryOperator = this.tokenStream.LT(1);
                        _la = this.tokenStream.LA(1);
                        if(!(_la === 177 || _la === 178)) {
                            (localContext as BinaryArithmeticContext)._binaryOperator = this.errorHandler.recoverInline(this);
                        }
                        else {
                            this.errorHandler.reportMatch(this);
                            this.consume();
                        }
                        this.state = 1563;
                        (localContext as BinaryArithmeticContext)._right = this.valueExpression(11);
                        }
                        break;
                    case 3:
                        {
                        localContext = new InSubqueryExprContext(new ValueExpressionContext(parentContext, parentState));
                        this.pushNewRecursionContext(localContext, _startState, OpenSearchPPLParser.RULE_valueExpression);
                        this.state = 1564;
                        if (!(this.precpred(this.context, 5))) {
                            throw this.createFailedPredicateException("this.precpred(this.context, 5)");
                        }
                        this.state = 1566;
                        this.errorHandler.sync(this);
                        _la = this.tokenStream.LA(1);
                        if (_la === 117) {
                            {
                            this.state = 1565;
                            this.match(OpenSearchPPLParser.NOT);
                            }
                        }

                        this.state = 1568;
                        this.match(OpenSearchPPLParser.IN);
                        this.state = 1569;
                        this.match(OpenSearchPPLParser.LT_SQR_PRTHS);
                        this.state = 1570;
                        this.subSearch();
                        this.state = 1571;
                        this.match(OpenSearchPPLParser.RT_SQR_PRTHS);
                        }
                        break;
                    }
                    }
                }
                this.state = 1577;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 153, this.context);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.unrollRecursionContexts(parentContext);
        }
        return localContext;
    }
    public evalExpression(): EvalExpressionContext {
        let localContext = new EvalExpressionContext(this.context, this.state);
        this.enterRule(localContext, 246, OpenSearchPPLParser.RULE_evalExpression);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1578;
            this.match(OpenSearchPPLParser.EVAL);
            this.state = 1579;
            this.match(OpenSearchPPLParser.LT_PRTHS);
            this.state = 1580;
            this.logicalExpression(0);
            this.state = 1581;
            this.match(OpenSearchPPLParser.RT_PRTHS);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public functionCall(): FunctionCallContext {
        let localContext = new FunctionCallContext(this.context, this.state);
        this.enterRule(localContext, 248, OpenSearchPPLParser.RULE_functionCall);
        try {
            this.state = 1590;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 154, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 1583;
                this.evalFunctionCall();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 1584;
                this.dataTypeFunctionCall();
                }
                break;
            case 3:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 1585;
                this.positionFunctionCall();
                }
                break;
            case 4:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 1586;
                this.caseFunctionCall();
                }
                break;
            case 5:
                this.enterOuterAlt(localContext, 5);
                {
                this.state = 1587;
                this.timestampFunctionCall();
                }
                break;
            case 6:
                this.enterOuterAlt(localContext, 6);
                {
                this.state = 1588;
                this.extractFunctionCall();
                }
                break;
            case 7:
                this.enterOuterAlt(localContext, 7);
                {
                this.state = 1589;
                this.getFormatFunctionCall();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public positionFunctionCall(): PositionFunctionCallContext {
        let localContext = new PositionFunctionCallContext(this.context, this.state);
        this.enterRule(localContext, 250, OpenSearchPPLParser.RULE_positionFunctionCall);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1592;
            this.positionFunctionName();
            this.state = 1593;
            this.match(OpenSearchPPLParser.LT_PRTHS);
            this.state = 1594;
            this.functionArg();
            this.state = 1595;
            this.match(OpenSearchPPLParser.IN);
            this.state = 1596;
            this.functionArg();
            this.state = 1597;
            this.match(OpenSearchPPLParser.RT_PRTHS);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public caseFunctionCall(): CaseFunctionCallContext {
        let localContext = new CaseFunctionCallContext(this.context, this.state);
        this.enterRule(localContext, 252, OpenSearchPPLParser.RULE_caseFunctionCall);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1599;
            this.match(OpenSearchPPLParser.CASE);
            this.state = 1600;
            this.match(OpenSearchPPLParser.LT_PRTHS);
            this.state = 1601;
            this.logicalExpression(0);
            this.state = 1602;
            this.match(OpenSearchPPLParser.COMMA);
            this.state = 1603;
            this.valueExpression(0);
            this.state = 1611;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 168) {
                {
                {
                this.state = 1604;
                this.match(OpenSearchPPLParser.COMMA);
                this.state = 1605;
                this.logicalExpression(0);
                this.state = 1606;
                this.match(OpenSearchPPLParser.COMMA);
                this.state = 1607;
                this.valueExpression(0);
                }
                }
                this.state = 1613;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            this.state = 1616;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 113) {
                {
                this.state = 1614;
                this.match(OpenSearchPPLParser.ELSE);
                this.state = 1615;
                this.valueExpression(0);
                }
            }

            this.state = 1618;
            this.match(OpenSearchPPLParser.RT_PRTHS);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public relevanceExpression(): RelevanceExpressionContext {
        let localContext = new RelevanceExpressionContext(this.context, this.state);
        this.enterRule(localContext, 254, OpenSearchPPLParser.RULE_relevanceExpression);
        try {
            this.state = 1622;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case OpenSearchPPLParser.MATCH:
            case OpenSearchPPLParser.MATCH_PHRASE:
            case OpenSearchPPLParser.MATCH_PHRASE_PREFIX:
            case OpenSearchPPLParser.MATCH_BOOL_PREFIX:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 1620;
                this.singleFieldRelevanceFunction();
                }
                break;
            case OpenSearchPPLParser.SIMPLE_QUERY_STRING:
            case OpenSearchPPLParser.MULTI_MATCH:
            case OpenSearchPPLParser.QUERY_STRING:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 1621;
                this.multiFieldRelevanceFunction();
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public singleFieldRelevanceFunction(): SingleFieldRelevanceFunctionContext {
        let localContext = new SingleFieldRelevanceFunctionContext(this.context, this.state);
        this.enterRule(localContext, 256, OpenSearchPPLParser.RULE_singleFieldRelevanceFunction);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1624;
            this.singleFieldRelevanceFunctionName();
            this.state = 1625;
            this.match(OpenSearchPPLParser.LT_PRTHS);
            this.state = 1626;
            localContext._field = this.relevanceField();
            this.state = 1627;
            this.match(OpenSearchPPLParser.COMMA);
            this.state = 1628;
            localContext._query = this.relevanceQuery();
            this.state = 1633;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 168) {
                {
                {
                this.state = 1629;
                this.match(OpenSearchPPLParser.COMMA);
                this.state = 1630;
                this.relevanceArg();
                }
                }
                this.state = 1635;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            this.state = 1636;
            this.match(OpenSearchPPLParser.RT_PRTHS);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public multiFieldRelevanceFunction(): MultiFieldRelevanceFunctionContext {
        let localContext = new MultiFieldRelevanceFunctionContext(this.context, this.state);
        this.enterRule(localContext, 258, OpenSearchPPLParser.RULE_multiFieldRelevanceFunction);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1638;
            this.multiFieldRelevanceFunctionName();
            this.state = 1639;
            this.match(OpenSearchPPLParser.LT_PRTHS);
            this.state = 1652;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 186) {
                {
                this.state = 1640;
                this.match(OpenSearchPPLParser.LT_SQR_PRTHS);
                this.state = 1641;
                localContext._field = this.relevanceFieldAndWeight();
                this.state = 1646;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                while (_la === 168) {
                    {
                    {
                    this.state = 1642;
                    this.match(OpenSearchPPLParser.COMMA);
                    this.state = 1643;
                    localContext._field = this.relevanceFieldAndWeight();
                    }
                    }
                    this.state = 1648;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                }
                this.state = 1649;
                this.match(OpenSearchPPLParser.RT_SQR_PRTHS);
                this.state = 1650;
                this.match(OpenSearchPPLParser.COMMA);
                }
            }

            this.state = 1654;
            localContext._query = this.relevanceQuery();
            this.state = 1659;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 168) {
                {
                {
                this.state = 1655;
                this.match(OpenSearchPPLParser.COMMA);
                this.state = 1656;
                this.relevanceArg();
                }
                }
                this.state = 1661;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            this.state = 1662;
            this.match(OpenSearchPPLParser.RT_PRTHS);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public tableSource(): TableSourceContext {
        let localContext = new TableSourceContext(this.context, this.state);
        this.enterRule(localContext, 260, OpenSearchPPLParser.RULE_tableSource);
        try {
            this.state = 1666;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case OpenSearchPPLParser.SEARCH:
            case OpenSearchPPLParser.DESCRIBE:
            case OpenSearchPPLParser.SHOW:
            case OpenSearchPPLParser.EXPLAIN:
            case OpenSearchPPLParser.FROM:
            case OpenSearchPPLParser.WHERE:
            case OpenSearchPPLParser.FIELDS:
            case OpenSearchPPLParser.TABLE:
            case OpenSearchPPLParser.RENAME:
            case OpenSearchPPLParser.STATS:
            case OpenSearchPPLParser.EVENTSTATS:
            case OpenSearchPPLParser.DEDUP:
            case OpenSearchPPLParser.SORT:
            case OpenSearchPPLParser.EVAL:
            case OpenSearchPPLParser.HEAD:
            case OpenSearchPPLParser.BIN:
            case OpenSearchPPLParser.TOP:
            case OpenSearchPPLParser.RARE:
            case OpenSearchPPLParser.PARSE:
            case OpenSearchPPLParser.REGEX:
            case OpenSearchPPLParser.REX:
            case OpenSearchPPLParser.PUNCT:
            case OpenSearchPPLParser.GROK:
            case OpenSearchPPLParser.PATTERN:
            case OpenSearchPPLParser.PATTERNS:
            case OpenSearchPPLParser.NEW_FIELD:
            case OpenSearchPPLParser.KMEANS:
            case OpenSearchPPLParser.AD:
            case OpenSearchPPLParser.ML:
            case OpenSearchPPLParser.FILLNULL:
            case OpenSearchPPLParser.FLATTEN:
            case OpenSearchPPLParser.TRENDLINE:
            case OpenSearchPPLParser.TIMECHART:
            case OpenSearchPPLParser.EXPAND:
            case OpenSearchPPLParser.VARIABLE_COUNT_THRESHOLD:
            case OpenSearchPPLParser.FREQUENCY_THRESHOLD_PERCENTAGE:
            case OpenSearchPPLParser.METHOD:
            case OpenSearchPPLParser.MAX_SAMPLE_COUNT:
            case OpenSearchPPLParser.BUFFER_LIMIT:
            case OpenSearchPPLParser.JOIN:
            case OpenSearchPPLParser.INNER:
            case OpenSearchPPLParser.OUTER:
            case OpenSearchPPLParser.FULL:
            case OpenSearchPPLParser.SEMI:
            case OpenSearchPPLParser.ANTI:
            case OpenSearchPPLParser.CROSS:
            case OpenSearchPPLParser.LEFT_HINT:
            case OpenSearchPPLParser.RIGHT_HINT:
            case OpenSearchPPLParser.SOURCE:
            case OpenSearchPPLParser.INDEX:
            case OpenSearchPPLParser.A:
            case OpenSearchPPLParser.ASC:
            case OpenSearchPPLParser.D:
            case OpenSearchPPLParser.DESC:
            case OpenSearchPPLParser.DATASOURCES:
            case OpenSearchPPLParser.USING:
            case OpenSearchPPLParser.WITH:
            case OpenSearchPPLParser.SIMPLE:
            case OpenSearchPPLParser.STANDARD:
            case OpenSearchPPLParser.COST:
            case OpenSearchPPLParser.EXTENDED:
            case OpenSearchPPLParser.OVERRIDE:
            case OpenSearchPPLParser.AUTO:
            case OpenSearchPPLParser.STR:
            case OpenSearchPPLParser.NUM:
            case OpenSearchPPLParser.SMA:
            case OpenSearchPPLParser.WMA:
            case OpenSearchPPLParser.KEEPEMPTY:
            case OpenSearchPPLParser.CONSECUTIVE:
            case OpenSearchPPLParser.DEDUP_SPLITVALUES:
            case OpenSearchPPLParser.PARTITIONS:
            case OpenSearchPPLParser.ALLNUM:
            case OpenSearchPPLParser.DELIM:
            case OpenSearchPPLParser.BUCKET_NULLABLE:
            case OpenSearchPPLParser.CENTROIDS:
            case OpenSearchPPLParser.ITERATIONS:
            case OpenSearchPPLParser.DISTANCE_TYPE:
            case OpenSearchPPLParser.NUMBER_OF_TREES:
            case OpenSearchPPLParser.SHINGLE_SIZE:
            case OpenSearchPPLParser.SAMPLE_SIZE:
            case OpenSearchPPLParser.OUTPUT_AFTER:
            case OpenSearchPPLParser.TIME_DECAY:
            case OpenSearchPPLParser.ANOMALY_RATE:
            case OpenSearchPPLParser.CATEGORY_FIELD:
            case OpenSearchPPLParser.TIME_FIELD:
            case OpenSearchPPLParser.TIME_ZONE:
            case OpenSearchPPLParser.TRAINING_DATA_SIZE:
            case OpenSearchPPLParser.ANOMALY_SCORE_THRESHOLD:
            case OpenSearchPPLParser.APPEND:
            case OpenSearchPPLParser.COUNTFIELD:
            case OpenSearchPPLParser.SHOWCOUNT:
            case OpenSearchPPLParser.INPUT:
            case OpenSearchPPLParser.OUTPUT:
            case OpenSearchPPLParser.PATH:
            case OpenSearchPPLParser.CASE:
            case OpenSearchPPLParser.ELSE:
            case OpenSearchPPLParser.IN:
            case OpenSearchPPLParser.EXISTS:
            case OpenSearchPPLParser.GEOIP:
            case OpenSearchPPLParser.REGEXP:
            case OpenSearchPPLParser.REGEX_MATCH:
            case OpenSearchPPLParser.CONVERT_TZ:
            case OpenSearchPPLParser.DATETIME:
            case OpenSearchPPLParser.DAY:
            case OpenSearchPPLParser.DAY_HOUR:
            case OpenSearchPPLParser.DAY_MICROSECOND:
            case OpenSearchPPLParser.DAY_MINUTE:
            case OpenSearchPPLParser.DAY_OF_YEAR:
            case OpenSearchPPLParser.DAY_SECOND:
            case OpenSearchPPLParser.HOUR:
            case OpenSearchPPLParser.HOUR_MICROSECOND:
            case OpenSearchPPLParser.HOUR_MINUTE:
            case OpenSearchPPLParser.HOUR_OF_DAY:
            case OpenSearchPPLParser.HOUR_SECOND:
            case OpenSearchPPLParser.INTERVAL:
            case OpenSearchPPLParser.MICROSECOND:
            case OpenSearchPPLParser.MILLISECOND:
            case OpenSearchPPLParser.MINUTE:
            case OpenSearchPPLParser.MINUTE_MICROSECOND:
            case OpenSearchPPLParser.MINUTE_OF_DAY:
            case OpenSearchPPLParser.MINUTE_OF_HOUR:
            case OpenSearchPPLParser.MINUTE_SECOND:
            case OpenSearchPPLParser.MONTH:
            case OpenSearchPPLParser.MONTH_OF_YEAR:
            case OpenSearchPPLParser.QUARTER:
            case OpenSearchPPLParser.SECOND:
            case OpenSearchPPLParser.SECOND_MICROSECOND:
            case OpenSearchPPLParser.SECOND_OF_MINUTE:
            case OpenSearchPPLParser.WEEK:
            case OpenSearchPPLParser.WEEK_OF_YEAR:
            case OpenSearchPPLParser.YEAR:
            case OpenSearchPPLParser.YEAR_MONTH:
            case OpenSearchPPLParser.LOOKUP:
            case OpenSearchPPLParser.IP:
            case OpenSearchPPLParser.DOT:
            case OpenSearchPPLParser.PLUS:
            case OpenSearchPPLParser.MINUS:
            case OpenSearchPPLParser.BACKTICK:
            case OpenSearchPPLParser.ARROW:
            case OpenSearchPPLParser.AVG:
            case OpenSearchPPLParser.COUNT:
            case OpenSearchPPLParser.DISTINCT_COUNT:
            case OpenSearchPPLParser.DISTINCT_COUNT_APPROX:
            case OpenSearchPPLParser.ESTDC:
            case OpenSearchPPLParser.ESTDC_ERROR:
            case OpenSearchPPLParser.MAX:
            case OpenSearchPPLParser.MEAN:
            case OpenSearchPPLParser.MEDIAN:
            case OpenSearchPPLParser.MIN:
            case OpenSearchPPLParser.MODE:
            case OpenSearchPPLParser.RANGE:
            case OpenSearchPPLParser.STDEV:
            case OpenSearchPPLParser.STDEVP:
            case OpenSearchPPLParser.SUM:
            case OpenSearchPPLParser.SUMSQ:
            case OpenSearchPPLParser.VAR_SAMP:
            case OpenSearchPPLParser.VAR_POP:
            case OpenSearchPPLParser.STDDEV_SAMP:
            case OpenSearchPPLParser.STDDEV_POP:
            case OpenSearchPPLParser.PERCENTILE:
            case OpenSearchPPLParser.PERCENTILE_APPROX:
            case OpenSearchPPLParser.EARLIEST:
            case OpenSearchPPLParser.LATEST:
            case OpenSearchPPLParser.TAKE:
            case OpenSearchPPLParser.LIST:
            case OpenSearchPPLParser.VALUES:
            case OpenSearchPPLParser.PER_DAY:
            case OpenSearchPPLParser.PER_HOUR:
            case OpenSearchPPLParser.PER_MINUTE:
            case OpenSearchPPLParser.PER_SECOND:
            case OpenSearchPPLParser.RATE:
            case OpenSearchPPLParser.SPARKLINE:
            case OpenSearchPPLParser.C:
            case OpenSearchPPLParser.DC:
            case OpenSearchPPLParser.ROW_NUMBER:
            case OpenSearchPPLParser.RANK:
            case OpenSearchPPLParser.DENSE_RANK:
            case OpenSearchPPLParser.PERCENT_RANK:
            case OpenSearchPPLParser.CUME_DIST:
            case OpenSearchPPLParser.FIRST:
            case OpenSearchPPLParser.LAST:
            case OpenSearchPPLParser.NTH:
            case OpenSearchPPLParser.NTILE:
            case OpenSearchPPLParser.PLUS_FUCTION:
            case OpenSearchPPLParser.MINUS_FUCTION:
            case OpenSearchPPLParser.STAR_FUNCTION:
            case OpenSearchPPLParser.DIVIDE_FUNCTION:
            case OpenSearchPPLParser.ABS:
            case OpenSearchPPLParser.CBRT:
            case OpenSearchPPLParser.CEIL:
            case OpenSearchPPLParser.CEILING:
            case OpenSearchPPLParser.CONV:
            case OpenSearchPPLParser.CRC32:
            case OpenSearchPPLParser.E:
            case OpenSearchPPLParser.EXP:
            case OpenSearchPPLParser.EXPM1:
            case OpenSearchPPLParser.FLOOR:
            case OpenSearchPPLParser.LN:
            case OpenSearchPPLParser.LOG:
            case OpenSearchPPLParser.LOG_WITH_BASE:
            case OpenSearchPPLParser.MOD:
            case OpenSearchPPLParser.MODULUS:
            case OpenSearchPPLParser.PI:
            case OpenSearchPPLParser.POSITION:
            case OpenSearchPPLParser.POW:
            case OpenSearchPPLParser.POWER:
            case OpenSearchPPLParser.RAND:
            case OpenSearchPPLParser.ROUND:
            case OpenSearchPPLParser.SIGN:
            case OpenSearchPPLParser.SQRT:
            case OpenSearchPPLParser.TRUNCATE:
            case OpenSearchPPLParser.RINT:
            case OpenSearchPPLParser.SIGNUM:
            case OpenSearchPPLParser.ACOS:
            case OpenSearchPPLParser.ASIN:
            case OpenSearchPPLParser.ATAN:
            case OpenSearchPPLParser.ATAN2:
            case OpenSearchPPLParser.COS:
            case OpenSearchPPLParser.COSH:
            case OpenSearchPPLParser.COT:
            case OpenSearchPPLParser.DEGREES:
            case OpenSearchPPLParser.RADIANS:
            case OpenSearchPPLParser.SIN:
            case OpenSearchPPLParser.SINH:
            case OpenSearchPPLParser.TAN:
            case OpenSearchPPLParser.MD5:
            case OpenSearchPPLParser.SHA1:
            case OpenSearchPPLParser.SHA2:
            case OpenSearchPPLParser.ADDDATE:
            case OpenSearchPPLParser.ADDTIME:
            case OpenSearchPPLParser.CURDATE:
            case OpenSearchPPLParser.CURRENT_DATE:
            case OpenSearchPPLParser.CURRENT_TIME:
            case OpenSearchPPLParser.CURRENT_TIMESTAMP:
            case OpenSearchPPLParser.CURTIME:
            case OpenSearchPPLParser.DATE:
            case OpenSearchPPLParser.DATEDIFF:
            case OpenSearchPPLParser.DATE_ADD:
            case OpenSearchPPLParser.DATE_FORMAT:
            case OpenSearchPPLParser.DATE_SUB:
            case OpenSearchPPLParser.DAYNAME:
            case OpenSearchPPLParser.DAYOFMONTH:
            case OpenSearchPPLParser.DAYOFWEEK:
            case OpenSearchPPLParser.DAYOFYEAR:
            case OpenSearchPPLParser.DAY_OF_MONTH:
            case OpenSearchPPLParser.DAY_OF_WEEK:
            case OpenSearchPPLParser.EXTRACT:
            case OpenSearchPPLParser.FROM_DAYS:
            case OpenSearchPPLParser.FROM_UNIXTIME:
            case OpenSearchPPLParser.GET_FORMAT:
            case OpenSearchPPLParser.LAST_DAY:
            case OpenSearchPPLParser.LOCALTIME:
            case OpenSearchPPLParser.LOCALTIMESTAMP:
            case OpenSearchPPLParser.MAKEDATE:
            case OpenSearchPPLParser.MAKETIME:
            case OpenSearchPPLParser.MONTHNAME:
            case OpenSearchPPLParser.NOW:
            case OpenSearchPPLParser.PERIOD_ADD:
            case OpenSearchPPLParser.PERIOD_DIFF:
            case OpenSearchPPLParser.SEC_TO_TIME:
            case OpenSearchPPLParser.STR_TO_DATE:
            case OpenSearchPPLParser.SUBDATE:
            case OpenSearchPPLParser.SUBTIME:
            case OpenSearchPPLParser.SYSDATE:
            case OpenSearchPPLParser.TIME:
            case OpenSearchPPLParser.TIMEDIFF:
            case OpenSearchPPLParser.TIMESTAMP:
            case OpenSearchPPLParser.TIME_FORMAT:
            case OpenSearchPPLParser.TIME_TO_SEC:
            case OpenSearchPPLParser.TO_DAYS:
            case OpenSearchPPLParser.TO_SECONDS:
            case OpenSearchPPLParser.UNIX_TIMESTAMP:
            case OpenSearchPPLParser.UTC_DATE:
            case OpenSearchPPLParser.UTC_TIME:
            case OpenSearchPPLParser.UTC_TIMESTAMP:
            case OpenSearchPPLParser.WEEKDAY:
            case OpenSearchPPLParser.YEARWEEK:
            case OpenSearchPPLParser.STRFTIME:
            case OpenSearchPPLParser.SUBSTR:
            case OpenSearchPPLParser.SUBSTRING:
            case OpenSearchPPLParser.LTRIM:
            case OpenSearchPPLParser.RTRIM:
            case OpenSearchPPLParser.TRIM:
            case OpenSearchPPLParser.LOWER:
            case OpenSearchPPLParser.UPPER:
            case OpenSearchPPLParser.CONCAT:
            case OpenSearchPPLParser.CONCAT_WS:
            case OpenSearchPPLParser.LENGTH:
            case OpenSearchPPLParser.STRCMP:
            case OpenSearchPPLParser.RIGHT:
            case OpenSearchPPLParser.LEFT:
            case OpenSearchPPLParser.ASCII:
            case OpenSearchPPLParser.LOCATE:
            case OpenSearchPPLParser.REPLACE:
            case OpenSearchPPLParser.REVERSE:
            case OpenSearchPPLParser.CAST:
            case OpenSearchPPLParser.LIKE:
            case OpenSearchPPLParser.ISNULL:
            case OpenSearchPPLParser.ISNOTNULL:
            case OpenSearchPPLParser.CIDRMATCH:
            case OpenSearchPPLParser.BETWEEN:
            case OpenSearchPPLParser.ISPRESENT:
            case OpenSearchPPLParser.ISEMPTY:
            case OpenSearchPPLParser.ISBLANK:
            case OpenSearchPPLParser.ARRAY:
            case OpenSearchPPLParser.ARRAY_LENGTH:
            case OpenSearchPPLParser.MVJOIN:
            case OpenSearchPPLParser.FORALL:
            case OpenSearchPPLParser.FILTER:
            case OpenSearchPPLParser.TRANSFORM:
            case OpenSearchPPLParser.REDUCE:
            case OpenSearchPPLParser.JSON_VALID:
            case OpenSearchPPLParser.JSON:
            case OpenSearchPPLParser.JSON_OBJECT:
            case OpenSearchPPLParser.JSON_ARRAY:
            case OpenSearchPPLParser.JSON_ARRAY_LENGTH:
            case OpenSearchPPLParser.JSON_EXTRACT:
            case OpenSearchPPLParser.JSON_KEYS:
            case OpenSearchPPLParser.JSON_SET:
            case OpenSearchPPLParser.JSON_DELETE:
            case OpenSearchPPLParser.JSON_APPEND:
            case OpenSearchPPLParser.JSON_EXTEND:
            case OpenSearchPPLParser.IFNULL:
            case OpenSearchPPLParser.NULLIF:
            case OpenSearchPPLParser.IF:
            case OpenSearchPPLParser.TYPEOF:
            case OpenSearchPPLParser.COALESCE:
            case OpenSearchPPLParser.MATCH:
            case OpenSearchPPLParser.MATCH_PHRASE:
            case OpenSearchPPLParser.MATCH_PHRASE_PREFIX:
            case OpenSearchPPLParser.MATCH_BOOL_PREFIX:
            case OpenSearchPPLParser.SIMPLE_QUERY_STRING:
            case OpenSearchPPLParser.MULTI_MATCH:
            case OpenSearchPPLParser.QUERY_STRING:
            case OpenSearchPPLParser.ALLOW_LEADING_WILDCARD:
            case OpenSearchPPLParser.ANALYZE_WILDCARD:
            case OpenSearchPPLParser.ANALYZER:
            case OpenSearchPPLParser.AUTO_GENERATE_SYNONYMS_PHRASE_QUERY:
            case OpenSearchPPLParser.BOOST:
            case OpenSearchPPLParser.CUTOFF_FREQUENCY:
            case OpenSearchPPLParser.DEFAULT_FIELD:
            case OpenSearchPPLParser.DEFAULT_OPERATOR:
            case OpenSearchPPLParser.ENABLE_POSITION_INCREMENTS:
            case OpenSearchPPLParser.ESCAPE:
            case OpenSearchPPLParser.FLAGS:
            case OpenSearchPPLParser.FUZZY_MAX_EXPANSIONS:
            case OpenSearchPPLParser.FUZZY_PREFIX_LENGTH:
            case OpenSearchPPLParser.FUZZY_TRANSPOSITIONS:
            case OpenSearchPPLParser.FUZZY_REWRITE:
            case OpenSearchPPLParser.FUZZINESS:
            case OpenSearchPPLParser.LENIENT:
            case OpenSearchPPLParser.LOW_FREQ_OPERATOR:
            case OpenSearchPPLParser.MAX_DETERMINIZED_STATES:
            case OpenSearchPPLParser.MAX_EXPANSIONS:
            case OpenSearchPPLParser.MINIMUM_SHOULD_MATCH:
            case OpenSearchPPLParser.OPERATOR:
            case OpenSearchPPLParser.PHRASE_SLOP:
            case OpenSearchPPLParser.PREFIX_LENGTH:
            case OpenSearchPPLParser.QUOTE_ANALYZER:
            case OpenSearchPPLParser.QUOTE_FIELD_SUFFIX:
            case OpenSearchPPLParser.REWRITE:
            case OpenSearchPPLParser.SLOP:
            case OpenSearchPPLParser.TIE_BREAKER:
            case OpenSearchPPLParser.TYPE:
            case OpenSearchPPLParser.ZERO_TERMS_QUERY:
            case OpenSearchPPLParser.SPAN:
            case OpenSearchPPLParser.MS:
            case OpenSearchPPLParser.S:
            case OpenSearchPPLParser.M:
            case OpenSearchPPLParser.H:
            case OpenSearchPPLParser.W:
            case OpenSearchPPLParser.Q:
            case OpenSearchPPLParser.Y:
            case OpenSearchPPLParser.SEC:
            case OpenSearchPPLParser.SECS:
            case OpenSearchPPLParser.SECONDS:
            case OpenSearchPPLParser.MINS:
            case OpenSearchPPLParser.MINUTES:
            case OpenSearchPPLParser.HR:
            case OpenSearchPPLParser.HRS:
            case OpenSearchPPLParser.HOURS:
            case OpenSearchPPLParser.DAYS:
            case OpenSearchPPLParser.MON:
            case OpenSearchPPLParser.MONTHS:
            case OpenSearchPPLParser.US:
            case OpenSearchPPLParser.CS:
            case OpenSearchPPLParser.DS:
            case OpenSearchPPLParser.PERCENTILE_SHORTCUT:
            case OpenSearchPPLParser.ID:
            case OpenSearchPPLParser.CLUSTER:
            case OpenSearchPPLParser.BQUOTA_STRING:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 1664;
                this.tableQualifiedName();
                }
                break;
            case OpenSearchPPLParser.ID_DATE_SUFFIX:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 1665;
                this.match(OpenSearchPPLParser.ID_DATE_SUFFIX);
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public tableFunction(): TableFunctionContext {
        let localContext = new TableFunctionContext(this.context, this.state);
        this.enterRule(localContext, 262, OpenSearchPPLParser.RULE_tableFunction);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1668;
            this.qualifiedName();
            this.state = 1669;
            this.match(OpenSearchPPLParser.LT_PRTHS);
            this.state = 1670;
            this.namedFunctionArgs();
            this.state = 1671;
            this.match(OpenSearchPPLParser.RT_PRTHS);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public fieldList(): FieldListContext {
        let localContext = new FieldListContext(this.context, this.state);
        this.enterRule(localContext, 264, OpenSearchPPLParser.RULE_fieldList);
        let _la: number;
        try {
            let alternative: number;
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1673;
            this.fieldExpression();
            this.state = 1680;
            this.errorHandler.sync(this);
            alternative = this.interpreter.adaptivePredict(this.tokenStream, 164, this.context);
            while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER) {
                if (alternative === 1) {
                    {
                    {
                    this.state = 1675;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if (_la === 168) {
                        {
                        this.state = 1674;
                        this.match(OpenSearchPPLParser.COMMA);
                        }
                    }

                    this.state = 1677;
                    this.fieldExpression();
                    }
                    }
                }
                this.state = 1682;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 164, this.context);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public sortField(): SortFieldContext {
        let localContext = new SortFieldContext(this.context, this.state);
        this.enterRule(localContext, 266, OpenSearchPPLParser.RULE_sortField);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1684;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 165, this.context) ) {
            case 1:
                {
                this.state = 1683;
                _la = this.tokenStream.LA(1);
                if(!(_la === 177 || _la === 178)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                }
                break;
            }
            this.state = 1686;
            this.sortFieldExpression();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public sortFieldExpression(): SortFieldExpressionContext {
        let localContext = new SortFieldExpressionContext(this.context, this.state);
        this.enterRule(localContext, 268, OpenSearchPPLParser.RULE_sortFieldExpression);
        try {
            this.state = 1709;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 166, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 1688;
                this.fieldExpression();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 1689;
                this.match(OpenSearchPPLParser.AUTO);
                this.state = 1690;
                this.match(OpenSearchPPLParser.LT_PRTHS);
                this.state = 1691;
                this.fieldExpression();
                this.state = 1692;
                this.match(OpenSearchPPLParser.RT_PRTHS);
                }
                break;
            case 3:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 1694;
                this.match(OpenSearchPPLParser.STR);
                this.state = 1695;
                this.match(OpenSearchPPLParser.LT_PRTHS);
                this.state = 1696;
                this.fieldExpression();
                this.state = 1697;
                this.match(OpenSearchPPLParser.RT_PRTHS);
                }
                break;
            case 4:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 1699;
                this.match(OpenSearchPPLParser.IP);
                this.state = 1700;
                this.match(OpenSearchPPLParser.LT_PRTHS);
                this.state = 1701;
                this.fieldExpression();
                this.state = 1702;
                this.match(OpenSearchPPLParser.RT_PRTHS);
                }
                break;
            case 5:
                this.enterOuterAlt(localContext, 5);
                {
                this.state = 1704;
                this.match(OpenSearchPPLParser.NUM);
                this.state = 1705;
                this.match(OpenSearchPPLParser.LT_PRTHS);
                this.state = 1706;
                this.fieldExpression();
                this.state = 1707;
                this.match(OpenSearchPPLParser.RT_PRTHS);
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public fieldExpression(): FieldExpressionContext {
        let localContext = new FieldExpressionContext(this.context, this.state);
        this.enterRule(localContext, 270, OpenSearchPPLParser.RULE_fieldExpression);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1711;
            this.qualifiedName();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public wcFieldExpression(): WcFieldExpressionContext {
        let localContext = new WcFieldExpressionContext(this.context, this.state);
        this.enterRule(localContext, 272, OpenSearchPPLParser.RULE_wcFieldExpression);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1713;
            this.wcQualifiedName();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public selectFieldExpression(): SelectFieldExpressionContext {
        let localContext = new SelectFieldExpressionContext(this.context, this.state);
        this.enterRule(localContext, 274, OpenSearchPPLParser.RULE_selectFieldExpression);
        try {
            this.state = 1717;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case OpenSearchPPLParser.SEARCH:
            case OpenSearchPPLParser.DESCRIBE:
            case OpenSearchPPLParser.SHOW:
            case OpenSearchPPLParser.EXPLAIN:
            case OpenSearchPPLParser.FROM:
            case OpenSearchPPLParser.WHERE:
            case OpenSearchPPLParser.FIELDS:
            case OpenSearchPPLParser.TABLE:
            case OpenSearchPPLParser.RENAME:
            case OpenSearchPPLParser.STATS:
            case OpenSearchPPLParser.EVENTSTATS:
            case OpenSearchPPLParser.DEDUP:
            case OpenSearchPPLParser.SORT:
            case OpenSearchPPLParser.EVAL:
            case OpenSearchPPLParser.HEAD:
            case OpenSearchPPLParser.BIN:
            case OpenSearchPPLParser.TOP:
            case OpenSearchPPLParser.RARE:
            case OpenSearchPPLParser.PARSE:
            case OpenSearchPPLParser.REGEX:
            case OpenSearchPPLParser.REX:
            case OpenSearchPPLParser.PUNCT:
            case OpenSearchPPLParser.GROK:
            case OpenSearchPPLParser.PATTERN:
            case OpenSearchPPLParser.PATTERNS:
            case OpenSearchPPLParser.NEW_FIELD:
            case OpenSearchPPLParser.KMEANS:
            case OpenSearchPPLParser.AD:
            case OpenSearchPPLParser.ML:
            case OpenSearchPPLParser.FILLNULL:
            case OpenSearchPPLParser.FLATTEN:
            case OpenSearchPPLParser.TRENDLINE:
            case OpenSearchPPLParser.TIMECHART:
            case OpenSearchPPLParser.EXPAND:
            case OpenSearchPPLParser.VARIABLE_COUNT_THRESHOLD:
            case OpenSearchPPLParser.FREQUENCY_THRESHOLD_PERCENTAGE:
            case OpenSearchPPLParser.METHOD:
            case OpenSearchPPLParser.MAX_SAMPLE_COUNT:
            case OpenSearchPPLParser.BUFFER_LIMIT:
            case OpenSearchPPLParser.JOIN:
            case OpenSearchPPLParser.INNER:
            case OpenSearchPPLParser.OUTER:
            case OpenSearchPPLParser.FULL:
            case OpenSearchPPLParser.SEMI:
            case OpenSearchPPLParser.ANTI:
            case OpenSearchPPLParser.CROSS:
            case OpenSearchPPLParser.LEFT_HINT:
            case OpenSearchPPLParser.RIGHT_HINT:
            case OpenSearchPPLParser.SOURCE:
            case OpenSearchPPLParser.INDEX:
            case OpenSearchPPLParser.A:
            case OpenSearchPPLParser.ASC:
            case OpenSearchPPLParser.D:
            case OpenSearchPPLParser.DESC:
            case OpenSearchPPLParser.DATASOURCES:
            case OpenSearchPPLParser.USING:
            case OpenSearchPPLParser.WITH:
            case OpenSearchPPLParser.SIMPLE:
            case OpenSearchPPLParser.STANDARD:
            case OpenSearchPPLParser.COST:
            case OpenSearchPPLParser.EXTENDED:
            case OpenSearchPPLParser.OVERRIDE:
            case OpenSearchPPLParser.AUTO:
            case OpenSearchPPLParser.STR:
            case OpenSearchPPLParser.NUM:
            case OpenSearchPPLParser.SMA:
            case OpenSearchPPLParser.WMA:
            case OpenSearchPPLParser.KEEPEMPTY:
            case OpenSearchPPLParser.CONSECUTIVE:
            case OpenSearchPPLParser.DEDUP_SPLITVALUES:
            case OpenSearchPPLParser.PARTITIONS:
            case OpenSearchPPLParser.ALLNUM:
            case OpenSearchPPLParser.DELIM:
            case OpenSearchPPLParser.BUCKET_NULLABLE:
            case OpenSearchPPLParser.CENTROIDS:
            case OpenSearchPPLParser.ITERATIONS:
            case OpenSearchPPLParser.DISTANCE_TYPE:
            case OpenSearchPPLParser.NUMBER_OF_TREES:
            case OpenSearchPPLParser.SHINGLE_SIZE:
            case OpenSearchPPLParser.SAMPLE_SIZE:
            case OpenSearchPPLParser.OUTPUT_AFTER:
            case OpenSearchPPLParser.TIME_DECAY:
            case OpenSearchPPLParser.ANOMALY_RATE:
            case OpenSearchPPLParser.CATEGORY_FIELD:
            case OpenSearchPPLParser.TIME_FIELD:
            case OpenSearchPPLParser.TIME_ZONE:
            case OpenSearchPPLParser.TRAINING_DATA_SIZE:
            case OpenSearchPPLParser.ANOMALY_SCORE_THRESHOLD:
            case OpenSearchPPLParser.APPEND:
            case OpenSearchPPLParser.COUNTFIELD:
            case OpenSearchPPLParser.SHOWCOUNT:
            case OpenSearchPPLParser.INPUT:
            case OpenSearchPPLParser.OUTPUT:
            case OpenSearchPPLParser.PATH:
            case OpenSearchPPLParser.CASE:
            case OpenSearchPPLParser.ELSE:
            case OpenSearchPPLParser.IN:
            case OpenSearchPPLParser.EXISTS:
            case OpenSearchPPLParser.GEOIP:
            case OpenSearchPPLParser.REGEXP:
            case OpenSearchPPLParser.REGEX_MATCH:
            case OpenSearchPPLParser.CONVERT_TZ:
            case OpenSearchPPLParser.DATETIME:
            case OpenSearchPPLParser.DAY:
            case OpenSearchPPLParser.DAY_HOUR:
            case OpenSearchPPLParser.DAY_MICROSECOND:
            case OpenSearchPPLParser.DAY_MINUTE:
            case OpenSearchPPLParser.DAY_OF_YEAR:
            case OpenSearchPPLParser.DAY_SECOND:
            case OpenSearchPPLParser.HOUR:
            case OpenSearchPPLParser.HOUR_MICROSECOND:
            case OpenSearchPPLParser.HOUR_MINUTE:
            case OpenSearchPPLParser.HOUR_OF_DAY:
            case OpenSearchPPLParser.HOUR_SECOND:
            case OpenSearchPPLParser.INTERVAL:
            case OpenSearchPPLParser.MICROSECOND:
            case OpenSearchPPLParser.MILLISECOND:
            case OpenSearchPPLParser.MINUTE:
            case OpenSearchPPLParser.MINUTE_MICROSECOND:
            case OpenSearchPPLParser.MINUTE_OF_DAY:
            case OpenSearchPPLParser.MINUTE_OF_HOUR:
            case OpenSearchPPLParser.MINUTE_SECOND:
            case OpenSearchPPLParser.MONTH:
            case OpenSearchPPLParser.MONTH_OF_YEAR:
            case OpenSearchPPLParser.QUARTER:
            case OpenSearchPPLParser.SECOND:
            case OpenSearchPPLParser.SECOND_MICROSECOND:
            case OpenSearchPPLParser.SECOND_OF_MINUTE:
            case OpenSearchPPLParser.WEEK:
            case OpenSearchPPLParser.WEEK_OF_YEAR:
            case OpenSearchPPLParser.YEAR:
            case OpenSearchPPLParser.YEAR_MONTH:
            case OpenSearchPPLParser.LOOKUP:
            case OpenSearchPPLParser.IP:
            case OpenSearchPPLParser.DOT:
            case OpenSearchPPLParser.PLUS:
            case OpenSearchPPLParser.MINUS:
            case OpenSearchPPLParser.SINGLE_QUOTE:
            case OpenSearchPPLParser.DOUBLE_QUOTE:
            case OpenSearchPPLParser.BACKTICK:
            case OpenSearchPPLParser.ARROW:
            case OpenSearchPPLParser.AVG:
            case OpenSearchPPLParser.COUNT:
            case OpenSearchPPLParser.DISTINCT_COUNT:
            case OpenSearchPPLParser.DISTINCT_COUNT_APPROX:
            case OpenSearchPPLParser.ESTDC:
            case OpenSearchPPLParser.ESTDC_ERROR:
            case OpenSearchPPLParser.MAX:
            case OpenSearchPPLParser.MEAN:
            case OpenSearchPPLParser.MEDIAN:
            case OpenSearchPPLParser.MIN:
            case OpenSearchPPLParser.MODE:
            case OpenSearchPPLParser.RANGE:
            case OpenSearchPPLParser.STDEV:
            case OpenSearchPPLParser.STDEVP:
            case OpenSearchPPLParser.SUM:
            case OpenSearchPPLParser.SUMSQ:
            case OpenSearchPPLParser.VAR_SAMP:
            case OpenSearchPPLParser.VAR_POP:
            case OpenSearchPPLParser.STDDEV_SAMP:
            case OpenSearchPPLParser.STDDEV_POP:
            case OpenSearchPPLParser.PERCENTILE:
            case OpenSearchPPLParser.PERCENTILE_APPROX:
            case OpenSearchPPLParser.EARLIEST:
            case OpenSearchPPLParser.LATEST:
            case OpenSearchPPLParser.TAKE:
            case OpenSearchPPLParser.LIST:
            case OpenSearchPPLParser.VALUES:
            case OpenSearchPPLParser.PER_DAY:
            case OpenSearchPPLParser.PER_HOUR:
            case OpenSearchPPLParser.PER_MINUTE:
            case OpenSearchPPLParser.PER_SECOND:
            case OpenSearchPPLParser.RATE:
            case OpenSearchPPLParser.SPARKLINE:
            case OpenSearchPPLParser.C:
            case OpenSearchPPLParser.DC:
            case OpenSearchPPLParser.ROW_NUMBER:
            case OpenSearchPPLParser.RANK:
            case OpenSearchPPLParser.DENSE_RANK:
            case OpenSearchPPLParser.PERCENT_RANK:
            case OpenSearchPPLParser.CUME_DIST:
            case OpenSearchPPLParser.FIRST:
            case OpenSearchPPLParser.LAST:
            case OpenSearchPPLParser.NTH:
            case OpenSearchPPLParser.NTILE:
            case OpenSearchPPLParser.PLUS_FUCTION:
            case OpenSearchPPLParser.MINUS_FUCTION:
            case OpenSearchPPLParser.STAR_FUNCTION:
            case OpenSearchPPLParser.DIVIDE_FUNCTION:
            case OpenSearchPPLParser.ABS:
            case OpenSearchPPLParser.CBRT:
            case OpenSearchPPLParser.CEIL:
            case OpenSearchPPLParser.CEILING:
            case OpenSearchPPLParser.CONV:
            case OpenSearchPPLParser.CRC32:
            case OpenSearchPPLParser.E:
            case OpenSearchPPLParser.EXP:
            case OpenSearchPPLParser.EXPM1:
            case OpenSearchPPLParser.FLOOR:
            case OpenSearchPPLParser.LN:
            case OpenSearchPPLParser.LOG:
            case OpenSearchPPLParser.LOG_WITH_BASE:
            case OpenSearchPPLParser.MOD:
            case OpenSearchPPLParser.MODULUS:
            case OpenSearchPPLParser.PI:
            case OpenSearchPPLParser.POSITION:
            case OpenSearchPPLParser.POW:
            case OpenSearchPPLParser.POWER:
            case OpenSearchPPLParser.RAND:
            case OpenSearchPPLParser.ROUND:
            case OpenSearchPPLParser.SIGN:
            case OpenSearchPPLParser.SQRT:
            case OpenSearchPPLParser.TRUNCATE:
            case OpenSearchPPLParser.RINT:
            case OpenSearchPPLParser.SIGNUM:
            case OpenSearchPPLParser.ACOS:
            case OpenSearchPPLParser.ASIN:
            case OpenSearchPPLParser.ATAN:
            case OpenSearchPPLParser.ATAN2:
            case OpenSearchPPLParser.COS:
            case OpenSearchPPLParser.COSH:
            case OpenSearchPPLParser.COT:
            case OpenSearchPPLParser.DEGREES:
            case OpenSearchPPLParser.RADIANS:
            case OpenSearchPPLParser.SIN:
            case OpenSearchPPLParser.SINH:
            case OpenSearchPPLParser.TAN:
            case OpenSearchPPLParser.MD5:
            case OpenSearchPPLParser.SHA1:
            case OpenSearchPPLParser.SHA2:
            case OpenSearchPPLParser.ADDDATE:
            case OpenSearchPPLParser.ADDTIME:
            case OpenSearchPPLParser.CURDATE:
            case OpenSearchPPLParser.CURRENT_DATE:
            case OpenSearchPPLParser.CURRENT_TIME:
            case OpenSearchPPLParser.CURRENT_TIMESTAMP:
            case OpenSearchPPLParser.CURTIME:
            case OpenSearchPPLParser.DATE:
            case OpenSearchPPLParser.DATEDIFF:
            case OpenSearchPPLParser.DATE_ADD:
            case OpenSearchPPLParser.DATE_FORMAT:
            case OpenSearchPPLParser.DATE_SUB:
            case OpenSearchPPLParser.DAYNAME:
            case OpenSearchPPLParser.DAYOFMONTH:
            case OpenSearchPPLParser.DAYOFWEEK:
            case OpenSearchPPLParser.DAYOFYEAR:
            case OpenSearchPPLParser.DAY_OF_MONTH:
            case OpenSearchPPLParser.DAY_OF_WEEK:
            case OpenSearchPPLParser.EXTRACT:
            case OpenSearchPPLParser.FROM_DAYS:
            case OpenSearchPPLParser.FROM_UNIXTIME:
            case OpenSearchPPLParser.GET_FORMAT:
            case OpenSearchPPLParser.LAST_DAY:
            case OpenSearchPPLParser.LOCALTIME:
            case OpenSearchPPLParser.LOCALTIMESTAMP:
            case OpenSearchPPLParser.MAKEDATE:
            case OpenSearchPPLParser.MAKETIME:
            case OpenSearchPPLParser.MONTHNAME:
            case OpenSearchPPLParser.NOW:
            case OpenSearchPPLParser.PERIOD_ADD:
            case OpenSearchPPLParser.PERIOD_DIFF:
            case OpenSearchPPLParser.SEC_TO_TIME:
            case OpenSearchPPLParser.STR_TO_DATE:
            case OpenSearchPPLParser.SUBDATE:
            case OpenSearchPPLParser.SUBTIME:
            case OpenSearchPPLParser.SYSDATE:
            case OpenSearchPPLParser.TIME:
            case OpenSearchPPLParser.TIMEDIFF:
            case OpenSearchPPLParser.TIMESTAMP:
            case OpenSearchPPLParser.TIME_FORMAT:
            case OpenSearchPPLParser.TIME_TO_SEC:
            case OpenSearchPPLParser.TO_DAYS:
            case OpenSearchPPLParser.TO_SECONDS:
            case OpenSearchPPLParser.UNIX_TIMESTAMP:
            case OpenSearchPPLParser.UTC_DATE:
            case OpenSearchPPLParser.UTC_TIME:
            case OpenSearchPPLParser.UTC_TIMESTAMP:
            case OpenSearchPPLParser.WEEKDAY:
            case OpenSearchPPLParser.YEARWEEK:
            case OpenSearchPPLParser.STRFTIME:
            case OpenSearchPPLParser.SUBSTR:
            case OpenSearchPPLParser.SUBSTRING:
            case OpenSearchPPLParser.LTRIM:
            case OpenSearchPPLParser.RTRIM:
            case OpenSearchPPLParser.TRIM:
            case OpenSearchPPLParser.LOWER:
            case OpenSearchPPLParser.UPPER:
            case OpenSearchPPLParser.CONCAT:
            case OpenSearchPPLParser.CONCAT_WS:
            case OpenSearchPPLParser.LENGTH:
            case OpenSearchPPLParser.STRCMP:
            case OpenSearchPPLParser.RIGHT:
            case OpenSearchPPLParser.LEFT:
            case OpenSearchPPLParser.ASCII:
            case OpenSearchPPLParser.LOCATE:
            case OpenSearchPPLParser.REPLACE:
            case OpenSearchPPLParser.REVERSE:
            case OpenSearchPPLParser.CAST:
            case OpenSearchPPLParser.LIKE:
            case OpenSearchPPLParser.ISNULL:
            case OpenSearchPPLParser.ISNOTNULL:
            case OpenSearchPPLParser.CIDRMATCH:
            case OpenSearchPPLParser.BETWEEN:
            case OpenSearchPPLParser.ISPRESENT:
            case OpenSearchPPLParser.ISEMPTY:
            case OpenSearchPPLParser.ISBLANK:
            case OpenSearchPPLParser.ARRAY:
            case OpenSearchPPLParser.ARRAY_LENGTH:
            case OpenSearchPPLParser.MVJOIN:
            case OpenSearchPPLParser.FORALL:
            case OpenSearchPPLParser.FILTER:
            case OpenSearchPPLParser.TRANSFORM:
            case OpenSearchPPLParser.REDUCE:
            case OpenSearchPPLParser.JSON_VALID:
            case OpenSearchPPLParser.JSON:
            case OpenSearchPPLParser.JSON_OBJECT:
            case OpenSearchPPLParser.JSON_ARRAY:
            case OpenSearchPPLParser.JSON_ARRAY_LENGTH:
            case OpenSearchPPLParser.JSON_EXTRACT:
            case OpenSearchPPLParser.JSON_KEYS:
            case OpenSearchPPLParser.JSON_SET:
            case OpenSearchPPLParser.JSON_DELETE:
            case OpenSearchPPLParser.JSON_APPEND:
            case OpenSearchPPLParser.JSON_EXTEND:
            case OpenSearchPPLParser.IFNULL:
            case OpenSearchPPLParser.NULLIF:
            case OpenSearchPPLParser.IF:
            case OpenSearchPPLParser.TYPEOF:
            case OpenSearchPPLParser.COALESCE:
            case OpenSearchPPLParser.MATCH:
            case OpenSearchPPLParser.MATCH_PHRASE:
            case OpenSearchPPLParser.MATCH_PHRASE_PREFIX:
            case OpenSearchPPLParser.MATCH_BOOL_PREFIX:
            case OpenSearchPPLParser.SIMPLE_QUERY_STRING:
            case OpenSearchPPLParser.MULTI_MATCH:
            case OpenSearchPPLParser.QUERY_STRING:
            case OpenSearchPPLParser.ALLOW_LEADING_WILDCARD:
            case OpenSearchPPLParser.ANALYZE_WILDCARD:
            case OpenSearchPPLParser.ANALYZER:
            case OpenSearchPPLParser.AUTO_GENERATE_SYNONYMS_PHRASE_QUERY:
            case OpenSearchPPLParser.BOOST:
            case OpenSearchPPLParser.CUTOFF_FREQUENCY:
            case OpenSearchPPLParser.DEFAULT_FIELD:
            case OpenSearchPPLParser.DEFAULT_OPERATOR:
            case OpenSearchPPLParser.ENABLE_POSITION_INCREMENTS:
            case OpenSearchPPLParser.ESCAPE:
            case OpenSearchPPLParser.FLAGS:
            case OpenSearchPPLParser.FUZZY_MAX_EXPANSIONS:
            case OpenSearchPPLParser.FUZZY_PREFIX_LENGTH:
            case OpenSearchPPLParser.FUZZY_TRANSPOSITIONS:
            case OpenSearchPPLParser.FUZZY_REWRITE:
            case OpenSearchPPLParser.FUZZINESS:
            case OpenSearchPPLParser.LENIENT:
            case OpenSearchPPLParser.LOW_FREQ_OPERATOR:
            case OpenSearchPPLParser.MAX_DETERMINIZED_STATES:
            case OpenSearchPPLParser.MAX_EXPANSIONS:
            case OpenSearchPPLParser.MINIMUM_SHOULD_MATCH:
            case OpenSearchPPLParser.OPERATOR:
            case OpenSearchPPLParser.PHRASE_SLOP:
            case OpenSearchPPLParser.PREFIX_LENGTH:
            case OpenSearchPPLParser.QUOTE_ANALYZER:
            case OpenSearchPPLParser.QUOTE_FIELD_SUFFIX:
            case OpenSearchPPLParser.REWRITE:
            case OpenSearchPPLParser.SLOP:
            case OpenSearchPPLParser.TIE_BREAKER:
            case OpenSearchPPLParser.TYPE:
            case OpenSearchPPLParser.ZERO_TERMS_QUERY:
            case OpenSearchPPLParser.SPAN:
            case OpenSearchPPLParser.MS:
            case OpenSearchPPLParser.S:
            case OpenSearchPPLParser.M:
            case OpenSearchPPLParser.H:
            case OpenSearchPPLParser.W:
            case OpenSearchPPLParser.Q:
            case OpenSearchPPLParser.Y:
            case OpenSearchPPLParser.SEC:
            case OpenSearchPPLParser.SECS:
            case OpenSearchPPLParser.SECONDS:
            case OpenSearchPPLParser.MINS:
            case OpenSearchPPLParser.MINUTES:
            case OpenSearchPPLParser.HR:
            case OpenSearchPPLParser.HRS:
            case OpenSearchPPLParser.HOURS:
            case OpenSearchPPLParser.DAYS:
            case OpenSearchPPLParser.MON:
            case OpenSearchPPLParser.MONTHS:
            case OpenSearchPPLParser.US:
            case OpenSearchPPLParser.CS:
            case OpenSearchPPLParser.DS:
            case OpenSearchPPLParser.PERCENTILE_SHORTCUT:
            case OpenSearchPPLParser.ID:
            case OpenSearchPPLParser.BQUOTA_STRING:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 1715;
                this.wcQualifiedName();
                }
                break;
            case OpenSearchPPLParser.STAR:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 1716;
                this.match(OpenSearchPPLParser.STAR);
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public renameFieldExpression(): RenameFieldExpressionContext {
        let localContext = new RenameFieldExpressionContext(this.context, this.state);
        this.enterRule(localContext, 276, OpenSearchPPLParser.RULE_renameFieldExpression);
        try {
            this.state = 1721;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case OpenSearchPPLParser.SEARCH:
            case OpenSearchPPLParser.DESCRIBE:
            case OpenSearchPPLParser.SHOW:
            case OpenSearchPPLParser.EXPLAIN:
            case OpenSearchPPLParser.FROM:
            case OpenSearchPPLParser.WHERE:
            case OpenSearchPPLParser.FIELDS:
            case OpenSearchPPLParser.TABLE:
            case OpenSearchPPLParser.RENAME:
            case OpenSearchPPLParser.STATS:
            case OpenSearchPPLParser.EVENTSTATS:
            case OpenSearchPPLParser.DEDUP:
            case OpenSearchPPLParser.SORT:
            case OpenSearchPPLParser.EVAL:
            case OpenSearchPPLParser.HEAD:
            case OpenSearchPPLParser.BIN:
            case OpenSearchPPLParser.TOP:
            case OpenSearchPPLParser.RARE:
            case OpenSearchPPLParser.PARSE:
            case OpenSearchPPLParser.REGEX:
            case OpenSearchPPLParser.REX:
            case OpenSearchPPLParser.PUNCT:
            case OpenSearchPPLParser.GROK:
            case OpenSearchPPLParser.PATTERN:
            case OpenSearchPPLParser.PATTERNS:
            case OpenSearchPPLParser.NEW_FIELD:
            case OpenSearchPPLParser.KMEANS:
            case OpenSearchPPLParser.AD:
            case OpenSearchPPLParser.ML:
            case OpenSearchPPLParser.FILLNULL:
            case OpenSearchPPLParser.FLATTEN:
            case OpenSearchPPLParser.TRENDLINE:
            case OpenSearchPPLParser.TIMECHART:
            case OpenSearchPPLParser.EXPAND:
            case OpenSearchPPLParser.VARIABLE_COUNT_THRESHOLD:
            case OpenSearchPPLParser.FREQUENCY_THRESHOLD_PERCENTAGE:
            case OpenSearchPPLParser.METHOD:
            case OpenSearchPPLParser.MAX_SAMPLE_COUNT:
            case OpenSearchPPLParser.BUFFER_LIMIT:
            case OpenSearchPPLParser.JOIN:
            case OpenSearchPPLParser.INNER:
            case OpenSearchPPLParser.OUTER:
            case OpenSearchPPLParser.FULL:
            case OpenSearchPPLParser.SEMI:
            case OpenSearchPPLParser.ANTI:
            case OpenSearchPPLParser.CROSS:
            case OpenSearchPPLParser.LEFT_HINT:
            case OpenSearchPPLParser.RIGHT_HINT:
            case OpenSearchPPLParser.SOURCE:
            case OpenSearchPPLParser.INDEX:
            case OpenSearchPPLParser.A:
            case OpenSearchPPLParser.ASC:
            case OpenSearchPPLParser.D:
            case OpenSearchPPLParser.DESC:
            case OpenSearchPPLParser.DATASOURCES:
            case OpenSearchPPLParser.USING:
            case OpenSearchPPLParser.WITH:
            case OpenSearchPPLParser.SIMPLE:
            case OpenSearchPPLParser.STANDARD:
            case OpenSearchPPLParser.COST:
            case OpenSearchPPLParser.EXTENDED:
            case OpenSearchPPLParser.OVERRIDE:
            case OpenSearchPPLParser.AUTO:
            case OpenSearchPPLParser.STR:
            case OpenSearchPPLParser.NUM:
            case OpenSearchPPLParser.SMA:
            case OpenSearchPPLParser.WMA:
            case OpenSearchPPLParser.KEEPEMPTY:
            case OpenSearchPPLParser.CONSECUTIVE:
            case OpenSearchPPLParser.DEDUP_SPLITVALUES:
            case OpenSearchPPLParser.PARTITIONS:
            case OpenSearchPPLParser.ALLNUM:
            case OpenSearchPPLParser.DELIM:
            case OpenSearchPPLParser.BUCKET_NULLABLE:
            case OpenSearchPPLParser.CENTROIDS:
            case OpenSearchPPLParser.ITERATIONS:
            case OpenSearchPPLParser.DISTANCE_TYPE:
            case OpenSearchPPLParser.NUMBER_OF_TREES:
            case OpenSearchPPLParser.SHINGLE_SIZE:
            case OpenSearchPPLParser.SAMPLE_SIZE:
            case OpenSearchPPLParser.OUTPUT_AFTER:
            case OpenSearchPPLParser.TIME_DECAY:
            case OpenSearchPPLParser.ANOMALY_RATE:
            case OpenSearchPPLParser.CATEGORY_FIELD:
            case OpenSearchPPLParser.TIME_FIELD:
            case OpenSearchPPLParser.TIME_ZONE:
            case OpenSearchPPLParser.TRAINING_DATA_SIZE:
            case OpenSearchPPLParser.ANOMALY_SCORE_THRESHOLD:
            case OpenSearchPPLParser.APPEND:
            case OpenSearchPPLParser.COUNTFIELD:
            case OpenSearchPPLParser.SHOWCOUNT:
            case OpenSearchPPLParser.INPUT:
            case OpenSearchPPLParser.OUTPUT:
            case OpenSearchPPLParser.PATH:
            case OpenSearchPPLParser.CASE:
            case OpenSearchPPLParser.ELSE:
            case OpenSearchPPLParser.IN:
            case OpenSearchPPLParser.EXISTS:
            case OpenSearchPPLParser.GEOIP:
            case OpenSearchPPLParser.REGEXP:
            case OpenSearchPPLParser.REGEX_MATCH:
            case OpenSearchPPLParser.CONVERT_TZ:
            case OpenSearchPPLParser.DATETIME:
            case OpenSearchPPLParser.DAY:
            case OpenSearchPPLParser.DAY_HOUR:
            case OpenSearchPPLParser.DAY_MICROSECOND:
            case OpenSearchPPLParser.DAY_MINUTE:
            case OpenSearchPPLParser.DAY_OF_YEAR:
            case OpenSearchPPLParser.DAY_SECOND:
            case OpenSearchPPLParser.HOUR:
            case OpenSearchPPLParser.HOUR_MICROSECOND:
            case OpenSearchPPLParser.HOUR_MINUTE:
            case OpenSearchPPLParser.HOUR_OF_DAY:
            case OpenSearchPPLParser.HOUR_SECOND:
            case OpenSearchPPLParser.INTERVAL:
            case OpenSearchPPLParser.MICROSECOND:
            case OpenSearchPPLParser.MILLISECOND:
            case OpenSearchPPLParser.MINUTE:
            case OpenSearchPPLParser.MINUTE_MICROSECOND:
            case OpenSearchPPLParser.MINUTE_OF_DAY:
            case OpenSearchPPLParser.MINUTE_OF_HOUR:
            case OpenSearchPPLParser.MINUTE_SECOND:
            case OpenSearchPPLParser.MONTH:
            case OpenSearchPPLParser.MONTH_OF_YEAR:
            case OpenSearchPPLParser.QUARTER:
            case OpenSearchPPLParser.SECOND:
            case OpenSearchPPLParser.SECOND_MICROSECOND:
            case OpenSearchPPLParser.SECOND_OF_MINUTE:
            case OpenSearchPPLParser.WEEK:
            case OpenSearchPPLParser.WEEK_OF_YEAR:
            case OpenSearchPPLParser.YEAR:
            case OpenSearchPPLParser.YEAR_MONTH:
            case OpenSearchPPLParser.LOOKUP:
            case OpenSearchPPLParser.IP:
            case OpenSearchPPLParser.DOT:
            case OpenSearchPPLParser.PLUS:
            case OpenSearchPPLParser.MINUS:
            case OpenSearchPPLParser.SINGLE_QUOTE:
            case OpenSearchPPLParser.DOUBLE_QUOTE:
            case OpenSearchPPLParser.BACKTICK:
            case OpenSearchPPLParser.ARROW:
            case OpenSearchPPLParser.AVG:
            case OpenSearchPPLParser.COUNT:
            case OpenSearchPPLParser.DISTINCT_COUNT:
            case OpenSearchPPLParser.DISTINCT_COUNT_APPROX:
            case OpenSearchPPLParser.ESTDC:
            case OpenSearchPPLParser.ESTDC_ERROR:
            case OpenSearchPPLParser.MAX:
            case OpenSearchPPLParser.MEAN:
            case OpenSearchPPLParser.MEDIAN:
            case OpenSearchPPLParser.MIN:
            case OpenSearchPPLParser.MODE:
            case OpenSearchPPLParser.RANGE:
            case OpenSearchPPLParser.STDEV:
            case OpenSearchPPLParser.STDEVP:
            case OpenSearchPPLParser.SUM:
            case OpenSearchPPLParser.SUMSQ:
            case OpenSearchPPLParser.VAR_SAMP:
            case OpenSearchPPLParser.VAR_POP:
            case OpenSearchPPLParser.STDDEV_SAMP:
            case OpenSearchPPLParser.STDDEV_POP:
            case OpenSearchPPLParser.PERCENTILE:
            case OpenSearchPPLParser.PERCENTILE_APPROX:
            case OpenSearchPPLParser.EARLIEST:
            case OpenSearchPPLParser.LATEST:
            case OpenSearchPPLParser.TAKE:
            case OpenSearchPPLParser.LIST:
            case OpenSearchPPLParser.VALUES:
            case OpenSearchPPLParser.PER_DAY:
            case OpenSearchPPLParser.PER_HOUR:
            case OpenSearchPPLParser.PER_MINUTE:
            case OpenSearchPPLParser.PER_SECOND:
            case OpenSearchPPLParser.RATE:
            case OpenSearchPPLParser.SPARKLINE:
            case OpenSearchPPLParser.C:
            case OpenSearchPPLParser.DC:
            case OpenSearchPPLParser.ROW_NUMBER:
            case OpenSearchPPLParser.RANK:
            case OpenSearchPPLParser.DENSE_RANK:
            case OpenSearchPPLParser.PERCENT_RANK:
            case OpenSearchPPLParser.CUME_DIST:
            case OpenSearchPPLParser.FIRST:
            case OpenSearchPPLParser.LAST:
            case OpenSearchPPLParser.NTH:
            case OpenSearchPPLParser.NTILE:
            case OpenSearchPPLParser.PLUS_FUCTION:
            case OpenSearchPPLParser.MINUS_FUCTION:
            case OpenSearchPPLParser.STAR_FUNCTION:
            case OpenSearchPPLParser.DIVIDE_FUNCTION:
            case OpenSearchPPLParser.ABS:
            case OpenSearchPPLParser.CBRT:
            case OpenSearchPPLParser.CEIL:
            case OpenSearchPPLParser.CEILING:
            case OpenSearchPPLParser.CONV:
            case OpenSearchPPLParser.CRC32:
            case OpenSearchPPLParser.E:
            case OpenSearchPPLParser.EXP:
            case OpenSearchPPLParser.EXPM1:
            case OpenSearchPPLParser.FLOOR:
            case OpenSearchPPLParser.LN:
            case OpenSearchPPLParser.LOG:
            case OpenSearchPPLParser.LOG_WITH_BASE:
            case OpenSearchPPLParser.MOD:
            case OpenSearchPPLParser.MODULUS:
            case OpenSearchPPLParser.PI:
            case OpenSearchPPLParser.POSITION:
            case OpenSearchPPLParser.POW:
            case OpenSearchPPLParser.POWER:
            case OpenSearchPPLParser.RAND:
            case OpenSearchPPLParser.ROUND:
            case OpenSearchPPLParser.SIGN:
            case OpenSearchPPLParser.SQRT:
            case OpenSearchPPLParser.TRUNCATE:
            case OpenSearchPPLParser.RINT:
            case OpenSearchPPLParser.SIGNUM:
            case OpenSearchPPLParser.ACOS:
            case OpenSearchPPLParser.ASIN:
            case OpenSearchPPLParser.ATAN:
            case OpenSearchPPLParser.ATAN2:
            case OpenSearchPPLParser.COS:
            case OpenSearchPPLParser.COSH:
            case OpenSearchPPLParser.COT:
            case OpenSearchPPLParser.DEGREES:
            case OpenSearchPPLParser.RADIANS:
            case OpenSearchPPLParser.SIN:
            case OpenSearchPPLParser.SINH:
            case OpenSearchPPLParser.TAN:
            case OpenSearchPPLParser.MD5:
            case OpenSearchPPLParser.SHA1:
            case OpenSearchPPLParser.SHA2:
            case OpenSearchPPLParser.ADDDATE:
            case OpenSearchPPLParser.ADDTIME:
            case OpenSearchPPLParser.CURDATE:
            case OpenSearchPPLParser.CURRENT_DATE:
            case OpenSearchPPLParser.CURRENT_TIME:
            case OpenSearchPPLParser.CURRENT_TIMESTAMP:
            case OpenSearchPPLParser.CURTIME:
            case OpenSearchPPLParser.DATE:
            case OpenSearchPPLParser.DATEDIFF:
            case OpenSearchPPLParser.DATE_ADD:
            case OpenSearchPPLParser.DATE_FORMAT:
            case OpenSearchPPLParser.DATE_SUB:
            case OpenSearchPPLParser.DAYNAME:
            case OpenSearchPPLParser.DAYOFMONTH:
            case OpenSearchPPLParser.DAYOFWEEK:
            case OpenSearchPPLParser.DAYOFYEAR:
            case OpenSearchPPLParser.DAY_OF_MONTH:
            case OpenSearchPPLParser.DAY_OF_WEEK:
            case OpenSearchPPLParser.EXTRACT:
            case OpenSearchPPLParser.FROM_DAYS:
            case OpenSearchPPLParser.FROM_UNIXTIME:
            case OpenSearchPPLParser.GET_FORMAT:
            case OpenSearchPPLParser.LAST_DAY:
            case OpenSearchPPLParser.LOCALTIME:
            case OpenSearchPPLParser.LOCALTIMESTAMP:
            case OpenSearchPPLParser.MAKEDATE:
            case OpenSearchPPLParser.MAKETIME:
            case OpenSearchPPLParser.MONTHNAME:
            case OpenSearchPPLParser.NOW:
            case OpenSearchPPLParser.PERIOD_ADD:
            case OpenSearchPPLParser.PERIOD_DIFF:
            case OpenSearchPPLParser.SEC_TO_TIME:
            case OpenSearchPPLParser.STR_TO_DATE:
            case OpenSearchPPLParser.SUBDATE:
            case OpenSearchPPLParser.SUBTIME:
            case OpenSearchPPLParser.SYSDATE:
            case OpenSearchPPLParser.TIME:
            case OpenSearchPPLParser.TIMEDIFF:
            case OpenSearchPPLParser.TIMESTAMP:
            case OpenSearchPPLParser.TIME_FORMAT:
            case OpenSearchPPLParser.TIME_TO_SEC:
            case OpenSearchPPLParser.TO_DAYS:
            case OpenSearchPPLParser.TO_SECONDS:
            case OpenSearchPPLParser.UNIX_TIMESTAMP:
            case OpenSearchPPLParser.UTC_DATE:
            case OpenSearchPPLParser.UTC_TIME:
            case OpenSearchPPLParser.UTC_TIMESTAMP:
            case OpenSearchPPLParser.WEEKDAY:
            case OpenSearchPPLParser.YEARWEEK:
            case OpenSearchPPLParser.STRFTIME:
            case OpenSearchPPLParser.SUBSTR:
            case OpenSearchPPLParser.SUBSTRING:
            case OpenSearchPPLParser.LTRIM:
            case OpenSearchPPLParser.RTRIM:
            case OpenSearchPPLParser.TRIM:
            case OpenSearchPPLParser.LOWER:
            case OpenSearchPPLParser.UPPER:
            case OpenSearchPPLParser.CONCAT:
            case OpenSearchPPLParser.CONCAT_WS:
            case OpenSearchPPLParser.LENGTH:
            case OpenSearchPPLParser.STRCMP:
            case OpenSearchPPLParser.RIGHT:
            case OpenSearchPPLParser.LEFT:
            case OpenSearchPPLParser.ASCII:
            case OpenSearchPPLParser.LOCATE:
            case OpenSearchPPLParser.REPLACE:
            case OpenSearchPPLParser.REVERSE:
            case OpenSearchPPLParser.CAST:
            case OpenSearchPPLParser.LIKE:
            case OpenSearchPPLParser.ISNULL:
            case OpenSearchPPLParser.ISNOTNULL:
            case OpenSearchPPLParser.CIDRMATCH:
            case OpenSearchPPLParser.BETWEEN:
            case OpenSearchPPLParser.ISPRESENT:
            case OpenSearchPPLParser.ISEMPTY:
            case OpenSearchPPLParser.ISBLANK:
            case OpenSearchPPLParser.ARRAY:
            case OpenSearchPPLParser.ARRAY_LENGTH:
            case OpenSearchPPLParser.MVJOIN:
            case OpenSearchPPLParser.FORALL:
            case OpenSearchPPLParser.FILTER:
            case OpenSearchPPLParser.TRANSFORM:
            case OpenSearchPPLParser.REDUCE:
            case OpenSearchPPLParser.JSON_VALID:
            case OpenSearchPPLParser.JSON:
            case OpenSearchPPLParser.JSON_OBJECT:
            case OpenSearchPPLParser.JSON_ARRAY:
            case OpenSearchPPLParser.JSON_ARRAY_LENGTH:
            case OpenSearchPPLParser.JSON_EXTRACT:
            case OpenSearchPPLParser.JSON_KEYS:
            case OpenSearchPPLParser.JSON_SET:
            case OpenSearchPPLParser.JSON_DELETE:
            case OpenSearchPPLParser.JSON_APPEND:
            case OpenSearchPPLParser.JSON_EXTEND:
            case OpenSearchPPLParser.IFNULL:
            case OpenSearchPPLParser.NULLIF:
            case OpenSearchPPLParser.IF:
            case OpenSearchPPLParser.TYPEOF:
            case OpenSearchPPLParser.COALESCE:
            case OpenSearchPPLParser.MATCH:
            case OpenSearchPPLParser.MATCH_PHRASE:
            case OpenSearchPPLParser.MATCH_PHRASE_PREFIX:
            case OpenSearchPPLParser.MATCH_BOOL_PREFIX:
            case OpenSearchPPLParser.SIMPLE_QUERY_STRING:
            case OpenSearchPPLParser.MULTI_MATCH:
            case OpenSearchPPLParser.QUERY_STRING:
            case OpenSearchPPLParser.ALLOW_LEADING_WILDCARD:
            case OpenSearchPPLParser.ANALYZE_WILDCARD:
            case OpenSearchPPLParser.ANALYZER:
            case OpenSearchPPLParser.AUTO_GENERATE_SYNONYMS_PHRASE_QUERY:
            case OpenSearchPPLParser.BOOST:
            case OpenSearchPPLParser.CUTOFF_FREQUENCY:
            case OpenSearchPPLParser.DEFAULT_FIELD:
            case OpenSearchPPLParser.DEFAULT_OPERATOR:
            case OpenSearchPPLParser.ENABLE_POSITION_INCREMENTS:
            case OpenSearchPPLParser.ESCAPE:
            case OpenSearchPPLParser.FLAGS:
            case OpenSearchPPLParser.FUZZY_MAX_EXPANSIONS:
            case OpenSearchPPLParser.FUZZY_PREFIX_LENGTH:
            case OpenSearchPPLParser.FUZZY_TRANSPOSITIONS:
            case OpenSearchPPLParser.FUZZY_REWRITE:
            case OpenSearchPPLParser.FUZZINESS:
            case OpenSearchPPLParser.LENIENT:
            case OpenSearchPPLParser.LOW_FREQ_OPERATOR:
            case OpenSearchPPLParser.MAX_DETERMINIZED_STATES:
            case OpenSearchPPLParser.MAX_EXPANSIONS:
            case OpenSearchPPLParser.MINIMUM_SHOULD_MATCH:
            case OpenSearchPPLParser.OPERATOR:
            case OpenSearchPPLParser.PHRASE_SLOP:
            case OpenSearchPPLParser.PREFIX_LENGTH:
            case OpenSearchPPLParser.QUOTE_ANALYZER:
            case OpenSearchPPLParser.QUOTE_FIELD_SUFFIX:
            case OpenSearchPPLParser.REWRITE:
            case OpenSearchPPLParser.SLOP:
            case OpenSearchPPLParser.TIE_BREAKER:
            case OpenSearchPPLParser.TYPE:
            case OpenSearchPPLParser.ZERO_TERMS_QUERY:
            case OpenSearchPPLParser.SPAN:
            case OpenSearchPPLParser.MS:
            case OpenSearchPPLParser.S:
            case OpenSearchPPLParser.M:
            case OpenSearchPPLParser.H:
            case OpenSearchPPLParser.W:
            case OpenSearchPPLParser.Q:
            case OpenSearchPPLParser.Y:
            case OpenSearchPPLParser.SEC:
            case OpenSearchPPLParser.SECS:
            case OpenSearchPPLParser.SECONDS:
            case OpenSearchPPLParser.MINS:
            case OpenSearchPPLParser.MINUTES:
            case OpenSearchPPLParser.HR:
            case OpenSearchPPLParser.HRS:
            case OpenSearchPPLParser.HOURS:
            case OpenSearchPPLParser.DAYS:
            case OpenSearchPPLParser.MON:
            case OpenSearchPPLParser.MONTHS:
            case OpenSearchPPLParser.US:
            case OpenSearchPPLParser.CS:
            case OpenSearchPPLParser.DS:
            case OpenSearchPPLParser.PERCENTILE_SHORTCUT:
            case OpenSearchPPLParser.ID:
            case OpenSearchPPLParser.BQUOTA_STRING:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 1719;
                this.wcQualifiedName();
                }
                break;
            case OpenSearchPPLParser.STAR:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 1720;
                this.match(OpenSearchPPLParser.STAR);
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public evalFunctionCall(): EvalFunctionCallContext {
        let localContext = new EvalFunctionCallContext(this.context, this.state);
        this.enterRule(localContext, 278, OpenSearchPPLParser.RULE_evalFunctionCall);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1723;
            this.evalFunctionName();
            this.state = 1724;
            this.match(OpenSearchPPLParser.LT_PRTHS);
            this.state = 1725;
            this.functionArgs();
            this.state = 1726;
            this.match(OpenSearchPPLParser.RT_PRTHS);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public dataTypeFunctionCall(): DataTypeFunctionCallContext {
        let localContext = new DataTypeFunctionCallContext(this.context, this.state);
        this.enterRule(localContext, 280, OpenSearchPPLParser.RULE_dataTypeFunctionCall);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1728;
            this.match(OpenSearchPPLParser.CAST);
            this.state = 1729;
            this.match(OpenSearchPPLParser.LT_PRTHS);
            this.state = 1730;
            this.logicalExpression(0);
            this.state = 1731;
            this.match(OpenSearchPPLParser.AS);
            this.state = 1732;
            this.convertedDataType();
            this.state = 1733;
            this.match(OpenSearchPPLParser.RT_PRTHS);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public convertedDataType(): ConvertedDataTypeContext {
        let localContext = new ConvertedDataTypeContext(this.context, this.state);
        this.enterRule(localContext, 282, OpenSearchPPLParser.RULE_convertedDataType);
        try {
            this.state = 1747;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case OpenSearchPPLParser.DATE:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 1735;
                localContext._typeName = this.match(OpenSearchPPLParser.DATE);
                }
                break;
            case OpenSearchPPLParser.TIME:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 1736;
                localContext._typeName = this.match(OpenSearchPPLParser.TIME);
                }
                break;
            case OpenSearchPPLParser.TIMESTAMP:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 1737;
                localContext._typeName = this.match(OpenSearchPPLParser.TIMESTAMP);
                }
                break;
            case OpenSearchPPLParser.INT:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 1738;
                localContext._typeName = this.match(OpenSearchPPLParser.INT);
                }
                break;
            case OpenSearchPPLParser.INTEGER:
                this.enterOuterAlt(localContext, 5);
                {
                this.state = 1739;
                localContext._typeName = this.match(OpenSearchPPLParser.INTEGER);
                }
                break;
            case OpenSearchPPLParser.DOUBLE:
                this.enterOuterAlt(localContext, 6);
                {
                this.state = 1740;
                localContext._typeName = this.match(OpenSearchPPLParser.DOUBLE);
                }
                break;
            case OpenSearchPPLParser.LONG:
                this.enterOuterAlt(localContext, 7);
                {
                this.state = 1741;
                localContext._typeName = this.match(OpenSearchPPLParser.LONG);
                }
                break;
            case OpenSearchPPLParser.FLOAT:
                this.enterOuterAlt(localContext, 8);
                {
                this.state = 1742;
                localContext._typeName = this.match(OpenSearchPPLParser.FLOAT);
                }
                break;
            case OpenSearchPPLParser.STRING:
                this.enterOuterAlt(localContext, 9);
                {
                this.state = 1743;
                localContext._typeName = this.match(OpenSearchPPLParser.STRING);
                }
                break;
            case OpenSearchPPLParser.BOOLEAN:
                this.enterOuterAlt(localContext, 10);
                {
                this.state = 1744;
                localContext._typeName = this.match(OpenSearchPPLParser.BOOLEAN);
                }
                break;
            case OpenSearchPPLParser.IP:
                this.enterOuterAlt(localContext, 11);
                {
                this.state = 1745;
                localContext._typeName = this.match(OpenSearchPPLParser.IP);
                }
                break;
            case OpenSearchPPLParser.JSON:
                this.enterOuterAlt(localContext, 12);
                {
                this.state = 1746;
                localContext._typeName = this.match(OpenSearchPPLParser.JSON);
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public evalFunctionName(): EvalFunctionNameContext {
        let localContext = new EvalFunctionNameContext(this.context, this.state);
        this.enterRule(localContext, 284, OpenSearchPPLParser.RULE_evalFunctionName);
        try {
            this.state = 1760;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case OpenSearchPPLParser.AVG:
            case OpenSearchPPLParser.SUM:
            case OpenSearchPPLParser.PLUS_FUCTION:
            case OpenSearchPPLParser.MINUS_FUCTION:
            case OpenSearchPPLParser.STAR_FUNCTION:
            case OpenSearchPPLParser.DIVIDE_FUNCTION:
            case OpenSearchPPLParser.ABS:
            case OpenSearchPPLParser.CBRT:
            case OpenSearchPPLParser.CEIL:
            case OpenSearchPPLParser.CEILING:
            case OpenSearchPPLParser.CONV:
            case OpenSearchPPLParser.CRC32:
            case OpenSearchPPLParser.E:
            case OpenSearchPPLParser.EXP:
            case OpenSearchPPLParser.EXPM1:
            case OpenSearchPPLParser.FLOOR:
            case OpenSearchPPLParser.LN:
            case OpenSearchPPLParser.LOG:
            case OpenSearchPPLParser.LOG_WITH_BASE:
            case OpenSearchPPLParser.MOD:
            case OpenSearchPPLParser.MODULUS:
            case OpenSearchPPLParser.PI:
            case OpenSearchPPLParser.POW:
            case OpenSearchPPLParser.POWER:
            case OpenSearchPPLParser.RAND:
            case OpenSearchPPLParser.ROUND:
            case OpenSearchPPLParser.SIGN:
            case OpenSearchPPLParser.SQRT:
            case OpenSearchPPLParser.TRUNCATE:
            case OpenSearchPPLParser.RINT:
            case OpenSearchPPLParser.SIGNUM:
            case OpenSearchPPLParser.ACOS:
            case OpenSearchPPLParser.ASIN:
            case OpenSearchPPLParser.ATAN:
            case OpenSearchPPLParser.ATAN2:
            case OpenSearchPPLParser.COS:
            case OpenSearchPPLParser.COSH:
            case OpenSearchPPLParser.COT:
            case OpenSearchPPLParser.DEGREES:
            case OpenSearchPPLParser.RADIANS:
            case OpenSearchPPLParser.SIN:
            case OpenSearchPPLParser.SINH:
            case OpenSearchPPLParser.TAN:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 1749;
                this.mathematicalFunctionName();
                }
                break;
            case OpenSearchPPLParser.CONVERT_TZ:
            case OpenSearchPPLParser.DATETIME:
            case OpenSearchPPLParser.DAY:
            case OpenSearchPPLParser.DAY_OF_YEAR:
            case OpenSearchPPLParser.HOUR:
            case OpenSearchPPLParser.HOUR_OF_DAY:
            case OpenSearchPPLParser.MICROSECOND:
            case OpenSearchPPLParser.MINUTE:
            case OpenSearchPPLParser.MINUTE_OF_DAY:
            case OpenSearchPPLParser.MINUTE_OF_HOUR:
            case OpenSearchPPLParser.MONTH:
            case OpenSearchPPLParser.MONTH_OF_YEAR:
            case OpenSearchPPLParser.QUARTER:
            case OpenSearchPPLParser.SECOND:
            case OpenSearchPPLParser.SECOND_OF_MINUTE:
            case OpenSearchPPLParser.WEEK:
            case OpenSearchPPLParser.WEEK_OF_YEAR:
            case OpenSearchPPLParser.YEAR:
            case OpenSearchPPLParser.ADDDATE:
            case OpenSearchPPLParser.ADDTIME:
            case OpenSearchPPLParser.CURDATE:
            case OpenSearchPPLParser.CURRENT_DATE:
            case OpenSearchPPLParser.CURRENT_TIME:
            case OpenSearchPPLParser.CURRENT_TIMESTAMP:
            case OpenSearchPPLParser.CURTIME:
            case OpenSearchPPLParser.DATE:
            case OpenSearchPPLParser.DATEDIFF:
            case OpenSearchPPLParser.DATE_ADD:
            case OpenSearchPPLParser.DATE_FORMAT:
            case OpenSearchPPLParser.DATE_SUB:
            case OpenSearchPPLParser.DAYNAME:
            case OpenSearchPPLParser.DAYOFMONTH:
            case OpenSearchPPLParser.DAYOFWEEK:
            case OpenSearchPPLParser.DAYOFYEAR:
            case OpenSearchPPLParser.DAY_OF_MONTH:
            case OpenSearchPPLParser.DAY_OF_WEEK:
            case OpenSearchPPLParser.FROM_DAYS:
            case OpenSearchPPLParser.FROM_UNIXTIME:
            case OpenSearchPPLParser.LAST_DAY:
            case OpenSearchPPLParser.LOCALTIME:
            case OpenSearchPPLParser.LOCALTIMESTAMP:
            case OpenSearchPPLParser.MAKEDATE:
            case OpenSearchPPLParser.MAKETIME:
            case OpenSearchPPLParser.MONTHNAME:
            case OpenSearchPPLParser.NOW:
            case OpenSearchPPLParser.PERIOD_ADD:
            case OpenSearchPPLParser.PERIOD_DIFF:
            case OpenSearchPPLParser.SEC_TO_TIME:
            case OpenSearchPPLParser.STR_TO_DATE:
            case OpenSearchPPLParser.SUBDATE:
            case OpenSearchPPLParser.SUBTIME:
            case OpenSearchPPLParser.SYSDATE:
            case OpenSearchPPLParser.TIME:
            case OpenSearchPPLParser.TIMEDIFF:
            case OpenSearchPPLParser.TIMESTAMP:
            case OpenSearchPPLParser.TIME_FORMAT:
            case OpenSearchPPLParser.TIME_TO_SEC:
            case OpenSearchPPLParser.TO_DAYS:
            case OpenSearchPPLParser.TO_SECONDS:
            case OpenSearchPPLParser.UNIX_TIMESTAMP:
            case OpenSearchPPLParser.UTC_DATE:
            case OpenSearchPPLParser.UTC_TIME:
            case OpenSearchPPLParser.UTC_TIMESTAMP:
            case OpenSearchPPLParser.WEEKDAY:
            case OpenSearchPPLParser.YEARWEEK:
            case OpenSearchPPLParser.STRFTIME:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 1750;
                this.dateTimeFunctionName();
                }
                break;
            case OpenSearchPPLParser.SUBSTR:
            case OpenSearchPPLParser.SUBSTRING:
            case OpenSearchPPLParser.LTRIM:
            case OpenSearchPPLParser.RTRIM:
            case OpenSearchPPLParser.TRIM:
            case OpenSearchPPLParser.LOWER:
            case OpenSearchPPLParser.UPPER:
            case OpenSearchPPLParser.CONCAT:
            case OpenSearchPPLParser.CONCAT_WS:
            case OpenSearchPPLParser.LENGTH:
            case OpenSearchPPLParser.STRCMP:
            case OpenSearchPPLParser.RIGHT:
            case OpenSearchPPLParser.LEFT:
            case OpenSearchPPLParser.ASCII:
            case OpenSearchPPLParser.LOCATE:
            case OpenSearchPPLParser.REPLACE:
            case OpenSearchPPLParser.REVERSE:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 1751;
                this.textFunctionName();
                }
                break;
            case OpenSearchPPLParser.REGEX_MATCH:
            case OpenSearchPPLParser.EARLIEST:
            case OpenSearchPPLParser.LATEST:
            case OpenSearchPPLParser.LIKE:
            case OpenSearchPPLParser.ISNULL:
            case OpenSearchPPLParser.ISNOTNULL:
            case OpenSearchPPLParser.CIDRMATCH:
            case OpenSearchPPLParser.ISPRESENT:
            case OpenSearchPPLParser.ISEMPTY:
            case OpenSearchPPLParser.ISBLANK:
            case OpenSearchPPLParser.JSON_VALID:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 1752;
                this.conditionFunctionName();
                }
                break;
            case OpenSearchPPLParser.IFNULL:
            case OpenSearchPPLParser.NULLIF:
            case OpenSearchPPLParser.IF:
            case OpenSearchPPLParser.COALESCE:
                this.enterOuterAlt(localContext, 5);
                {
                this.state = 1753;
                this.flowControlFunctionName();
                }
                break;
            case OpenSearchPPLParser.TYPEOF:
                this.enterOuterAlt(localContext, 6);
                {
                this.state = 1754;
                this.systemFunctionName();
                }
                break;
            case OpenSearchPPLParser.POSITION:
                this.enterOuterAlt(localContext, 7);
                {
                this.state = 1755;
                this.positionFunctionName();
                }
                break;
            case OpenSearchPPLParser.MD5:
            case OpenSearchPPLParser.SHA1:
            case OpenSearchPPLParser.SHA2:
                this.enterOuterAlt(localContext, 8);
                {
                this.state = 1756;
                this.cryptographicFunctionName();
                }
                break;
            case OpenSearchPPLParser.JSON:
            case OpenSearchPPLParser.JSON_OBJECT:
            case OpenSearchPPLParser.JSON_ARRAY:
            case OpenSearchPPLParser.JSON_ARRAY_LENGTH:
            case OpenSearchPPLParser.JSON_EXTRACT:
            case OpenSearchPPLParser.JSON_KEYS:
            case OpenSearchPPLParser.JSON_SET:
            case OpenSearchPPLParser.JSON_DELETE:
            case OpenSearchPPLParser.JSON_APPEND:
            case OpenSearchPPLParser.JSON_EXTEND:
                this.enterOuterAlt(localContext, 9);
                {
                this.state = 1757;
                this.jsonFunctionName();
                }
                break;
            case OpenSearchPPLParser.GEOIP:
                this.enterOuterAlt(localContext, 10);
                {
                this.state = 1758;
                this.geoipFunctionName();
                }
                break;
            case OpenSearchPPLParser.EXISTS:
            case OpenSearchPPLParser.ARRAY:
            case OpenSearchPPLParser.ARRAY_LENGTH:
            case OpenSearchPPLParser.MVJOIN:
            case OpenSearchPPLParser.FORALL:
            case OpenSearchPPLParser.FILTER:
            case OpenSearchPPLParser.TRANSFORM:
            case OpenSearchPPLParser.REDUCE:
                this.enterOuterAlt(localContext, 11);
                {
                this.state = 1759;
                this.collectionFunctionName();
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public functionArgs(): FunctionArgsContext {
        let localContext = new FunctionArgsContext(this.context, this.state);
        this.enterRule(localContext, 286, OpenSearchPPLParser.RULE_functionArgs);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1770;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if ((((_la) & ~0x1F) === 0 && ((1 << _la) & 4257218044) !== 0) || ((((_la - 32)) & ~0x1F) === 0 && ((1 << (_la - 32)) & 2682862783) !== 0) || ((((_la - 64)) & ~0x1F) === 0 && ((1 << (_la - 64)) & 4294959103) !== 0) || ((((_la - 96)) & ~0x1F) === 0 && ((1 << (_la - 96)) & 4265601023) !== 0) || ((((_la - 128)) & ~0x1F) === 0 && ((1 << (_la - 128)) & 805306367) !== 0) || ((((_la - 166)) & ~0x1F) === 0 && ((1 << (_la - 166)) & 2350127113) !== 0) || ((((_la - 198)) & ~0x1F) === 0 && ((1 << (_la - 198)) & 4294443007) !== 0) || ((((_la - 230)) & ~0x1F) === 0 && ((1 << (_la - 230)) & 4294967295) !== 0) || ((((_la - 262)) & ~0x1F) === 0 && ((1 << (_la - 262)) & 4294967295) !== 0) || ((((_la - 294)) & ~0x1F) === 0 && ((1 << (_la - 294)) & 4294967295) !== 0) || ((((_la - 326)) & ~0x1F) === 0 && ((1 << (_la - 326)) & 4294705151) !== 0) || ((((_la - 358)) & ~0x1F) === 0 && ((1 << (_la - 358)) & 4294967295) !== 0) || ((((_la - 390)) & ~0x1F) === 0 && ((1 << (_la - 390)) & 4294967295) !== 0) || ((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & 4294965311) !== 0) || ((((_la - 454)) & ~0x1F) === 0 && ((1 << (_la - 454)) & 1915) !== 0)) {
                {
                this.state = 1762;
                this.functionArg();
                this.state = 1767;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                while (_la === 168) {
                    {
                    {
                    this.state = 1763;
                    this.match(OpenSearchPPLParser.COMMA);
                    this.state = 1764;
                    this.functionArg();
                    }
                    }
                    this.state = 1769;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                }
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public namedFunctionArgs(): NamedFunctionArgsContext {
        let localContext = new NamedFunctionArgsContext(this.context, this.state);
        this.enterRule(localContext, 288, OpenSearchPPLParser.RULE_namedFunctionArgs);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1780;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if ((((_la) & ~0x1F) === 0 && ((1 << _la) & 4257218044) !== 0) || ((((_la - 32)) & ~0x1F) === 0 && ((1 << (_la - 32)) & 2682862783) !== 0) || ((((_la - 64)) & ~0x1F) === 0 && ((1 << (_la - 64)) & 4294959103) !== 0) || ((((_la - 96)) & ~0x1F) === 0 && ((1 << (_la - 96)) & 4265601023) !== 0) || ((((_la - 128)) & ~0x1F) === 0 && ((1 << (_la - 128)) & 805306367) !== 0) || ((((_la - 166)) & ~0x1F) === 0 && ((1 << (_la - 166)) & 2350127113) !== 0) || ((((_la - 198)) & ~0x1F) === 0 && ((1 << (_la - 198)) & 4294443007) !== 0) || ((((_la - 230)) & ~0x1F) === 0 && ((1 << (_la - 230)) & 4294967295) !== 0) || ((((_la - 262)) & ~0x1F) === 0 && ((1 << (_la - 262)) & 4294967295) !== 0) || ((((_la - 294)) & ~0x1F) === 0 && ((1 << (_la - 294)) & 4294967295) !== 0) || ((((_la - 326)) & ~0x1F) === 0 && ((1 << (_la - 326)) & 4294705151) !== 0) || ((((_la - 358)) & ~0x1F) === 0 && ((1 << (_la - 358)) & 4294967295) !== 0) || ((((_la - 390)) & ~0x1F) === 0 && ((1 << (_la - 390)) & 4294967295) !== 0) || ((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & 4294965311) !== 0) || ((((_la - 454)) & ~0x1F) === 0 && ((1 << (_la - 454)) & 1915) !== 0)) {
                {
                this.state = 1772;
                this.namedFunctionArg();
                this.state = 1777;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                while (_la === 168) {
                    {
                    {
                    this.state = 1773;
                    this.match(OpenSearchPPLParser.COMMA);
                    this.state = 1774;
                    this.namedFunctionArg();
                    }
                    }
                    this.state = 1779;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                }
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public functionArg(): FunctionArgContext {
        let localContext = new FunctionArgContext(this.context, this.state);
        this.enterRule(localContext, 290, OpenSearchPPLParser.RULE_functionArg);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1782;
            this.functionArgExpression();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public namedFunctionArg(): NamedFunctionArgContext {
        let localContext = new NamedFunctionArgContext(this.context, this.state);
        this.enterRule(localContext, 292, OpenSearchPPLParser.RULE_namedFunctionArg);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1787;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 175, this.context) ) {
            case 1:
                {
                this.state = 1784;
                this.ident();
                this.state = 1785;
                this.match(OpenSearchPPLParser.EQUAL);
                }
                break;
            }
            this.state = 1789;
            this.functionArgExpression();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public functionArgExpression(): FunctionArgExpressionContext {
        let localContext = new FunctionArgExpressionContext(this.context, this.state);
        this.enterRule(localContext, 294, OpenSearchPPLParser.RULE_functionArgExpression);
        try {
            this.state = 1793;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 176, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 1791;
                this.lambda();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 1792;
                this.logicalExpression(0);
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public lambda(): LambdaContext {
        let localContext = new LambdaContext(this.context, this.state);
        this.enterRule(localContext, 296, OpenSearchPPLParser.RULE_lambda);
        let _la: number;
        try {
            this.state = 1811;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case OpenSearchPPLParser.SEARCH:
            case OpenSearchPPLParser.DESCRIBE:
            case OpenSearchPPLParser.SHOW:
            case OpenSearchPPLParser.EXPLAIN:
            case OpenSearchPPLParser.FROM:
            case OpenSearchPPLParser.WHERE:
            case OpenSearchPPLParser.FIELDS:
            case OpenSearchPPLParser.TABLE:
            case OpenSearchPPLParser.RENAME:
            case OpenSearchPPLParser.STATS:
            case OpenSearchPPLParser.EVENTSTATS:
            case OpenSearchPPLParser.DEDUP:
            case OpenSearchPPLParser.SORT:
            case OpenSearchPPLParser.EVAL:
            case OpenSearchPPLParser.HEAD:
            case OpenSearchPPLParser.BIN:
            case OpenSearchPPLParser.TOP:
            case OpenSearchPPLParser.RARE:
            case OpenSearchPPLParser.PARSE:
            case OpenSearchPPLParser.REGEX:
            case OpenSearchPPLParser.REX:
            case OpenSearchPPLParser.PUNCT:
            case OpenSearchPPLParser.GROK:
            case OpenSearchPPLParser.PATTERN:
            case OpenSearchPPLParser.PATTERNS:
            case OpenSearchPPLParser.NEW_FIELD:
            case OpenSearchPPLParser.KMEANS:
            case OpenSearchPPLParser.AD:
            case OpenSearchPPLParser.ML:
            case OpenSearchPPLParser.FILLNULL:
            case OpenSearchPPLParser.FLATTEN:
            case OpenSearchPPLParser.TRENDLINE:
            case OpenSearchPPLParser.TIMECHART:
            case OpenSearchPPLParser.EXPAND:
            case OpenSearchPPLParser.VARIABLE_COUNT_THRESHOLD:
            case OpenSearchPPLParser.FREQUENCY_THRESHOLD_PERCENTAGE:
            case OpenSearchPPLParser.METHOD:
            case OpenSearchPPLParser.MAX_SAMPLE_COUNT:
            case OpenSearchPPLParser.BUFFER_LIMIT:
            case OpenSearchPPLParser.JOIN:
            case OpenSearchPPLParser.INNER:
            case OpenSearchPPLParser.OUTER:
            case OpenSearchPPLParser.FULL:
            case OpenSearchPPLParser.SEMI:
            case OpenSearchPPLParser.ANTI:
            case OpenSearchPPLParser.CROSS:
            case OpenSearchPPLParser.LEFT_HINT:
            case OpenSearchPPLParser.RIGHT_HINT:
            case OpenSearchPPLParser.SOURCE:
            case OpenSearchPPLParser.INDEX:
            case OpenSearchPPLParser.A:
            case OpenSearchPPLParser.ASC:
            case OpenSearchPPLParser.D:
            case OpenSearchPPLParser.DESC:
            case OpenSearchPPLParser.DATASOURCES:
            case OpenSearchPPLParser.USING:
            case OpenSearchPPLParser.WITH:
            case OpenSearchPPLParser.SIMPLE:
            case OpenSearchPPLParser.STANDARD:
            case OpenSearchPPLParser.COST:
            case OpenSearchPPLParser.EXTENDED:
            case OpenSearchPPLParser.OVERRIDE:
            case OpenSearchPPLParser.AUTO:
            case OpenSearchPPLParser.STR:
            case OpenSearchPPLParser.NUM:
            case OpenSearchPPLParser.SMA:
            case OpenSearchPPLParser.WMA:
            case OpenSearchPPLParser.KEEPEMPTY:
            case OpenSearchPPLParser.CONSECUTIVE:
            case OpenSearchPPLParser.DEDUP_SPLITVALUES:
            case OpenSearchPPLParser.PARTITIONS:
            case OpenSearchPPLParser.ALLNUM:
            case OpenSearchPPLParser.DELIM:
            case OpenSearchPPLParser.BUCKET_NULLABLE:
            case OpenSearchPPLParser.CENTROIDS:
            case OpenSearchPPLParser.ITERATIONS:
            case OpenSearchPPLParser.DISTANCE_TYPE:
            case OpenSearchPPLParser.NUMBER_OF_TREES:
            case OpenSearchPPLParser.SHINGLE_SIZE:
            case OpenSearchPPLParser.SAMPLE_SIZE:
            case OpenSearchPPLParser.OUTPUT_AFTER:
            case OpenSearchPPLParser.TIME_DECAY:
            case OpenSearchPPLParser.ANOMALY_RATE:
            case OpenSearchPPLParser.CATEGORY_FIELD:
            case OpenSearchPPLParser.TIME_FIELD:
            case OpenSearchPPLParser.TIME_ZONE:
            case OpenSearchPPLParser.TRAINING_DATA_SIZE:
            case OpenSearchPPLParser.ANOMALY_SCORE_THRESHOLD:
            case OpenSearchPPLParser.APPEND:
            case OpenSearchPPLParser.COUNTFIELD:
            case OpenSearchPPLParser.SHOWCOUNT:
            case OpenSearchPPLParser.INPUT:
            case OpenSearchPPLParser.OUTPUT:
            case OpenSearchPPLParser.PATH:
            case OpenSearchPPLParser.CASE:
            case OpenSearchPPLParser.ELSE:
            case OpenSearchPPLParser.IN:
            case OpenSearchPPLParser.EXISTS:
            case OpenSearchPPLParser.GEOIP:
            case OpenSearchPPLParser.REGEXP:
            case OpenSearchPPLParser.REGEX_MATCH:
            case OpenSearchPPLParser.CONVERT_TZ:
            case OpenSearchPPLParser.DATETIME:
            case OpenSearchPPLParser.DAY:
            case OpenSearchPPLParser.DAY_HOUR:
            case OpenSearchPPLParser.DAY_MICROSECOND:
            case OpenSearchPPLParser.DAY_MINUTE:
            case OpenSearchPPLParser.DAY_OF_YEAR:
            case OpenSearchPPLParser.DAY_SECOND:
            case OpenSearchPPLParser.HOUR:
            case OpenSearchPPLParser.HOUR_MICROSECOND:
            case OpenSearchPPLParser.HOUR_MINUTE:
            case OpenSearchPPLParser.HOUR_OF_DAY:
            case OpenSearchPPLParser.HOUR_SECOND:
            case OpenSearchPPLParser.INTERVAL:
            case OpenSearchPPLParser.MICROSECOND:
            case OpenSearchPPLParser.MILLISECOND:
            case OpenSearchPPLParser.MINUTE:
            case OpenSearchPPLParser.MINUTE_MICROSECOND:
            case OpenSearchPPLParser.MINUTE_OF_DAY:
            case OpenSearchPPLParser.MINUTE_OF_HOUR:
            case OpenSearchPPLParser.MINUTE_SECOND:
            case OpenSearchPPLParser.MONTH:
            case OpenSearchPPLParser.MONTH_OF_YEAR:
            case OpenSearchPPLParser.QUARTER:
            case OpenSearchPPLParser.SECOND:
            case OpenSearchPPLParser.SECOND_MICROSECOND:
            case OpenSearchPPLParser.SECOND_OF_MINUTE:
            case OpenSearchPPLParser.WEEK:
            case OpenSearchPPLParser.WEEK_OF_YEAR:
            case OpenSearchPPLParser.YEAR:
            case OpenSearchPPLParser.YEAR_MONTH:
            case OpenSearchPPLParser.LOOKUP:
            case OpenSearchPPLParser.IP:
            case OpenSearchPPLParser.DOT:
            case OpenSearchPPLParser.PLUS:
            case OpenSearchPPLParser.MINUS:
            case OpenSearchPPLParser.BACKTICK:
            case OpenSearchPPLParser.ARROW:
            case OpenSearchPPLParser.AVG:
            case OpenSearchPPLParser.COUNT:
            case OpenSearchPPLParser.DISTINCT_COUNT:
            case OpenSearchPPLParser.DISTINCT_COUNT_APPROX:
            case OpenSearchPPLParser.ESTDC:
            case OpenSearchPPLParser.ESTDC_ERROR:
            case OpenSearchPPLParser.MAX:
            case OpenSearchPPLParser.MEAN:
            case OpenSearchPPLParser.MEDIAN:
            case OpenSearchPPLParser.MIN:
            case OpenSearchPPLParser.MODE:
            case OpenSearchPPLParser.RANGE:
            case OpenSearchPPLParser.STDEV:
            case OpenSearchPPLParser.STDEVP:
            case OpenSearchPPLParser.SUM:
            case OpenSearchPPLParser.SUMSQ:
            case OpenSearchPPLParser.VAR_SAMP:
            case OpenSearchPPLParser.VAR_POP:
            case OpenSearchPPLParser.STDDEV_SAMP:
            case OpenSearchPPLParser.STDDEV_POP:
            case OpenSearchPPLParser.PERCENTILE:
            case OpenSearchPPLParser.PERCENTILE_APPROX:
            case OpenSearchPPLParser.EARLIEST:
            case OpenSearchPPLParser.LATEST:
            case OpenSearchPPLParser.TAKE:
            case OpenSearchPPLParser.LIST:
            case OpenSearchPPLParser.VALUES:
            case OpenSearchPPLParser.PER_DAY:
            case OpenSearchPPLParser.PER_HOUR:
            case OpenSearchPPLParser.PER_MINUTE:
            case OpenSearchPPLParser.PER_SECOND:
            case OpenSearchPPLParser.RATE:
            case OpenSearchPPLParser.SPARKLINE:
            case OpenSearchPPLParser.C:
            case OpenSearchPPLParser.DC:
            case OpenSearchPPLParser.ROW_NUMBER:
            case OpenSearchPPLParser.RANK:
            case OpenSearchPPLParser.DENSE_RANK:
            case OpenSearchPPLParser.PERCENT_RANK:
            case OpenSearchPPLParser.CUME_DIST:
            case OpenSearchPPLParser.FIRST:
            case OpenSearchPPLParser.LAST:
            case OpenSearchPPLParser.NTH:
            case OpenSearchPPLParser.NTILE:
            case OpenSearchPPLParser.PLUS_FUCTION:
            case OpenSearchPPLParser.MINUS_FUCTION:
            case OpenSearchPPLParser.STAR_FUNCTION:
            case OpenSearchPPLParser.DIVIDE_FUNCTION:
            case OpenSearchPPLParser.ABS:
            case OpenSearchPPLParser.CBRT:
            case OpenSearchPPLParser.CEIL:
            case OpenSearchPPLParser.CEILING:
            case OpenSearchPPLParser.CONV:
            case OpenSearchPPLParser.CRC32:
            case OpenSearchPPLParser.E:
            case OpenSearchPPLParser.EXP:
            case OpenSearchPPLParser.EXPM1:
            case OpenSearchPPLParser.FLOOR:
            case OpenSearchPPLParser.LN:
            case OpenSearchPPLParser.LOG:
            case OpenSearchPPLParser.LOG_WITH_BASE:
            case OpenSearchPPLParser.MOD:
            case OpenSearchPPLParser.MODULUS:
            case OpenSearchPPLParser.PI:
            case OpenSearchPPLParser.POSITION:
            case OpenSearchPPLParser.POW:
            case OpenSearchPPLParser.POWER:
            case OpenSearchPPLParser.RAND:
            case OpenSearchPPLParser.ROUND:
            case OpenSearchPPLParser.SIGN:
            case OpenSearchPPLParser.SQRT:
            case OpenSearchPPLParser.TRUNCATE:
            case OpenSearchPPLParser.RINT:
            case OpenSearchPPLParser.SIGNUM:
            case OpenSearchPPLParser.ACOS:
            case OpenSearchPPLParser.ASIN:
            case OpenSearchPPLParser.ATAN:
            case OpenSearchPPLParser.ATAN2:
            case OpenSearchPPLParser.COS:
            case OpenSearchPPLParser.COSH:
            case OpenSearchPPLParser.COT:
            case OpenSearchPPLParser.DEGREES:
            case OpenSearchPPLParser.RADIANS:
            case OpenSearchPPLParser.SIN:
            case OpenSearchPPLParser.SINH:
            case OpenSearchPPLParser.TAN:
            case OpenSearchPPLParser.MD5:
            case OpenSearchPPLParser.SHA1:
            case OpenSearchPPLParser.SHA2:
            case OpenSearchPPLParser.ADDDATE:
            case OpenSearchPPLParser.ADDTIME:
            case OpenSearchPPLParser.CURDATE:
            case OpenSearchPPLParser.CURRENT_DATE:
            case OpenSearchPPLParser.CURRENT_TIME:
            case OpenSearchPPLParser.CURRENT_TIMESTAMP:
            case OpenSearchPPLParser.CURTIME:
            case OpenSearchPPLParser.DATE:
            case OpenSearchPPLParser.DATEDIFF:
            case OpenSearchPPLParser.DATE_ADD:
            case OpenSearchPPLParser.DATE_FORMAT:
            case OpenSearchPPLParser.DATE_SUB:
            case OpenSearchPPLParser.DAYNAME:
            case OpenSearchPPLParser.DAYOFMONTH:
            case OpenSearchPPLParser.DAYOFWEEK:
            case OpenSearchPPLParser.DAYOFYEAR:
            case OpenSearchPPLParser.DAY_OF_MONTH:
            case OpenSearchPPLParser.DAY_OF_WEEK:
            case OpenSearchPPLParser.EXTRACT:
            case OpenSearchPPLParser.FROM_DAYS:
            case OpenSearchPPLParser.FROM_UNIXTIME:
            case OpenSearchPPLParser.GET_FORMAT:
            case OpenSearchPPLParser.LAST_DAY:
            case OpenSearchPPLParser.LOCALTIME:
            case OpenSearchPPLParser.LOCALTIMESTAMP:
            case OpenSearchPPLParser.MAKEDATE:
            case OpenSearchPPLParser.MAKETIME:
            case OpenSearchPPLParser.MONTHNAME:
            case OpenSearchPPLParser.NOW:
            case OpenSearchPPLParser.PERIOD_ADD:
            case OpenSearchPPLParser.PERIOD_DIFF:
            case OpenSearchPPLParser.SEC_TO_TIME:
            case OpenSearchPPLParser.STR_TO_DATE:
            case OpenSearchPPLParser.SUBDATE:
            case OpenSearchPPLParser.SUBTIME:
            case OpenSearchPPLParser.SYSDATE:
            case OpenSearchPPLParser.TIME:
            case OpenSearchPPLParser.TIMEDIFF:
            case OpenSearchPPLParser.TIMESTAMP:
            case OpenSearchPPLParser.TIME_FORMAT:
            case OpenSearchPPLParser.TIME_TO_SEC:
            case OpenSearchPPLParser.TO_DAYS:
            case OpenSearchPPLParser.TO_SECONDS:
            case OpenSearchPPLParser.UNIX_TIMESTAMP:
            case OpenSearchPPLParser.UTC_DATE:
            case OpenSearchPPLParser.UTC_TIME:
            case OpenSearchPPLParser.UTC_TIMESTAMP:
            case OpenSearchPPLParser.WEEKDAY:
            case OpenSearchPPLParser.YEARWEEK:
            case OpenSearchPPLParser.STRFTIME:
            case OpenSearchPPLParser.SUBSTR:
            case OpenSearchPPLParser.SUBSTRING:
            case OpenSearchPPLParser.LTRIM:
            case OpenSearchPPLParser.RTRIM:
            case OpenSearchPPLParser.TRIM:
            case OpenSearchPPLParser.LOWER:
            case OpenSearchPPLParser.UPPER:
            case OpenSearchPPLParser.CONCAT:
            case OpenSearchPPLParser.CONCAT_WS:
            case OpenSearchPPLParser.LENGTH:
            case OpenSearchPPLParser.STRCMP:
            case OpenSearchPPLParser.RIGHT:
            case OpenSearchPPLParser.LEFT:
            case OpenSearchPPLParser.ASCII:
            case OpenSearchPPLParser.LOCATE:
            case OpenSearchPPLParser.REPLACE:
            case OpenSearchPPLParser.REVERSE:
            case OpenSearchPPLParser.CAST:
            case OpenSearchPPLParser.LIKE:
            case OpenSearchPPLParser.ISNULL:
            case OpenSearchPPLParser.ISNOTNULL:
            case OpenSearchPPLParser.CIDRMATCH:
            case OpenSearchPPLParser.BETWEEN:
            case OpenSearchPPLParser.ISPRESENT:
            case OpenSearchPPLParser.ISEMPTY:
            case OpenSearchPPLParser.ISBLANK:
            case OpenSearchPPLParser.ARRAY:
            case OpenSearchPPLParser.ARRAY_LENGTH:
            case OpenSearchPPLParser.MVJOIN:
            case OpenSearchPPLParser.FORALL:
            case OpenSearchPPLParser.FILTER:
            case OpenSearchPPLParser.TRANSFORM:
            case OpenSearchPPLParser.REDUCE:
            case OpenSearchPPLParser.JSON_VALID:
            case OpenSearchPPLParser.JSON:
            case OpenSearchPPLParser.JSON_OBJECT:
            case OpenSearchPPLParser.JSON_ARRAY:
            case OpenSearchPPLParser.JSON_ARRAY_LENGTH:
            case OpenSearchPPLParser.JSON_EXTRACT:
            case OpenSearchPPLParser.JSON_KEYS:
            case OpenSearchPPLParser.JSON_SET:
            case OpenSearchPPLParser.JSON_DELETE:
            case OpenSearchPPLParser.JSON_APPEND:
            case OpenSearchPPLParser.JSON_EXTEND:
            case OpenSearchPPLParser.IFNULL:
            case OpenSearchPPLParser.NULLIF:
            case OpenSearchPPLParser.IF:
            case OpenSearchPPLParser.TYPEOF:
            case OpenSearchPPLParser.COALESCE:
            case OpenSearchPPLParser.MATCH:
            case OpenSearchPPLParser.MATCH_PHRASE:
            case OpenSearchPPLParser.MATCH_PHRASE_PREFIX:
            case OpenSearchPPLParser.MATCH_BOOL_PREFIX:
            case OpenSearchPPLParser.SIMPLE_QUERY_STRING:
            case OpenSearchPPLParser.MULTI_MATCH:
            case OpenSearchPPLParser.QUERY_STRING:
            case OpenSearchPPLParser.ALLOW_LEADING_WILDCARD:
            case OpenSearchPPLParser.ANALYZE_WILDCARD:
            case OpenSearchPPLParser.ANALYZER:
            case OpenSearchPPLParser.AUTO_GENERATE_SYNONYMS_PHRASE_QUERY:
            case OpenSearchPPLParser.BOOST:
            case OpenSearchPPLParser.CUTOFF_FREQUENCY:
            case OpenSearchPPLParser.DEFAULT_FIELD:
            case OpenSearchPPLParser.DEFAULT_OPERATOR:
            case OpenSearchPPLParser.ENABLE_POSITION_INCREMENTS:
            case OpenSearchPPLParser.ESCAPE:
            case OpenSearchPPLParser.FLAGS:
            case OpenSearchPPLParser.FUZZY_MAX_EXPANSIONS:
            case OpenSearchPPLParser.FUZZY_PREFIX_LENGTH:
            case OpenSearchPPLParser.FUZZY_TRANSPOSITIONS:
            case OpenSearchPPLParser.FUZZY_REWRITE:
            case OpenSearchPPLParser.FUZZINESS:
            case OpenSearchPPLParser.LENIENT:
            case OpenSearchPPLParser.LOW_FREQ_OPERATOR:
            case OpenSearchPPLParser.MAX_DETERMINIZED_STATES:
            case OpenSearchPPLParser.MAX_EXPANSIONS:
            case OpenSearchPPLParser.MINIMUM_SHOULD_MATCH:
            case OpenSearchPPLParser.OPERATOR:
            case OpenSearchPPLParser.PHRASE_SLOP:
            case OpenSearchPPLParser.PREFIX_LENGTH:
            case OpenSearchPPLParser.QUOTE_ANALYZER:
            case OpenSearchPPLParser.QUOTE_FIELD_SUFFIX:
            case OpenSearchPPLParser.REWRITE:
            case OpenSearchPPLParser.SLOP:
            case OpenSearchPPLParser.TIE_BREAKER:
            case OpenSearchPPLParser.TYPE:
            case OpenSearchPPLParser.ZERO_TERMS_QUERY:
            case OpenSearchPPLParser.SPAN:
            case OpenSearchPPLParser.MS:
            case OpenSearchPPLParser.S:
            case OpenSearchPPLParser.M:
            case OpenSearchPPLParser.H:
            case OpenSearchPPLParser.W:
            case OpenSearchPPLParser.Q:
            case OpenSearchPPLParser.Y:
            case OpenSearchPPLParser.SEC:
            case OpenSearchPPLParser.SECS:
            case OpenSearchPPLParser.SECONDS:
            case OpenSearchPPLParser.MINS:
            case OpenSearchPPLParser.MINUTES:
            case OpenSearchPPLParser.HR:
            case OpenSearchPPLParser.HRS:
            case OpenSearchPPLParser.HOURS:
            case OpenSearchPPLParser.DAYS:
            case OpenSearchPPLParser.MON:
            case OpenSearchPPLParser.MONTHS:
            case OpenSearchPPLParser.US:
            case OpenSearchPPLParser.CS:
            case OpenSearchPPLParser.DS:
            case OpenSearchPPLParser.PERCENTILE_SHORTCUT:
            case OpenSearchPPLParser.ID:
            case OpenSearchPPLParser.BQUOTA_STRING:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 1795;
                this.ident();
                this.state = 1796;
                this.match(OpenSearchPPLParser.ARROW);
                this.state = 1797;
                this.logicalExpression(0);
                }
                break;
            case OpenSearchPPLParser.LT_PRTHS:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 1799;
                this.match(OpenSearchPPLParser.LT_PRTHS);
                this.state = 1800;
                this.ident();
                this.state = 1803;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                do {
                    {
                    {
                    this.state = 1801;
                    this.match(OpenSearchPPLParser.COMMA);
                    this.state = 1802;
                    this.ident();
                    }
                    }
                    this.state = 1805;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                } while (_la === 168);
                this.state = 1807;
                this.match(OpenSearchPPLParser.RT_PRTHS);
                this.state = 1808;
                this.match(OpenSearchPPLParser.ARROW);
                this.state = 1809;
                this.logicalExpression(0);
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public relevanceArg(): RelevanceArgContext {
        let localContext = new RelevanceArgContext(this.context, this.state);
        this.enterRule(localContext, 298, OpenSearchPPLParser.RULE_relevanceArg);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1813;
            this.relevanceArgName();
            this.state = 1814;
            this.match(OpenSearchPPLParser.EQUAL);
            this.state = 1815;
            this.relevanceArgValue();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public relevanceArgName(): RelevanceArgNameContext {
        let localContext = new RelevanceArgNameContext(this.context, this.state);
        this.enterRule(localContext, 300, OpenSearchPPLParser.RULE_relevanceArgName);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1817;
            _la = this.tokenStream.LA(1);
            if(!(_la === 8 || _la === 101 || ((((_la - 396)) & ~0x1F) === 0 && ((1 << (_la - 396)) & 2147483647) !== 0))) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public relevanceFieldAndWeight(): RelevanceFieldAndWeightContext {
        let localContext = new RelevanceFieldAndWeightContext(this.context, this.state);
        this.enterRule(localContext, 302, OpenSearchPPLParser.RULE_relevanceFieldAndWeight);
        try {
            this.state = 1827;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 179, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 1819;
                localContext._field = this.relevanceField();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 1820;
                localContext._field = this.relevanceField();
                this.state = 1821;
                localContext._weight = this.relevanceFieldWeight();
                }
                break;
            case 3:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 1823;
                localContext._field = this.relevanceField();
                this.state = 1824;
                this.match(OpenSearchPPLParser.BIT_XOR_OP);
                this.state = 1825;
                localContext._weight = this.relevanceFieldWeight();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public relevanceFieldWeight(): RelevanceFieldWeightContext {
        let localContext = new RelevanceFieldWeightContext(this.context, this.state);
        this.enterRule(localContext, 304, OpenSearchPPLParser.RULE_relevanceFieldWeight);
        try {
            this.state = 1833;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 180, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 1829;
                this.integerLiteral();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 1830;
                this.decimalLiteral();
                }
                break;
            case 3:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 1831;
                this.doubleLiteral();
                }
                break;
            case 4:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 1832;
                this.floatLiteral();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public relevanceField(): RelevanceFieldContext {
        let localContext = new RelevanceFieldContext(this.context, this.state);
        this.enterRule(localContext, 306, OpenSearchPPLParser.RULE_relevanceField);
        try {
            this.state = 1837;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case OpenSearchPPLParser.SEARCH:
            case OpenSearchPPLParser.DESCRIBE:
            case OpenSearchPPLParser.SHOW:
            case OpenSearchPPLParser.EXPLAIN:
            case OpenSearchPPLParser.FROM:
            case OpenSearchPPLParser.WHERE:
            case OpenSearchPPLParser.FIELDS:
            case OpenSearchPPLParser.TABLE:
            case OpenSearchPPLParser.RENAME:
            case OpenSearchPPLParser.STATS:
            case OpenSearchPPLParser.EVENTSTATS:
            case OpenSearchPPLParser.DEDUP:
            case OpenSearchPPLParser.SORT:
            case OpenSearchPPLParser.EVAL:
            case OpenSearchPPLParser.HEAD:
            case OpenSearchPPLParser.BIN:
            case OpenSearchPPLParser.TOP:
            case OpenSearchPPLParser.RARE:
            case OpenSearchPPLParser.PARSE:
            case OpenSearchPPLParser.REGEX:
            case OpenSearchPPLParser.REX:
            case OpenSearchPPLParser.PUNCT:
            case OpenSearchPPLParser.GROK:
            case OpenSearchPPLParser.PATTERN:
            case OpenSearchPPLParser.PATTERNS:
            case OpenSearchPPLParser.NEW_FIELD:
            case OpenSearchPPLParser.KMEANS:
            case OpenSearchPPLParser.AD:
            case OpenSearchPPLParser.ML:
            case OpenSearchPPLParser.FILLNULL:
            case OpenSearchPPLParser.FLATTEN:
            case OpenSearchPPLParser.TRENDLINE:
            case OpenSearchPPLParser.TIMECHART:
            case OpenSearchPPLParser.EXPAND:
            case OpenSearchPPLParser.VARIABLE_COUNT_THRESHOLD:
            case OpenSearchPPLParser.FREQUENCY_THRESHOLD_PERCENTAGE:
            case OpenSearchPPLParser.METHOD:
            case OpenSearchPPLParser.MAX_SAMPLE_COUNT:
            case OpenSearchPPLParser.BUFFER_LIMIT:
            case OpenSearchPPLParser.JOIN:
            case OpenSearchPPLParser.INNER:
            case OpenSearchPPLParser.OUTER:
            case OpenSearchPPLParser.FULL:
            case OpenSearchPPLParser.SEMI:
            case OpenSearchPPLParser.ANTI:
            case OpenSearchPPLParser.CROSS:
            case OpenSearchPPLParser.LEFT_HINT:
            case OpenSearchPPLParser.RIGHT_HINT:
            case OpenSearchPPLParser.SOURCE:
            case OpenSearchPPLParser.INDEX:
            case OpenSearchPPLParser.A:
            case OpenSearchPPLParser.ASC:
            case OpenSearchPPLParser.D:
            case OpenSearchPPLParser.DESC:
            case OpenSearchPPLParser.DATASOURCES:
            case OpenSearchPPLParser.USING:
            case OpenSearchPPLParser.WITH:
            case OpenSearchPPLParser.SIMPLE:
            case OpenSearchPPLParser.STANDARD:
            case OpenSearchPPLParser.COST:
            case OpenSearchPPLParser.EXTENDED:
            case OpenSearchPPLParser.OVERRIDE:
            case OpenSearchPPLParser.AUTO:
            case OpenSearchPPLParser.STR:
            case OpenSearchPPLParser.NUM:
            case OpenSearchPPLParser.SMA:
            case OpenSearchPPLParser.WMA:
            case OpenSearchPPLParser.KEEPEMPTY:
            case OpenSearchPPLParser.CONSECUTIVE:
            case OpenSearchPPLParser.DEDUP_SPLITVALUES:
            case OpenSearchPPLParser.PARTITIONS:
            case OpenSearchPPLParser.ALLNUM:
            case OpenSearchPPLParser.DELIM:
            case OpenSearchPPLParser.BUCKET_NULLABLE:
            case OpenSearchPPLParser.CENTROIDS:
            case OpenSearchPPLParser.ITERATIONS:
            case OpenSearchPPLParser.DISTANCE_TYPE:
            case OpenSearchPPLParser.NUMBER_OF_TREES:
            case OpenSearchPPLParser.SHINGLE_SIZE:
            case OpenSearchPPLParser.SAMPLE_SIZE:
            case OpenSearchPPLParser.OUTPUT_AFTER:
            case OpenSearchPPLParser.TIME_DECAY:
            case OpenSearchPPLParser.ANOMALY_RATE:
            case OpenSearchPPLParser.CATEGORY_FIELD:
            case OpenSearchPPLParser.TIME_FIELD:
            case OpenSearchPPLParser.TIME_ZONE:
            case OpenSearchPPLParser.TRAINING_DATA_SIZE:
            case OpenSearchPPLParser.ANOMALY_SCORE_THRESHOLD:
            case OpenSearchPPLParser.APPEND:
            case OpenSearchPPLParser.COUNTFIELD:
            case OpenSearchPPLParser.SHOWCOUNT:
            case OpenSearchPPLParser.INPUT:
            case OpenSearchPPLParser.OUTPUT:
            case OpenSearchPPLParser.PATH:
            case OpenSearchPPLParser.CASE:
            case OpenSearchPPLParser.ELSE:
            case OpenSearchPPLParser.IN:
            case OpenSearchPPLParser.EXISTS:
            case OpenSearchPPLParser.GEOIP:
            case OpenSearchPPLParser.REGEXP:
            case OpenSearchPPLParser.REGEX_MATCH:
            case OpenSearchPPLParser.CONVERT_TZ:
            case OpenSearchPPLParser.DATETIME:
            case OpenSearchPPLParser.DAY:
            case OpenSearchPPLParser.DAY_HOUR:
            case OpenSearchPPLParser.DAY_MICROSECOND:
            case OpenSearchPPLParser.DAY_MINUTE:
            case OpenSearchPPLParser.DAY_OF_YEAR:
            case OpenSearchPPLParser.DAY_SECOND:
            case OpenSearchPPLParser.HOUR:
            case OpenSearchPPLParser.HOUR_MICROSECOND:
            case OpenSearchPPLParser.HOUR_MINUTE:
            case OpenSearchPPLParser.HOUR_OF_DAY:
            case OpenSearchPPLParser.HOUR_SECOND:
            case OpenSearchPPLParser.INTERVAL:
            case OpenSearchPPLParser.MICROSECOND:
            case OpenSearchPPLParser.MILLISECOND:
            case OpenSearchPPLParser.MINUTE:
            case OpenSearchPPLParser.MINUTE_MICROSECOND:
            case OpenSearchPPLParser.MINUTE_OF_DAY:
            case OpenSearchPPLParser.MINUTE_OF_HOUR:
            case OpenSearchPPLParser.MINUTE_SECOND:
            case OpenSearchPPLParser.MONTH:
            case OpenSearchPPLParser.MONTH_OF_YEAR:
            case OpenSearchPPLParser.QUARTER:
            case OpenSearchPPLParser.SECOND:
            case OpenSearchPPLParser.SECOND_MICROSECOND:
            case OpenSearchPPLParser.SECOND_OF_MINUTE:
            case OpenSearchPPLParser.WEEK:
            case OpenSearchPPLParser.WEEK_OF_YEAR:
            case OpenSearchPPLParser.YEAR:
            case OpenSearchPPLParser.YEAR_MONTH:
            case OpenSearchPPLParser.LOOKUP:
            case OpenSearchPPLParser.IP:
            case OpenSearchPPLParser.DOT:
            case OpenSearchPPLParser.PLUS:
            case OpenSearchPPLParser.MINUS:
            case OpenSearchPPLParser.BACKTICK:
            case OpenSearchPPLParser.ARROW:
            case OpenSearchPPLParser.AVG:
            case OpenSearchPPLParser.COUNT:
            case OpenSearchPPLParser.DISTINCT_COUNT:
            case OpenSearchPPLParser.DISTINCT_COUNT_APPROX:
            case OpenSearchPPLParser.ESTDC:
            case OpenSearchPPLParser.ESTDC_ERROR:
            case OpenSearchPPLParser.MAX:
            case OpenSearchPPLParser.MEAN:
            case OpenSearchPPLParser.MEDIAN:
            case OpenSearchPPLParser.MIN:
            case OpenSearchPPLParser.MODE:
            case OpenSearchPPLParser.RANGE:
            case OpenSearchPPLParser.STDEV:
            case OpenSearchPPLParser.STDEVP:
            case OpenSearchPPLParser.SUM:
            case OpenSearchPPLParser.SUMSQ:
            case OpenSearchPPLParser.VAR_SAMP:
            case OpenSearchPPLParser.VAR_POP:
            case OpenSearchPPLParser.STDDEV_SAMP:
            case OpenSearchPPLParser.STDDEV_POP:
            case OpenSearchPPLParser.PERCENTILE:
            case OpenSearchPPLParser.PERCENTILE_APPROX:
            case OpenSearchPPLParser.EARLIEST:
            case OpenSearchPPLParser.LATEST:
            case OpenSearchPPLParser.TAKE:
            case OpenSearchPPLParser.LIST:
            case OpenSearchPPLParser.VALUES:
            case OpenSearchPPLParser.PER_DAY:
            case OpenSearchPPLParser.PER_HOUR:
            case OpenSearchPPLParser.PER_MINUTE:
            case OpenSearchPPLParser.PER_SECOND:
            case OpenSearchPPLParser.RATE:
            case OpenSearchPPLParser.SPARKLINE:
            case OpenSearchPPLParser.C:
            case OpenSearchPPLParser.DC:
            case OpenSearchPPLParser.ROW_NUMBER:
            case OpenSearchPPLParser.RANK:
            case OpenSearchPPLParser.DENSE_RANK:
            case OpenSearchPPLParser.PERCENT_RANK:
            case OpenSearchPPLParser.CUME_DIST:
            case OpenSearchPPLParser.FIRST:
            case OpenSearchPPLParser.LAST:
            case OpenSearchPPLParser.NTH:
            case OpenSearchPPLParser.NTILE:
            case OpenSearchPPLParser.PLUS_FUCTION:
            case OpenSearchPPLParser.MINUS_FUCTION:
            case OpenSearchPPLParser.STAR_FUNCTION:
            case OpenSearchPPLParser.DIVIDE_FUNCTION:
            case OpenSearchPPLParser.ABS:
            case OpenSearchPPLParser.CBRT:
            case OpenSearchPPLParser.CEIL:
            case OpenSearchPPLParser.CEILING:
            case OpenSearchPPLParser.CONV:
            case OpenSearchPPLParser.CRC32:
            case OpenSearchPPLParser.E:
            case OpenSearchPPLParser.EXP:
            case OpenSearchPPLParser.EXPM1:
            case OpenSearchPPLParser.FLOOR:
            case OpenSearchPPLParser.LN:
            case OpenSearchPPLParser.LOG:
            case OpenSearchPPLParser.LOG_WITH_BASE:
            case OpenSearchPPLParser.MOD:
            case OpenSearchPPLParser.MODULUS:
            case OpenSearchPPLParser.PI:
            case OpenSearchPPLParser.POSITION:
            case OpenSearchPPLParser.POW:
            case OpenSearchPPLParser.POWER:
            case OpenSearchPPLParser.RAND:
            case OpenSearchPPLParser.ROUND:
            case OpenSearchPPLParser.SIGN:
            case OpenSearchPPLParser.SQRT:
            case OpenSearchPPLParser.TRUNCATE:
            case OpenSearchPPLParser.RINT:
            case OpenSearchPPLParser.SIGNUM:
            case OpenSearchPPLParser.ACOS:
            case OpenSearchPPLParser.ASIN:
            case OpenSearchPPLParser.ATAN:
            case OpenSearchPPLParser.ATAN2:
            case OpenSearchPPLParser.COS:
            case OpenSearchPPLParser.COSH:
            case OpenSearchPPLParser.COT:
            case OpenSearchPPLParser.DEGREES:
            case OpenSearchPPLParser.RADIANS:
            case OpenSearchPPLParser.SIN:
            case OpenSearchPPLParser.SINH:
            case OpenSearchPPLParser.TAN:
            case OpenSearchPPLParser.MD5:
            case OpenSearchPPLParser.SHA1:
            case OpenSearchPPLParser.SHA2:
            case OpenSearchPPLParser.ADDDATE:
            case OpenSearchPPLParser.ADDTIME:
            case OpenSearchPPLParser.CURDATE:
            case OpenSearchPPLParser.CURRENT_DATE:
            case OpenSearchPPLParser.CURRENT_TIME:
            case OpenSearchPPLParser.CURRENT_TIMESTAMP:
            case OpenSearchPPLParser.CURTIME:
            case OpenSearchPPLParser.DATE:
            case OpenSearchPPLParser.DATEDIFF:
            case OpenSearchPPLParser.DATE_ADD:
            case OpenSearchPPLParser.DATE_FORMAT:
            case OpenSearchPPLParser.DATE_SUB:
            case OpenSearchPPLParser.DAYNAME:
            case OpenSearchPPLParser.DAYOFMONTH:
            case OpenSearchPPLParser.DAYOFWEEK:
            case OpenSearchPPLParser.DAYOFYEAR:
            case OpenSearchPPLParser.DAY_OF_MONTH:
            case OpenSearchPPLParser.DAY_OF_WEEK:
            case OpenSearchPPLParser.EXTRACT:
            case OpenSearchPPLParser.FROM_DAYS:
            case OpenSearchPPLParser.FROM_UNIXTIME:
            case OpenSearchPPLParser.GET_FORMAT:
            case OpenSearchPPLParser.LAST_DAY:
            case OpenSearchPPLParser.LOCALTIME:
            case OpenSearchPPLParser.LOCALTIMESTAMP:
            case OpenSearchPPLParser.MAKEDATE:
            case OpenSearchPPLParser.MAKETIME:
            case OpenSearchPPLParser.MONTHNAME:
            case OpenSearchPPLParser.NOW:
            case OpenSearchPPLParser.PERIOD_ADD:
            case OpenSearchPPLParser.PERIOD_DIFF:
            case OpenSearchPPLParser.SEC_TO_TIME:
            case OpenSearchPPLParser.STR_TO_DATE:
            case OpenSearchPPLParser.SUBDATE:
            case OpenSearchPPLParser.SUBTIME:
            case OpenSearchPPLParser.SYSDATE:
            case OpenSearchPPLParser.TIME:
            case OpenSearchPPLParser.TIMEDIFF:
            case OpenSearchPPLParser.TIMESTAMP:
            case OpenSearchPPLParser.TIME_FORMAT:
            case OpenSearchPPLParser.TIME_TO_SEC:
            case OpenSearchPPLParser.TO_DAYS:
            case OpenSearchPPLParser.TO_SECONDS:
            case OpenSearchPPLParser.UNIX_TIMESTAMP:
            case OpenSearchPPLParser.UTC_DATE:
            case OpenSearchPPLParser.UTC_TIME:
            case OpenSearchPPLParser.UTC_TIMESTAMP:
            case OpenSearchPPLParser.WEEKDAY:
            case OpenSearchPPLParser.YEARWEEK:
            case OpenSearchPPLParser.STRFTIME:
            case OpenSearchPPLParser.SUBSTR:
            case OpenSearchPPLParser.SUBSTRING:
            case OpenSearchPPLParser.LTRIM:
            case OpenSearchPPLParser.RTRIM:
            case OpenSearchPPLParser.TRIM:
            case OpenSearchPPLParser.LOWER:
            case OpenSearchPPLParser.UPPER:
            case OpenSearchPPLParser.CONCAT:
            case OpenSearchPPLParser.CONCAT_WS:
            case OpenSearchPPLParser.LENGTH:
            case OpenSearchPPLParser.STRCMP:
            case OpenSearchPPLParser.RIGHT:
            case OpenSearchPPLParser.LEFT:
            case OpenSearchPPLParser.ASCII:
            case OpenSearchPPLParser.LOCATE:
            case OpenSearchPPLParser.REPLACE:
            case OpenSearchPPLParser.REVERSE:
            case OpenSearchPPLParser.CAST:
            case OpenSearchPPLParser.LIKE:
            case OpenSearchPPLParser.ISNULL:
            case OpenSearchPPLParser.ISNOTNULL:
            case OpenSearchPPLParser.CIDRMATCH:
            case OpenSearchPPLParser.BETWEEN:
            case OpenSearchPPLParser.ISPRESENT:
            case OpenSearchPPLParser.ISEMPTY:
            case OpenSearchPPLParser.ISBLANK:
            case OpenSearchPPLParser.ARRAY:
            case OpenSearchPPLParser.ARRAY_LENGTH:
            case OpenSearchPPLParser.MVJOIN:
            case OpenSearchPPLParser.FORALL:
            case OpenSearchPPLParser.FILTER:
            case OpenSearchPPLParser.TRANSFORM:
            case OpenSearchPPLParser.REDUCE:
            case OpenSearchPPLParser.JSON_VALID:
            case OpenSearchPPLParser.JSON:
            case OpenSearchPPLParser.JSON_OBJECT:
            case OpenSearchPPLParser.JSON_ARRAY:
            case OpenSearchPPLParser.JSON_ARRAY_LENGTH:
            case OpenSearchPPLParser.JSON_EXTRACT:
            case OpenSearchPPLParser.JSON_KEYS:
            case OpenSearchPPLParser.JSON_SET:
            case OpenSearchPPLParser.JSON_DELETE:
            case OpenSearchPPLParser.JSON_APPEND:
            case OpenSearchPPLParser.JSON_EXTEND:
            case OpenSearchPPLParser.IFNULL:
            case OpenSearchPPLParser.NULLIF:
            case OpenSearchPPLParser.IF:
            case OpenSearchPPLParser.TYPEOF:
            case OpenSearchPPLParser.COALESCE:
            case OpenSearchPPLParser.MATCH:
            case OpenSearchPPLParser.MATCH_PHRASE:
            case OpenSearchPPLParser.MATCH_PHRASE_PREFIX:
            case OpenSearchPPLParser.MATCH_BOOL_PREFIX:
            case OpenSearchPPLParser.SIMPLE_QUERY_STRING:
            case OpenSearchPPLParser.MULTI_MATCH:
            case OpenSearchPPLParser.QUERY_STRING:
            case OpenSearchPPLParser.ALLOW_LEADING_WILDCARD:
            case OpenSearchPPLParser.ANALYZE_WILDCARD:
            case OpenSearchPPLParser.ANALYZER:
            case OpenSearchPPLParser.AUTO_GENERATE_SYNONYMS_PHRASE_QUERY:
            case OpenSearchPPLParser.BOOST:
            case OpenSearchPPLParser.CUTOFF_FREQUENCY:
            case OpenSearchPPLParser.DEFAULT_FIELD:
            case OpenSearchPPLParser.DEFAULT_OPERATOR:
            case OpenSearchPPLParser.ENABLE_POSITION_INCREMENTS:
            case OpenSearchPPLParser.ESCAPE:
            case OpenSearchPPLParser.FLAGS:
            case OpenSearchPPLParser.FUZZY_MAX_EXPANSIONS:
            case OpenSearchPPLParser.FUZZY_PREFIX_LENGTH:
            case OpenSearchPPLParser.FUZZY_TRANSPOSITIONS:
            case OpenSearchPPLParser.FUZZY_REWRITE:
            case OpenSearchPPLParser.FUZZINESS:
            case OpenSearchPPLParser.LENIENT:
            case OpenSearchPPLParser.LOW_FREQ_OPERATOR:
            case OpenSearchPPLParser.MAX_DETERMINIZED_STATES:
            case OpenSearchPPLParser.MAX_EXPANSIONS:
            case OpenSearchPPLParser.MINIMUM_SHOULD_MATCH:
            case OpenSearchPPLParser.OPERATOR:
            case OpenSearchPPLParser.PHRASE_SLOP:
            case OpenSearchPPLParser.PREFIX_LENGTH:
            case OpenSearchPPLParser.QUOTE_ANALYZER:
            case OpenSearchPPLParser.QUOTE_FIELD_SUFFIX:
            case OpenSearchPPLParser.REWRITE:
            case OpenSearchPPLParser.SLOP:
            case OpenSearchPPLParser.TIE_BREAKER:
            case OpenSearchPPLParser.TYPE:
            case OpenSearchPPLParser.ZERO_TERMS_QUERY:
            case OpenSearchPPLParser.SPAN:
            case OpenSearchPPLParser.MS:
            case OpenSearchPPLParser.S:
            case OpenSearchPPLParser.M:
            case OpenSearchPPLParser.H:
            case OpenSearchPPLParser.W:
            case OpenSearchPPLParser.Q:
            case OpenSearchPPLParser.Y:
            case OpenSearchPPLParser.SEC:
            case OpenSearchPPLParser.SECS:
            case OpenSearchPPLParser.SECONDS:
            case OpenSearchPPLParser.MINS:
            case OpenSearchPPLParser.MINUTES:
            case OpenSearchPPLParser.HR:
            case OpenSearchPPLParser.HRS:
            case OpenSearchPPLParser.HOURS:
            case OpenSearchPPLParser.DAYS:
            case OpenSearchPPLParser.MON:
            case OpenSearchPPLParser.MONTHS:
            case OpenSearchPPLParser.US:
            case OpenSearchPPLParser.CS:
            case OpenSearchPPLParser.DS:
            case OpenSearchPPLParser.PERCENTILE_SHORTCUT:
            case OpenSearchPPLParser.ID:
            case OpenSearchPPLParser.BQUOTA_STRING:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 1835;
                this.qualifiedName();
                }
                break;
            case OpenSearchPPLParser.DQUOTA_STRING:
            case OpenSearchPPLParser.SQUOTA_STRING:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 1836;
                this.stringLiteral();
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public relevanceQuery(): RelevanceQueryContext {
        let localContext = new RelevanceQueryContext(this.context, this.state);
        this.enterRule(localContext, 308, OpenSearchPPLParser.RULE_relevanceQuery);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1839;
            this.relevanceArgValue();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public relevanceArgValue(): RelevanceArgValueContext {
        let localContext = new RelevanceArgValueContext(this.context, this.state);
        this.enterRule(localContext, 310, OpenSearchPPLParser.RULE_relevanceArgValue);
        try {
            this.state = 1843;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 182, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 1841;
                this.qualifiedName();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 1842;
                this.literalValue();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public mathematicalFunctionName(): MathematicalFunctionNameContext {
        let localContext = new MathematicalFunctionNameContext(this.context, this.state);
        this.enterRule(localContext, 312, OpenSearchPPLParser.RULE_mathematicalFunctionName);
        try {
            this.state = 1877;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case OpenSearchPPLParser.ABS:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 1845;
                this.match(OpenSearchPPLParser.ABS);
                }
                break;
            case OpenSearchPPLParser.PLUS_FUCTION:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 1846;
                this.match(OpenSearchPPLParser.PLUS_FUCTION);
                }
                break;
            case OpenSearchPPLParser.MINUS_FUCTION:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 1847;
                this.match(OpenSearchPPLParser.MINUS_FUCTION);
                }
                break;
            case OpenSearchPPLParser.STAR_FUNCTION:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 1848;
                this.match(OpenSearchPPLParser.STAR_FUNCTION);
                }
                break;
            case OpenSearchPPLParser.DIVIDE_FUNCTION:
                this.enterOuterAlt(localContext, 5);
                {
                this.state = 1849;
                this.match(OpenSearchPPLParser.DIVIDE_FUNCTION);
                }
                break;
            case OpenSearchPPLParser.CBRT:
                this.enterOuterAlt(localContext, 6);
                {
                this.state = 1850;
                this.match(OpenSearchPPLParser.CBRT);
                }
                break;
            case OpenSearchPPLParser.CEIL:
                this.enterOuterAlt(localContext, 7);
                {
                this.state = 1851;
                this.match(OpenSearchPPLParser.CEIL);
                }
                break;
            case OpenSearchPPLParser.CEILING:
                this.enterOuterAlt(localContext, 8);
                {
                this.state = 1852;
                this.match(OpenSearchPPLParser.CEILING);
                }
                break;
            case OpenSearchPPLParser.CONV:
                this.enterOuterAlt(localContext, 9);
                {
                this.state = 1853;
                this.match(OpenSearchPPLParser.CONV);
                }
                break;
            case OpenSearchPPLParser.CRC32:
                this.enterOuterAlt(localContext, 10);
                {
                this.state = 1854;
                this.match(OpenSearchPPLParser.CRC32);
                }
                break;
            case OpenSearchPPLParser.E:
                this.enterOuterAlt(localContext, 11);
                {
                this.state = 1855;
                this.match(OpenSearchPPLParser.E);
                }
                break;
            case OpenSearchPPLParser.EXP:
                this.enterOuterAlt(localContext, 12);
                {
                this.state = 1856;
                this.match(OpenSearchPPLParser.EXP);
                }
                break;
            case OpenSearchPPLParser.EXPM1:
                this.enterOuterAlt(localContext, 13);
                {
                this.state = 1857;
                this.match(OpenSearchPPLParser.EXPM1);
                }
                break;
            case OpenSearchPPLParser.FLOOR:
                this.enterOuterAlt(localContext, 14);
                {
                this.state = 1858;
                this.match(OpenSearchPPLParser.FLOOR);
                }
                break;
            case OpenSearchPPLParser.LN:
                this.enterOuterAlt(localContext, 15);
                {
                this.state = 1859;
                this.match(OpenSearchPPLParser.LN);
                }
                break;
            case OpenSearchPPLParser.LOG:
                this.enterOuterAlt(localContext, 16);
                {
                this.state = 1860;
                this.match(OpenSearchPPLParser.LOG);
                }
                break;
            case OpenSearchPPLParser.LOG_WITH_BASE:
                this.enterOuterAlt(localContext, 17);
                {
                this.state = 1861;
                this.match(OpenSearchPPLParser.LOG_WITH_BASE);
                }
                break;
            case OpenSearchPPLParser.MOD:
                this.enterOuterAlt(localContext, 18);
                {
                this.state = 1862;
                this.match(OpenSearchPPLParser.MOD);
                }
                break;
            case OpenSearchPPLParser.MODULUS:
                this.enterOuterAlt(localContext, 19);
                {
                this.state = 1863;
                this.match(OpenSearchPPLParser.MODULUS);
                }
                break;
            case OpenSearchPPLParser.PI:
                this.enterOuterAlt(localContext, 20);
                {
                this.state = 1864;
                this.match(OpenSearchPPLParser.PI);
                }
                break;
            case OpenSearchPPLParser.POW:
                this.enterOuterAlt(localContext, 21);
                {
                this.state = 1865;
                this.match(OpenSearchPPLParser.POW);
                }
                break;
            case OpenSearchPPLParser.POWER:
                this.enterOuterAlt(localContext, 22);
                {
                this.state = 1866;
                this.match(OpenSearchPPLParser.POWER);
                }
                break;
            case OpenSearchPPLParser.RAND:
                this.enterOuterAlt(localContext, 23);
                {
                this.state = 1867;
                this.match(OpenSearchPPLParser.RAND);
                }
                break;
            case OpenSearchPPLParser.ROUND:
                this.enterOuterAlt(localContext, 24);
                {
                this.state = 1868;
                this.match(OpenSearchPPLParser.ROUND);
                }
                break;
            case OpenSearchPPLParser.SIGN:
                this.enterOuterAlt(localContext, 25);
                {
                this.state = 1869;
                this.match(OpenSearchPPLParser.SIGN);
                }
                break;
            case OpenSearchPPLParser.SQRT:
                this.enterOuterAlt(localContext, 26);
                {
                this.state = 1870;
                this.match(OpenSearchPPLParser.SQRT);
                }
                break;
            case OpenSearchPPLParser.TRUNCATE:
                this.enterOuterAlt(localContext, 27);
                {
                this.state = 1871;
                this.match(OpenSearchPPLParser.TRUNCATE);
                }
                break;
            case OpenSearchPPLParser.RINT:
                this.enterOuterAlt(localContext, 28);
                {
                this.state = 1872;
                this.match(OpenSearchPPLParser.RINT);
                }
                break;
            case OpenSearchPPLParser.SIGNUM:
                this.enterOuterAlt(localContext, 29);
                {
                this.state = 1873;
                this.match(OpenSearchPPLParser.SIGNUM);
                }
                break;
            case OpenSearchPPLParser.SUM:
                this.enterOuterAlt(localContext, 30);
                {
                this.state = 1874;
                this.match(OpenSearchPPLParser.SUM);
                }
                break;
            case OpenSearchPPLParser.AVG:
                this.enterOuterAlt(localContext, 31);
                {
                this.state = 1875;
                this.match(OpenSearchPPLParser.AVG);
                }
                break;
            case OpenSearchPPLParser.ACOS:
            case OpenSearchPPLParser.ASIN:
            case OpenSearchPPLParser.ATAN:
            case OpenSearchPPLParser.ATAN2:
            case OpenSearchPPLParser.COS:
            case OpenSearchPPLParser.COSH:
            case OpenSearchPPLParser.COT:
            case OpenSearchPPLParser.DEGREES:
            case OpenSearchPPLParser.RADIANS:
            case OpenSearchPPLParser.SIN:
            case OpenSearchPPLParser.SINH:
            case OpenSearchPPLParser.TAN:
                this.enterOuterAlt(localContext, 32);
                {
                this.state = 1876;
                this.trigonometricFunctionName();
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public geoipFunctionName(): GeoipFunctionNameContext {
        let localContext = new GeoipFunctionNameContext(this.context, this.state);
        this.enterRule(localContext, 314, OpenSearchPPLParser.RULE_geoipFunctionName);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1879;
            this.match(OpenSearchPPLParser.GEOIP);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public collectionFunctionName(): CollectionFunctionNameContext {
        let localContext = new CollectionFunctionNameContext(this.context, this.state);
        this.enterRule(localContext, 316, OpenSearchPPLParser.RULE_collectionFunctionName);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1881;
            _la = this.tokenStream.LA(1);
            if(!(_la === 115 || ((((_la - 366)) & ~0x1F) === 0 && ((1 << (_la - 366)) & 127) !== 0))) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public trigonometricFunctionName(): TrigonometricFunctionNameContext {
        let localContext = new TrigonometricFunctionNameContext(this.context, this.state);
        this.enterRule(localContext, 318, OpenSearchPPLParser.RULE_trigonometricFunctionName);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1883;
            _la = this.tokenStream.LA(1);
            if(!(((((_la - 272)) & ~0x1F) === 0 && ((1 << (_la - 272)) & 4095) !== 0))) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public jsonFunctionName(): JsonFunctionNameContext {
        let localContext = new JsonFunctionNameContext(this.context, this.state);
        this.enterRule(localContext, 320, OpenSearchPPLParser.RULE_jsonFunctionName);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1885;
            _la = this.tokenStream.LA(1);
            if(!(((((_la - 374)) & ~0x1F) === 0 && ((1 << (_la - 374)) & 1023) !== 0))) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public cryptographicFunctionName(): CryptographicFunctionNameContext {
        let localContext = new CryptographicFunctionNameContext(this.context, this.state);
        this.enterRule(localContext, 322, OpenSearchPPLParser.RULE_cryptographicFunctionName);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1887;
            _la = this.tokenStream.LA(1);
            if(!(((((_la - 284)) & ~0x1F) === 0 && ((1 << (_la - 284)) & 7) !== 0))) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public dateTimeFunctionName(): DateTimeFunctionNameContext {
        let localContext = new DateTimeFunctionNameContext(this.context, this.state);
        this.enterRule(localContext, 324, OpenSearchPPLParser.RULE_dateTimeFunctionName);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1889;
            _la = this.tokenStream.LA(1);
            if(!(((((_la - 125)) & ~0x1F) === 0 && ((1 << (_la - 125)) & 1038960967) !== 0) || ((((_la - 287)) & ~0x1F) === 0 && ((1 << (_la - 287)) & 4292607999) !== 0) || ((((_la - 319)) & ~0x1F) === 0 && ((1 << (_la - 319)) & 1048191) !== 0))) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public getFormatFunctionCall(): GetFormatFunctionCallContext {
        let localContext = new GetFormatFunctionCallContext(this.context, this.state);
        this.enterRule(localContext, 326, OpenSearchPPLParser.RULE_getFormatFunctionCall);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1891;
            this.match(OpenSearchPPLParser.GET_FORMAT);
            this.state = 1892;
            this.match(OpenSearchPPLParser.LT_PRTHS);
            this.state = 1893;
            this.getFormatType();
            this.state = 1894;
            this.match(OpenSearchPPLParser.COMMA);
            this.state = 1895;
            this.functionArg();
            this.state = 1896;
            this.match(OpenSearchPPLParser.RT_PRTHS);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public getFormatType(): GetFormatTypeContext {
        let localContext = new GetFormatTypeContext(this.context, this.state);
        this.enterRule(localContext, 328, OpenSearchPPLParser.RULE_getFormatType);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1898;
            _la = this.tokenStream.LA(1);
            if(!(_la === 126 || ((((_la - 294)) & ~0x1F) === 0 && ((1 << (_la - 294)) & 2684354561) !== 0))) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public extractFunctionCall(): ExtractFunctionCallContext {
        let localContext = new ExtractFunctionCallContext(this.context, this.state);
        this.enterRule(localContext, 330, OpenSearchPPLParser.RULE_extractFunctionCall);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1900;
            this.match(OpenSearchPPLParser.EXTRACT);
            this.state = 1901;
            this.match(OpenSearchPPLParser.LT_PRTHS);
            this.state = 1902;
            this.datetimePart();
            this.state = 1903;
            this.match(OpenSearchPPLParser.FROM);
            this.state = 1904;
            this.functionArg();
            this.state = 1905;
            this.match(OpenSearchPPLParser.RT_PRTHS);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public simpleDateTimePart(): SimpleDateTimePartContext {
        let localContext = new SimpleDateTimePartContext(this.context, this.state);
        this.enterRule(localContext, 332, OpenSearchPPLParser.RULE_simpleDateTimePart);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1907;
            _la = this.tokenStream.LA(1);
            if(!(((((_la - 127)) & ~0x1F) === 0 && ((1 << (_la - 127)) & 174608449) !== 0))) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public complexDateTimePart(): ComplexDateTimePartContext {
        let localContext = new ComplexDateTimePartContext(this.context, this.state);
        this.enterRule(localContext, 334, OpenSearchPPLParser.RULE_complexDateTimePart);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1909;
            _la = this.tokenStream.LA(1);
            if(!(((((_la - 128)) & ~0x1F) === 0 && ((1 << (_la - 128)) & 138560215) !== 0))) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public datetimePart(): DatetimePartContext {
        let localContext = new DatetimePartContext(this.context, this.state);
        this.enterRule(localContext, 336, OpenSearchPPLParser.RULE_datetimePart);
        try {
            this.state = 1913;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case OpenSearchPPLParser.DAY:
            case OpenSearchPPLParser.HOUR:
            case OpenSearchPPLParser.MICROSECOND:
            case OpenSearchPPLParser.MINUTE:
            case OpenSearchPPLParser.MONTH:
            case OpenSearchPPLParser.QUARTER:
            case OpenSearchPPLParser.SECOND:
            case OpenSearchPPLParser.WEEK:
            case OpenSearchPPLParser.YEAR:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 1911;
                this.simpleDateTimePart();
                }
                break;
            case OpenSearchPPLParser.DAY_HOUR:
            case OpenSearchPPLParser.DAY_MICROSECOND:
            case OpenSearchPPLParser.DAY_MINUTE:
            case OpenSearchPPLParser.DAY_SECOND:
            case OpenSearchPPLParser.HOUR_MICROSECOND:
            case OpenSearchPPLParser.HOUR_MINUTE:
            case OpenSearchPPLParser.HOUR_SECOND:
            case OpenSearchPPLParser.MINUTE_MICROSECOND:
            case OpenSearchPPLParser.MINUTE_SECOND:
            case OpenSearchPPLParser.SECOND_MICROSECOND:
            case OpenSearchPPLParser.YEAR_MONTH:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 1912;
                this.complexDateTimePart();
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public timestampFunctionCall(): TimestampFunctionCallContext {
        let localContext = new TimestampFunctionCallContext(this.context, this.state);
        this.enterRule(localContext, 338, OpenSearchPPLParser.RULE_timestampFunctionCall);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1915;
            this.timestampFunctionName();
            this.state = 1916;
            this.match(OpenSearchPPLParser.LT_PRTHS);
            this.state = 1917;
            this.simpleDateTimePart();
            this.state = 1918;
            this.match(OpenSearchPPLParser.COMMA);
            this.state = 1919;
            localContext._firstArg = this.functionArg();
            this.state = 1920;
            this.match(OpenSearchPPLParser.COMMA);
            this.state = 1921;
            localContext._secondArg = this.functionArg();
            this.state = 1922;
            this.match(OpenSearchPPLParser.RT_PRTHS);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public timestampFunctionName(): TimestampFunctionNameContext {
        let localContext = new TimestampFunctionNameContext(this.context, this.state);
        this.enterRule(localContext, 340, OpenSearchPPLParser.RULE_timestampFunctionName);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1924;
            _la = this.tokenStream.LA(1);
            if(!(_la === 326 || _la === 327)) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public conditionFunctionName(): ConditionFunctionNameContext {
        let localContext = new ConditionFunctionNameContext(this.context, this.state);
        this.enterRule(localContext, 342, OpenSearchPPLParser.RULE_conditionFunctionName);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1926;
            _la = this.tokenStream.LA(1);
            if(!(_la === 124 || _la === 220 || _la === 221 || ((((_la - 358)) & ~0x1F) === 0 && ((1 << (_la - 358)) & 33007) !== 0))) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public flowControlFunctionName(): FlowControlFunctionNameContext {
        let localContext = new FlowControlFunctionNameContext(this.context, this.state);
        this.enterRule(localContext, 344, OpenSearchPPLParser.RULE_flowControlFunctionName);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1928;
            _la = this.tokenStream.LA(1);
            if(!(((((_la - 384)) & ~0x1F) === 0 && ((1 << (_la - 384)) & 23) !== 0))) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public systemFunctionName(): SystemFunctionNameContext {
        let localContext = new SystemFunctionNameContext(this.context, this.state);
        this.enterRule(localContext, 346, OpenSearchPPLParser.RULE_systemFunctionName);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1930;
            this.match(OpenSearchPPLParser.TYPEOF);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public textFunctionName(): TextFunctionNameContext {
        let localContext = new TextFunctionNameContext(this.context, this.state);
        this.enterRule(localContext, 348, OpenSearchPPLParser.RULE_textFunctionName);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1932;
            _la = this.tokenStream.LA(1);
            if(!(((((_la - 339)) & ~0x1F) === 0 && ((1 << (_la - 339)) & 262111) !== 0))) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public positionFunctionName(): PositionFunctionNameContext {
        let localContext = new PositionFunctionNameContext(this.context, this.state);
        this.enterRule(localContext, 350, OpenSearchPPLParser.RULE_positionFunctionName);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1934;
            this.match(OpenSearchPPLParser.POSITION);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public comparisonOperator(): ComparisonOperatorContext {
        let localContext = new ComparisonOperatorContext(this.context, this.state);
        this.enterRule(localContext, 352, OpenSearchPPLParser.RULE_comparisonOperator);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1936;
            _la = this.tokenStream.LA(1);
            if(!(_la === 123 || ((((_la - 170)) & ~0x1F) === 0 && ((1 << (_la - 170)) & 127) !== 0) || _la === 358)) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public singleFieldRelevanceFunctionName(): SingleFieldRelevanceFunctionNameContext {
        let localContext = new SingleFieldRelevanceFunctionNameContext(this.context, this.state);
        this.enterRule(localContext, 354, OpenSearchPPLParser.RULE_singleFieldRelevanceFunctionName);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1938;
            _la = this.tokenStream.LA(1);
            if(!(((((_la - 389)) & ~0x1F) === 0 && ((1 << (_la - 389)) & 15) !== 0))) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public multiFieldRelevanceFunctionName(): MultiFieldRelevanceFunctionNameContext {
        let localContext = new MultiFieldRelevanceFunctionNameContext(this.context, this.state);
        this.enterRule(localContext, 356, OpenSearchPPLParser.RULE_multiFieldRelevanceFunctionName);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1940;
            _la = this.tokenStream.LA(1);
            if(!(((((_la - 393)) & ~0x1F) === 0 && ((1 << (_la - 393)) & 7) !== 0))) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public literalValue(): LiteralValueContext {
        let localContext = new LiteralValueContext(this.context, this.state);
        this.enterRule(localContext, 358, OpenSearchPPLParser.RULE_literalValue);
        try {
            this.state = 1950;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 185, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 1942;
                this.intervalLiteral();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 1943;
                this.stringLiteral();
                }
                break;
            case 3:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 1944;
                this.integerLiteral();
                }
                break;
            case 4:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 1945;
                this.decimalLiteral();
                }
                break;
            case 5:
                this.enterOuterAlt(localContext, 5);
                {
                this.state = 1946;
                this.doubleLiteral();
                }
                break;
            case 6:
                this.enterOuterAlt(localContext, 6);
                {
                this.state = 1947;
                this.floatLiteral();
                }
                break;
            case 7:
                this.enterOuterAlt(localContext, 7);
                {
                this.state = 1948;
                this.booleanLiteral();
                }
                break;
            case 8:
                this.enterOuterAlt(localContext, 8);
                {
                this.state = 1949;
                this.datetimeLiteral();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public intervalLiteral(): IntervalLiteralContext {
        let localContext = new IntervalLiteralContext(this.context, this.state);
        this.enterRule(localContext, 360, OpenSearchPPLParser.RULE_intervalLiteral);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1952;
            this.match(OpenSearchPPLParser.INTERVAL);
            this.state = 1953;
            this.valueExpression(0);
            this.state = 1954;
            this.intervalUnit();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public stringLiteral(): StringLiteralContext {
        let localContext = new StringLiteralContext(this.context, this.state);
        this.enterRule(localContext, 362, OpenSearchPPLParser.RULE_stringLiteral);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1956;
            _la = this.tokenStream.LA(1);
            if(!(_la === 462 || _la === 463)) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public integerLiteral(): IntegerLiteralContext {
        let localContext = new IntegerLiteralContext(this.context, this.state);
        this.enterRule(localContext, 364, OpenSearchPPLParser.RULE_integerLiteral);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1959;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 177 || _la === 178) {
                {
                this.state = 1958;
                _la = this.tokenStream.LA(1);
                if(!(_la === 177 || _la === 178)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                }
            }

            this.state = 1961;
            this.match(OpenSearchPPLParser.INTEGER_LITERAL);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public decimalLiteral(): DecimalLiteralContext {
        let localContext = new DecimalLiteralContext(this.context, this.state);
        this.enterRule(localContext, 366, OpenSearchPPLParser.RULE_decimalLiteral);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1964;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 177 || _la === 178) {
                {
                this.state = 1963;
                _la = this.tokenStream.LA(1);
                if(!(_la === 177 || _la === 178)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                }
            }

            this.state = 1966;
            this.match(OpenSearchPPLParser.DECIMAL_LITERAL);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public doubleLiteral(): DoubleLiteralContext {
        let localContext = new DoubleLiteralContext(this.context, this.state);
        this.enterRule(localContext, 368, OpenSearchPPLParser.RULE_doubleLiteral);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1969;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 177 || _la === 178) {
                {
                this.state = 1968;
                _la = this.tokenStream.LA(1);
                if(!(_la === 177 || _la === 178)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                }
            }

            this.state = 1971;
            this.match(OpenSearchPPLParser.DOUBLE_LITERAL);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public floatLiteral(): FloatLiteralContext {
        let localContext = new FloatLiteralContext(this.context, this.state);
        this.enterRule(localContext, 370, OpenSearchPPLParser.RULE_floatLiteral);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1974;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 177 || _la === 178) {
                {
                this.state = 1973;
                _la = this.tokenStream.LA(1);
                if(!(_la === 177 || _la === 178)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                }
            }

            this.state = 1976;
            this.match(OpenSearchPPLParser.FLOAT_LITERAL);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public booleanLiteral(): BooleanLiteralContext {
        let localContext = new BooleanLiteralContext(this.context, this.state);
        this.enterRule(localContext, 372, OpenSearchPPLParser.RULE_booleanLiteral);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1978;
            _la = this.tokenStream.LA(1);
            if(!(_la === 121 || _la === 122)) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public datetimeLiteral(): DatetimeLiteralContext {
        let localContext = new DatetimeLiteralContext(this.context, this.state);
        this.enterRule(localContext, 374, OpenSearchPPLParser.RULE_datetimeLiteral);
        try {
            this.state = 1983;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case OpenSearchPPLParser.DATE:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 1980;
                this.dateLiteral();
                }
                break;
            case OpenSearchPPLParser.TIME:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 1981;
                this.timeLiteral();
                }
                break;
            case OpenSearchPPLParser.TIMESTAMP:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 1982;
                this.timestampLiteral();
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public dateLiteral(): DateLiteralContext {
        let localContext = new DateLiteralContext(this.context, this.state);
        this.enterRule(localContext, 376, OpenSearchPPLParser.RULE_dateLiteral);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1985;
            this.match(OpenSearchPPLParser.DATE);
            this.state = 1986;
            localContext._date = this.stringLiteral();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public timeLiteral(): TimeLiteralContext {
        let localContext = new TimeLiteralContext(this.context, this.state);
        this.enterRule(localContext, 378, OpenSearchPPLParser.RULE_timeLiteral);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1988;
            this.match(OpenSearchPPLParser.TIME);
            this.state = 1989;
            localContext._time = this.stringLiteral();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public timestampLiteral(): TimestampLiteralContext {
        let localContext = new TimestampLiteralContext(this.context, this.state);
        this.enterRule(localContext, 380, OpenSearchPPLParser.RULE_timestampLiteral);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1991;
            this.match(OpenSearchPPLParser.TIMESTAMP);
            this.state = 1992;
            localContext._timestamp = this.stringLiteral();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public intervalUnit(): IntervalUnitContext {
        let localContext = new IntervalUnitContext(this.context, this.state);
        this.enterRule(localContext, 382, OpenSearchPPLParser.RULE_intervalUnit);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1994;
            _la = this.tokenStream.LA(1);
            if(!(((((_la - 127)) & ~0x1F) === 0 && ((1 << (_la - 127)) & 451728879) !== 0))) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public timespanUnit(): TimespanUnitContext {
        let localContext = new TimespanUnitContext(this.context, this.state);
        this.enterRule(localContext, 384, OpenSearchPPLParser.RULE_timespanUnit);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1996;
            _la = this.tokenStream.LA(1);
            if(!(_la === 67 || ((((_la - 127)) & ~0x1F) === 0 && ((1 << (_la - 127)) & 174612545) !== 0) || ((((_la - 433)) & ~0x1F) === 0 && ((1 << (_la - 433)) & 2097151) !== 0))) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public valueList(): ValueListContext {
        let localContext = new ValueListContext(this.context, this.state);
        this.enterRule(localContext, 386, OpenSearchPPLParser.RULE_valueList);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1998;
            this.match(OpenSearchPPLParser.LT_PRTHS);
            this.state = 1999;
            this.literalValue();
            this.state = 2004;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 168) {
                {
                {
                this.state = 2000;
                this.match(OpenSearchPPLParser.COMMA);
                this.state = 2001;
                this.literalValue();
                }
                }
                this.state = 2006;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            this.state = 2007;
            this.match(OpenSearchPPLParser.RT_PRTHS);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public qualifiedName(): QualifiedNameContext {
        let localContext = new QualifiedNameContext(this.context, this.state);
        this.enterRule(localContext, 388, OpenSearchPPLParser.RULE_qualifiedName);
        try {
            let alternative: number;
            localContext = new IdentsAsQualifiedNameContext(localContext);
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2009;
            this.ident();
            this.state = 2014;
            this.errorHandler.sync(this);
            alternative = this.interpreter.adaptivePredict(this.tokenStream, 192, this.context);
            while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER) {
                if (alternative === 1) {
                    {
                    {
                    this.state = 2010;
                    this.match(OpenSearchPPLParser.DOT);
                    this.state = 2011;
                    this.ident();
                    }
                    }
                }
                this.state = 2016;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 192, this.context);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public tableQualifiedName(): TableQualifiedNameContext {
        let localContext = new TableQualifiedNameContext(this.context, this.state);
        this.enterRule(localContext, 390, OpenSearchPPLParser.RULE_tableQualifiedName);
        try {
            let alternative: number;
            localContext = new IdentsAsTableQualifiedNameContext(localContext);
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2017;
            this.tableIdent();
            this.state = 2022;
            this.errorHandler.sync(this);
            alternative = this.interpreter.adaptivePredict(this.tokenStream, 193, this.context);
            while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER) {
                if (alternative === 1) {
                    {
                    {
                    this.state = 2018;
                    this.match(OpenSearchPPLParser.DOT);
                    this.state = 2019;
                    this.ident();
                    }
                    }
                }
                this.state = 2024;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 193, this.context);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public wcQualifiedName(): WcQualifiedNameContext {
        let localContext = new WcQualifiedNameContext(this.context, this.state);
        this.enterRule(localContext, 392, OpenSearchPPLParser.RULE_wcQualifiedName);
        try {
            let alternative: number;
            localContext = new IdentsAsWildcardQualifiedNameContext(localContext);
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2025;
            this.wildcard();
            this.state = 2030;
            this.errorHandler.sync(this);
            alternative = this.interpreter.adaptivePredict(this.tokenStream, 194, this.context);
            while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER) {
                if (alternative === 1) {
                    {
                    {
                    this.state = 2026;
                    this.match(OpenSearchPPLParser.DOT);
                    this.state = 2027;
                    this.wildcard();
                    }
                    }
                }
                this.state = 2032;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 194, this.context);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public identifierSeq(): IdentifierSeqContext {
        let localContext = new IdentifierSeqContext(this.context, this.state);
        this.enterRule(localContext, 394, OpenSearchPPLParser.RULE_identifierSeq);
        let _la: number;
        try {
            this.state = 2052;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case OpenSearchPPLParser.SEARCH:
            case OpenSearchPPLParser.DESCRIBE:
            case OpenSearchPPLParser.SHOW:
            case OpenSearchPPLParser.EXPLAIN:
            case OpenSearchPPLParser.FROM:
            case OpenSearchPPLParser.WHERE:
            case OpenSearchPPLParser.FIELDS:
            case OpenSearchPPLParser.TABLE:
            case OpenSearchPPLParser.RENAME:
            case OpenSearchPPLParser.STATS:
            case OpenSearchPPLParser.EVENTSTATS:
            case OpenSearchPPLParser.DEDUP:
            case OpenSearchPPLParser.SORT:
            case OpenSearchPPLParser.EVAL:
            case OpenSearchPPLParser.HEAD:
            case OpenSearchPPLParser.BIN:
            case OpenSearchPPLParser.TOP:
            case OpenSearchPPLParser.RARE:
            case OpenSearchPPLParser.PARSE:
            case OpenSearchPPLParser.REGEX:
            case OpenSearchPPLParser.REX:
            case OpenSearchPPLParser.PUNCT:
            case OpenSearchPPLParser.GROK:
            case OpenSearchPPLParser.PATTERN:
            case OpenSearchPPLParser.PATTERNS:
            case OpenSearchPPLParser.NEW_FIELD:
            case OpenSearchPPLParser.KMEANS:
            case OpenSearchPPLParser.AD:
            case OpenSearchPPLParser.ML:
            case OpenSearchPPLParser.FILLNULL:
            case OpenSearchPPLParser.FLATTEN:
            case OpenSearchPPLParser.TRENDLINE:
            case OpenSearchPPLParser.TIMECHART:
            case OpenSearchPPLParser.EXPAND:
            case OpenSearchPPLParser.VARIABLE_COUNT_THRESHOLD:
            case OpenSearchPPLParser.FREQUENCY_THRESHOLD_PERCENTAGE:
            case OpenSearchPPLParser.METHOD:
            case OpenSearchPPLParser.MAX_SAMPLE_COUNT:
            case OpenSearchPPLParser.BUFFER_LIMIT:
            case OpenSearchPPLParser.JOIN:
            case OpenSearchPPLParser.INNER:
            case OpenSearchPPLParser.OUTER:
            case OpenSearchPPLParser.FULL:
            case OpenSearchPPLParser.SEMI:
            case OpenSearchPPLParser.ANTI:
            case OpenSearchPPLParser.CROSS:
            case OpenSearchPPLParser.LEFT_HINT:
            case OpenSearchPPLParser.RIGHT_HINT:
            case OpenSearchPPLParser.SOURCE:
            case OpenSearchPPLParser.INDEX:
            case OpenSearchPPLParser.A:
            case OpenSearchPPLParser.ASC:
            case OpenSearchPPLParser.D:
            case OpenSearchPPLParser.DESC:
            case OpenSearchPPLParser.DATASOURCES:
            case OpenSearchPPLParser.USING:
            case OpenSearchPPLParser.WITH:
            case OpenSearchPPLParser.SIMPLE:
            case OpenSearchPPLParser.STANDARD:
            case OpenSearchPPLParser.COST:
            case OpenSearchPPLParser.EXTENDED:
            case OpenSearchPPLParser.OVERRIDE:
            case OpenSearchPPLParser.AUTO:
            case OpenSearchPPLParser.STR:
            case OpenSearchPPLParser.NUM:
            case OpenSearchPPLParser.SMA:
            case OpenSearchPPLParser.WMA:
            case OpenSearchPPLParser.KEEPEMPTY:
            case OpenSearchPPLParser.CONSECUTIVE:
            case OpenSearchPPLParser.DEDUP_SPLITVALUES:
            case OpenSearchPPLParser.PARTITIONS:
            case OpenSearchPPLParser.ALLNUM:
            case OpenSearchPPLParser.DELIM:
            case OpenSearchPPLParser.BUCKET_NULLABLE:
            case OpenSearchPPLParser.CENTROIDS:
            case OpenSearchPPLParser.ITERATIONS:
            case OpenSearchPPLParser.DISTANCE_TYPE:
            case OpenSearchPPLParser.NUMBER_OF_TREES:
            case OpenSearchPPLParser.SHINGLE_SIZE:
            case OpenSearchPPLParser.SAMPLE_SIZE:
            case OpenSearchPPLParser.OUTPUT_AFTER:
            case OpenSearchPPLParser.TIME_DECAY:
            case OpenSearchPPLParser.ANOMALY_RATE:
            case OpenSearchPPLParser.CATEGORY_FIELD:
            case OpenSearchPPLParser.TIME_FIELD:
            case OpenSearchPPLParser.TIME_ZONE:
            case OpenSearchPPLParser.TRAINING_DATA_SIZE:
            case OpenSearchPPLParser.ANOMALY_SCORE_THRESHOLD:
            case OpenSearchPPLParser.APPEND:
            case OpenSearchPPLParser.COUNTFIELD:
            case OpenSearchPPLParser.SHOWCOUNT:
            case OpenSearchPPLParser.INPUT:
            case OpenSearchPPLParser.OUTPUT:
            case OpenSearchPPLParser.PATH:
            case OpenSearchPPLParser.CASE:
            case OpenSearchPPLParser.ELSE:
            case OpenSearchPPLParser.IN:
            case OpenSearchPPLParser.EXISTS:
            case OpenSearchPPLParser.GEOIP:
            case OpenSearchPPLParser.REGEXP:
            case OpenSearchPPLParser.REGEX_MATCH:
            case OpenSearchPPLParser.CONVERT_TZ:
            case OpenSearchPPLParser.DATETIME:
            case OpenSearchPPLParser.DAY:
            case OpenSearchPPLParser.DAY_HOUR:
            case OpenSearchPPLParser.DAY_MICROSECOND:
            case OpenSearchPPLParser.DAY_MINUTE:
            case OpenSearchPPLParser.DAY_OF_YEAR:
            case OpenSearchPPLParser.DAY_SECOND:
            case OpenSearchPPLParser.HOUR:
            case OpenSearchPPLParser.HOUR_MICROSECOND:
            case OpenSearchPPLParser.HOUR_MINUTE:
            case OpenSearchPPLParser.HOUR_OF_DAY:
            case OpenSearchPPLParser.HOUR_SECOND:
            case OpenSearchPPLParser.INTERVAL:
            case OpenSearchPPLParser.MICROSECOND:
            case OpenSearchPPLParser.MILLISECOND:
            case OpenSearchPPLParser.MINUTE:
            case OpenSearchPPLParser.MINUTE_MICROSECOND:
            case OpenSearchPPLParser.MINUTE_OF_DAY:
            case OpenSearchPPLParser.MINUTE_OF_HOUR:
            case OpenSearchPPLParser.MINUTE_SECOND:
            case OpenSearchPPLParser.MONTH:
            case OpenSearchPPLParser.MONTH_OF_YEAR:
            case OpenSearchPPLParser.QUARTER:
            case OpenSearchPPLParser.SECOND:
            case OpenSearchPPLParser.SECOND_MICROSECOND:
            case OpenSearchPPLParser.SECOND_OF_MINUTE:
            case OpenSearchPPLParser.WEEK:
            case OpenSearchPPLParser.WEEK_OF_YEAR:
            case OpenSearchPPLParser.YEAR:
            case OpenSearchPPLParser.YEAR_MONTH:
            case OpenSearchPPLParser.LOOKUP:
            case OpenSearchPPLParser.IP:
            case OpenSearchPPLParser.DOT:
            case OpenSearchPPLParser.PLUS:
            case OpenSearchPPLParser.MINUS:
            case OpenSearchPPLParser.BACKTICK:
            case OpenSearchPPLParser.ARROW:
            case OpenSearchPPLParser.AVG:
            case OpenSearchPPLParser.COUNT:
            case OpenSearchPPLParser.DISTINCT_COUNT:
            case OpenSearchPPLParser.DISTINCT_COUNT_APPROX:
            case OpenSearchPPLParser.ESTDC:
            case OpenSearchPPLParser.ESTDC_ERROR:
            case OpenSearchPPLParser.MAX:
            case OpenSearchPPLParser.MEAN:
            case OpenSearchPPLParser.MEDIAN:
            case OpenSearchPPLParser.MIN:
            case OpenSearchPPLParser.MODE:
            case OpenSearchPPLParser.RANGE:
            case OpenSearchPPLParser.STDEV:
            case OpenSearchPPLParser.STDEVP:
            case OpenSearchPPLParser.SUM:
            case OpenSearchPPLParser.SUMSQ:
            case OpenSearchPPLParser.VAR_SAMP:
            case OpenSearchPPLParser.VAR_POP:
            case OpenSearchPPLParser.STDDEV_SAMP:
            case OpenSearchPPLParser.STDDEV_POP:
            case OpenSearchPPLParser.PERCENTILE:
            case OpenSearchPPLParser.PERCENTILE_APPROX:
            case OpenSearchPPLParser.EARLIEST:
            case OpenSearchPPLParser.LATEST:
            case OpenSearchPPLParser.TAKE:
            case OpenSearchPPLParser.LIST:
            case OpenSearchPPLParser.VALUES:
            case OpenSearchPPLParser.PER_DAY:
            case OpenSearchPPLParser.PER_HOUR:
            case OpenSearchPPLParser.PER_MINUTE:
            case OpenSearchPPLParser.PER_SECOND:
            case OpenSearchPPLParser.RATE:
            case OpenSearchPPLParser.SPARKLINE:
            case OpenSearchPPLParser.C:
            case OpenSearchPPLParser.DC:
            case OpenSearchPPLParser.ROW_NUMBER:
            case OpenSearchPPLParser.RANK:
            case OpenSearchPPLParser.DENSE_RANK:
            case OpenSearchPPLParser.PERCENT_RANK:
            case OpenSearchPPLParser.CUME_DIST:
            case OpenSearchPPLParser.FIRST:
            case OpenSearchPPLParser.LAST:
            case OpenSearchPPLParser.NTH:
            case OpenSearchPPLParser.NTILE:
            case OpenSearchPPLParser.PLUS_FUCTION:
            case OpenSearchPPLParser.MINUS_FUCTION:
            case OpenSearchPPLParser.STAR_FUNCTION:
            case OpenSearchPPLParser.DIVIDE_FUNCTION:
            case OpenSearchPPLParser.ABS:
            case OpenSearchPPLParser.CBRT:
            case OpenSearchPPLParser.CEIL:
            case OpenSearchPPLParser.CEILING:
            case OpenSearchPPLParser.CONV:
            case OpenSearchPPLParser.CRC32:
            case OpenSearchPPLParser.E:
            case OpenSearchPPLParser.EXP:
            case OpenSearchPPLParser.EXPM1:
            case OpenSearchPPLParser.FLOOR:
            case OpenSearchPPLParser.LN:
            case OpenSearchPPLParser.LOG:
            case OpenSearchPPLParser.LOG_WITH_BASE:
            case OpenSearchPPLParser.MOD:
            case OpenSearchPPLParser.MODULUS:
            case OpenSearchPPLParser.PI:
            case OpenSearchPPLParser.POSITION:
            case OpenSearchPPLParser.POW:
            case OpenSearchPPLParser.POWER:
            case OpenSearchPPLParser.RAND:
            case OpenSearchPPLParser.ROUND:
            case OpenSearchPPLParser.SIGN:
            case OpenSearchPPLParser.SQRT:
            case OpenSearchPPLParser.TRUNCATE:
            case OpenSearchPPLParser.RINT:
            case OpenSearchPPLParser.SIGNUM:
            case OpenSearchPPLParser.ACOS:
            case OpenSearchPPLParser.ASIN:
            case OpenSearchPPLParser.ATAN:
            case OpenSearchPPLParser.ATAN2:
            case OpenSearchPPLParser.COS:
            case OpenSearchPPLParser.COSH:
            case OpenSearchPPLParser.COT:
            case OpenSearchPPLParser.DEGREES:
            case OpenSearchPPLParser.RADIANS:
            case OpenSearchPPLParser.SIN:
            case OpenSearchPPLParser.SINH:
            case OpenSearchPPLParser.TAN:
            case OpenSearchPPLParser.MD5:
            case OpenSearchPPLParser.SHA1:
            case OpenSearchPPLParser.SHA2:
            case OpenSearchPPLParser.ADDDATE:
            case OpenSearchPPLParser.ADDTIME:
            case OpenSearchPPLParser.CURDATE:
            case OpenSearchPPLParser.CURRENT_DATE:
            case OpenSearchPPLParser.CURRENT_TIME:
            case OpenSearchPPLParser.CURRENT_TIMESTAMP:
            case OpenSearchPPLParser.CURTIME:
            case OpenSearchPPLParser.DATE:
            case OpenSearchPPLParser.DATEDIFF:
            case OpenSearchPPLParser.DATE_ADD:
            case OpenSearchPPLParser.DATE_FORMAT:
            case OpenSearchPPLParser.DATE_SUB:
            case OpenSearchPPLParser.DAYNAME:
            case OpenSearchPPLParser.DAYOFMONTH:
            case OpenSearchPPLParser.DAYOFWEEK:
            case OpenSearchPPLParser.DAYOFYEAR:
            case OpenSearchPPLParser.DAY_OF_MONTH:
            case OpenSearchPPLParser.DAY_OF_WEEK:
            case OpenSearchPPLParser.EXTRACT:
            case OpenSearchPPLParser.FROM_DAYS:
            case OpenSearchPPLParser.FROM_UNIXTIME:
            case OpenSearchPPLParser.GET_FORMAT:
            case OpenSearchPPLParser.LAST_DAY:
            case OpenSearchPPLParser.LOCALTIME:
            case OpenSearchPPLParser.LOCALTIMESTAMP:
            case OpenSearchPPLParser.MAKEDATE:
            case OpenSearchPPLParser.MAKETIME:
            case OpenSearchPPLParser.MONTHNAME:
            case OpenSearchPPLParser.NOW:
            case OpenSearchPPLParser.PERIOD_ADD:
            case OpenSearchPPLParser.PERIOD_DIFF:
            case OpenSearchPPLParser.SEC_TO_TIME:
            case OpenSearchPPLParser.STR_TO_DATE:
            case OpenSearchPPLParser.SUBDATE:
            case OpenSearchPPLParser.SUBTIME:
            case OpenSearchPPLParser.SYSDATE:
            case OpenSearchPPLParser.TIME:
            case OpenSearchPPLParser.TIMEDIFF:
            case OpenSearchPPLParser.TIMESTAMP:
            case OpenSearchPPLParser.TIME_FORMAT:
            case OpenSearchPPLParser.TIME_TO_SEC:
            case OpenSearchPPLParser.TO_DAYS:
            case OpenSearchPPLParser.TO_SECONDS:
            case OpenSearchPPLParser.UNIX_TIMESTAMP:
            case OpenSearchPPLParser.UTC_DATE:
            case OpenSearchPPLParser.UTC_TIME:
            case OpenSearchPPLParser.UTC_TIMESTAMP:
            case OpenSearchPPLParser.WEEKDAY:
            case OpenSearchPPLParser.YEARWEEK:
            case OpenSearchPPLParser.STRFTIME:
            case OpenSearchPPLParser.SUBSTR:
            case OpenSearchPPLParser.SUBSTRING:
            case OpenSearchPPLParser.LTRIM:
            case OpenSearchPPLParser.RTRIM:
            case OpenSearchPPLParser.TRIM:
            case OpenSearchPPLParser.LOWER:
            case OpenSearchPPLParser.UPPER:
            case OpenSearchPPLParser.CONCAT:
            case OpenSearchPPLParser.CONCAT_WS:
            case OpenSearchPPLParser.LENGTH:
            case OpenSearchPPLParser.STRCMP:
            case OpenSearchPPLParser.RIGHT:
            case OpenSearchPPLParser.LEFT:
            case OpenSearchPPLParser.ASCII:
            case OpenSearchPPLParser.LOCATE:
            case OpenSearchPPLParser.REPLACE:
            case OpenSearchPPLParser.REVERSE:
            case OpenSearchPPLParser.CAST:
            case OpenSearchPPLParser.LIKE:
            case OpenSearchPPLParser.ISNULL:
            case OpenSearchPPLParser.ISNOTNULL:
            case OpenSearchPPLParser.CIDRMATCH:
            case OpenSearchPPLParser.BETWEEN:
            case OpenSearchPPLParser.ISPRESENT:
            case OpenSearchPPLParser.ISEMPTY:
            case OpenSearchPPLParser.ISBLANK:
            case OpenSearchPPLParser.ARRAY:
            case OpenSearchPPLParser.ARRAY_LENGTH:
            case OpenSearchPPLParser.MVJOIN:
            case OpenSearchPPLParser.FORALL:
            case OpenSearchPPLParser.FILTER:
            case OpenSearchPPLParser.TRANSFORM:
            case OpenSearchPPLParser.REDUCE:
            case OpenSearchPPLParser.JSON_VALID:
            case OpenSearchPPLParser.JSON:
            case OpenSearchPPLParser.JSON_OBJECT:
            case OpenSearchPPLParser.JSON_ARRAY:
            case OpenSearchPPLParser.JSON_ARRAY_LENGTH:
            case OpenSearchPPLParser.JSON_EXTRACT:
            case OpenSearchPPLParser.JSON_KEYS:
            case OpenSearchPPLParser.JSON_SET:
            case OpenSearchPPLParser.JSON_DELETE:
            case OpenSearchPPLParser.JSON_APPEND:
            case OpenSearchPPLParser.JSON_EXTEND:
            case OpenSearchPPLParser.IFNULL:
            case OpenSearchPPLParser.NULLIF:
            case OpenSearchPPLParser.IF:
            case OpenSearchPPLParser.TYPEOF:
            case OpenSearchPPLParser.COALESCE:
            case OpenSearchPPLParser.MATCH:
            case OpenSearchPPLParser.MATCH_PHRASE:
            case OpenSearchPPLParser.MATCH_PHRASE_PREFIX:
            case OpenSearchPPLParser.MATCH_BOOL_PREFIX:
            case OpenSearchPPLParser.SIMPLE_QUERY_STRING:
            case OpenSearchPPLParser.MULTI_MATCH:
            case OpenSearchPPLParser.QUERY_STRING:
            case OpenSearchPPLParser.ALLOW_LEADING_WILDCARD:
            case OpenSearchPPLParser.ANALYZE_WILDCARD:
            case OpenSearchPPLParser.ANALYZER:
            case OpenSearchPPLParser.AUTO_GENERATE_SYNONYMS_PHRASE_QUERY:
            case OpenSearchPPLParser.BOOST:
            case OpenSearchPPLParser.CUTOFF_FREQUENCY:
            case OpenSearchPPLParser.DEFAULT_FIELD:
            case OpenSearchPPLParser.DEFAULT_OPERATOR:
            case OpenSearchPPLParser.ENABLE_POSITION_INCREMENTS:
            case OpenSearchPPLParser.ESCAPE:
            case OpenSearchPPLParser.FLAGS:
            case OpenSearchPPLParser.FUZZY_MAX_EXPANSIONS:
            case OpenSearchPPLParser.FUZZY_PREFIX_LENGTH:
            case OpenSearchPPLParser.FUZZY_TRANSPOSITIONS:
            case OpenSearchPPLParser.FUZZY_REWRITE:
            case OpenSearchPPLParser.FUZZINESS:
            case OpenSearchPPLParser.LENIENT:
            case OpenSearchPPLParser.LOW_FREQ_OPERATOR:
            case OpenSearchPPLParser.MAX_DETERMINIZED_STATES:
            case OpenSearchPPLParser.MAX_EXPANSIONS:
            case OpenSearchPPLParser.MINIMUM_SHOULD_MATCH:
            case OpenSearchPPLParser.OPERATOR:
            case OpenSearchPPLParser.PHRASE_SLOP:
            case OpenSearchPPLParser.PREFIX_LENGTH:
            case OpenSearchPPLParser.QUOTE_ANALYZER:
            case OpenSearchPPLParser.QUOTE_FIELD_SUFFIX:
            case OpenSearchPPLParser.REWRITE:
            case OpenSearchPPLParser.SLOP:
            case OpenSearchPPLParser.TIE_BREAKER:
            case OpenSearchPPLParser.TYPE:
            case OpenSearchPPLParser.ZERO_TERMS_QUERY:
            case OpenSearchPPLParser.SPAN:
            case OpenSearchPPLParser.MS:
            case OpenSearchPPLParser.S:
            case OpenSearchPPLParser.M:
            case OpenSearchPPLParser.H:
            case OpenSearchPPLParser.W:
            case OpenSearchPPLParser.Q:
            case OpenSearchPPLParser.Y:
            case OpenSearchPPLParser.SEC:
            case OpenSearchPPLParser.SECS:
            case OpenSearchPPLParser.SECONDS:
            case OpenSearchPPLParser.MINS:
            case OpenSearchPPLParser.MINUTES:
            case OpenSearchPPLParser.HR:
            case OpenSearchPPLParser.HRS:
            case OpenSearchPPLParser.HOURS:
            case OpenSearchPPLParser.DAYS:
            case OpenSearchPPLParser.MON:
            case OpenSearchPPLParser.MONTHS:
            case OpenSearchPPLParser.US:
            case OpenSearchPPLParser.CS:
            case OpenSearchPPLParser.DS:
            case OpenSearchPPLParser.PERCENTILE_SHORTCUT:
            case OpenSearchPPLParser.ID:
            case OpenSearchPPLParser.BQUOTA_STRING:
                localContext = new IdentsAsQualifiedNameSeqContext(localContext);
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 2033;
                this.qualifiedName();
                this.state = 2038;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                while (_la === 168) {
                    {
                    {
                    this.state = 2034;
                    this.match(OpenSearchPPLParser.COMMA);
                    this.state = 2035;
                    this.qualifiedName();
                    }
                    }
                    this.state = 2040;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                }
                }
                break;
            case OpenSearchPPLParser.LT_PRTHS:
                localContext = new IdentsAsQualifiedNameSeqContext(localContext);
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 2041;
                this.match(OpenSearchPPLParser.LT_PRTHS);
                this.state = 2042;
                this.qualifiedName();
                this.state = 2047;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                while (_la === 168) {
                    {
                    {
                    this.state = 2043;
                    this.match(OpenSearchPPLParser.COMMA);
                    this.state = 2044;
                    this.qualifiedName();
                    }
                    }
                    this.state = 2049;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                }
                this.state = 2050;
                this.match(OpenSearchPPLParser.RT_PRTHS);
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public ident(): IdentContext {
        let localContext = new IdentContext(this.context, this.state);
        this.enterRule(localContext, 396, OpenSearchPPLParser.RULE_ident);
        let _la: number;
        try {
            this.state = 2064;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case OpenSearchPPLParser.DOT:
            case OpenSearchPPLParser.ID:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 2055;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 169) {
                    {
                    this.state = 2054;
                    this.match(OpenSearchPPLParser.DOT);
                    }
                }

                this.state = 2057;
                this.match(OpenSearchPPLParser.ID);
                }
                break;
            case OpenSearchPPLParser.BACKTICK:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 2058;
                this.match(OpenSearchPPLParser.BACKTICK);
                this.state = 2059;
                this.ident();
                this.state = 2060;
                this.match(OpenSearchPPLParser.BACKTICK);
                }
                break;
            case OpenSearchPPLParser.BQUOTA_STRING:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 2062;
                this.match(OpenSearchPPLParser.BQUOTA_STRING);
                }
                break;
            case OpenSearchPPLParser.SEARCH:
            case OpenSearchPPLParser.DESCRIBE:
            case OpenSearchPPLParser.SHOW:
            case OpenSearchPPLParser.EXPLAIN:
            case OpenSearchPPLParser.FROM:
            case OpenSearchPPLParser.WHERE:
            case OpenSearchPPLParser.FIELDS:
            case OpenSearchPPLParser.TABLE:
            case OpenSearchPPLParser.RENAME:
            case OpenSearchPPLParser.STATS:
            case OpenSearchPPLParser.EVENTSTATS:
            case OpenSearchPPLParser.DEDUP:
            case OpenSearchPPLParser.SORT:
            case OpenSearchPPLParser.EVAL:
            case OpenSearchPPLParser.HEAD:
            case OpenSearchPPLParser.BIN:
            case OpenSearchPPLParser.TOP:
            case OpenSearchPPLParser.RARE:
            case OpenSearchPPLParser.PARSE:
            case OpenSearchPPLParser.REGEX:
            case OpenSearchPPLParser.REX:
            case OpenSearchPPLParser.PUNCT:
            case OpenSearchPPLParser.GROK:
            case OpenSearchPPLParser.PATTERN:
            case OpenSearchPPLParser.PATTERNS:
            case OpenSearchPPLParser.NEW_FIELD:
            case OpenSearchPPLParser.KMEANS:
            case OpenSearchPPLParser.AD:
            case OpenSearchPPLParser.ML:
            case OpenSearchPPLParser.FILLNULL:
            case OpenSearchPPLParser.FLATTEN:
            case OpenSearchPPLParser.TRENDLINE:
            case OpenSearchPPLParser.TIMECHART:
            case OpenSearchPPLParser.EXPAND:
            case OpenSearchPPLParser.VARIABLE_COUNT_THRESHOLD:
            case OpenSearchPPLParser.FREQUENCY_THRESHOLD_PERCENTAGE:
            case OpenSearchPPLParser.METHOD:
            case OpenSearchPPLParser.MAX_SAMPLE_COUNT:
            case OpenSearchPPLParser.BUFFER_LIMIT:
            case OpenSearchPPLParser.JOIN:
            case OpenSearchPPLParser.INNER:
            case OpenSearchPPLParser.OUTER:
            case OpenSearchPPLParser.FULL:
            case OpenSearchPPLParser.SEMI:
            case OpenSearchPPLParser.ANTI:
            case OpenSearchPPLParser.CROSS:
            case OpenSearchPPLParser.LEFT_HINT:
            case OpenSearchPPLParser.RIGHT_HINT:
            case OpenSearchPPLParser.SOURCE:
            case OpenSearchPPLParser.INDEX:
            case OpenSearchPPLParser.A:
            case OpenSearchPPLParser.ASC:
            case OpenSearchPPLParser.D:
            case OpenSearchPPLParser.DESC:
            case OpenSearchPPLParser.DATASOURCES:
            case OpenSearchPPLParser.USING:
            case OpenSearchPPLParser.WITH:
            case OpenSearchPPLParser.SIMPLE:
            case OpenSearchPPLParser.STANDARD:
            case OpenSearchPPLParser.COST:
            case OpenSearchPPLParser.EXTENDED:
            case OpenSearchPPLParser.OVERRIDE:
            case OpenSearchPPLParser.AUTO:
            case OpenSearchPPLParser.STR:
            case OpenSearchPPLParser.NUM:
            case OpenSearchPPLParser.SMA:
            case OpenSearchPPLParser.WMA:
            case OpenSearchPPLParser.KEEPEMPTY:
            case OpenSearchPPLParser.CONSECUTIVE:
            case OpenSearchPPLParser.DEDUP_SPLITVALUES:
            case OpenSearchPPLParser.PARTITIONS:
            case OpenSearchPPLParser.ALLNUM:
            case OpenSearchPPLParser.DELIM:
            case OpenSearchPPLParser.BUCKET_NULLABLE:
            case OpenSearchPPLParser.CENTROIDS:
            case OpenSearchPPLParser.ITERATIONS:
            case OpenSearchPPLParser.DISTANCE_TYPE:
            case OpenSearchPPLParser.NUMBER_OF_TREES:
            case OpenSearchPPLParser.SHINGLE_SIZE:
            case OpenSearchPPLParser.SAMPLE_SIZE:
            case OpenSearchPPLParser.OUTPUT_AFTER:
            case OpenSearchPPLParser.TIME_DECAY:
            case OpenSearchPPLParser.ANOMALY_RATE:
            case OpenSearchPPLParser.CATEGORY_FIELD:
            case OpenSearchPPLParser.TIME_FIELD:
            case OpenSearchPPLParser.TIME_ZONE:
            case OpenSearchPPLParser.TRAINING_DATA_SIZE:
            case OpenSearchPPLParser.ANOMALY_SCORE_THRESHOLD:
            case OpenSearchPPLParser.APPEND:
            case OpenSearchPPLParser.COUNTFIELD:
            case OpenSearchPPLParser.SHOWCOUNT:
            case OpenSearchPPLParser.INPUT:
            case OpenSearchPPLParser.OUTPUT:
            case OpenSearchPPLParser.PATH:
            case OpenSearchPPLParser.CASE:
            case OpenSearchPPLParser.ELSE:
            case OpenSearchPPLParser.IN:
            case OpenSearchPPLParser.EXISTS:
            case OpenSearchPPLParser.GEOIP:
            case OpenSearchPPLParser.REGEXP:
            case OpenSearchPPLParser.REGEX_MATCH:
            case OpenSearchPPLParser.CONVERT_TZ:
            case OpenSearchPPLParser.DATETIME:
            case OpenSearchPPLParser.DAY:
            case OpenSearchPPLParser.DAY_HOUR:
            case OpenSearchPPLParser.DAY_MICROSECOND:
            case OpenSearchPPLParser.DAY_MINUTE:
            case OpenSearchPPLParser.DAY_OF_YEAR:
            case OpenSearchPPLParser.DAY_SECOND:
            case OpenSearchPPLParser.HOUR:
            case OpenSearchPPLParser.HOUR_MICROSECOND:
            case OpenSearchPPLParser.HOUR_MINUTE:
            case OpenSearchPPLParser.HOUR_OF_DAY:
            case OpenSearchPPLParser.HOUR_SECOND:
            case OpenSearchPPLParser.INTERVAL:
            case OpenSearchPPLParser.MICROSECOND:
            case OpenSearchPPLParser.MILLISECOND:
            case OpenSearchPPLParser.MINUTE:
            case OpenSearchPPLParser.MINUTE_MICROSECOND:
            case OpenSearchPPLParser.MINUTE_OF_DAY:
            case OpenSearchPPLParser.MINUTE_OF_HOUR:
            case OpenSearchPPLParser.MINUTE_SECOND:
            case OpenSearchPPLParser.MONTH:
            case OpenSearchPPLParser.MONTH_OF_YEAR:
            case OpenSearchPPLParser.QUARTER:
            case OpenSearchPPLParser.SECOND:
            case OpenSearchPPLParser.SECOND_MICROSECOND:
            case OpenSearchPPLParser.SECOND_OF_MINUTE:
            case OpenSearchPPLParser.WEEK:
            case OpenSearchPPLParser.WEEK_OF_YEAR:
            case OpenSearchPPLParser.YEAR:
            case OpenSearchPPLParser.YEAR_MONTH:
            case OpenSearchPPLParser.LOOKUP:
            case OpenSearchPPLParser.IP:
            case OpenSearchPPLParser.PLUS:
            case OpenSearchPPLParser.MINUS:
            case OpenSearchPPLParser.ARROW:
            case OpenSearchPPLParser.AVG:
            case OpenSearchPPLParser.COUNT:
            case OpenSearchPPLParser.DISTINCT_COUNT:
            case OpenSearchPPLParser.DISTINCT_COUNT_APPROX:
            case OpenSearchPPLParser.ESTDC:
            case OpenSearchPPLParser.ESTDC_ERROR:
            case OpenSearchPPLParser.MAX:
            case OpenSearchPPLParser.MEAN:
            case OpenSearchPPLParser.MEDIAN:
            case OpenSearchPPLParser.MIN:
            case OpenSearchPPLParser.MODE:
            case OpenSearchPPLParser.RANGE:
            case OpenSearchPPLParser.STDEV:
            case OpenSearchPPLParser.STDEVP:
            case OpenSearchPPLParser.SUM:
            case OpenSearchPPLParser.SUMSQ:
            case OpenSearchPPLParser.VAR_SAMP:
            case OpenSearchPPLParser.VAR_POP:
            case OpenSearchPPLParser.STDDEV_SAMP:
            case OpenSearchPPLParser.STDDEV_POP:
            case OpenSearchPPLParser.PERCENTILE:
            case OpenSearchPPLParser.PERCENTILE_APPROX:
            case OpenSearchPPLParser.EARLIEST:
            case OpenSearchPPLParser.LATEST:
            case OpenSearchPPLParser.TAKE:
            case OpenSearchPPLParser.LIST:
            case OpenSearchPPLParser.VALUES:
            case OpenSearchPPLParser.PER_DAY:
            case OpenSearchPPLParser.PER_HOUR:
            case OpenSearchPPLParser.PER_MINUTE:
            case OpenSearchPPLParser.PER_SECOND:
            case OpenSearchPPLParser.RATE:
            case OpenSearchPPLParser.SPARKLINE:
            case OpenSearchPPLParser.C:
            case OpenSearchPPLParser.DC:
            case OpenSearchPPLParser.ROW_NUMBER:
            case OpenSearchPPLParser.RANK:
            case OpenSearchPPLParser.DENSE_RANK:
            case OpenSearchPPLParser.PERCENT_RANK:
            case OpenSearchPPLParser.CUME_DIST:
            case OpenSearchPPLParser.FIRST:
            case OpenSearchPPLParser.LAST:
            case OpenSearchPPLParser.NTH:
            case OpenSearchPPLParser.NTILE:
            case OpenSearchPPLParser.PLUS_FUCTION:
            case OpenSearchPPLParser.MINUS_FUCTION:
            case OpenSearchPPLParser.STAR_FUNCTION:
            case OpenSearchPPLParser.DIVIDE_FUNCTION:
            case OpenSearchPPLParser.ABS:
            case OpenSearchPPLParser.CBRT:
            case OpenSearchPPLParser.CEIL:
            case OpenSearchPPLParser.CEILING:
            case OpenSearchPPLParser.CONV:
            case OpenSearchPPLParser.CRC32:
            case OpenSearchPPLParser.E:
            case OpenSearchPPLParser.EXP:
            case OpenSearchPPLParser.EXPM1:
            case OpenSearchPPLParser.FLOOR:
            case OpenSearchPPLParser.LN:
            case OpenSearchPPLParser.LOG:
            case OpenSearchPPLParser.LOG_WITH_BASE:
            case OpenSearchPPLParser.MOD:
            case OpenSearchPPLParser.MODULUS:
            case OpenSearchPPLParser.PI:
            case OpenSearchPPLParser.POSITION:
            case OpenSearchPPLParser.POW:
            case OpenSearchPPLParser.POWER:
            case OpenSearchPPLParser.RAND:
            case OpenSearchPPLParser.ROUND:
            case OpenSearchPPLParser.SIGN:
            case OpenSearchPPLParser.SQRT:
            case OpenSearchPPLParser.TRUNCATE:
            case OpenSearchPPLParser.RINT:
            case OpenSearchPPLParser.SIGNUM:
            case OpenSearchPPLParser.ACOS:
            case OpenSearchPPLParser.ASIN:
            case OpenSearchPPLParser.ATAN:
            case OpenSearchPPLParser.ATAN2:
            case OpenSearchPPLParser.COS:
            case OpenSearchPPLParser.COSH:
            case OpenSearchPPLParser.COT:
            case OpenSearchPPLParser.DEGREES:
            case OpenSearchPPLParser.RADIANS:
            case OpenSearchPPLParser.SIN:
            case OpenSearchPPLParser.SINH:
            case OpenSearchPPLParser.TAN:
            case OpenSearchPPLParser.MD5:
            case OpenSearchPPLParser.SHA1:
            case OpenSearchPPLParser.SHA2:
            case OpenSearchPPLParser.ADDDATE:
            case OpenSearchPPLParser.ADDTIME:
            case OpenSearchPPLParser.CURDATE:
            case OpenSearchPPLParser.CURRENT_DATE:
            case OpenSearchPPLParser.CURRENT_TIME:
            case OpenSearchPPLParser.CURRENT_TIMESTAMP:
            case OpenSearchPPLParser.CURTIME:
            case OpenSearchPPLParser.DATE:
            case OpenSearchPPLParser.DATEDIFF:
            case OpenSearchPPLParser.DATE_ADD:
            case OpenSearchPPLParser.DATE_FORMAT:
            case OpenSearchPPLParser.DATE_SUB:
            case OpenSearchPPLParser.DAYNAME:
            case OpenSearchPPLParser.DAYOFMONTH:
            case OpenSearchPPLParser.DAYOFWEEK:
            case OpenSearchPPLParser.DAYOFYEAR:
            case OpenSearchPPLParser.DAY_OF_MONTH:
            case OpenSearchPPLParser.DAY_OF_WEEK:
            case OpenSearchPPLParser.EXTRACT:
            case OpenSearchPPLParser.FROM_DAYS:
            case OpenSearchPPLParser.FROM_UNIXTIME:
            case OpenSearchPPLParser.GET_FORMAT:
            case OpenSearchPPLParser.LAST_DAY:
            case OpenSearchPPLParser.LOCALTIME:
            case OpenSearchPPLParser.LOCALTIMESTAMP:
            case OpenSearchPPLParser.MAKEDATE:
            case OpenSearchPPLParser.MAKETIME:
            case OpenSearchPPLParser.MONTHNAME:
            case OpenSearchPPLParser.NOW:
            case OpenSearchPPLParser.PERIOD_ADD:
            case OpenSearchPPLParser.PERIOD_DIFF:
            case OpenSearchPPLParser.SEC_TO_TIME:
            case OpenSearchPPLParser.STR_TO_DATE:
            case OpenSearchPPLParser.SUBDATE:
            case OpenSearchPPLParser.SUBTIME:
            case OpenSearchPPLParser.SYSDATE:
            case OpenSearchPPLParser.TIME:
            case OpenSearchPPLParser.TIMEDIFF:
            case OpenSearchPPLParser.TIMESTAMP:
            case OpenSearchPPLParser.TIME_FORMAT:
            case OpenSearchPPLParser.TIME_TO_SEC:
            case OpenSearchPPLParser.TO_DAYS:
            case OpenSearchPPLParser.TO_SECONDS:
            case OpenSearchPPLParser.UNIX_TIMESTAMP:
            case OpenSearchPPLParser.UTC_DATE:
            case OpenSearchPPLParser.UTC_TIME:
            case OpenSearchPPLParser.UTC_TIMESTAMP:
            case OpenSearchPPLParser.WEEKDAY:
            case OpenSearchPPLParser.YEARWEEK:
            case OpenSearchPPLParser.STRFTIME:
            case OpenSearchPPLParser.SUBSTR:
            case OpenSearchPPLParser.SUBSTRING:
            case OpenSearchPPLParser.LTRIM:
            case OpenSearchPPLParser.RTRIM:
            case OpenSearchPPLParser.TRIM:
            case OpenSearchPPLParser.LOWER:
            case OpenSearchPPLParser.UPPER:
            case OpenSearchPPLParser.CONCAT:
            case OpenSearchPPLParser.CONCAT_WS:
            case OpenSearchPPLParser.LENGTH:
            case OpenSearchPPLParser.STRCMP:
            case OpenSearchPPLParser.RIGHT:
            case OpenSearchPPLParser.LEFT:
            case OpenSearchPPLParser.ASCII:
            case OpenSearchPPLParser.LOCATE:
            case OpenSearchPPLParser.REPLACE:
            case OpenSearchPPLParser.REVERSE:
            case OpenSearchPPLParser.CAST:
            case OpenSearchPPLParser.LIKE:
            case OpenSearchPPLParser.ISNULL:
            case OpenSearchPPLParser.ISNOTNULL:
            case OpenSearchPPLParser.CIDRMATCH:
            case OpenSearchPPLParser.BETWEEN:
            case OpenSearchPPLParser.ISPRESENT:
            case OpenSearchPPLParser.ISEMPTY:
            case OpenSearchPPLParser.ISBLANK:
            case OpenSearchPPLParser.ARRAY:
            case OpenSearchPPLParser.ARRAY_LENGTH:
            case OpenSearchPPLParser.MVJOIN:
            case OpenSearchPPLParser.FORALL:
            case OpenSearchPPLParser.FILTER:
            case OpenSearchPPLParser.TRANSFORM:
            case OpenSearchPPLParser.REDUCE:
            case OpenSearchPPLParser.JSON_VALID:
            case OpenSearchPPLParser.JSON:
            case OpenSearchPPLParser.JSON_OBJECT:
            case OpenSearchPPLParser.JSON_ARRAY:
            case OpenSearchPPLParser.JSON_ARRAY_LENGTH:
            case OpenSearchPPLParser.JSON_EXTRACT:
            case OpenSearchPPLParser.JSON_KEYS:
            case OpenSearchPPLParser.JSON_SET:
            case OpenSearchPPLParser.JSON_DELETE:
            case OpenSearchPPLParser.JSON_APPEND:
            case OpenSearchPPLParser.JSON_EXTEND:
            case OpenSearchPPLParser.IFNULL:
            case OpenSearchPPLParser.NULLIF:
            case OpenSearchPPLParser.IF:
            case OpenSearchPPLParser.TYPEOF:
            case OpenSearchPPLParser.COALESCE:
            case OpenSearchPPLParser.MATCH:
            case OpenSearchPPLParser.MATCH_PHRASE:
            case OpenSearchPPLParser.MATCH_PHRASE_PREFIX:
            case OpenSearchPPLParser.MATCH_BOOL_PREFIX:
            case OpenSearchPPLParser.SIMPLE_QUERY_STRING:
            case OpenSearchPPLParser.MULTI_MATCH:
            case OpenSearchPPLParser.QUERY_STRING:
            case OpenSearchPPLParser.ALLOW_LEADING_WILDCARD:
            case OpenSearchPPLParser.ANALYZE_WILDCARD:
            case OpenSearchPPLParser.ANALYZER:
            case OpenSearchPPLParser.AUTO_GENERATE_SYNONYMS_PHRASE_QUERY:
            case OpenSearchPPLParser.BOOST:
            case OpenSearchPPLParser.CUTOFF_FREQUENCY:
            case OpenSearchPPLParser.DEFAULT_FIELD:
            case OpenSearchPPLParser.DEFAULT_OPERATOR:
            case OpenSearchPPLParser.ENABLE_POSITION_INCREMENTS:
            case OpenSearchPPLParser.ESCAPE:
            case OpenSearchPPLParser.FLAGS:
            case OpenSearchPPLParser.FUZZY_MAX_EXPANSIONS:
            case OpenSearchPPLParser.FUZZY_PREFIX_LENGTH:
            case OpenSearchPPLParser.FUZZY_TRANSPOSITIONS:
            case OpenSearchPPLParser.FUZZY_REWRITE:
            case OpenSearchPPLParser.FUZZINESS:
            case OpenSearchPPLParser.LENIENT:
            case OpenSearchPPLParser.LOW_FREQ_OPERATOR:
            case OpenSearchPPLParser.MAX_DETERMINIZED_STATES:
            case OpenSearchPPLParser.MAX_EXPANSIONS:
            case OpenSearchPPLParser.MINIMUM_SHOULD_MATCH:
            case OpenSearchPPLParser.OPERATOR:
            case OpenSearchPPLParser.PHRASE_SLOP:
            case OpenSearchPPLParser.PREFIX_LENGTH:
            case OpenSearchPPLParser.QUOTE_ANALYZER:
            case OpenSearchPPLParser.QUOTE_FIELD_SUFFIX:
            case OpenSearchPPLParser.REWRITE:
            case OpenSearchPPLParser.SLOP:
            case OpenSearchPPLParser.TIE_BREAKER:
            case OpenSearchPPLParser.TYPE:
            case OpenSearchPPLParser.ZERO_TERMS_QUERY:
            case OpenSearchPPLParser.SPAN:
            case OpenSearchPPLParser.MS:
            case OpenSearchPPLParser.S:
            case OpenSearchPPLParser.M:
            case OpenSearchPPLParser.H:
            case OpenSearchPPLParser.W:
            case OpenSearchPPLParser.Q:
            case OpenSearchPPLParser.Y:
            case OpenSearchPPLParser.SEC:
            case OpenSearchPPLParser.SECS:
            case OpenSearchPPLParser.SECONDS:
            case OpenSearchPPLParser.MINS:
            case OpenSearchPPLParser.MINUTES:
            case OpenSearchPPLParser.HR:
            case OpenSearchPPLParser.HRS:
            case OpenSearchPPLParser.HOURS:
            case OpenSearchPPLParser.DAYS:
            case OpenSearchPPLParser.MON:
            case OpenSearchPPLParser.MONTHS:
            case OpenSearchPPLParser.US:
            case OpenSearchPPLParser.CS:
            case OpenSearchPPLParser.DS:
            case OpenSearchPPLParser.PERCENTILE_SHORTCUT:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 2063;
                this.keywordsCanBeId();
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public tableIdent(): TableIdentContext {
        let localContext = new TableIdentContext(this.context, this.state);
        this.enterRule(localContext, 398, OpenSearchPPLParser.RULE_tableIdent);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2067;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 456) {
                {
                this.state = 2066;
                this.match(OpenSearchPPLParser.CLUSTER);
                }
            }

            this.state = 2069;
            this.ident();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public wildcard(): WildcardContext {
        let localContext = new WildcardContext(this.context, this.state);
        this.enterRule(localContext, 400, OpenSearchPPLParser.RULE_wildcard);
        let _la: number;
        try {
            let alternative: number;
            this.state = 2094;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 203, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 2071;
                this.ident();
                this.state = 2076;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 201, this.context);
                while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER) {
                    if (alternative === 1) {
                        {
                        {
                        this.state = 2072;
                        this.match(OpenSearchPPLParser.MODULE);
                        this.state = 2073;
                        this.ident();
                        }
                        }
                    }
                    this.state = 2078;
                    this.errorHandler.sync(this);
                    alternative = this.interpreter.adaptivePredict(this.tokenStream, 201, this.context);
                }
                this.state = 2080;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 181) {
                    {
                    this.state = 2079;
                    this.match(OpenSearchPPLParser.MODULE);
                    }
                }

                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 2082;
                this.match(OpenSearchPPLParser.SINGLE_QUOTE);
                this.state = 2083;
                this.wildcard();
                this.state = 2084;
                this.match(OpenSearchPPLParser.SINGLE_QUOTE);
                }
                break;
            case 3:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 2086;
                this.match(OpenSearchPPLParser.DOUBLE_QUOTE);
                this.state = 2087;
                this.wildcard();
                this.state = 2088;
                this.match(OpenSearchPPLParser.DOUBLE_QUOTE);
                }
                break;
            case 4:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 2090;
                this.match(OpenSearchPPLParser.BACKTICK);
                this.state = 2091;
                this.wildcard();
                this.state = 2092;
                this.match(OpenSearchPPLParser.BACKTICK);
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public keywordsCanBeId(): KeywordsCanBeIdContext {
        let localContext = new KeywordsCanBeIdContext(this.context, this.state);
        this.enterRule(localContext, 402, OpenSearchPPLParser.RULE_keywordsCanBeId);
        try {
            this.state = 2098;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case OpenSearchPPLParser.SEARCH:
            case OpenSearchPPLParser.DESCRIBE:
            case OpenSearchPPLParser.SHOW:
            case OpenSearchPPLParser.EXPLAIN:
            case OpenSearchPPLParser.FROM:
            case OpenSearchPPLParser.WHERE:
            case OpenSearchPPLParser.FIELDS:
            case OpenSearchPPLParser.TABLE:
            case OpenSearchPPLParser.RENAME:
            case OpenSearchPPLParser.STATS:
            case OpenSearchPPLParser.EVENTSTATS:
            case OpenSearchPPLParser.DEDUP:
            case OpenSearchPPLParser.SORT:
            case OpenSearchPPLParser.EVAL:
            case OpenSearchPPLParser.HEAD:
            case OpenSearchPPLParser.BIN:
            case OpenSearchPPLParser.TOP:
            case OpenSearchPPLParser.RARE:
            case OpenSearchPPLParser.PARSE:
            case OpenSearchPPLParser.REGEX:
            case OpenSearchPPLParser.REX:
            case OpenSearchPPLParser.PUNCT:
            case OpenSearchPPLParser.GROK:
            case OpenSearchPPLParser.PATTERN:
            case OpenSearchPPLParser.PATTERNS:
            case OpenSearchPPLParser.NEW_FIELD:
            case OpenSearchPPLParser.KMEANS:
            case OpenSearchPPLParser.AD:
            case OpenSearchPPLParser.ML:
            case OpenSearchPPLParser.FILLNULL:
            case OpenSearchPPLParser.FLATTEN:
            case OpenSearchPPLParser.TRENDLINE:
            case OpenSearchPPLParser.TIMECHART:
            case OpenSearchPPLParser.EXPAND:
            case OpenSearchPPLParser.VARIABLE_COUNT_THRESHOLD:
            case OpenSearchPPLParser.FREQUENCY_THRESHOLD_PERCENTAGE:
            case OpenSearchPPLParser.METHOD:
            case OpenSearchPPLParser.MAX_SAMPLE_COUNT:
            case OpenSearchPPLParser.BUFFER_LIMIT:
            case OpenSearchPPLParser.JOIN:
            case OpenSearchPPLParser.INNER:
            case OpenSearchPPLParser.OUTER:
            case OpenSearchPPLParser.FULL:
            case OpenSearchPPLParser.SEMI:
            case OpenSearchPPLParser.ANTI:
            case OpenSearchPPLParser.CROSS:
            case OpenSearchPPLParser.LEFT_HINT:
            case OpenSearchPPLParser.RIGHT_HINT:
            case OpenSearchPPLParser.SOURCE:
            case OpenSearchPPLParser.INDEX:
            case OpenSearchPPLParser.A:
            case OpenSearchPPLParser.ASC:
            case OpenSearchPPLParser.D:
            case OpenSearchPPLParser.DESC:
            case OpenSearchPPLParser.DATASOURCES:
            case OpenSearchPPLParser.USING:
            case OpenSearchPPLParser.WITH:
            case OpenSearchPPLParser.SIMPLE:
            case OpenSearchPPLParser.STANDARD:
            case OpenSearchPPLParser.COST:
            case OpenSearchPPLParser.EXTENDED:
            case OpenSearchPPLParser.OVERRIDE:
            case OpenSearchPPLParser.AUTO:
            case OpenSearchPPLParser.STR:
            case OpenSearchPPLParser.NUM:
            case OpenSearchPPLParser.SMA:
            case OpenSearchPPLParser.WMA:
            case OpenSearchPPLParser.KEEPEMPTY:
            case OpenSearchPPLParser.CONSECUTIVE:
            case OpenSearchPPLParser.DEDUP_SPLITVALUES:
            case OpenSearchPPLParser.PARTITIONS:
            case OpenSearchPPLParser.ALLNUM:
            case OpenSearchPPLParser.DELIM:
            case OpenSearchPPLParser.BUCKET_NULLABLE:
            case OpenSearchPPLParser.CENTROIDS:
            case OpenSearchPPLParser.ITERATIONS:
            case OpenSearchPPLParser.DISTANCE_TYPE:
            case OpenSearchPPLParser.NUMBER_OF_TREES:
            case OpenSearchPPLParser.SHINGLE_SIZE:
            case OpenSearchPPLParser.SAMPLE_SIZE:
            case OpenSearchPPLParser.OUTPUT_AFTER:
            case OpenSearchPPLParser.TIME_DECAY:
            case OpenSearchPPLParser.ANOMALY_RATE:
            case OpenSearchPPLParser.CATEGORY_FIELD:
            case OpenSearchPPLParser.TIME_FIELD:
            case OpenSearchPPLParser.TIME_ZONE:
            case OpenSearchPPLParser.TRAINING_DATA_SIZE:
            case OpenSearchPPLParser.ANOMALY_SCORE_THRESHOLD:
            case OpenSearchPPLParser.APPEND:
            case OpenSearchPPLParser.COUNTFIELD:
            case OpenSearchPPLParser.SHOWCOUNT:
            case OpenSearchPPLParser.INPUT:
            case OpenSearchPPLParser.OUTPUT:
            case OpenSearchPPLParser.PATH:
            case OpenSearchPPLParser.CASE:
            case OpenSearchPPLParser.ELSE:
            case OpenSearchPPLParser.EXISTS:
            case OpenSearchPPLParser.GEOIP:
            case OpenSearchPPLParser.REGEXP:
            case OpenSearchPPLParser.REGEX_MATCH:
            case OpenSearchPPLParser.CONVERT_TZ:
            case OpenSearchPPLParser.DATETIME:
            case OpenSearchPPLParser.DAY:
            case OpenSearchPPLParser.DAY_HOUR:
            case OpenSearchPPLParser.DAY_MICROSECOND:
            case OpenSearchPPLParser.DAY_MINUTE:
            case OpenSearchPPLParser.DAY_OF_YEAR:
            case OpenSearchPPLParser.DAY_SECOND:
            case OpenSearchPPLParser.HOUR:
            case OpenSearchPPLParser.HOUR_MICROSECOND:
            case OpenSearchPPLParser.HOUR_MINUTE:
            case OpenSearchPPLParser.HOUR_OF_DAY:
            case OpenSearchPPLParser.HOUR_SECOND:
            case OpenSearchPPLParser.INTERVAL:
            case OpenSearchPPLParser.MICROSECOND:
            case OpenSearchPPLParser.MILLISECOND:
            case OpenSearchPPLParser.MINUTE:
            case OpenSearchPPLParser.MINUTE_MICROSECOND:
            case OpenSearchPPLParser.MINUTE_OF_DAY:
            case OpenSearchPPLParser.MINUTE_OF_HOUR:
            case OpenSearchPPLParser.MINUTE_SECOND:
            case OpenSearchPPLParser.MONTH:
            case OpenSearchPPLParser.MONTH_OF_YEAR:
            case OpenSearchPPLParser.QUARTER:
            case OpenSearchPPLParser.SECOND:
            case OpenSearchPPLParser.SECOND_MICROSECOND:
            case OpenSearchPPLParser.SECOND_OF_MINUTE:
            case OpenSearchPPLParser.WEEK:
            case OpenSearchPPLParser.WEEK_OF_YEAR:
            case OpenSearchPPLParser.YEAR:
            case OpenSearchPPLParser.YEAR_MONTH:
            case OpenSearchPPLParser.LOOKUP:
            case OpenSearchPPLParser.IP:
            case OpenSearchPPLParser.PLUS:
            case OpenSearchPPLParser.MINUS:
            case OpenSearchPPLParser.ARROW:
            case OpenSearchPPLParser.AVG:
            case OpenSearchPPLParser.COUNT:
            case OpenSearchPPLParser.DISTINCT_COUNT:
            case OpenSearchPPLParser.DISTINCT_COUNT_APPROX:
            case OpenSearchPPLParser.ESTDC:
            case OpenSearchPPLParser.ESTDC_ERROR:
            case OpenSearchPPLParser.MAX:
            case OpenSearchPPLParser.MEAN:
            case OpenSearchPPLParser.MEDIAN:
            case OpenSearchPPLParser.MIN:
            case OpenSearchPPLParser.MODE:
            case OpenSearchPPLParser.RANGE:
            case OpenSearchPPLParser.STDEV:
            case OpenSearchPPLParser.STDEVP:
            case OpenSearchPPLParser.SUM:
            case OpenSearchPPLParser.SUMSQ:
            case OpenSearchPPLParser.VAR_SAMP:
            case OpenSearchPPLParser.VAR_POP:
            case OpenSearchPPLParser.STDDEV_SAMP:
            case OpenSearchPPLParser.STDDEV_POP:
            case OpenSearchPPLParser.PERCENTILE:
            case OpenSearchPPLParser.PERCENTILE_APPROX:
            case OpenSearchPPLParser.EARLIEST:
            case OpenSearchPPLParser.LATEST:
            case OpenSearchPPLParser.TAKE:
            case OpenSearchPPLParser.LIST:
            case OpenSearchPPLParser.VALUES:
            case OpenSearchPPLParser.PER_DAY:
            case OpenSearchPPLParser.PER_HOUR:
            case OpenSearchPPLParser.PER_MINUTE:
            case OpenSearchPPLParser.PER_SECOND:
            case OpenSearchPPLParser.RATE:
            case OpenSearchPPLParser.SPARKLINE:
            case OpenSearchPPLParser.C:
            case OpenSearchPPLParser.DC:
            case OpenSearchPPLParser.ROW_NUMBER:
            case OpenSearchPPLParser.RANK:
            case OpenSearchPPLParser.DENSE_RANK:
            case OpenSearchPPLParser.PERCENT_RANK:
            case OpenSearchPPLParser.CUME_DIST:
            case OpenSearchPPLParser.FIRST:
            case OpenSearchPPLParser.LAST:
            case OpenSearchPPLParser.NTH:
            case OpenSearchPPLParser.NTILE:
            case OpenSearchPPLParser.PLUS_FUCTION:
            case OpenSearchPPLParser.MINUS_FUCTION:
            case OpenSearchPPLParser.STAR_FUNCTION:
            case OpenSearchPPLParser.DIVIDE_FUNCTION:
            case OpenSearchPPLParser.ABS:
            case OpenSearchPPLParser.CBRT:
            case OpenSearchPPLParser.CEIL:
            case OpenSearchPPLParser.CEILING:
            case OpenSearchPPLParser.CONV:
            case OpenSearchPPLParser.CRC32:
            case OpenSearchPPLParser.E:
            case OpenSearchPPLParser.EXP:
            case OpenSearchPPLParser.EXPM1:
            case OpenSearchPPLParser.FLOOR:
            case OpenSearchPPLParser.LN:
            case OpenSearchPPLParser.LOG:
            case OpenSearchPPLParser.LOG_WITH_BASE:
            case OpenSearchPPLParser.MOD:
            case OpenSearchPPLParser.MODULUS:
            case OpenSearchPPLParser.PI:
            case OpenSearchPPLParser.POSITION:
            case OpenSearchPPLParser.POW:
            case OpenSearchPPLParser.POWER:
            case OpenSearchPPLParser.RAND:
            case OpenSearchPPLParser.ROUND:
            case OpenSearchPPLParser.SIGN:
            case OpenSearchPPLParser.SQRT:
            case OpenSearchPPLParser.TRUNCATE:
            case OpenSearchPPLParser.RINT:
            case OpenSearchPPLParser.SIGNUM:
            case OpenSearchPPLParser.ACOS:
            case OpenSearchPPLParser.ASIN:
            case OpenSearchPPLParser.ATAN:
            case OpenSearchPPLParser.ATAN2:
            case OpenSearchPPLParser.COS:
            case OpenSearchPPLParser.COSH:
            case OpenSearchPPLParser.COT:
            case OpenSearchPPLParser.DEGREES:
            case OpenSearchPPLParser.RADIANS:
            case OpenSearchPPLParser.SIN:
            case OpenSearchPPLParser.SINH:
            case OpenSearchPPLParser.TAN:
            case OpenSearchPPLParser.MD5:
            case OpenSearchPPLParser.SHA1:
            case OpenSearchPPLParser.SHA2:
            case OpenSearchPPLParser.ADDDATE:
            case OpenSearchPPLParser.ADDTIME:
            case OpenSearchPPLParser.CURDATE:
            case OpenSearchPPLParser.CURRENT_DATE:
            case OpenSearchPPLParser.CURRENT_TIME:
            case OpenSearchPPLParser.CURRENT_TIMESTAMP:
            case OpenSearchPPLParser.CURTIME:
            case OpenSearchPPLParser.DATE:
            case OpenSearchPPLParser.DATEDIFF:
            case OpenSearchPPLParser.DATE_ADD:
            case OpenSearchPPLParser.DATE_FORMAT:
            case OpenSearchPPLParser.DATE_SUB:
            case OpenSearchPPLParser.DAYNAME:
            case OpenSearchPPLParser.DAYOFMONTH:
            case OpenSearchPPLParser.DAYOFWEEK:
            case OpenSearchPPLParser.DAYOFYEAR:
            case OpenSearchPPLParser.DAY_OF_MONTH:
            case OpenSearchPPLParser.DAY_OF_WEEK:
            case OpenSearchPPLParser.EXTRACT:
            case OpenSearchPPLParser.FROM_DAYS:
            case OpenSearchPPLParser.FROM_UNIXTIME:
            case OpenSearchPPLParser.GET_FORMAT:
            case OpenSearchPPLParser.LAST_DAY:
            case OpenSearchPPLParser.LOCALTIME:
            case OpenSearchPPLParser.LOCALTIMESTAMP:
            case OpenSearchPPLParser.MAKEDATE:
            case OpenSearchPPLParser.MAKETIME:
            case OpenSearchPPLParser.MONTHNAME:
            case OpenSearchPPLParser.NOW:
            case OpenSearchPPLParser.PERIOD_ADD:
            case OpenSearchPPLParser.PERIOD_DIFF:
            case OpenSearchPPLParser.SEC_TO_TIME:
            case OpenSearchPPLParser.STR_TO_DATE:
            case OpenSearchPPLParser.SUBDATE:
            case OpenSearchPPLParser.SUBTIME:
            case OpenSearchPPLParser.SYSDATE:
            case OpenSearchPPLParser.TIME:
            case OpenSearchPPLParser.TIMEDIFF:
            case OpenSearchPPLParser.TIMESTAMP:
            case OpenSearchPPLParser.TIME_FORMAT:
            case OpenSearchPPLParser.TIME_TO_SEC:
            case OpenSearchPPLParser.TO_DAYS:
            case OpenSearchPPLParser.TO_SECONDS:
            case OpenSearchPPLParser.UNIX_TIMESTAMP:
            case OpenSearchPPLParser.UTC_DATE:
            case OpenSearchPPLParser.UTC_TIME:
            case OpenSearchPPLParser.UTC_TIMESTAMP:
            case OpenSearchPPLParser.WEEKDAY:
            case OpenSearchPPLParser.YEARWEEK:
            case OpenSearchPPLParser.STRFTIME:
            case OpenSearchPPLParser.SUBSTR:
            case OpenSearchPPLParser.SUBSTRING:
            case OpenSearchPPLParser.LTRIM:
            case OpenSearchPPLParser.RTRIM:
            case OpenSearchPPLParser.TRIM:
            case OpenSearchPPLParser.LOWER:
            case OpenSearchPPLParser.UPPER:
            case OpenSearchPPLParser.CONCAT:
            case OpenSearchPPLParser.CONCAT_WS:
            case OpenSearchPPLParser.LENGTH:
            case OpenSearchPPLParser.STRCMP:
            case OpenSearchPPLParser.RIGHT:
            case OpenSearchPPLParser.LEFT:
            case OpenSearchPPLParser.ASCII:
            case OpenSearchPPLParser.LOCATE:
            case OpenSearchPPLParser.REPLACE:
            case OpenSearchPPLParser.REVERSE:
            case OpenSearchPPLParser.CAST:
            case OpenSearchPPLParser.LIKE:
            case OpenSearchPPLParser.ISNULL:
            case OpenSearchPPLParser.ISNOTNULL:
            case OpenSearchPPLParser.CIDRMATCH:
            case OpenSearchPPLParser.BETWEEN:
            case OpenSearchPPLParser.ISPRESENT:
            case OpenSearchPPLParser.ISEMPTY:
            case OpenSearchPPLParser.ISBLANK:
            case OpenSearchPPLParser.ARRAY:
            case OpenSearchPPLParser.ARRAY_LENGTH:
            case OpenSearchPPLParser.MVJOIN:
            case OpenSearchPPLParser.FORALL:
            case OpenSearchPPLParser.FILTER:
            case OpenSearchPPLParser.TRANSFORM:
            case OpenSearchPPLParser.REDUCE:
            case OpenSearchPPLParser.JSON_VALID:
            case OpenSearchPPLParser.JSON:
            case OpenSearchPPLParser.JSON_OBJECT:
            case OpenSearchPPLParser.JSON_ARRAY:
            case OpenSearchPPLParser.JSON_ARRAY_LENGTH:
            case OpenSearchPPLParser.JSON_EXTRACT:
            case OpenSearchPPLParser.JSON_KEYS:
            case OpenSearchPPLParser.JSON_SET:
            case OpenSearchPPLParser.JSON_DELETE:
            case OpenSearchPPLParser.JSON_APPEND:
            case OpenSearchPPLParser.JSON_EXTEND:
            case OpenSearchPPLParser.IFNULL:
            case OpenSearchPPLParser.NULLIF:
            case OpenSearchPPLParser.IF:
            case OpenSearchPPLParser.TYPEOF:
            case OpenSearchPPLParser.COALESCE:
            case OpenSearchPPLParser.MATCH:
            case OpenSearchPPLParser.MATCH_PHRASE:
            case OpenSearchPPLParser.MATCH_PHRASE_PREFIX:
            case OpenSearchPPLParser.MATCH_BOOL_PREFIX:
            case OpenSearchPPLParser.SIMPLE_QUERY_STRING:
            case OpenSearchPPLParser.MULTI_MATCH:
            case OpenSearchPPLParser.QUERY_STRING:
            case OpenSearchPPLParser.ALLOW_LEADING_WILDCARD:
            case OpenSearchPPLParser.ANALYZE_WILDCARD:
            case OpenSearchPPLParser.ANALYZER:
            case OpenSearchPPLParser.AUTO_GENERATE_SYNONYMS_PHRASE_QUERY:
            case OpenSearchPPLParser.BOOST:
            case OpenSearchPPLParser.CUTOFF_FREQUENCY:
            case OpenSearchPPLParser.DEFAULT_FIELD:
            case OpenSearchPPLParser.DEFAULT_OPERATOR:
            case OpenSearchPPLParser.ENABLE_POSITION_INCREMENTS:
            case OpenSearchPPLParser.ESCAPE:
            case OpenSearchPPLParser.FLAGS:
            case OpenSearchPPLParser.FUZZY_MAX_EXPANSIONS:
            case OpenSearchPPLParser.FUZZY_PREFIX_LENGTH:
            case OpenSearchPPLParser.FUZZY_TRANSPOSITIONS:
            case OpenSearchPPLParser.FUZZY_REWRITE:
            case OpenSearchPPLParser.FUZZINESS:
            case OpenSearchPPLParser.LENIENT:
            case OpenSearchPPLParser.LOW_FREQ_OPERATOR:
            case OpenSearchPPLParser.MAX_DETERMINIZED_STATES:
            case OpenSearchPPLParser.MAX_EXPANSIONS:
            case OpenSearchPPLParser.MINIMUM_SHOULD_MATCH:
            case OpenSearchPPLParser.OPERATOR:
            case OpenSearchPPLParser.PHRASE_SLOP:
            case OpenSearchPPLParser.PREFIX_LENGTH:
            case OpenSearchPPLParser.QUOTE_ANALYZER:
            case OpenSearchPPLParser.QUOTE_FIELD_SUFFIX:
            case OpenSearchPPLParser.REWRITE:
            case OpenSearchPPLParser.SLOP:
            case OpenSearchPPLParser.TIE_BREAKER:
            case OpenSearchPPLParser.TYPE:
            case OpenSearchPPLParser.ZERO_TERMS_QUERY:
            case OpenSearchPPLParser.SPAN:
            case OpenSearchPPLParser.MS:
            case OpenSearchPPLParser.S:
            case OpenSearchPPLParser.M:
            case OpenSearchPPLParser.H:
            case OpenSearchPPLParser.W:
            case OpenSearchPPLParser.Q:
            case OpenSearchPPLParser.Y:
            case OpenSearchPPLParser.SEC:
            case OpenSearchPPLParser.SECS:
            case OpenSearchPPLParser.SECONDS:
            case OpenSearchPPLParser.MINS:
            case OpenSearchPPLParser.MINUTES:
            case OpenSearchPPLParser.HR:
            case OpenSearchPPLParser.HRS:
            case OpenSearchPPLParser.HOURS:
            case OpenSearchPPLParser.DAYS:
            case OpenSearchPPLParser.MON:
            case OpenSearchPPLParser.MONTHS:
            case OpenSearchPPLParser.US:
            case OpenSearchPPLParser.CS:
            case OpenSearchPPLParser.DS:
            case OpenSearchPPLParser.PERCENTILE_SHORTCUT:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 2096;
                this.searchableKeyWord();
                }
                break;
            case OpenSearchPPLParser.IN:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 2097;
                this.match(OpenSearchPPLParser.IN);
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public searchableKeyWord(): SearchableKeyWordContext {
        let localContext = new SearchableKeyWordContext(this.context, this.state);
        this.enterRule(localContext, 404, OpenSearchPPLParser.RULE_searchableKeyWord);
        try {
            this.state = 2212;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 205, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 2100;
                this.match(OpenSearchPPLParser.D);
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 2101;
                this.timespanUnit();
                }
                break;
            case 3:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 2102;
                this.match(OpenSearchPPLParser.SPAN);
                }
                break;
            case 4:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 2103;
                this.evalFunctionName();
                }
                break;
            case 5:
                this.enterOuterAlt(localContext, 5);
                {
                this.state = 2104;
                this.jsonFunctionName();
                }
                break;
            case 6:
                this.enterOuterAlt(localContext, 6);
                {
                this.state = 2105;
                this.relevanceArgName();
                }
                break;
            case 7:
                this.enterOuterAlt(localContext, 7);
                {
                this.state = 2106;
                this.intervalUnit();
                }
                break;
            case 8:
                this.enterOuterAlt(localContext, 8);
                {
                this.state = 2107;
                this.trendlineType();
                }
                break;
            case 9:
                this.enterOuterAlt(localContext, 9);
                {
                this.state = 2108;
                this.singleFieldRelevanceFunctionName();
                }
                break;
            case 10:
                this.enterOuterAlt(localContext, 10);
                {
                this.state = 2109;
                this.multiFieldRelevanceFunctionName();
                }
                break;
            case 11:
                this.enterOuterAlt(localContext, 11);
                {
                this.state = 2110;
                this.commandName();
                }
                break;
            case 12:
                this.enterOuterAlt(localContext, 12);
                {
                this.state = 2111;
                this.collectionFunctionName();
                }
                break;
            case 13:
                this.enterOuterAlt(localContext, 13);
                {
                this.state = 2112;
                this.match(OpenSearchPPLParser.REGEX);
                }
                break;
            case 14:
                this.enterOuterAlt(localContext, 14);
                {
                this.state = 2113;
                this.explainMode();
                }
                break;
            case 15:
                this.enterOuterAlt(localContext, 15);
                {
                this.state = 2114;
                this.match(OpenSearchPPLParser.REGEXP);
                }
                break;
            case 16:
                this.enterOuterAlt(localContext, 16);
                {
                this.state = 2115;
                this.match(OpenSearchPPLParser.CASE);
                }
                break;
            case 17:
                this.enterOuterAlt(localContext, 17);
                {
                this.state = 2116;
                this.match(OpenSearchPPLParser.ELSE);
                }
                break;
            case 18:
                this.enterOuterAlt(localContext, 18);
                {
                this.state = 2117;
                this.match(OpenSearchPPLParser.ARROW);
                }
                break;
            case 19:
                this.enterOuterAlt(localContext, 19);
                {
                this.state = 2118;
                this.match(OpenSearchPPLParser.BETWEEN);
                }
                break;
            case 20:
                this.enterOuterAlt(localContext, 20);
                {
                this.state = 2119;
                this.match(OpenSearchPPLParser.EXISTS);
                }
                break;
            case 21:
                this.enterOuterAlt(localContext, 21);
                {
                this.state = 2120;
                this.match(OpenSearchPPLParser.SOURCE);
                }
                break;
            case 22:
                this.enterOuterAlt(localContext, 22);
                {
                this.state = 2121;
                this.match(OpenSearchPPLParser.INDEX);
                }
                break;
            case 23:
                this.enterOuterAlt(localContext, 23);
                {
                this.state = 2122;
                this.match(OpenSearchPPLParser.A);
                }
                break;
            case 24:
                this.enterOuterAlt(localContext, 24);
                {
                this.state = 2123;
                this.match(OpenSearchPPLParser.ASC);
                }
                break;
            case 25:
                this.enterOuterAlt(localContext, 25);
                {
                this.state = 2124;
                this.match(OpenSearchPPLParser.DESC);
                }
                break;
            case 26:
                this.enterOuterAlt(localContext, 26);
                {
                this.state = 2125;
                this.match(OpenSearchPPLParser.DATASOURCES);
                }
                break;
            case 27:
                this.enterOuterAlt(localContext, 27);
                {
                this.state = 2126;
                this.match(OpenSearchPPLParser.FROM);
                }
                break;
            case 28:
                this.enterOuterAlt(localContext, 28);
                {
                this.state = 2127;
                this.match(OpenSearchPPLParser.PATTERN);
                }
                break;
            case 29:
                this.enterOuterAlt(localContext, 29);
                {
                this.state = 2128;
                this.match(OpenSearchPPLParser.NEW_FIELD);
                }
                break;
            case 30:
                this.enterOuterAlt(localContext, 30);
                {
                this.state = 2129;
                this.match(OpenSearchPPLParser.METHOD);
                }
                break;
            case 31:
                this.enterOuterAlt(localContext, 31);
                {
                this.state = 2130;
                this.match(OpenSearchPPLParser.VARIABLE_COUNT_THRESHOLD);
                }
                break;
            case 32:
                this.enterOuterAlt(localContext, 32);
                {
                this.state = 2131;
                this.match(OpenSearchPPLParser.FREQUENCY_THRESHOLD_PERCENTAGE);
                }
                break;
            case 33:
                this.enterOuterAlt(localContext, 33);
                {
                this.state = 2132;
                this.match(OpenSearchPPLParser.MAX_SAMPLE_COUNT);
                }
                break;
            case 34:
                this.enterOuterAlt(localContext, 34);
                {
                this.state = 2133;
                this.match(OpenSearchPPLParser.BUFFER_LIMIT);
                }
                break;
            case 35:
                this.enterOuterAlt(localContext, 35);
                {
                this.state = 2134;
                this.match(OpenSearchPPLParser.WITH);
                }
                break;
            case 36:
                this.enterOuterAlt(localContext, 36);
                {
                this.state = 2135;
                this.match(OpenSearchPPLParser.REGEX);
                }
                break;
            case 37:
                this.enterOuterAlt(localContext, 37);
                {
                this.state = 2136;
                this.match(OpenSearchPPLParser.PUNCT);
                }
                break;
            case 38:
                this.enterOuterAlt(localContext, 38);
                {
                this.state = 2137;
                this.match(OpenSearchPPLParser.USING);
                }
                break;
            case 39:
                this.enterOuterAlt(localContext, 39);
                {
                this.state = 2138;
                this.match(OpenSearchPPLParser.CAST);
                }
                break;
            case 40:
                this.enterOuterAlt(localContext, 40);
                {
                this.state = 2139;
                this.match(OpenSearchPPLParser.GET_FORMAT);
                }
                break;
            case 41:
                this.enterOuterAlt(localContext, 41);
                {
                this.state = 2140;
                this.match(OpenSearchPPLParser.EXTRACT);
                }
                break;
            case 42:
                this.enterOuterAlt(localContext, 42);
                {
                this.state = 2141;
                this.match(OpenSearchPPLParser.INTERVAL);
                }
                break;
            case 43:
                this.enterOuterAlt(localContext, 43);
                {
                this.state = 2142;
                this.match(OpenSearchPPLParser.PLUS);
                }
                break;
            case 44:
                this.enterOuterAlt(localContext, 44);
                {
                this.state = 2143;
                this.match(OpenSearchPPLParser.MINUS);
                }
                break;
            case 45:
                this.enterOuterAlt(localContext, 45);
                {
                this.state = 2144;
                this.match(OpenSearchPPLParser.OVERRIDE);
                }
                break;
            case 46:
                this.enterOuterAlt(localContext, 46);
                {
                this.state = 2145;
                this.match(OpenSearchPPLParser.AUTO);
                }
                break;
            case 47:
                this.enterOuterAlt(localContext, 47);
                {
                this.state = 2146;
                this.match(OpenSearchPPLParser.STR);
                }
                break;
            case 48:
                this.enterOuterAlt(localContext, 48);
                {
                this.state = 2147;
                this.match(OpenSearchPPLParser.IP);
                }
                break;
            case 49:
                this.enterOuterAlt(localContext, 49);
                {
                this.state = 2148;
                this.match(OpenSearchPPLParser.NUM);
                }
                break;
            case 50:
                this.enterOuterAlt(localContext, 50);
                {
                this.state = 2149;
                this.match(OpenSearchPPLParser.KEEPEMPTY);
                }
                break;
            case 51:
                this.enterOuterAlt(localContext, 51);
                {
                this.state = 2150;
                this.match(OpenSearchPPLParser.CONSECUTIVE);
                }
                break;
            case 52:
                this.enterOuterAlt(localContext, 52);
                {
                this.state = 2151;
                this.match(OpenSearchPPLParser.DEDUP_SPLITVALUES);
                }
                break;
            case 53:
                this.enterOuterAlt(localContext, 53);
                {
                this.state = 2152;
                this.match(OpenSearchPPLParser.PARTITIONS);
                }
                break;
            case 54:
                this.enterOuterAlt(localContext, 54);
                {
                this.state = 2153;
                this.match(OpenSearchPPLParser.ALLNUM);
                }
                break;
            case 55:
                this.enterOuterAlt(localContext, 55);
                {
                this.state = 2154;
                this.match(OpenSearchPPLParser.DELIM);
                }
                break;
            case 56:
                this.enterOuterAlt(localContext, 56);
                {
                this.state = 2155;
                this.match(OpenSearchPPLParser.BUCKET_NULLABLE);
                }
                break;
            case 57:
                this.enterOuterAlt(localContext, 57);
                {
                this.state = 2156;
                this.match(OpenSearchPPLParser.CENTROIDS);
                }
                break;
            case 58:
                this.enterOuterAlt(localContext, 58);
                {
                this.state = 2157;
                this.match(OpenSearchPPLParser.ITERATIONS);
                }
                break;
            case 59:
                this.enterOuterAlt(localContext, 59);
                {
                this.state = 2158;
                this.match(OpenSearchPPLParser.DISTANCE_TYPE);
                }
                break;
            case 60:
                this.enterOuterAlt(localContext, 60);
                {
                this.state = 2159;
                this.match(OpenSearchPPLParser.NUMBER_OF_TREES);
                }
                break;
            case 61:
                this.enterOuterAlt(localContext, 61);
                {
                this.state = 2160;
                this.match(OpenSearchPPLParser.SHINGLE_SIZE);
                }
                break;
            case 62:
                this.enterOuterAlt(localContext, 62);
                {
                this.state = 2161;
                this.match(OpenSearchPPLParser.SAMPLE_SIZE);
                }
                break;
            case 63:
                this.enterOuterAlt(localContext, 63);
                {
                this.state = 2162;
                this.match(OpenSearchPPLParser.OUTPUT_AFTER);
                }
                break;
            case 64:
                this.enterOuterAlt(localContext, 64);
                {
                this.state = 2163;
                this.match(OpenSearchPPLParser.TIME_DECAY);
                }
                break;
            case 65:
                this.enterOuterAlt(localContext, 65);
                {
                this.state = 2164;
                this.match(OpenSearchPPLParser.ANOMALY_RATE);
                }
                break;
            case 66:
                this.enterOuterAlt(localContext, 66);
                {
                this.state = 2165;
                this.match(OpenSearchPPLParser.CATEGORY_FIELD);
                }
                break;
            case 67:
                this.enterOuterAlt(localContext, 67);
                {
                this.state = 2166;
                this.match(OpenSearchPPLParser.TIME_FIELD);
                }
                break;
            case 68:
                this.enterOuterAlt(localContext, 68);
                {
                this.state = 2167;
                this.match(OpenSearchPPLParser.TIME_ZONE);
                }
                break;
            case 69:
                this.enterOuterAlt(localContext, 69);
                {
                this.state = 2168;
                this.match(OpenSearchPPLParser.TRAINING_DATA_SIZE);
                }
                break;
            case 70:
                this.enterOuterAlt(localContext, 70);
                {
                this.state = 2169;
                this.match(OpenSearchPPLParser.ANOMALY_SCORE_THRESHOLD);
                }
                break;
            case 71:
                this.enterOuterAlt(localContext, 71);
                {
                this.state = 2170;
                this.match(OpenSearchPPLParser.COUNTFIELD);
                }
                break;
            case 72:
                this.enterOuterAlt(localContext, 72);
                {
                this.state = 2171;
                this.match(OpenSearchPPLParser.SHOWCOUNT);
                }
                break;
            case 73:
                this.enterOuterAlt(localContext, 73);
                {
                this.state = 2172;
                this.match(OpenSearchPPLParser.PATH);
                }
                break;
            case 74:
                this.enterOuterAlt(localContext, 74);
                {
                this.state = 2173;
                this.match(OpenSearchPPLParser.INPUT);
                }
                break;
            case 75:
                this.enterOuterAlt(localContext, 75);
                {
                this.state = 2174;
                this.match(OpenSearchPPLParser.OUTPUT);
                }
                break;
            case 76:
                this.enterOuterAlt(localContext, 76);
                {
                this.state = 2175;
                this.statsFunctionName();
                }
                break;
            case 77:
                this.enterOuterAlt(localContext, 77);
                {
                this.state = 2176;
                this.windowFunctionName();
                }
                break;
            case 78:
                this.enterOuterAlt(localContext, 78);
                {
                this.state = 2177;
                this.match(OpenSearchPPLParser.DISTINCT_COUNT);
                }
                break;
            case 79:
                this.enterOuterAlt(localContext, 79);
                {
                this.state = 2178;
                this.match(OpenSearchPPLParser.DISTINCT_COUNT_APPROX);
                }
                break;
            case 80:
                this.enterOuterAlt(localContext, 80);
                {
                this.state = 2179;
                this.match(OpenSearchPPLParser.ESTDC);
                }
                break;
            case 81:
                this.enterOuterAlt(localContext, 81);
                {
                this.state = 2180;
                this.match(OpenSearchPPLParser.ESTDC_ERROR);
                }
                break;
            case 82:
                this.enterOuterAlt(localContext, 82);
                {
                this.state = 2181;
                this.match(OpenSearchPPLParser.MEAN);
                }
                break;
            case 83:
                this.enterOuterAlt(localContext, 83);
                {
                this.state = 2182;
                this.match(OpenSearchPPLParser.MEDIAN);
                }
                break;
            case 84:
                this.enterOuterAlt(localContext, 84);
                {
                this.state = 2183;
                this.match(OpenSearchPPLParser.MODE);
                }
                break;
            case 85:
                this.enterOuterAlt(localContext, 85);
                {
                this.state = 2184;
                this.match(OpenSearchPPLParser.RANGE);
                }
                break;
            case 86:
                this.enterOuterAlt(localContext, 86);
                {
                this.state = 2185;
                this.match(OpenSearchPPLParser.STDEV);
                }
                break;
            case 87:
                this.enterOuterAlt(localContext, 87);
                {
                this.state = 2186;
                this.match(OpenSearchPPLParser.STDEVP);
                }
                break;
            case 88:
                this.enterOuterAlt(localContext, 88);
                {
                this.state = 2187;
                this.match(OpenSearchPPLParser.SUMSQ);
                }
                break;
            case 89:
                this.enterOuterAlt(localContext, 89);
                {
                this.state = 2188;
                this.match(OpenSearchPPLParser.VAR_SAMP);
                }
                break;
            case 90:
                this.enterOuterAlt(localContext, 90);
                {
                this.state = 2189;
                this.match(OpenSearchPPLParser.VAR_POP);
                }
                break;
            case 91:
                this.enterOuterAlt(localContext, 91);
                {
                this.state = 2190;
                this.match(OpenSearchPPLParser.TAKE);
                }
                break;
            case 92:
                this.enterOuterAlt(localContext, 92);
                {
                this.state = 2191;
                this.match(OpenSearchPPLParser.LIST);
                }
                break;
            case 93:
                this.enterOuterAlt(localContext, 93);
                {
                this.state = 2192;
                this.match(OpenSearchPPLParser.VALUES);
                }
                break;
            case 94:
                this.enterOuterAlt(localContext, 94);
                {
                this.state = 2193;
                this.match(OpenSearchPPLParser.PER_DAY);
                }
                break;
            case 95:
                this.enterOuterAlt(localContext, 95);
                {
                this.state = 2194;
                this.match(OpenSearchPPLParser.PER_HOUR);
                }
                break;
            case 96:
                this.enterOuterAlt(localContext, 96);
                {
                this.state = 2195;
                this.match(OpenSearchPPLParser.PER_MINUTE);
                }
                break;
            case 97:
                this.enterOuterAlt(localContext, 97);
                {
                this.state = 2196;
                this.match(OpenSearchPPLParser.PER_SECOND);
                }
                break;
            case 98:
                this.enterOuterAlt(localContext, 98);
                {
                this.state = 2197;
                this.match(OpenSearchPPLParser.RATE);
                }
                break;
            case 99:
                this.enterOuterAlt(localContext, 99);
                {
                this.state = 2198;
                this.match(OpenSearchPPLParser.SPARKLINE);
                }
                break;
            case 100:
                this.enterOuterAlt(localContext, 100);
                {
                this.state = 2199;
                this.match(OpenSearchPPLParser.C);
                }
                break;
            case 101:
                this.enterOuterAlt(localContext, 101);
                {
                this.state = 2200;
                this.match(OpenSearchPPLParser.DC);
                }
                break;
            case 102:
                this.enterOuterAlt(localContext, 102);
                {
                this.state = 2201;
                this.match(OpenSearchPPLParser.OUTER);
                }
                break;
            case 103:
                this.enterOuterAlt(localContext, 103);
                {
                this.state = 2202;
                this.match(OpenSearchPPLParser.INNER);
                }
                break;
            case 104:
                this.enterOuterAlt(localContext, 104);
                {
                this.state = 2203;
                this.match(OpenSearchPPLParser.CROSS);
                }
                break;
            case 105:
                this.enterOuterAlt(localContext, 105);
                {
                this.state = 2204;
                this.match(OpenSearchPPLParser.LEFT);
                }
                break;
            case 106:
                this.enterOuterAlt(localContext, 106);
                {
                this.state = 2205;
                this.match(OpenSearchPPLParser.RIGHT);
                }
                break;
            case 107:
                this.enterOuterAlt(localContext, 107);
                {
                this.state = 2206;
                this.match(OpenSearchPPLParser.FULL);
                }
                break;
            case 108:
                this.enterOuterAlt(localContext, 108);
                {
                this.state = 2207;
                this.match(OpenSearchPPLParser.SEMI);
                }
                break;
            case 109:
                this.enterOuterAlt(localContext, 109);
                {
                this.state = 2208;
                this.match(OpenSearchPPLParser.ANTI);
                }
                break;
            case 110:
                this.enterOuterAlt(localContext, 110);
                {
                this.state = 2209;
                this.match(OpenSearchPPLParser.LEFT_HINT);
                }
                break;
            case 111:
                this.enterOuterAlt(localContext, 111);
                {
                this.state = 2210;
                this.match(OpenSearchPPLParser.RIGHT_HINT);
                }
                break;
            case 112:
                this.enterOuterAlt(localContext, 112);
                {
                this.state = 2211;
                this.match(OpenSearchPPLParser.PERCENTILE_SHORTCUT);
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }

    public override sempred(localContext: antlr.ParserRuleContext | null, ruleIndex: number, predIndex: number): boolean {
        switch (ruleIndex) {
        case 10:
            return this.searchExpression_sempred(localContext as SearchExpressionContext, predIndex);
        case 120:
            return this.logicalExpression_sempred(localContext as LogicalExpressionContext, predIndex);
        case 121:
            return this.expression_sempred(localContext as ExpressionContext, predIndex);
        case 122:
            return this.valueExpression_sempred(localContext as ValueExpressionContext, predIndex);
        }
        return true;
    }
    private searchExpression_sempred(localContext: SearchExpressionContext | null, predIndex: number): boolean {
        switch (predIndex) {
        case 0:
            return this.precpred(this.context, 3);
        case 1:
            return this.precpred(this.context, 2);
        }
        return true;
    }
    private logicalExpression_sempred(localContext: LogicalExpressionContext | null, predIndex: number): boolean {
        switch (predIndex) {
        case 2:
            return this.precpred(this.context, 4);
        case 3:
            return this.precpred(this.context, 3);
        case 4:
            return this.precpred(this.context, 2);
        }
        return true;
    }
    private expression_sempred(localContext: ExpressionContext | null, predIndex: number): boolean {
        switch (predIndex) {
        case 5:
            return this.precpred(this.context, 3);
        case 6:
            return this.precpred(this.context, 1);
        case 7:
            return this.precpred(this.context, 2);
        }
        return true;
    }
    private valueExpression_sempred(localContext: ValueExpressionContext | null, predIndex: number): boolean {
        switch (predIndex) {
        case 8:
            return this.precpred(this.context, 11);
        case 9:
            return this.precpred(this.context, 10);
        case 10:
            return this.precpred(this.context, 5);
        }
        return true;
    }

    public static readonly _serializedATN: number[] = [
        4,1,467,2215,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,
        7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,
        13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,
        20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,
        26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,
        33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,
        39,2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,
        46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,2,50,7,50,2,51,7,51,2,52,7,
        52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,2,57,7,57,2,58,7,58,2,
        59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,63,2,64,7,64,2,65,7,
        65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,7,70,2,71,7,71,2,
        72,7,72,2,73,7,73,2,74,7,74,2,75,7,75,2,76,7,76,2,77,7,77,2,78,7,
        78,2,79,7,79,2,80,7,80,2,81,7,81,2,82,7,82,2,83,7,83,2,84,7,84,2,
        85,7,85,2,86,7,86,2,87,7,87,2,88,7,88,2,89,7,89,2,90,7,90,2,91,7,
        91,2,92,7,92,2,93,7,93,2,94,7,94,2,95,7,95,2,96,7,96,2,97,7,97,2,
        98,7,98,2,99,7,99,2,100,7,100,2,101,7,101,2,102,7,102,2,103,7,103,
        2,104,7,104,2,105,7,105,2,106,7,106,2,107,7,107,2,108,7,108,2,109,
        7,109,2,110,7,110,2,111,7,111,2,112,7,112,2,113,7,113,2,114,7,114,
        2,115,7,115,2,116,7,116,2,117,7,117,2,118,7,118,2,119,7,119,2,120,
        7,120,2,121,7,121,2,122,7,122,2,123,7,123,2,124,7,124,2,125,7,125,
        2,126,7,126,2,127,7,127,2,128,7,128,2,129,7,129,2,130,7,130,2,131,
        7,131,2,132,7,132,2,133,7,133,2,134,7,134,2,135,7,135,2,136,7,136,
        2,137,7,137,2,138,7,138,2,139,7,139,2,140,7,140,2,141,7,141,2,142,
        7,142,2,143,7,143,2,144,7,144,2,145,7,145,2,146,7,146,2,147,7,147,
        2,148,7,148,2,149,7,149,2,150,7,150,2,151,7,151,2,152,7,152,2,153,
        7,153,2,154,7,154,2,155,7,155,2,156,7,156,2,157,7,157,2,158,7,158,
        2,159,7,159,2,160,7,160,2,161,7,161,2,162,7,162,2,163,7,163,2,164,
        7,164,2,165,7,165,2,166,7,166,2,167,7,167,2,168,7,168,2,169,7,169,
        2,170,7,170,2,171,7,171,2,172,7,172,2,173,7,173,2,174,7,174,2,175,
        7,175,2,176,7,176,2,177,7,177,2,178,7,178,2,179,7,179,2,180,7,180,
        2,181,7,181,2,182,7,182,2,183,7,183,2,184,7,184,2,185,7,185,2,186,
        7,186,2,187,7,187,2,188,7,188,2,189,7,189,2,190,7,190,2,191,7,191,
        2,192,7,192,2,193,7,193,2,194,7,194,2,195,7,195,2,196,7,196,2,197,
        7,197,2,198,7,198,2,199,7,199,2,200,7,200,2,201,7,201,2,202,7,202,
        1,0,3,0,408,8,0,1,0,1,0,1,1,1,1,3,1,414,8,1,1,2,1,2,1,2,5,2,419,
        8,2,10,2,12,2,422,9,2,1,3,1,3,3,3,426,8,3,1,3,1,3,1,4,1,4,1,5,1,
        5,1,5,5,5,435,8,5,10,5,12,5,438,9,5,1,6,1,6,1,6,3,6,443,8,6,1,7,
        1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,
        1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,3,7,
        477,8,7,1,8,1,8,1,9,3,9,482,8,9,1,9,5,9,485,8,9,10,9,12,9,488,9,
        9,1,9,3,9,491,8,9,1,9,5,9,494,8,9,10,9,12,9,497,9,9,1,10,1,10,1,
        10,1,10,1,10,1,10,1,10,1,10,3,10,507,8,10,1,10,1,10,1,10,1,10,1,
        10,1,10,5,10,515,8,10,10,10,12,10,518,9,10,1,11,1,11,1,11,3,11,523,
        8,11,1,12,1,12,1,12,1,12,1,12,3,12,530,8,12,1,13,1,13,1,13,1,13,
        1,14,1,14,1,14,1,14,1,14,1,14,1,15,1,15,1,15,5,15,545,8,15,10,15,
        12,15,548,9,15,1,16,1,16,1,16,1,16,1,16,1,16,3,16,556,8,16,1,17,
        1,17,1,17,1,18,1,18,1,18,1,19,1,19,1,19,1,20,1,20,1,20,1,21,1,21,
        1,21,1,22,3,22,574,8,22,1,22,1,22,1,23,1,23,3,23,580,8,23,1,23,5,
        23,583,8,23,10,23,12,23,586,9,23,1,24,1,24,1,24,3,24,591,8,24,1,
        24,5,24,594,8,24,10,24,12,24,597,9,24,1,25,1,25,1,25,1,25,1,25,5,
        25,604,8,25,10,25,12,25,607,9,25,1,25,3,25,610,8,25,1,25,3,25,613,
        8,25,1,26,1,26,1,26,1,26,5,26,619,8,26,10,26,12,26,622,9,26,1,27,
        1,27,1,27,1,27,1,28,1,28,1,28,1,28,1,29,1,29,1,29,1,29,1,30,1,30,
        1,30,1,30,1,31,1,31,1,31,1,31,1,32,1,32,1,32,1,32,5,32,648,8,32,
        10,32,12,32,651,9,32,1,32,3,32,654,8,32,1,33,1,33,3,33,658,8,33,
        1,33,1,33,1,33,1,33,3,33,664,8,33,1,33,1,33,1,33,3,33,669,8,33,1,
        34,1,34,3,34,673,8,34,1,34,1,34,3,34,677,8,34,1,35,1,35,1,36,1,36,
        5,36,683,8,36,10,36,12,36,686,9,36,1,36,1,36,1,36,3,36,691,8,36,
        1,37,1,37,1,37,1,37,3,37,697,8,37,1,37,3,37,700,8,37,1,38,1,38,1,
        38,1,38,1,38,1,38,1,38,3,38,709,8,38,3,38,711,8,38,1,39,1,39,1,39,
        1,39,3,39,717,8,39,1,40,1,40,1,40,1,40,5,40,723,8,40,10,40,12,40,
        726,9,40,1,41,1,41,3,41,730,8,41,1,41,1,41,3,41,734,8,41,1,42,1,
        42,1,42,5,42,739,8,42,10,42,12,42,742,9,42,1,42,1,42,3,42,746,8,
        42,1,43,1,43,1,43,1,43,1,43,1,43,1,43,1,43,1,43,1,43,3,43,758,8,
        43,1,43,1,43,1,43,1,43,1,43,1,43,1,43,1,43,1,43,3,43,769,8,43,1,
        44,1,44,1,44,3,44,774,8,44,1,45,1,45,3,45,778,8,45,1,45,1,45,1,45,
        1,45,1,45,3,45,785,8,45,1,46,1,46,1,47,1,47,3,47,791,8,47,1,47,1,
        47,1,47,3,47,796,8,47,1,47,1,47,1,47,3,47,801,8,47,1,47,1,47,3,47,
        805,8,47,1,48,1,48,3,48,809,8,48,1,48,1,48,1,48,3,48,814,8,48,1,
        48,1,48,1,48,3,48,819,8,48,1,48,1,48,3,48,823,8,48,1,49,1,49,1,49,
        1,49,1,50,1,50,1,50,1,50,1,51,1,51,5,51,835,8,51,10,51,12,51,838,
        9,51,1,52,1,52,1,52,1,52,1,52,1,52,1,52,1,52,3,52,848,8,52,1,52,
        3,52,851,8,52,1,53,1,53,1,53,5,53,856,8,53,10,53,12,53,859,9,53,
        1,54,1,54,3,54,863,8,54,1,55,1,55,3,55,867,8,55,1,55,1,55,1,56,1,
        56,1,56,1,57,1,57,1,57,1,57,1,58,1,58,1,58,1,59,1,59,1,59,1,59,5,
        59,885,8,59,10,59,12,59,888,9,59,1,59,1,59,5,59,892,8,59,10,59,12,
        59,895,9,59,1,60,1,60,1,60,1,60,1,60,1,60,1,60,1,60,1,60,3,60,906,
        8,60,1,61,1,61,1,62,1,62,1,62,3,62,913,8,62,1,62,1,62,1,62,3,62,
        918,8,62,1,62,1,62,1,62,3,62,923,8,62,1,62,1,62,1,62,3,62,928,8,
        62,1,62,1,62,1,62,3,62,933,8,62,1,62,1,62,1,62,3,62,938,8,62,1,62,
        5,62,941,8,62,10,62,12,62,944,9,62,1,63,1,63,1,63,1,63,1,63,1,63,
        1,63,1,63,1,63,3,63,955,8,63,1,64,1,64,1,65,1,65,1,66,1,66,1,66,
        1,66,1,66,3,66,966,8,66,1,67,1,67,1,67,5,67,971,8,67,10,67,12,67,
        974,9,67,1,68,1,68,1,68,5,68,979,8,68,10,68,12,68,982,9,68,1,69,
        1,69,1,69,3,69,987,8,69,1,70,1,70,1,70,1,70,3,70,993,8,70,1,71,1,
        71,1,71,1,71,3,71,999,8,71,1,72,1,72,1,72,1,72,5,72,1005,8,72,10,
        72,12,72,1008,9,72,1,73,1,73,1,73,1,73,1,74,1,74,1,74,3,74,1017,
        8,74,1,74,1,74,5,74,1021,8,74,10,74,12,74,1024,9,74,1,75,1,75,1,
        75,1,75,1,75,1,75,1,75,1,75,3,75,1034,8,75,1,76,1,76,1,77,1,77,1,
        77,1,77,3,77,1042,8,77,1,78,1,78,1,78,1,78,3,78,1048,8,78,1,79,1,
        79,1,79,1,79,3,79,1054,8,79,1,79,1,79,1,79,1,79,5,79,1060,8,79,10,
        79,12,79,1063,9,79,1,79,1,79,1,80,1,80,1,80,3,80,1070,8,80,1,80,
        1,80,5,80,1074,8,80,10,80,12,80,1077,9,80,1,80,1,80,1,81,1,81,5,
        81,1083,8,81,10,81,12,81,1086,9,81,1,82,1,82,1,82,1,82,1,82,1,82,
        1,82,1,82,1,82,3,82,1097,8,82,1,83,1,83,5,83,1101,8,83,10,83,12,
        83,1104,9,83,1,84,1,84,1,84,1,84,1,84,1,84,1,84,1,84,1,84,1,84,1,
        84,1,84,1,84,1,84,1,84,1,84,1,84,1,84,1,84,1,84,1,84,1,84,1,84,1,
        84,1,84,1,84,1,84,1,84,1,84,1,84,1,84,1,84,1,84,1,84,1,84,1,84,3,
        84,1142,8,84,1,85,1,85,5,85,1146,8,85,10,85,12,85,1149,9,85,1,86,
        1,86,1,86,1,86,1,87,1,87,1,87,1,87,1,87,1,87,1,87,1,87,1,87,1,87,
        1,87,1,87,1,87,1,87,1,87,1,87,1,87,1,87,3,87,1173,8,87,1,88,1,88,
        1,88,1,88,1,88,3,88,1180,8,88,1,88,3,88,1183,8,88,1,89,1,89,1,89,
        5,89,1188,8,89,10,89,12,89,1191,9,89,1,89,1,89,3,89,1195,8,89,1,
        90,1,90,1,90,1,90,3,90,1201,8,90,1,90,1,90,1,91,1,91,1,91,5,91,1208,
        8,91,10,91,12,91,1211,9,91,1,92,3,92,1214,8,92,1,92,1,92,1,93,1,
        93,1,93,5,93,1221,8,93,10,93,12,93,1224,9,93,1,94,1,94,1,94,1,94,
        1,94,1,94,1,94,1,94,3,94,1234,8,94,1,95,1,95,5,95,1238,8,95,10,95,
        12,95,1241,9,95,1,95,3,95,1244,8,95,1,95,1,95,3,95,1248,8,95,1,95,
        1,95,5,95,1252,8,95,10,95,12,95,1255,9,95,1,95,1,95,3,95,1259,8,
        95,1,95,1,95,1,95,3,95,1264,8,95,1,96,1,96,1,96,1,96,3,96,1270,8,
        96,1,96,3,96,1273,8,96,1,96,1,96,3,96,1277,8,96,1,96,1,96,3,96,1281,
        8,96,1,96,3,96,1284,8,96,1,96,1,96,3,96,1288,8,96,1,96,3,96,1291,
        8,96,1,97,1,97,1,98,1,98,1,98,3,98,1298,8,98,1,98,3,98,1301,8,98,
        1,98,1,98,1,98,3,98,1306,8,98,1,99,1,99,1,99,1,100,1,100,3,100,1313,
        8,100,1,100,5,100,1316,8,100,10,100,12,100,1319,9,100,1,101,1,101,
        1,101,1,101,1,101,1,101,1,101,1,101,1,101,1,101,3,101,1331,8,101,
        1,102,1,102,1,102,1,102,1,102,1,102,1,102,1,102,1,102,3,102,1342,
        8,102,1,103,1,103,1,103,1,103,1,104,1,104,1,104,1,105,1,105,1,105,
        1,105,1,105,1,105,1,105,1,105,1,105,1,105,1,105,1,105,1,105,1,105,
        3,105,1365,8,105,1,106,1,106,1,106,3,106,1370,8,106,1,107,1,107,
        1,107,1,107,1,107,1,107,3,107,1378,8,107,1,107,1,107,1,108,1,108,
        1,108,5,108,1385,8,108,10,108,12,108,1388,9,108,1,109,1,109,1,109,
        1,109,1,110,1,110,1,110,3,110,1397,8,110,1,111,1,111,1,111,1,111,
        1,111,1,112,1,112,3,112,1406,8,112,1,113,1,113,1,114,1,114,1,114,
        3,114,1413,8,114,1,115,1,115,1,115,1,115,1,115,1,115,1,115,1,115,
        3,115,1423,8,115,1,115,1,115,1,115,1,115,1,115,1,115,1,115,1,115,
        1,115,1,115,1,115,1,115,1,115,1,115,1,115,1,115,1,115,3,115,1442,
        8,115,1,116,1,116,1,117,1,117,1,117,1,117,1,117,3,117,1451,8,117,
        1,117,1,117,1,118,1,118,1,118,1,118,1,118,1,118,1,118,3,118,1462,
        8,118,1,118,1,118,1,119,1,119,1,119,1,119,3,119,1470,8,119,1,120,
        1,120,1,120,1,120,3,120,1476,8,120,1,120,1,120,1,120,1,120,1,120,
        1,120,1,120,1,120,1,120,5,120,1487,8,120,10,120,12,120,1490,9,120,
        1,121,1,121,1,121,3,121,1495,8,121,1,121,1,121,1,121,1,121,1,121,
        1,121,3,121,1503,8,121,1,121,1,121,1,121,1,121,1,121,1,121,1,121,
        3,121,1512,8,121,1,121,1,121,5,121,1516,8,121,10,121,12,121,1519,
        9,121,1,122,1,122,1,122,1,122,1,122,1,122,1,122,1,122,1,122,1,122,
        1,122,1,122,5,122,1533,8,122,10,122,12,122,1536,9,122,1,122,1,122,
        3,122,1540,8,122,1,122,1,122,1,122,1,122,1,122,1,122,1,122,1,122,
        1,122,1,122,1,122,1,122,1,122,1,122,1,122,3,122,1557,8,122,1,122,
        1,122,1,122,1,122,1,122,1,122,1,122,1,122,3,122,1567,8,122,1,122,
        1,122,1,122,1,122,1,122,5,122,1574,8,122,10,122,12,122,1577,9,122,
        1,123,1,123,1,123,1,123,1,123,1,124,1,124,1,124,1,124,1,124,1,124,
        1,124,3,124,1591,8,124,1,125,1,125,1,125,1,125,1,125,1,125,1,125,
        1,126,1,126,1,126,1,126,1,126,1,126,1,126,1,126,1,126,1,126,5,126,
        1610,8,126,10,126,12,126,1613,9,126,1,126,1,126,3,126,1617,8,126,
        1,126,1,126,1,127,1,127,3,127,1623,8,127,1,128,1,128,1,128,1,128,
        1,128,1,128,1,128,5,128,1632,8,128,10,128,12,128,1635,9,128,1,128,
        1,128,1,129,1,129,1,129,1,129,1,129,1,129,5,129,1645,8,129,10,129,
        12,129,1648,9,129,1,129,1,129,1,129,3,129,1653,8,129,1,129,1,129,
        1,129,5,129,1658,8,129,10,129,12,129,1661,9,129,1,129,1,129,1,130,
        1,130,3,130,1667,8,130,1,131,1,131,1,131,1,131,1,131,1,132,1,132,
        3,132,1676,8,132,1,132,5,132,1679,8,132,10,132,12,132,1682,9,132,
        1,133,3,133,1685,8,133,1,133,1,133,1,134,1,134,1,134,1,134,1,134,
        1,134,1,134,1,134,1,134,1,134,1,134,1,134,1,134,1,134,1,134,1,134,
        1,134,1,134,1,134,1,134,1,134,3,134,1710,8,134,1,135,1,135,1,136,
        1,136,1,137,1,137,3,137,1718,8,137,1,138,1,138,3,138,1722,8,138,
        1,139,1,139,1,139,1,139,1,139,1,140,1,140,1,140,1,140,1,140,1,140,
        1,140,1,141,1,141,1,141,1,141,1,141,1,141,1,141,1,141,1,141,1,141,
        1,141,1,141,3,141,1748,8,141,1,142,1,142,1,142,1,142,1,142,1,142,
        1,142,1,142,1,142,1,142,1,142,3,142,1761,8,142,1,143,1,143,1,143,
        5,143,1766,8,143,10,143,12,143,1769,9,143,3,143,1771,8,143,1,144,
        1,144,1,144,5,144,1776,8,144,10,144,12,144,1779,9,144,3,144,1781,
        8,144,1,145,1,145,1,146,1,146,1,146,3,146,1788,8,146,1,146,1,146,
        1,147,1,147,3,147,1794,8,147,1,148,1,148,1,148,1,148,1,148,1,148,
        1,148,1,148,4,148,1804,8,148,11,148,12,148,1805,1,148,1,148,1,148,
        1,148,3,148,1812,8,148,1,149,1,149,1,149,1,149,1,150,1,150,1,151,
        1,151,1,151,1,151,1,151,1,151,1,151,1,151,3,151,1828,8,151,1,152,
        1,152,1,152,1,152,3,152,1834,8,152,1,153,1,153,3,153,1838,8,153,
        1,154,1,154,1,155,1,155,3,155,1844,8,155,1,156,1,156,1,156,1,156,
        1,156,1,156,1,156,1,156,1,156,1,156,1,156,1,156,1,156,1,156,1,156,
        1,156,1,156,1,156,1,156,1,156,1,156,1,156,1,156,1,156,1,156,1,156,
        1,156,1,156,1,156,1,156,1,156,1,156,3,156,1878,8,156,1,157,1,157,
        1,158,1,158,1,159,1,159,1,160,1,160,1,161,1,161,1,162,1,162,1,163,
        1,163,1,163,1,163,1,163,1,163,1,163,1,164,1,164,1,165,1,165,1,165,
        1,165,1,165,1,165,1,165,1,166,1,166,1,167,1,167,1,168,1,168,3,168,
        1914,8,168,1,169,1,169,1,169,1,169,1,169,1,169,1,169,1,169,1,169,
        1,170,1,170,1,171,1,171,1,172,1,172,1,173,1,173,1,174,1,174,1,175,
        1,175,1,176,1,176,1,177,1,177,1,178,1,178,1,179,1,179,1,179,1,179,
        1,179,1,179,1,179,1,179,3,179,1951,8,179,1,180,1,180,1,180,1,180,
        1,181,1,181,1,182,3,182,1960,8,182,1,182,1,182,1,183,3,183,1965,
        8,183,1,183,1,183,1,184,3,184,1970,8,184,1,184,1,184,1,185,3,185,
        1975,8,185,1,185,1,185,1,186,1,186,1,187,1,187,1,187,3,187,1984,
        8,187,1,188,1,188,1,188,1,189,1,189,1,189,1,190,1,190,1,190,1,191,
        1,191,1,192,1,192,1,193,1,193,1,193,1,193,5,193,2003,8,193,10,193,
        12,193,2006,9,193,1,193,1,193,1,194,1,194,1,194,5,194,2013,8,194,
        10,194,12,194,2016,9,194,1,195,1,195,1,195,5,195,2021,8,195,10,195,
        12,195,2024,9,195,1,196,1,196,1,196,5,196,2029,8,196,10,196,12,196,
        2032,9,196,1,197,1,197,1,197,5,197,2037,8,197,10,197,12,197,2040,
        9,197,1,197,1,197,1,197,1,197,5,197,2046,8,197,10,197,12,197,2049,
        9,197,1,197,1,197,3,197,2053,8,197,1,198,3,198,2056,8,198,1,198,
        1,198,1,198,1,198,1,198,1,198,1,198,3,198,2065,8,198,1,199,3,199,
        2068,8,199,1,199,1,199,1,200,1,200,1,200,5,200,2075,8,200,10,200,
        12,200,2078,9,200,1,200,3,200,2081,8,200,1,200,1,200,1,200,1,200,
        1,200,1,200,1,200,1,200,1,200,1,200,1,200,1,200,3,200,2095,8,200,
        1,201,1,201,3,201,2099,8,201,1,202,1,202,1,202,1,202,1,202,1,202,
        1,202,1,202,1,202,1,202,1,202,1,202,1,202,1,202,1,202,1,202,1,202,
        1,202,1,202,1,202,1,202,1,202,1,202,1,202,1,202,1,202,1,202,1,202,
        1,202,1,202,1,202,1,202,1,202,1,202,1,202,1,202,1,202,1,202,1,202,
        1,202,1,202,1,202,1,202,1,202,1,202,1,202,1,202,1,202,1,202,1,202,
        1,202,1,202,1,202,1,202,1,202,1,202,1,202,1,202,1,202,1,202,1,202,
        1,202,1,202,1,202,1,202,1,202,1,202,1,202,1,202,1,202,1,202,1,202,
        1,202,1,202,1,202,1,202,1,202,1,202,1,202,1,202,1,202,1,202,1,202,
        1,202,1,202,1,202,1,202,1,202,1,202,1,202,1,202,1,202,1,202,1,202,
        1,202,1,202,1,202,1,202,1,202,1,202,1,202,1,202,1,202,1,202,1,202,
        1,202,1,202,1,202,1,202,1,202,1,202,1,202,3,202,2213,8,202,1,202,
        0,4,20,240,242,244,203,0,2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,
        32,34,36,38,40,42,44,46,48,50,52,54,56,58,60,62,64,66,68,70,72,74,
        76,78,80,82,84,86,88,90,92,94,96,98,100,102,104,106,108,110,112,
        114,116,118,120,122,124,126,128,130,132,134,136,138,140,142,144,
        146,148,150,152,154,156,158,160,162,164,166,168,170,172,174,176,
        178,180,182,184,186,188,190,192,194,196,198,200,202,204,206,208,
        210,212,214,216,218,220,222,224,226,228,230,232,234,236,238,240,
        242,244,246,248,250,252,254,256,258,260,262,264,266,268,270,272,
        274,276,278,280,282,284,286,288,290,292,294,296,298,300,302,304,
        306,308,310,312,314,316,318,320,322,324,326,328,330,332,334,336,
        338,340,342,344,346,348,350,352,354,356,358,360,362,364,366,368,
        370,372,374,376,378,380,382,384,386,388,390,392,394,396,398,400,
        402,404,0,39,1,0,72,75,12,0,2,5,7,8,10,21,23,24,27,27,29,29,31,37,
        39,39,51,51,104,104,157,157,356,356,1,0,177,178,1,0,65,68,2,0,170,
        170,176,176,2,0,25,25,305,305,2,0,23,23,26,26,1,0,40,41,1,0,49,50,
        2,0,104,104,355,355,1,0,81,82,2,0,53,58,351,352,2,0,7,7,52,52,2,
        0,199,199,232,241,2,0,198,198,231,231,2,0,199,200,232,232,8,0,197,
        198,203,203,205,206,211,211,213,216,218,221,223,223,238,239,1,0,
        218,219,1,0,179,181,3,0,8,8,101,101,396,426,2,0,115,115,366,372,
        1,0,272,283,1,0,374,383,1,0,284,286,13,0,125,127,131,131,133,133,
        136,136,139,139,141,141,143,144,146,149,151,154,287,304,306,307,
        309,325,328,338,4,0,126,126,294,294,323,323,325,325,8,0,127,127,
        133,133,139,139,141,141,146,146,148,149,152,152,154,154,8,0,128,
        130,132,132,134,135,137,137,142,142,145,145,150,150,155,155,1,0,
        326,327,5,0,124,124,220,221,358,361,363,365,373,373,2,0,384,386,
        388,388,2,0,339,343,345,356,3,0,123,123,170,176,358,358,1,0,389,
        392,1,0,393,395,1,0,462,463,1,0,121,122,9,0,127,130,132,135,137,
        137,139,139,141,142,145,146,148,150,152,152,154,155,9,0,67,67,127,
        127,133,133,140,141,146,146,148,149,152,152,154,154,433,453,2489,
        0,407,1,0,0,0,2,413,1,0,0,0,4,415,1,0,0,0,6,423,1,0,0,0,8,429,1,
        0,0,0,10,431,1,0,0,0,12,442,1,0,0,0,14,476,1,0,0,0,16,478,1,0,0,
        0,18,481,1,0,0,0,20,506,1,0,0,0,22,522,1,0,0,0,24,529,1,0,0,0,26,
        531,1,0,0,0,28,535,1,0,0,0,30,541,1,0,0,0,32,555,1,0,0,0,34,557,
        1,0,0,0,36,560,1,0,0,0,38,563,1,0,0,0,40,566,1,0,0,0,42,569,1,0,
        0,0,44,573,1,0,0,0,46,577,1,0,0,0,48,587,1,0,0,0,50,598,1,0,0,0,
        52,620,1,0,0,0,54,623,1,0,0,0,56,627,1,0,0,0,58,631,1,0,0,0,60,635,
        1,0,0,0,62,639,1,0,0,0,64,643,1,0,0,0,66,655,1,0,0,0,68,670,1,0,
        0,0,70,678,1,0,0,0,72,680,1,0,0,0,74,699,1,0,0,0,76,710,1,0,0,0,
        78,716,1,0,0,0,80,718,1,0,0,0,82,727,1,0,0,0,84,735,1,0,0,0,86,768,
        1,0,0,0,88,773,1,0,0,0,90,784,1,0,0,0,92,786,1,0,0,0,94,788,1,0,
        0,0,96,806,1,0,0,0,98,824,1,0,0,0,100,828,1,0,0,0,102,832,1,0,0,
        0,104,850,1,0,0,0,106,852,1,0,0,0,108,860,1,0,0,0,110,864,1,0,0,
        0,112,870,1,0,0,0,114,873,1,0,0,0,116,877,1,0,0,0,118,880,1,0,0,
        0,120,905,1,0,0,0,122,907,1,0,0,0,124,909,1,0,0,0,126,954,1,0,0,
        0,128,956,1,0,0,0,130,958,1,0,0,0,132,960,1,0,0,0,134,967,1,0,0,
        0,136,975,1,0,0,0,138,983,1,0,0,0,140,992,1,0,0,0,142,994,1,0,0,
        0,144,1000,1,0,0,0,146,1009,1,0,0,0,148,1013,1,0,0,0,150,1025,1,
        0,0,0,152,1035,1,0,0,0,154,1037,1,0,0,0,156,1043,1,0,0,0,158,1049,
        1,0,0,0,160,1066,1,0,0,0,162,1080,1,0,0,0,164,1096,1,0,0,0,166,1098,
        1,0,0,0,168,1141,1,0,0,0,170,1143,1,0,0,0,172,1150,1,0,0,0,174,1172,
        1,0,0,0,176,1182,1,0,0,0,178,1184,1,0,0,0,180,1196,1,0,0,0,182,1204,
        1,0,0,0,184,1213,1,0,0,0,186,1217,1,0,0,0,188,1233,1,0,0,0,190,1263,
        1,0,0,0,192,1290,1,0,0,0,194,1292,1,0,0,0,196,1297,1,0,0,0,198,1307,
        1,0,0,0,200,1310,1,0,0,0,202,1330,1,0,0,0,204,1341,1,0,0,0,206,1343,
        1,0,0,0,208,1347,1,0,0,0,210,1364,1,0,0,0,212,1366,1,0,0,0,214,1371,
        1,0,0,0,216,1381,1,0,0,0,218,1389,1,0,0,0,220,1393,1,0,0,0,222,1398,
        1,0,0,0,224,1405,1,0,0,0,226,1407,1,0,0,0,228,1409,1,0,0,0,230,1441,
        1,0,0,0,232,1443,1,0,0,0,234,1445,1,0,0,0,236,1454,1,0,0,0,238,1469,
        1,0,0,0,240,1475,1,0,0,0,242,1494,1,0,0,0,244,1556,1,0,0,0,246,1578,
        1,0,0,0,248,1590,1,0,0,0,250,1592,1,0,0,0,252,1599,1,0,0,0,254,1622,
        1,0,0,0,256,1624,1,0,0,0,258,1638,1,0,0,0,260,1666,1,0,0,0,262,1668,
        1,0,0,0,264,1673,1,0,0,0,266,1684,1,0,0,0,268,1709,1,0,0,0,270,1711,
        1,0,0,0,272,1713,1,0,0,0,274,1717,1,0,0,0,276,1721,1,0,0,0,278,1723,
        1,0,0,0,280,1728,1,0,0,0,282,1747,1,0,0,0,284,1760,1,0,0,0,286,1770,
        1,0,0,0,288,1780,1,0,0,0,290,1782,1,0,0,0,292,1787,1,0,0,0,294,1793,
        1,0,0,0,296,1811,1,0,0,0,298,1813,1,0,0,0,300,1817,1,0,0,0,302,1827,
        1,0,0,0,304,1833,1,0,0,0,306,1837,1,0,0,0,308,1839,1,0,0,0,310,1843,
        1,0,0,0,312,1877,1,0,0,0,314,1879,1,0,0,0,316,1881,1,0,0,0,318,1883,
        1,0,0,0,320,1885,1,0,0,0,322,1887,1,0,0,0,324,1889,1,0,0,0,326,1891,
        1,0,0,0,328,1898,1,0,0,0,330,1900,1,0,0,0,332,1907,1,0,0,0,334,1909,
        1,0,0,0,336,1913,1,0,0,0,338,1915,1,0,0,0,340,1924,1,0,0,0,342,1926,
        1,0,0,0,344,1928,1,0,0,0,346,1930,1,0,0,0,348,1932,1,0,0,0,350,1934,
        1,0,0,0,352,1936,1,0,0,0,354,1938,1,0,0,0,356,1940,1,0,0,0,358,1950,
        1,0,0,0,360,1952,1,0,0,0,362,1956,1,0,0,0,364,1959,1,0,0,0,366,1964,
        1,0,0,0,368,1969,1,0,0,0,370,1974,1,0,0,0,372,1978,1,0,0,0,374,1983,
        1,0,0,0,376,1985,1,0,0,0,378,1988,1,0,0,0,380,1991,1,0,0,0,382,1994,
        1,0,0,0,384,1996,1,0,0,0,386,1998,1,0,0,0,388,2009,1,0,0,0,390,2017,
        1,0,0,0,392,2025,1,0,0,0,394,2052,1,0,0,0,396,2064,1,0,0,0,398,2067,
        1,0,0,0,400,2094,1,0,0,0,402,2098,1,0,0,0,404,2212,1,0,0,0,406,408,
        3,2,1,0,407,406,1,0,0,0,407,408,1,0,0,0,408,409,1,0,0,0,409,410,
        5,0,0,1,410,1,1,0,0,0,411,414,3,6,3,0,412,414,3,4,2,0,413,411,1,
        0,0,0,413,412,1,0,0,0,414,3,1,0,0,0,415,420,3,12,6,0,416,417,5,167,
        0,0,417,419,3,14,7,0,418,416,1,0,0,0,419,422,1,0,0,0,420,418,1,0,
        0,0,420,421,1,0,0,0,421,5,1,0,0,0,422,420,1,0,0,0,423,425,5,5,0,
        0,424,426,3,8,4,0,425,424,1,0,0,0,425,426,1,0,0,0,426,427,1,0,0,
        0,427,428,3,4,2,0,428,7,1,0,0,0,429,430,7,0,0,0,430,9,1,0,0,0,431,
        436,3,18,9,0,432,433,5,167,0,0,433,435,3,14,7,0,434,432,1,0,0,0,
        435,438,1,0,0,0,436,434,1,0,0,0,436,437,1,0,0,0,437,11,1,0,0,0,438,
        436,1,0,0,0,439,443,3,34,17,0,440,443,3,36,18,0,441,443,3,18,9,0,
        442,439,1,0,0,0,442,440,1,0,0,0,442,441,1,0,0,0,443,13,1,0,0,0,444,
        477,3,38,19,0,445,477,3,40,20,0,446,477,3,42,21,0,447,477,3,190,
        95,0,448,477,3,48,24,0,449,477,3,50,25,0,450,477,3,64,32,0,451,477,
        3,66,33,0,452,477,3,68,34,0,453,477,3,80,40,0,454,477,3,82,41,0,
        455,477,3,84,42,0,456,477,3,94,47,0,457,477,3,96,48,0,458,477,3,
        98,49,0,459,477,3,100,50,0,460,477,3,102,51,0,461,477,3,124,62,0,
        462,477,3,132,66,0,463,477,3,162,81,0,464,477,3,166,83,0,465,477,
        3,170,85,0,466,477,3,140,70,0,467,477,3,148,74,0,468,477,3,158,79,
        0,469,477,3,160,80,0,470,477,3,154,77,0,471,477,3,156,78,0,472,477,
        3,70,35,0,473,477,3,112,56,0,474,477,3,72,36,0,475,477,3,116,58,
        0,476,444,1,0,0,0,476,445,1,0,0,0,476,446,1,0,0,0,476,447,1,0,0,
        0,476,448,1,0,0,0,476,449,1,0,0,0,476,450,1,0,0,0,476,451,1,0,0,
        0,476,452,1,0,0,0,476,453,1,0,0,0,476,454,1,0,0,0,476,455,1,0,0,
        0,476,456,1,0,0,0,476,457,1,0,0,0,476,458,1,0,0,0,476,459,1,0,0,
        0,476,460,1,0,0,0,476,461,1,0,0,0,476,462,1,0,0,0,476,463,1,0,0,
        0,476,464,1,0,0,0,476,465,1,0,0,0,476,466,1,0,0,0,476,467,1,0,0,
        0,476,468,1,0,0,0,476,469,1,0,0,0,476,470,1,0,0,0,476,471,1,0,0,
        0,476,472,1,0,0,0,476,473,1,0,0,0,476,474,1,0,0,0,476,475,1,0,0,
        0,477,15,1,0,0,0,478,479,7,1,0,0,479,17,1,0,0,0,480,482,5,2,0,0,
        481,480,1,0,0,0,481,482,1,0,0,0,482,486,1,0,0,0,483,485,3,20,10,
        0,484,483,1,0,0,0,485,488,1,0,0,0,486,484,1,0,0,0,486,487,1,0,0,
        0,487,490,1,0,0,0,488,486,1,0,0,0,489,491,3,174,87,0,490,489,1,0,
        0,0,490,491,1,0,0,0,491,495,1,0,0,0,492,494,3,20,10,0,493,492,1,
        0,0,0,494,497,1,0,0,0,495,493,1,0,0,0,495,496,1,0,0,0,496,19,1,0,
        0,0,497,495,1,0,0,0,498,499,6,10,-1,0,499,500,5,184,0,0,500,501,
        3,20,10,0,501,502,5,185,0,0,502,507,1,0,0,0,503,504,5,117,0,0,504,
        507,3,20,10,4,505,507,3,22,11,0,506,498,1,0,0,0,506,503,1,0,0,0,
        506,505,1,0,0,0,507,516,1,0,0,0,508,509,10,3,0,0,509,510,5,118,0,
        0,510,515,3,20,10,4,511,512,10,2,0,0,512,513,5,119,0,0,513,515,3,
        20,10,3,514,508,1,0,0,0,514,511,1,0,0,0,515,518,1,0,0,0,516,514,
        1,0,0,0,516,517,1,0,0,0,517,21,1,0,0,0,518,516,1,0,0,0,519,523,3,
        26,13,0,520,523,3,28,14,0,521,523,3,24,12,0,522,519,1,0,0,0,522,
        520,1,0,0,0,522,521,1,0,0,0,523,23,1,0,0,0,524,530,3,238,119,0,525,
        530,3,372,186,0,526,530,5,455,0,0,527,530,3,362,181,0,528,530,3,
        404,202,0,529,524,1,0,0,0,529,525,1,0,0,0,529,526,1,0,0,0,529,527,
        1,0,0,0,529,528,1,0,0,0,530,25,1,0,0,0,531,532,3,270,135,0,532,533,
        3,32,16,0,533,534,3,24,12,0,534,27,1,0,0,0,535,536,3,270,135,0,536,
        537,5,114,0,0,537,538,5,184,0,0,538,539,3,30,15,0,539,540,5,185,
        0,0,540,29,1,0,0,0,541,546,3,24,12,0,542,543,5,168,0,0,543,545,3,
        24,12,0,544,542,1,0,0,0,545,548,1,0,0,0,546,544,1,0,0,0,546,547,
        1,0,0,0,547,31,1,0,0,0,548,546,1,0,0,0,549,556,5,170,0,0,550,556,
        5,176,0,0,551,556,5,173,0,0,552,556,5,174,0,0,553,556,5,172,0,0,
        554,556,5,175,0,0,555,549,1,0,0,0,555,550,1,0,0,0,555,551,1,0,0,
        0,555,552,1,0,0,0,555,553,1,0,0,0,555,554,1,0,0,0,556,33,1,0,0,0,
        557,558,5,3,0,0,558,559,3,178,89,0,559,35,1,0,0,0,560,561,5,4,0,
        0,561,562,5,69,0,0,562,37,1,0,0,0,563,564,5,7,0,0,564,565,3,240,
        120,0,565,39,1,0,0,0,566,567,5,8,0,0,567,568,3,44,22,0,568,41,1,
        0,0,0,569,570,5,10,0,0,570,571,3,44,22,0,571,43,1,0,0,0,572,574,
        7,2,0,0,573,572,1,0,0,0,573,574,1,0,0,0,574,575,1,0,0,0,575,576,
        3,46,23,0,576,45,1,0,0,0,577,584,3,274,137,0,578,580,5,168,0,0,579,
        578,1,0,0,0,579,580,1,0,0,0,580,581,1,0,0,0,581,583,3,274,137,0,
        582,579,1,0,0,0,583,586,1,0,0,0,584,582,1,0,0,0,584,585,1,0,0,0,
        585,47,1,0,0,0,586,584,1,0,0,0,587,588,5,11,0,0,588,595,3,206,103,
        0,589,591,5,168,0,0,590,589,1,0,0,0,590,591,1,0,0,0,591,592,1,0,
        0,0,592,594,3,206,103,0,593,590,1,0,0,0,594,597,1,0,0,0,595,593,
        1,0,0,0,595,596,1,0,0,0,596,49,1,0,0,0,597,595,1,0,0,0,598,599,5,
        12,0,0,599,600,3,52,26,0,600,605,3,228,114,0,601,602,5,168,0,0,602,
        604,3,228,114,0,603,601,1,0,0,0,604,607,1,0,0,0,605,603,1,0,0,0,
        605,606,1,0,0,0,606,609,1,0,0,0,607,605,1,0,0,0,608,610,3,210,105,
        0,609,608,1,0,0,0,609,610,1,0,0,0,610,612,1,0,0,0,611,613,3,62,31,
        0,612,611,1,0,0,0,612,613,1,0,0,0,613,51,1,0,0,0,614,619,3,54,27,
        0,615,619,3,56,28,0,616,619,3,58,29,0,617,619,3,60,30,0,618,614,
        1,0,0,0,618,615,1,0,0,0,618,616,1,0,0,0,618,617,1,0,0,0,619,622,
        1,0,0,0,620,618,1,0,0,0,620,621,1,0,0,0,621,53,1,0,0,0,622,620,1,
        0,0,0,623,624,5,86,0,0,624,625,5,170,0,0,625,626,3,364,182,0,626,
        55,1,0,0,0,627,628,5,87,0,0,628,629,5,170,0,0,629,630,3,372,186,
        0,630,57,1,0,0,0,631,632,5,88,0,0,632,633,5,170,0,0,633,634,3,362,
        181,0,634,59,1,0,0,0,635,636,5,89,0,0,636,637,5,170,0,0,637,638,
        3,372,186,0,638,61,1,0,0,0,639,640,5,85,0,0,640,641,5,170,0,0,641,
        642,3,372,186,0,642,63,1,0,0,0,643,644,5,13,0,0,644,649,3,220,110,
        0,645,646,5,168,0,0,646,648,3,220,110,0,647,645,1,0,0,0,648,651,
        1,0,0,0,649,647,1,0,0,0,649,650,1,0,0,0,650,653,1,0,0,0,651,649,
        1,0,0,0,652,654,3,210,105,0,653,652,1,0,0,0,653,654,1,0,0,0,654,
        65,1,0,0,0,655,657,5,14,0,0,656,658,3,364,182,0,657,656,1,0,0,0,
        657,658,1,0,0,0,658,659,1,0,0,0,659,663,3,264,132,0,660,661,5,83,
        0,0,661,662,5,170,0,0,662,664,3,372,186,0,663,660,1,0,0,0,663,664,
        1,0,0,0,664,668,1,0,0,0,665,666,5,84,0,0,666,667,5,170,0,0,667,669,
        3,372,186,0,668,665,1,0,0,0,668,669,1,0,0,0,669,67,1,0,0,0,670,672,
        5,15,0,0,671,673,3,364,182,0,672,671,1,0,0,0,672,673,1,0,0,0,673,
        674,1,0,0,0,674,676,3,216,108,0,675,677,7,3,0,0,676,675,1,0,0,0,
        676,677,1,0,0,0,677,69,1,0,0,0,678,679,5,356,0,0,679,71,1,0,0,0,
        680,684,5,37,0,0,681,683,3,74,37,0,682,681,1,0,0,0,683,686,1,0,0,
        0,684,682,1,0,0,0,684,685,1,0,0,0,685,687,1,0,0,0,686,684,1,0,0,
        0,687,690,3,230,115,0,688,689,5,62,0,0,689,691,3,270,135,0,690,688,
        1,0,0,0,690,691,1,0,0,0,691,73,1,0,0,0,692,697,3,214,107,0,693,694,
        5,427,0,0,694,695,5,170,0,0,695,697,3,78,39,0,696,692,1,0,0,0,696,
        693,1,0,0,0,697,700,1,0,0,0,698,700,3,76,38,0,699,696,1,0,0,0,699,
        698,1,0,0,0,700,75,1,0,0,0,701,702,5,107,0,0,702,703,5,170,0,0,703,
        711,3,364,182,0,704,705,5,108,0,0,705,708,5,170,0,0,706,709,3,372,
        186,0,707,709,3,396,198,0,708,706,1,0,0,0,708,707,1,0,0,0,709,711,
        1,0,0,0,710,701,1,0,0,0,710,704,1,0,0,0,711,77,1,0,0,0,712,713,3,
        364,182,0,713,714,3,384,192,0,714,717,1,0,0,0,715,717,3,362,181,
        0,716,712,1,0,0,0,716,715,1,0,0,0,717,79,1,0,0,0,718,719,5,16,0,
        0,719,724,3,218,109,0,720,721,5,168,0,0,721,723,3,218,109,0,722,
        720,1,0,0,0,723,726,1,0,0,0,724,722,1,0,0,0,724,725,1,0,0,0,725,
        81,1,0,0,0,726,724,1,0,0,0,727,729,5,17,0,0,728,730,3,364,182,0,
        729,728,1,0,0,0,729,730,1,0,0,0,730,733,1,0,0,0,731,732,5,6,0,0,
        732,734,3,364,182,0,733,731,1,0,0,0,733,734,1,0,0,0,734,83,1,0,0,
        0,735,736,5,18,0,0,736,740,3,270,135,0,737,739,3,86,43,0,738,737,
        1,0,0,0,739,742,1,0,0,0,740,738,1,0,0,0,740,741,1,0,0,0,741,745,
        1,0,0,0,742,740,1,0,0,0,743,744,5,61,0,0,744,746,3,388,194,0,745,
        743,1,0,0,0,745,746,1,0,0,0,746,85,1,0,0,0,747,748,5,427,0,0,748,
        749,5,170,0,0,749,769,3,90,45,0,750,751,5,428,0,0,751,752,5,170,
        0,0,752,769,3,364,182,0,753,754,5,429,0,0,754,755,5,170,0,0,755,
        757,3,358,179,0,756,758,3,384,192,0,757,756,1,0,0,0,757,758,1,0,
        0,0,758,769,1,0,0,0,759,760,5,432,0,0,760,761,5,170,0,0,761,769,
        3,88,44,0,762,763,5,430,0,0,763,764,5,170,0,0,764,769,3,238,119,
        0,765,766,5,431,0,0,766,767,5,170,0,0,767,769,3,238,119,0,768,747,
        1,0,0,0,768,750,1,0,0,0,768,753,1,0,0,0,768,759,1,0,0,0,768,762,
        1,0,0,0,768,765,1,0,0,0,769,87,1,0,0,0,770,774,5,220,0,0,771,774,
        5,221,0,0,772,774,3,358,179,0,773,770,1,0,0,0,773,771,1,0,0,0,773,
        772,1,0,0,0,774,89,1,0,0,0,775,777,3,358,179,0,776,778,3,384,192,
        0,777,776,1,0,0,0,777,778,1,0,0,0,778,785,1,0,0,0,779,785,3,92,46,
        0,780,781,3,396,198,0,781,782,3,384,192,0,782,785,1,0,0,0,783,785,
        3,396,198,0,784,775,1,0,0,0,784,779,1,0,0,0,784,780,1,0,0,0,784,
        783,1,0,0,0,785,91,1,0,0,0,786,787,5,258,0,0,787,93,1,0,0,0,788,
        790,5,19,0,0,789,791,3,364,182,0,790,789,1,0,0,0,790,791,1,0,0,0,
        791,795,1,0,0,0,792,793,5,105,0,0,793,794,5,170,0,0,794,796,3,362,
        181,0,795,792,1,0,0,0,795,796,1,0,0,0,796,800,1,0,0,0,797,798,5,
        106,0,0,798,799,5,170,0,0,799,801,3,372,186,0,800,797,1,0,0,0,800,
        801,1,0,0,0,801,802,1,0,0,0,802,804,3,264,132,0,803,805,3,208,104,
        0,804,803,1,0,0,0,804,805,1,0,0,0,805,95,1,0,0,0,806,808,5,20,0,
        0,807,809,3,364,182,0,808,807,1,0,0,0,808,809,1,0,0,0,809,813,1,
        0,0,0,810,811,5,105,0,0,811,812,5,170,0,0,812,814,3,362,181,0,813,
        810,1,0,0,0,813,814,1,0,0,0,814,818,1,0,0,0,815,816,5,106,0,0,816,
        817,5,170,0,0,817,819,3,372,186,0,818,815,1,0,0,0,818,819,1,0,0,
        0,819,820,1,0,0,0,820,822,3,264,132,0,821,823,3,208,104,0,822,821,
        1,0,0,0,822,823,1,0,0,0,823,97,1,0,0,0,824,825,5,27,0,0,825,826,
        3,242,121,0,826,827,3,362,181,0,827,99,1,0,0,0,828,829,5,21,0,0,
        829,830,3,242,121,0,830,831,3,362,181,0,831,101,1,0,0,0,832,836,
        5,22,0,0,833,835,3,104,52,0,834,833,1,0,0,0,835,838,1,0,0,0,836,
        834,1,0,0,0,836,837,1,0,0,0,837,103,1,0,0,0,838,836,1,0,0,0,839,
        840,5,109,0,0,840,841,5,170,0,0,841,851,3,242,121,0,842,843,5,110,
        0,0,843,844,5,170,0,0,844,851,3,242,121,0,845,846,5,111,0,0,846,
        848,5,170,0,0,847,845,1,0,0,0,847,848,1,0,0,0,848,849,1,0,0,0,849,
        851,3,106,53,0,850,839,1,0,0,0,850,842,1,0,0,0,850,847,1,0,0,0,851,
        105,1,0,0,0,852,857,3,108,54,0,853,854,5,169,0,0,854,856,3,108,54,
        0,855,853,1,0,0,0,856,859,1,0,0,0,857,855,1,0,0,0,857,858,1,0,0,
        0,858,107,1,0,0,0,859,857,1,0,0,0,860,862,3,396,198,0,861,863,3,
        110,55,0,862,861,1,0,0,0,862,863,1,0,0,0,863,109,1,0,0,0,864,866,
        5,188,0,0,865,867,5,457,0,0,866,865,1,0,0,0,866,867,1,0,0,0,867,
        868,1,0,0,0,868,869,5,189,0,0,869,111,1,0,0,0,870,871,5,23,0,0,871,
        872,3,114,57,0,872,113,1,0,0,0,873,874,3,388,194,0,874,875,7,4,0,
        0,875,876,3,362,181,0,876,115,1,0,0,0,877,878,5,24,0,0,878,879,3,
        118,59,0,879,117,1,0,0,0,880,881,5,9,0,0,881,882,5,170,0,0,882,886,
        3,388,194,0,883,885,3,120,60,0,884,883,1,0,0,0,885,888,1,0,0,0,886,
        884,1,0,0,0,886,887,1,0,0,0,887,889,1,0,0,0,888,886,1,0,0,0,889,
        893,3,362,181,0,890,892,3,120,60,0,891,890,1,0,0,0,892,895,1,0,0,
        0,893,891,1,0,0,0,893,894,1,0,0,0,894,119,1,0,0,0,895,893,1,0,0,
        0,896,897,5,46,0,0,897,898,5,170,0,0,898,906,3,364,182,0,899,900,
        5,207,0,0,900,901,5,170,0,0,901,906,7,5,0,0,902,903,5,47,0,0,903,
        904,5,170,0,0,904,906,3,388,194,0,905,896,1,0,0,0,905,899,1,0,0,
        0,905,902,1,0,0,0,906,121,1,0,0,0,907,908,7,6,0,0,908,123,1,0,0,
        0,909,910,5,29,0,0,910,912,3,242,121,0,911,913,3,210,105,0,912,911,
        1,0,0,0,912,913,1,0,0,0,913,917,1,0,0,0,914,915,5,44,0,0,915,916,
        5,170,0,0,916,918,3,128,64,0,917,914,1,0,0,0,917,918,1,0,0,0,918,
        922,1,0,0,0,919,920,5,207,0,0,920,921,5,170,0,0,921,923,3,130,65,
        0,922,919,1,0,0,0,922,923,1,0,0,0,923,927,1,0,0,0,924,925,5,45,0,
        0,925,926,5,170,0,0,926,928,3,364,182,0,927,924,1,0,0,0,927,928,
        1,0,0,0,928,932,1,0,0,0,929,930,5,48,0,0,930,931,5,170,0,0,931,933,
        3,364,182,0,932,929,1,0,0,0,932,933,1,0,0,0,933,937,1,0,0,0,934,
        935,5,30,0,0,935,936,5,170,0,0,936,938,3,362,181,0,937,934,1,0,0,
        0,937,938,1,0,0,0,938,942,1,0,0,0,939,941,3,126,63,0,940,939,1,0,
        0,0,941,944,1,0,0,0,942,940,1,0,0,0,942,943,1,0,0,0,943,125,1,0,
        0,0,944,942,1,0,0,0,945,946,5,28,0,0,946,947,5,170,0,0,947,955,3,
        362,181,0,948,949,5,42,0,0,949,950,5,170,0,0,950,955,3,364,182,0,
        951,952,5,43,0,0,952,953,5,170,0,0,953,955,3,366,183,0,954,945,1,
        0,0,0,954,948,1,0,0,0,954,951,1,0,0,0,955,127,1,0,0,0,956,957,7,
        7,0,0,957,129,1,0,0,0,958,959,7,8,0,0,959,131,1,0,0,0,960,961,5,
        157,0,0,961,962,3,260,130,0,962,965,3,134,67,0,963,964,7,9,0,0,964,
        966,3,136,68,0,965,963,1,0,0,0,965,966,1,0,0,0,966,133,1,0,0,0,967,
        972,3,138,69,0,968,969,5,168,0,0,969,971,3,138,69,0,970,968,1,0,
        0,0,971,974,1,0,0,0,972,970,1,0,0,0,972,973,1,0,0,0,973,135,1,0,
        0,0,974,972,1,0,0,0,975,980,3,138,69,0,976,977,5,168,0,0,977,979,
        3,138,69,0,978,976,1,0,0,0,979,982,1,0,0,0,980,978,1,0,0,0,980,981,
        1,0,0,0,981,137,1,0,0,0,982,980,1,0,0,0,983,986,3,270,135,0,984,
        985,5,61,0,0,985,987,3,270,135,0,986,984,1,0,0,0,986,987,1,0,0,0,
        987,139,1,0,0,0,988,989,5,34,0,0,989,993,3,142,71,0,990,991,5,34,
        0,0,991,993,3,144,72,0,992,988,1,0,0,0,992,990,1,0,0,0,993,141,1,
        0,0,0,994,995,5,71,0,0,995,998,3,244,122,0,996,997,5,114,0,0,997,
        999,3,264,132,0,998,996,1,0,0,0,998,999,1,0,0,0,999,143,1,0,0,0,
        1000,1001,5,70,0,0,1001,1006,3,146,73,0,1002,1003,5,168,0,0,1003,
        1005,3,146,73,0,1004,1002,1,0,0,0,1005,1008,1,0,0,0,1006,1004,1,
        0,0,0,1006,1007,1,0,0,0,1007,145,1,0,0,0,1008,1006,1,0,0,0,1009,
        1010,3,270,135,0,1010,1011,5,170,0,0,1011,1012,3,244,122,0,1012,
        147,1,0,0,0,1013,1016,5,36,0,0,1014,1015,5,15,0,0,1015,1017,3,266,
        133,0,1016,1014,1,0,0,0,1016,1017,1,0,0,0,1017,1018,1,0,0,0,1018,
        1022,3,150,75,0,1019,1021,3,150,75,0,1020,1019,1,0,0,0,1021,1024,
        1,0,0,0,1022,1020,1,0,0,0,1022,1023,1,0,0,0,1023,149,1,0,0,0,1024,
        1022,1,0,0,0,1025,1026,3,152,76,0,1026,1027,5,184,0,0,1027,1028,
        3,364,182,0,1028,1029,5,168,0,0,1029,1030,3,270,135,0,1030,1033,
        5,185,0,0,1031,1032,5,61,0,0,1032,1034,3,388,194,0,1033,1031,1,0,
        0,0,1033,1034,1,0,0,0,1034,151,1,0,0,0,1035,1036,7,10,0,0,1036,153,
        1,0,0,0,1037,1038,5,39,0,0,1038,1041,3,270,135,0,1039,1040,5,61,
        0,0,1040,1042,3,388,194,0,1041,1039,1,0,0,0,1041,1042,1,0,0,0,1042,
        155,1,0,0,0,1043,1044,5,35,0,0,1044,1047,3,270,135,0,1045,1046,5,
        61,0,0,1046,1048,3,394,197,0,1047,1045,1,0,0,0,1047,1048,1,0,0,0,
        1048,157,1,0,0,0,1049,1053,5,38,0,0,1050,1051,5,76,0,0,1051,1052,
        5,170,0,0,1052,1054,3,372,186,0,1053,1050,1,0,0,0,1053,1054,1,0,
        0,0,1054,1055,1,0,0,0,1055,1056,5,186,0,0,1056,1061,3,14,7,0,1057,
        1058,5,167,0,0,1058,1060,3,14,7,0,1059,1057,1,0,0,0,1060,1063,1,
        0,0,0,1061,1059,1,0,0,0,1061,1062,1,0,0,0,1062,1064,1,0,0,0,1063,
        1061,1,0,0,0,1064,1065,5,187,0,0,1065,159,1,0,0,0,1066,1067,5,104,
        0,0,1067,1069,5,186,0,0,1068,1070,3,18,9,0,1069,1068,1,0,0,0,1069,
        1070,1,0,0,0,1070,1075,1,0,0,0,1071,1072,5,167,0,0,1072,1074,3,14,
        7,0,1073,1071,1,0,0,0,1074,1077,1,0,0,0,1075,1073,1,0,0,0,1075,1076,
        1,0,0,0,1076,1078,1,0,0,0,1077,1075,1,0,0,0,1078,1079,5,187,0,0,
        1079,161,1,0,0,0,1080,1084,5,31,0,0,1081,1083,3,164,82,0,1082,1081,
        1,0,0,0,1083,1086,1,0,0,0,1084,1082,1,0,0,0,1084,1085,1,0,0,0,1085,
        163,1,0,0,0,1086,1084,1,0,0,0,1087,1088,5,90,0,0,1088,1089,5,170,
        0,0,1089,1097,3,364,182,0,1090,1091,5,91,0,0,1091,1092,5,170,0,0,
        1092,1097,3,364,182,0,1093,1094,5,92,0,0,1094,1095,5,170,0,0,1095,
        1097,3,362,181,0,1096,1087,1,0,0,0,1096,1090,1,0,0,0,1096,1093,1,
        0,0,0,1097,165,1,0,0,0,1098,1102,5,32,0,0,1099,1101,3,168,84,0,1100,
        1099,1,0,0,0,1101,1104,1,0,0,0,1102,1100,1,0,0,0,1102,1103,1,0,0,
        0,1103,167,1,0,0,0,1104,1102,1,0,0,0,1105,1106,5,93,0,0,1106,1107,
        5,170,0,0,1107,1142,3,364,182,0,1108,1109,5,94,0,0,1109,1110,5,170,
        0,0,1110,1142,3,364,182,0,1111,1112,5,95,0,0,1112,1113,5,170,0,0,
        1113,1142,3,364,182,0,1114,1115,5,96,0,0,1115,1116,5,170,0,0,1116,
        1142,3,364,182,0,1117,1118,5,97,0,0,1118,1119,5,170,0,0,1119,1142,
        3,366,183,0,1120,1121,5,98,0,0,1121,1122,5,170,0,0,1122,1142,3,366,
        183,0,1123,1124,5,99,0,0,1124,1125,5,170,0,0,1125,1142,3,362,181,
        0,1126,1127,5,100,0,0,1127,1128,5,170,0,0,1128,1142,3,362,181,0,
        1129,1130,5,297,0,0,1130,1131,5,170,0,0,1131,1142,3,362,181,0,1132,
        1133,5,101,0,0,1133,1134,5,170,0,0,1134,1142,3,362,181,0,1135,1136,
        5,102,0,0,1136,1137,5,170,0,0,1137,1142,3,364,182,0,1138,1139,5,
        103,0,0,1139,1140,5,170,0,0,1140,1142,3,366,183,0,1141,1105,1,0,
        0,0,1141,1108,1,0,0,0,1141,1111,1,0,0,0,1141,1114,1,0,0,0,1141,1117,
        1,0,0,0,1141,1120,1,0,0,0,1141,1123,1,0,0,0,1141,1126,1,0,0,0,1141,
        1129,1,0,0,0,1141,1132,1,0,0,0,1141,1135,1,0,0,0,1141,1138,1,0,0,
        0,1142,169,1,0,0,0,1143,1147,5,33,0,0,1144,1146,3,172,86,0,1145,
        1144,1,0,0,0,1146,1149,1,0,0,0,1147,1145,1,0,0,0,1147,1148,1,0,0,
        0,1148,171,1,0,0,0,1149,1147,1,0,0,0,1150,1151,3,396,198,0,1151,
        1152,5,170,0,0,1152,1153,3,358,179,0,1153,173,1,0,0,0,1154,1155,
        5,63,0,0,1155,1156,5,170,0,0,1156,1173,3,176,88,0,1157,1158,5,64,
        0,0,1158,1159,5,170,0,0,1159,1173,3,176,88,0,1160,1161,5,63,0,0,
        1161,1162,5,170,0,0,1162,1173,3,262,131,0,1163,1164,5,64,0,0,1164,
        1165,5,170,0,0,1165,1173,3,262,131,0,1166,1167,5,63,0,0,1167,1168,
        5,170,0,0,1168,1173,3,180,90,0,1169,1170,5,64,0,0,1170,1171,5,170,
        0,0,1171,1173,3,180,90,0,1172,1154,1,0,0,0,1172,1157,1,0,0,0,1172,
        1160,1,0,0,0,1172,1163,1,0,0,0,1172,1166,1,0,0,0,1172,1169,1,0,0,
        0,1173,175,1,0,0,0,1174,1175,5,186,0,0,1175,1176,3,10,5,0,1176,1179,
        5,187,0,0,1177,1178,5,61,0,0,1178,1180,3,388,194,0,1179,1177,1,0,
        0,0,1179,1180,1,0,0,0,1180,1183,1,0,0,0,1181,1183,3,178,89,0,1182,
        1174,1,0,0,0,1182,1181,1,0,0,0,1183,177,1,0,0,0,1184,1189,3,260,
        130,0,1185,1186,5,168,0,0,1186,1188,3,260,130,0,1187,1185,1,0,0,
        0,1188,1191,1,0,0,0,1189,1187,1,0,0,0,1189,1190,1,0,0,0,1190,1194,
        1,0,0,0,1191,1189,1,0,0,0,1192,1193,5,61,0,0,1193,1195,3,388,194,
        0,1194,1192,1,0,0,0,1194,1195,1,0,0,0,1195,179,1,0,0,0,1196,1197,
        5,186,0,0,1197,1200,3,182,91,0,1198,1199,5,168,0,0,1199,1201,3,186,
        93,0,1200,1198,1,0,0,0,1200,1201,1,0,0,0,1201,1202,1,0,0,0,1202,
        1203,5,187,0,0,1203,181,1,0,0,0,1204,1209,3,184,92,0,1205,1206,5,
        168,0,0,1206,1208,3,184,92,0,1207,1205,1,0,0,0,1208,1211,1,0,0,0,
        1209,1207,1,0,0,0,1209,1210,1,0,0,0,1210,183,1,0,0,0,1211,1209,1,
        0,0,0,1212,1214,5,456,0,0,1213,1212,1,0,0,0,1213,1214,1,0,0,0,1214,
        1215,1,0,0,0,1215,1216,3,392,196,0,1216,185,1,0,0,0,1217,1222,3,
        188,94,0,1218,1219,5,168,0,0,1219,1221,3,188,94,0,1220,1218,1,0,
        0,0,1221,1224,1,0,0,0,1222,1220,1,0,0,0,1222,1223,1,0,0,0,1223,187,
        1,0,0,0,1224,1222,1,0,0,0,1225,1226,3,396,198,0,1226,1227,5,170,
        0,0,1227,1228,3,358,179,0,1228,1234,1,0,0,0,1229,1230,3,396,198,
        0,1230,1231,5,114,0,0,1231,1232,3,386,193,0,1232,1234,1,0,0,0,1233,
        1225,1,0,0,0,1233,1229,1,0,0,0,1234,189,1,0,0,0,1235,1239,5,51,0,
        0,1236,1238,3,204,102,0,1237,1236,1,0,0,0,1238,1241,1,0,0,0,1239,
        1237,1,0,0,0,1239,1240,1,0,0,0,1240,1243,1,0,0,0,1241,1239,1,0,0,
        0,1242,1244,3,264,132,0,1243,1242,1,0,0,0,1243,1244,1,0,0,0,1244,
        1245,1,0,0,0,1245,1264,3,176,88,0,1246,1248,3,192,96,0,1247,1246,
        1,0,0,0,1247,1248,1,0,0,0,1248,1249,1,0,0,0,1249,1253,5,51,0,0,1250,
        1252,3,204,102,0,1251,1250,1,0,0,0,1252,1255,1,0,0,0,1253,1251,1,
        0,0,0,1253,1254,1,0,0,0,1254,1256,1,0,0,0,1255,1253,1,0,0,0,1256,
        1258,3,196,98,0,1257,1259,3,200,100,0,1258,1257,1,0,0,0,1258,1259,
        1,0,0,0,1259,1260,1,0,0,0,1260,1261,3,198,99,0,1261,1262,3,176,88,
        0,1262,1264,1,0,0,0,1263,1235,1,0,0,0,1263,1247,1,0,0,0,1264,191,
        1,0,0,0,1265,1291,5,53,0,0,1266,1291,5,58,0,0,1267,1269,5,352,0,
        0,1268,1270,5,54,0,0,1269,1268,1,0,0,0,1269,1270,1,0,0,0,1270,1273,
        1,0,0,0,1271,1273,5,54,0,0,1272,1267,1,0,0,0,1272,1271,1,0,0,0,1273,
        1291,1,0,0,0,1274,1276,5,351,0,0,1275,1277,5,54,0,0,1276,1275,1,
        0,0,0,1276,1277,1,0,0,0,1277,1291,1,0,0,0,1278,1280,5,55,0,0,1279,
        1281,5,54,0,0,1280,1279,1,0,0,0,1280,1281,1,0,0,0,1281,1291,1,0,
        0,0,1282,1284,5,352,0,0,1283,1282,1,0,0,0,1283,1284,1,0,0,0,1284,
        1285,1,0,0,0,1285,1291,5,56,0,0,1286,1288,5,352,0,0,1287,1286,1,
        0,0,0,1287,1288,1,0,0,0,1288,1289,1,0,0,0,1289,1291,5,57,0,0,1290,
        1265,1,0,0,0,1290,1266,1,0,0,0,1290,1272,1,0,0,0,1290,1274,1,0,0,
        0,1290,1278,1,0,0,0,1290,1283,1,0,0,0,1290,1287,1,0,0,0,1291,193,
        1,0,0,0,1292,1293,7,11,0,0,1293,195,1,0,0,0,1294,1295,5,352,0,0,
        1295,1296,5,170,0,0,1296,1298,3,388,194,0,1297,1294,1,0,0,0,1297,
        1298,1,0,0,0,1298,1300,1,0,0,0,1299,1301,5,168,0,0,1300,1299,1,0,
        0,0,1300,1301,1,0,0,0,1301,1305,1,0,0,0,1302,1303,5,351,0,0,1303,
        1304,5,170,0,0,1304,1306,3,388,194,0,1305,1302,1,0,0,0,1305,1306,
        1,0,0,0,1306,197,1,0,0,0,1307,1308,7,12,0,0,1308,1309,3,240,120,
        0,1309,199,1,0,0,0,1310,1317,3,202,101,0,1311,1313,5,168,0,0,1312,
        1311,1,0,0,0,1312,1313,1,0,0,0,1313,1314,1,0,0,0,1314,1316,3,202,
        101,0,1315,1312,1,0,0,0,1316,1319,1,0,0,0,1317,1315,1,0,0,0,1317,
        1318,1,0,0,0,1318,201,1,0,0,0,1319,1317,1,0,0,0,1320,1321,5,59,0,
        0,1321,1322,5,169,0,0,1322,1323,5,455,0,0,1323,1324,5,170,0,0,1324,
        1331,3,396,198,0,1325,1326,5,60,0,0,1326,1327,5,169,0,0,1327,1328,
        5,455,0,0,1328,1329,5,170,0,0,1329,1331,3,396,198,0,1330,1320,1,
        0,0,0,1330,1325,1,0,0,0,1331,203,1,0,0,0,1332,1333,5,77,0,0,1333,
        1334,5,170,0,0,1334,1342,3,372,186,0,1335,1336,5,425,0,0,1336,1337,
        5,170,0,0,1337,1342,3,194,97,0,1338,1339,5,203,0,0,1339,1340,5,170,
        0,0,1340,1342,3,364,182,0,1341,1332,1,0,0,0,1341,1335,1,0,0,0,1341,
        1338,1,0,0,0,1342,205,1,0,0,0,1343,1344,3,276,138,0,1344,1345,5,
        61,0,0,1345,1346,3,276,138,0,1346,207,1,0,0,0,1347,1348,5,62,0,0,
        1348,1349,3,264,132,0,1349,209,1,0,0,0,1350,1351,5,62,0,0,1351,1365,
        3,264,132,0,1352,1353,5,62,0,0,1353,1365,3,212,106,0,1354,1355,5,
        62,0,0,1355,1356,3,212,106,0,1356,1357,5,168,0,0,1357,1358,3,264,
        132,0,1358,1365,1,0,0,0,1359,1360,5,62,0,0,1360,1361,3,264,132,0,
        1361,1362,5,168,0,0,1362,1363,3,212,106,0,1363,1365,1,0,0,0,1364,
        1350,1,0,0,0,1364,1352,1,0,0,0,1364,1354,1,0,0,0,1364,1359,1,0,0,
        0,1365,211,1,0,0,0,1366,1369,3,214,107,0,1367,1368,5,61,0,0,1368,
        1370,3,388,194,0,1369,1367,1,0,0,0,1369,1370,1,0,0,0,1370,213,1,
        0,0,0,1371,1372,5,427,0,0,1372,1373,5,184,0,0,1373,1374,3,270,135,
        0,1374,1375,5,168,0,0,1375,1377,3,358,179,0,1376,1378,3,384,192,
        0,1377,1376,1,0,0,0,1377,1378,1,0,0,0,1378,1379,1,0,0,0,1379,1380,
        5,185,0,0,1380,215,1,0,0,0,1381,1386,3,266,133,0,1382,1383,5,168,
        0,0,1383,1385,3,266,133,0,1384,1382,1,0,0,0,1385,1388,1,0,0,0,1386,
        1384,1,0,0,0,1386,1387,1,0,0,0,1387,217,1,0,0,0,1388,1386,1,0,0,
        0,1389,1390,3,270,135,0,1390,1391,5,170,0,0,1391,1392,3,240,120,
        0,1392,219,1,0,0,0,1393,1396,3,222,111,0,1394,1395,5,61,0,0,1395,
        1397,3,272,136,0,1396,1394,1,0,0,0,1396,1397,1,0,0,0,1397,221,1,
        0,0,0,1398,1399,3,224,112,0,1399,1400,5,184,0,0,1400,1401,3,286,
        143,0,1401,1402,5,185,0,0,1402,223,1,0,0,0,1403,1406,3,232,116,0,
        1404,1406,3,226,113,0,1405,1403,1,0,0,0,1405,1404,1,0,0,0,1406,225,
        1,0,0,0,1407,1408,7,13,0,0,1408,227,1,0,0,0,1409,1412,3,230,115,
        0,1410,1411,5,61,0,0,1411,1413,3,272,136,0,1412,1410,1,0,0,0,1412,
        1413,1,0,0,0,1413,229,1,0,0,0,1414,1415,7,14,0,0,1415,1416,5,184,
        0,0,1416,1417,3,246,123,0,1417,1418,5,185,0,0,1418,1442,1,0,0,0,
        1419,1422,7,14,0,0,1420,1421,5,184,0,0,1421,1423,5,185,0,0,1422,
        1420,1,0,0,0,1422,1423,1,0,0,0,1423,1442,1,0,0,0,1424,1425,5,454,
        0,0,1425,1426,5,184,0,0,1426,1427,3,244,122,0,1427,1428,5,185,0,
        0,1428,1442,1,0,0,0,1429,1430,7,15,0,0,1430,1431,5,184,0,0,1431,
        1432,3,244,122,0,1432,1433,5,185,0,0,1433,1442,1,0,0,0,1434,1442,
        3,234,117,0,1435,1442,3,236,118,0,1436,1437,3,232,116,0,1437,1438,
        5,184,0,0,1438,1439,3,286,143,0,1439,1440,5,185,0,0,1440,1442,1,
        0,0,0,1441,1414,1,0,0,0,1441,1419,1,0,0,0,1441,1424,1,0,0,0,1441,
        1429,1,0,0,0,1441,1434,1,0,0,0,1441,1435,1,0,0,0,1441,1436,1,0,0,
        0,1442,231,1,0,0,0,1443,1444,7,16,0,0,1444,233,1,0,0,0,1445,1446,
        5,222,0,0,1446,1447,5,184,0,0,1447,1450,3,270,135,0,1448,1449,5,
        168,0,0,1449,1451,3,364,182,0,1450,1448,1,0,0,0,1450,1451,1,0,0,
        0,1451,1452,1,0,0,0,1452,1453,5,185,0,0,1453,235,1,0,0,0,1454,1455,
        7,17,0,0,1455,1456,5,184,0,0,1456,1457,3,244,122,0,1457,1458,5,168,
        0,0,1458,1461,3,238,119,0,1459,1460,5,168,0,0,1460,1462,3,238,119,
        0,1461,1459,1,0,0,0,1461,1462,1,0,0,0,1462,1463,1,0,0,0,1463,1464,
        5,185,0,0,1464,237,1,0,0,0,1465,1470,3,364,182,0,1466,1470,3,366,
        183,0,1467,1470,3,368,184,0,1468,1470,3,370,185,0,1469,1465,1,0,
        0,0,1469,1466,1,0,0,0,1469,1467,1,0,0,0,1469,1468,1,0,0,0,1470,239,
        1,0,0,0,1471,1472,6,120,-1,0,1472,1473,5,117,0,0,1473,1476,3,240,
        120,5,1474,1476,3,242,121,0,1475,1471,1,0,0,0,1475,1474,1,0,0,0,
        1476,1488,1,0,0,0,1477,1478,10,4,0,0,1478,1479,5,119,0,0,1479,1487,
        3,240,120,5,1480,1481,10,3,0,0,1481,1482,5,120,0,0,1482,1487,3,240,
        120,4,1483,1484,10,2,0,0,1484,1485,5,118,0,0,1485,1487,3,240,120,
        3,1486,1477,1,0,0,0,1486,1480,1,0,0,0,1486,1483,1,0,0,0,1487,1490,
        1,0,0,0,1488,1486,1,0,0,0,1488,1489,1,0,0,0,1489,241,1,0,0,0,1490,
        1488,1,0,0,0,1491,1492,6,121,-1,0,1492,1495,3,244,122,0,1493,1495,
        3,254,127,0,1494,1491,1,0,0,0,1494,1493,1,0,0,0,1495,1517,1,0,0,
        0,1496,1497,10,3,0,0,1497,1498,3,352,176,0,1498,1499,3,242,121,4,
        1499,1516,1,0,0,0,1500,1502,10,1,0,0,1501,1503,5,117,0,0,1502,1501,
        1,0,0,0,1502,1503,1,0,0,0,1503,1504,1,0,0,0,1504,1505,5,362,0,0,
        1505,1506,3,242,121,0,1506,1507,5,119,0,0,1507,1508,3,242,121,2,
        1508,1516,1,0,0,0,1509,1511,10,2,0,0,1510,1512,5,117,0,0,1511,1510,
        1,0,0,0,1511,1512,1,0,0,0,1512,1513,1,0,0,0,1513,1514,5,114,0,0,
        1514,1516,3,386,193,0,1515,1496,1,0,0,0,1515,1500,1,0,0,0,1515,1509,
        1,0,0,0,1516,1519,1,0,0,0,1517,1515,1,0,0,0,1517,1518,1,0,0,0,1518,
        243,1,0,0,0,1519,1517,1,0,0,0,1520,1521,6,122,-1,0,1521,1557,3,358,
        179,0,1522,1557,3,248,124,0,1523,1557,3,296,148,0,1524,1525,5,186,
        0,0,1525,1526,3,10,5,0,1526,1527,5,187,0,0,1527,1557,1,0,0,0,1528,
        1529,5,184,0,0,1529,1534,3,244,122,0,1530,1531,5,168,0,0,1531,1533,
        3,244,122,0,1532,1530,1,0,0,0,1533,1536,1,0,0,0,1534,1532,1,0,0,
        0,1534,1535,1,0,0,0,1535,1537,1,0,0,0,1536,1534,1,0,0,0,1537,1539,
        5,185,0,0,1538,1540,5,117,0,0,1539,1538,1,0,0,0,1539,1540,1,0,0,
        0,1540,1541,1,0,0,0,1541,1542,5,114,0,0,1542,1543,5,186,0,0,1543,
        1544,3,10,5,0,1544,1545,5,187,0,0,1545,1557,1,0,0,0,1546,1547,5,
        115,0,0,1547,1548,5,186,0,0,1548,1549,3,10,5,0,1549,1550,5,187,0,
        0,1550,1557,1,0,0,0,1551,1557,3,270,135,0,1552,1553,5,184,0,0,1553,
        1554,3,240,120,0,1554,1555,5,185,0,0,1555,1557,1,0,0,0,1556,1520,
        1,0,0,0,1556,1522,1,0,0,0,1556,1523,1,0,0,0,1556,1524,1,0,0,0,1556,
        1528,1,0,0,0,1556,1546,1,0,0,0,1556,1551,1,0,0,0,1556,1552,1,0,0,
        0,1557,1575,1,0,0,0,1558,1559,10,11,0,0,1559,1560,7,18,0,0,1560,
        1574,3,244,122,12,1561,1562,10,10,0,0,1562,1563,7,2,0,0,1563,1574,
        3,244,122,11,1564,1566,10,5,0,0,1565,1567,5,117,0,0,1566,1565,1,
        0,0,0,1566,1567,1,0,0,0,1567,1568,1,0,0,0,1568,1569,5,114,0,0,1569,
        1570,5,186,0,0,1570,1571,3,10,5,0,1571,1572,5,187,0,0,1572,1574,
        1,0,0,0,1573,1558,1,0,0,0,1573,1561,1,0,0,0,1573,1564,1,0,0,0,1574,
        1577,1,0,0,0,1575,1573,1,0,0,0,1575,1576,1,0,0,0,1576,245,1,0,0,
        0,1577,1575,1,0,0,0,1578,1579,5,16,0,0,1579,1580,5,184,0,0,1580,
        1581,3,240,120,0,1581,1582,5,185,0,0,1582,247,1,0,0,0,1583,1591,
        3,278,139,0,1584,1591,3,280,140,0,1585,1591,3,250,125,0,1586,1591,
        3,252,126,0,1587,1591,3,338,169,0,1588,1591,3,330,165,0,1589,1591,
        3,326,163,0,1590,1583,1,0,0,0,1590,1584,1,0,0,0,1590,1585,1,0,0,
        0,1590,1586,1,0,0,0,1590,1587,1,0,0,0,1590,1588,1,0,0,0,1590,1589,
        1,0,0,0,1591,249,1,0,0,0,1592,1593,3,350,175,0,1593,1594,5,184,0,
        0,1594,1595,3,290,145,0,1595,1596,5,114,0,0,1596,1597,3,290,145,
        0,1597,1598,5,185,0,0,1598,251,1,0,0,0,1599,1600,5,112,0,0,1600,
        1601,5,184,0,0,1601,1602,3,240,120,0,1602,1603,5,168,0,0,1603,1611,
        3,244,122,0,1604,1605,5,168,0,0,1605,1606,3,240,120,0,1606,1607,
        5,168,0,0,1607,1608,3,244,122,0,1608,1610,1,0,0,0,1609,1604,1,0,
        0,0,1610,1613,1,0,0,0,1611,1609,1,0,0,0,1611,1612,1,0,0,0,1612,1616,
        1,0,0,0,1613,1611,1,0,0,0,1614,1615,5,113,0,0,1615,1617,3,244,122,
        0,1616,1614,1,0,0,0,1616,1617,1,0,0,0,1617,1618,1,0,0,0,1618,1619,
        5,185,0,0,1619,253,1,0,0,0,1620,1623,3,256,128,0,1621,1623,3,258,
        129,0,1622,1620,1,0,0,0,1622,1621,1,0,0,0,1623,255,1,0,0,0,1624,
        1625,3,354,177,0,1625,1626,5,184,0,0,1626,1627,3,306,153,0,1627,
        1628,5,168,0,0,1628,1633,3,308,154,0,1629,1630,5,168,0,0,1630,1632,
        3,298,149,0,1631,1629,1,0,0,0,1632,1635,1,0,0,0,1633,1631,1,0,0,
        0,1633,1634,1,0,0,0,1634,1636,1,0,0,0,1635,1633,1,0,0,0,1636,1637,
        5,185,0,0,1637,257,1,0,0,0,1638,1639,3,356,178,0,1639,1652,5,184,
        0,0,1640,1641,5,186,0,0,1641,1646,3,302,151,0,1642,1643,5,168,0,
        0,1643,1645,3,302,151,0,1644,1642,1,0,0,0,1645,1648,1,0,0,0,1646,
        1644,1,0,0,0,1646,1647,1,0,0,0,1647,1649,1,0,0,0,1648,1646,1,0,0,
        0,1649,1650,5,187,0,0,1650,1651,5,168,0,0,1651,1653,1,0,0,0,1652,
        1640,1,0,0,0,1652,1653,1,0,0,0,1653,1654,1,0,0,0,1654,1659,3,308,
        154,0,1655,1656,5,168,0,0,1656,1658,3,298,149,0,1657,1655,1,0,0,
        0,1658,1661,1,0,0,0,1659,1657,1,0,0,0,1659,1660,1,0,0,0,1660,1662,
        1,0,0,0,1661,1659,1,0,0,0,1662,1663,5,185,0,0,1663,259,1,0,0,0,1664,
        1667,3,390,195,0,1665,1667,5,461,0,0,1666,1664,1,0,0,0,1666,1665,
        1,0,0,0,1667,261,1,0,0,0,1668,1669,3,388,194,0,1669,1670,5,184,0,
        0,1670,1671,3,288,144,0,1671,1672,5,185,0,0,1672,263,1,0,0,0,1673,
        1680,3,270,135,0,1674,1676,5,168,0,0,1675,1674,1,0,0,0,1675,1676,
        1,0,0,0,1676,1677,1,0,0,0,1677,1679,3,270,135,0,1678,1675,1,0,0,
        0,1679,1682,1,0,0,0,1680,1678,1,0,0,0,1680,1681,1,0,0,0,1681,265,
        1,0,0,0,1682,1680,1,0,0,0,1683,1685,7,2,0,0,1684,1683,1,0,0,0,1684,
        1685,1,0,0,0,1685,1686,1,0,0,0,1686,1687,3,268,134,0,1687,267,1,
        0,0,0,1688,1710,3,270,135,0,1689,1690,5,78,0,0,1690,1691,5,184,0,
        0,1691,1692,3,270,135,0,1692,1693,5,185,0,0,1693,1710,1,0,0,0,1694,
        1695,5,79,0,0,1695,1696,5,184,0,0,1696,1697,3,270,135,0,1697,1698,
        5,185,0,0,1698,1710,1,0,0,0,1699,1700,5,166,0,0,1700,1701,5,184,
        0,0,1701,1702,3,270,135,0,1702,1703,5,185,0,0,1703,1710,1,0,0,0,
        1704,1705,5,80,0,0,1705,1706,5,184,0,0,1706,1707,3,270,135,0,1707,
        1708,5,185,0,0,1708,1710,1,0,0,0,1709,1688,1,0,0,0,1709,1689,1,0,
        0,0,1709,1694,1,0,0,0,1709,1699,1,0,0,0,1709,1704,1,0,0,0,1710,269,
        1,0,0,0,1711,1712,3,388,194,0,1712,271,1,0,0,0,1713,1714,3,392,196,
        0,1714,273,1,0,0,0,1715,1718,3,392,196,0,1716,1718,5,179,0,0,1717,
        1715,1,0,0,0,1717,1716,1,0,0,0,1718,275,1,0,0,0,1719,1722,3,392,
        196,0,1720,1722,5,179,0,0,1721,1719,1,0,0,0,1721,1720,1,0,0,0,1722,
        277,1,0,0,0,1723,1724,3,284,142,0,1724,1725,5,184,0,0,1725,1726,
        3,286,143,0,1726,1727,5,185,0,0,1727,279,1,0,0,0,1728,1729,5,357,
        0,0,1729,1730,5,184,0,0,1730,1731,3,240,120,0,1731,1732,5,61,0,0,
        1732,1733,3,282,141,0,1733,1734,5,185,0,0,1734,281,1,0,0,0,1735,
        1748,5,294,0,0,1736,1748,5,323,0,0,1737,1748,5,325,0,0,1738,1748,
        5,159,0,0,1739,1748,5,160,0,0,1740,1748,5,161,0,0,1741,1748,5,162,
        0,0,1742,1748,5,163,0,0,1743,1748,5,164,0,0,1744,1748,5,165,0,0,
        1745,1748,5,166,0,0,1746,1748,5,374,0,0,1747,1735,1,0,0,0,1747,1736,
        1,0,0,0,1747,1737,1,0,0,0,1747,1738,1,0,0,0,1747,1739,1,0,0,0,1747,
        1740,1,0,0,0,1747,1741,1,0,0,0,1747,1742,1,0,0,0,1747,1743,1,0,0,
        0,1747,1744,1,0,0,0,1747,1745,1,0,0,0,1747,1746,1,0,0,0,1748,283,
        1,0,0,0,1749,1761,3,312,156,0,1750,1761,3,324,162,0,1751,1761,3,
        348,174,0,1752,1761,3,342,171,0,1753,1761,3,344,172,0,1754,1761,
        3,346,173,0,1755,1761,3,350,175,0,1756,1761,3,322,161,0,1757,1761,
        3,320,160,0,1758,1761,3,314,157,0,1759,1761,3,316,158,0,1760,1749,
        1,0,0,0,1760,1750,1,0,0,0,1760,1751,1,0,0,0,1760,1752,1,0,0,0,1760,
        1753,1,0,0,0,1760,1754,1,0,0,0,1760,1755,1,0,0,0,1760,1756,1,0,0,
        0,1760,1757,1,0,0,0,1760,1758,1,0,0,0,1760,1759,1,0,0,0,1761,285,
        1,0,0,0,1762,1767,3,290,145,0,1763,1764,5,168,0,0,1764,1766,3,290,
        145,0,1765,1763,1,0,0,0,1766,1769,1,0,0,0,1767,1765,1,0,0,0,1767,
        1768,1,0,0,0,1768,1771,1,0,0,0,1769,1767,1,0,0,0,1770,1762,1,0,0,
        0,1770,1771,1,0,0,0,1771,287,1,0,0,0,1772,1777,3,292,146,0,1773,
        1774,5,168,0,0,1774,1776,3,292,146,0,1775,1773,1,0,0,0,1776,1779,
        1,0,0,0,1777,1775,1,0,0,0,1777,1778,1,0,0,0,1778,1781,1,0,0,0,1779,
        1777,1,0,0,0,1780,1772,1,0,0,0,1780,1781,1,0,0,0,1781,289,1,0,0,
        0,1782,1783,3,294,147,0,1783,291,1,0,0,0,1784,1785,3,396,198,0,1785,
        1786,5,170,0,0,1786,1788,1,0,0,0,1787,1784,1,0,0,0,1787,1788,1,0,
        0,0,1788,1789,1,0,0,0,1789,1790,3,294,147,0,1790,293,1,0,0,0,1791,
        1794,3,296,148,0,1792,1794,3,240,120,0,1793,1791,1,0,0,0,1793,1792,
        1,0,0,0,1794,295,1,0,0,0,1795,1796,3,396,198,0,1796,1797,5,193,0,
        0,1797,1798,3,240,120,0,1798,1812,1,0,0,0,1799,1800,5,184,0,0,1800,
        1803,3,396,198,0,1801,1802,5,168,0,0,1802,1804,3,396,198,0,1803,
        1801,1,0,0,0,1804,1805,1,0,0,0,1805,1803,1,0,0,0,1805,1806,1,0,0,
        0,1806,1807,1,0,0,0,1807,1808,5,185,0,0,1808,1809,5,193,0,0,1809,
        1810,3,240,120,0,1810,1812,1,0,0,0,1811,1795,1,0,0,0,1811,1799,1,
        0,0,0,1812,297,1,0,0,0,1813,1814,3,300,150,0,1814,1815,5,170,0,0,
        1815,1816,3,310,155,0,1816,299,1,0,0,0,1817,1818,7,19,0,0,1818,301,
        1,0,0,0,1819,1828,3,306,153,0,1820,1821,3,306,153,0,1821,1822,3,
        304,152,0,1822,1828,1,0,0,0,1823,1824,3,306,153,0,1824,1825,5,196,
        0,0,1825,1826,3,304,152,0,1826,1828,1,0,0,0,1827,1819,1,0,0,0,1827,
        1820,1,0,0,0,1827,1823,1,0,0,0,1828,303,1,0,0,0,1829,1834,3,364,
        182,0,1830,1834,3,366,183,0,1831,1834,3,368,184,0,1832,1834,3,370,
        185,0,1833,1829,1,0,0,0,1833,1830,1,0,0,0,1833,1831,1,0,0,0,1833,
        1832,1,0,0,0,1834,305,1,0,0,0,1835,1838,3,388,194,0,1836,1838,3,
        362,181,0,1837,1835,1,0,0,0,1837,1836,1,0,0,0,1838,307,1,0,0,0,1839,
        1840,3,310,155,0,1840,309,1,0,0,0,1841,1844,3,388,194,0,1842,1844,
        3,358,179,0,1843,1841,1,0,0,0,1843,1842,1,0,0,0,1844,311,1,0,0,0,
        1845,1878,5,246,0,0,1846,1878,5,242,0,0,1847,1878,5,243,0,0,1848,
        1878,5,244,0,0,1849,1878,5,245,0,0,1850,1878,5,247,0,0,1851,1878,
        5,248,0,0,1852,1878,5,249,0,0,1853,1878,5,250,0,0,1854,1878,5,251,
        0,0,1855,1878,5,252,0,0,1856,1878,5,253,0,0,1857,1878,5,254,0,0,
        1858,1878,5,255,0,0,1859,1878,5,256,0,0,1860,1878,5,257,0,0,1861,
        1878,5,258,0,0,1862,1878,5,259,0,0,1863,1878,5,260,0,0,1864,1878,
        5,261,0,0,1865,1878,5,263,0,0,1866,1878,5,264,0,0,1867,1878,5,265,
        0,0,1868,1878,5,266,0,0,1869,1878,5,267,0,0,1870,1878,5,268,0,0,
        1871,1878,5,269,0,0,1872,1878,5,270,0,0,1873,1878,5,271,0,0,1874,
        1878,5,211,0,0,1875,1878,5,197,0,0,1876,1878,3,318,159,0,1877,1845,
        1,0,0,0,1877,1846,1,0,0,0,1877,1847,1,0,0,0,1877,1848,1,0,0,0,1877,
        1849,1,0,0,0,1877,1850,1,0,0,0,1877,1851,1,0,0,0,1877,1852,1,0,0,
        0,1877,1853,1,0,0,0,1877,1854,1,0,0,0,1877,1855,1,0,0,0,1877,1856,
        1,0,0,0,1877,1857,1,0,0,0,1877,1858,1,0,0,0,1877,1859,1,0,0,0,1877,
        1860,1,0,0,0,1877,1861,1,0,0,0,1877,1862,1,0,0,0,1877,1863,1,0,0,
        0,1877,1864,1,0,0,0,1877,1865,1,0,0,0,1877,1866,1,0,0,0,1877,1867,
        1,0,0,0,1877,1868,1,0,0,0,1877,1869,1,0,0,0,1877,1870,1,0,0,0,1877,
        1871,1,0,0,0,1877,1872,1,0,0,0,1877,1873,1,0,0,0,1877,1874,1,0,0,
        0,1877,1875,1,0,0,0,1877,1876,1,0,0,0,1878,313,1,0,0,0,1879,1880,
        5,116,0,0,1880,315,1,0,0,0,1881,1882,7,20,0,0,1882,317,1,0,0,0,1883,
        1884,7,21,0,0,1884,319,1,0,0,0,1885,1886,7,22,0,0,1886,321,1,0,0,
        0,1887,1888,7,23,0,0,1888,323,1,0,0,0,1889,1890,7,24,0,0,1890,325,
        1,0,0,0,1891,1892,5,308,0,0,1892,1893,5,184,0,0,1893,1894,3,328,
        164,0,1894,1895,5,168,0,0,1895,1896,3,290,145,0,1896,1897,5,185,
        0,0,1897,327,1,0,0,0,1898,1899,7,25,0,0,1899,329,1,0,0,0,1900,1901,
        5,305,0,0,1901,1902,5,184,0,0,1902,1903,3,336,168,0,1903,1904,5,
        6,0,0,1904,1905,3,290,145,0,1905,1906,5,185,0,0,1906,331,1,0,0,0,
        1907,1908,7,26,0,0,1908,333,1,0,0,0,1909,1910,7,27,0,0,1910,335,
        1,0,0,0,1911,1914,3,332,166,0,1912,1914,3,334,167,0,1913,1911,1,
        0,0,0,1913,1912,1,0,0,0,1914,337,1,0,0,0,1915,1916,3,340,170,0,1916,
        1917,5,184,0,0,1917,1918,3,332,166,0,1918,1919,5,168,0,0,1919,1920,
        3,290,145,0,1920,1921,5,168,0,0,1921,1922,3,290,145,0,1922,1923,
        5,185,0,0,1923,339,1,0,0,0,1924,1925,7,28,0,0,1925,341,1,0,0,0,1926,
        1927,7,29,0,0,1927,343,1,0,0,0,1928,1929,7,30,0,0,1929,345,1,0,0,
        0,1930,1931,5,387,0,0,1931,347,1,0,0,0,1932,1933,7,31,0,0,1933,349,
        1,0,0,0,1934,1935,5,262,0,0,1935,351,1,0,0,0,1936,1937,7,32,0,0,
        1937,353,1,0,0,0,1938,1939,7,33,0,0,1939,355,1,0,0,0,1940,1941,7,
        34,0,0,1941,357,1,0,0,0,1942,1951,3,360,180,0,1943,1951,3,362,181,
        0,1944,1951,3,364,182,0,1945,1951,3,366,183,0,1946,1951,3,368,184,
        0,1947,1951,3,370,185,0,1948,1951,3,372,186,0,1949,1951,3,374,187,
        0,1950,1942,1,0,0,0,1950,1943,1,0,0,0,1950,1944,1,0,0,0,1950,1945,
        1,0,0,0,1950,1946,1,0,0,0,1950,1947,1,0,0,0,1950,1948,1,0,0,0,1950,
        1949,1,0,0,0,1951,359,1,0,0,0,1952,1953,5,138,0,0,1953,1954,3,244,
        122,0,1954,1955,3,382,191,0,1955,361,1,0,0,0,1956,1957,7,35,0,0,
        1957,363,1,0,0,0,1958,1960,7,2,0,0,1959,1958,1,0,0,0,1959,1960,1,
        0,0,0,1960,1961,1,0,0,0,1961,1962,5,457,0,0,1962,365,1,0,0,0,1963,
        1965,7,2,0,0,1964,1963,1,0,0,0,1964,1965,1,0,0,0,1965,1966,1,0,0,
        0,1966,1967,5,458,0,0,1967,367,1,0,0,0,1968,1970,7,2,0,0,1969,1968,
        1,0,0,0,1969,1970,1,0,0,0,1970,1971,1,0,0,0,1971,1972,5,460,0,0,
        1972,369,1,0,0,0,1973,1975,7,2,0,0,1974,1973,1,0,0,0,1974,1975,1,
        0,0,0,1975,1976,1,0,0,0,1976,1977,5,459,0,0,1977,371,1,0,0,0,1978,
        1979,7,36,0,0,1979,373,1,0,0,0,1980,1984,3,376,188,0,1981,1984,3,
        378,189,0,1982,1984,3,380,190,0,1983,1980,1,0,0,0,1983,1981,1,0,
        0,0,1983,1982,1,0,0,0,1984,375,1,0,0,0,1985,1986,5,294,0,0,1986,
        1987,3,362,181,0,1987,377,1,0,0,0,1988,1989,5,323,0,0,1989,1990,
        3,362,181,0,1990,379,1,0,0,0,1991,1992,5,325,0,0,1992,1993,3,362,
        181,0,1993,381,1,0,0,0,1994,1995,7,37,0,0,1995,383,1,0,0,0,1996,
        1997,7,38,0,0,1997,385,1,0,0,0,1998,1999,5,184,0,0,1999,2004,3,358,
        179,0,2000,2001,5,168,0,0,2001,2003,3,358,179,0,2002,2000,1,0,0,
        0,2003,2006,1,0,0,0,2004,2002,1,0,0,0,2004,2005,1,0,0,0,2005,2007,
        1,0,0,0,2006,2004,1,0,0,0,2007,2008,5,185,0,0,2008,387,1,0,0,0,2009,
        2014,3,396,198,0,2010,2011,5,169,0,0,2011,2013,3,396,198,0,2012,
        2010,1,0,0,0,2013,2016,1,0,0,0,2014,2012,1,0,0,0,2014,2015,1,0,0,
        0,2015,389,1,0,0,0,2016,2014,1,0,0,0,2017,2022,3,398,199,0,2018,
        2019,5,169,0,0,2019,2021,3,396,198,0,2020,2018,1,0,0,0,2021,2024,
        1,0,0,0,2022,2020,1,0,0,0,2022,2023,1,0,0,0,2023,391,1,0,0,0,2024,
        2022,1,0,0,0,2025,2030,3,400,200,0,2026,2027,5,169,0,0,2027,2029,
        3,400,200,0,2028,2026,1,0,0,0,2029,2032,1,0,0,0,2030,2028,1,0,0,
        0,2030,2031,1,0,0,0,2031,393,1,0,0,0,2032,2030,1,0,0,0,2033,2038,
        3,388,194,0,2034,2035,5,168,0,0,2035,2037,3,388,194,0,2036,2034,
        1,0,0,0,2037,2040,1,0,0,0,2038,2036,1,0,0,0,2038,2039,1,0,0,0,2039,
        2053,1,0,0,0,2040,2038,1,0,0,0,2041,2042,5,184,0,0,2042,2047,3,388,
        194,0,2043,2044,5,168,0,0,2044,2046,3,388,194,0,2045,2043,1,0,0,
        0,2046,2049,1,0,0,0,2047,2045,1,0,0,0,2047,2048,1,0,0,0,2048,2050,
        1,0,0,0,2049,2047,1,0,0,0,2050,2051,5,185,0,0,2051,2053,1,0,0,0,
        2052,2033,1,0,0,0,2052,2041,1,0,0,0,2053,395,1,0,0,0,2054,2056,5,
        169,0,0,2055,2054,1,0,0,0,2055,2056,1,0,0,0,2056,2057,1,0,0,0,2057,
        2065,5,455,0,0,2058,2059,5,192,0,0,2059,2060,3,396,198,0,2060,2061,
        5,192,0,0,2061,2065,1,0,0,0,2062,2065,5,464,0,0,2063,2065,3,402,
        201,0,2064,2055,1,0,0,0,2064,2058,1,0,0,0,2064,2062,1,0,0,0,2064,
        2063,1,0,0,0,2065,397,1,0,0,0,2066,2068,5,456,0,0,2067,2066,1,0,
        0,0,2067,2068,1,0,0,0,2068,2069,1,0,0,0,2069,2070,3,396,198,0,2070,
        399,1,0,0,0,2071,2076,3,396,198,0,2072,2073,5,181,0,0,2073,2075,
        3,396,198,0,2074,2072,1,0,0,0,2075,2078,1,0,0,0,2076,2074,1,0,0,
        0,2076,2077,1,0,0,0,2077,2080,1,0,0,0,2078,2076,1,0,0,0,2079,2081,
        5,181,0,0,2080,2079,1,0,0,0,2080,2081,1,0,0,0,2081,2095,1,0,0,0,
        2082,2083,5,190,0,0,2083,2084,3,400,200,0,2084,2085,5,190,0,0,2085,
        2095,1,0,0,0,2086,2087,5,191,0,0,2087,2088,3,400,200,0,2088,2089,
        5,191,0,0,2089,2095,1,0,0,0,2090,2091,5,192,0,0,2091,2092,3,400,
        200,0,2092,2093,5,192,0,0,2093,2095,1,0,0,0,2094,2071,1,0,0,0,2094,
        2082,1,0,0,0,2094,2086,1,0,0,0,2094,2090,1,0,0,0,2095,401,1,0,0,
        0,2096,2099,3,404,202,0,2097,2099,5,114,0,0,2098,2096,1,0,0,0,2098,
        2097,1,0,0,0,2099,403,1,0,0,0,2100,2213,5,67,0,0,2101,2213,3,384,
        192,0,2102,2213,5,427,0,0,2103,2213,3,284,142,0,2104,2213,3,320,
        160,0,2105,2213,3,300,150,0,2106,2213,3,382,191,0,2107,2213,3,152,
        76,0,2108,2213,3,354,177,0,2109,2213,3,356,178,0,2110,2213,3,16,
        8,0,2111,2213,3,316,158,0,2112,2213,5,23,0,0,2113,2213,3,8,4,0,2114,
        2213,5,123,0,0,2115,2213,5,112,0,0,2116,2213,5,113,0,0,2117,2213,
        5,193,0,0,2118,2213,5,362,0,0,2119,2213,5,115,0,0,2120,2213,5,63,
        0,0,2121,2213,5,64,0,0,2122,2213,5,65,0,0,2123,2213,5,66,0,0,2124,
        2213,5,68,0,0,2125,2213,5,69,0,0,2126,2213,5,6,0,0,2127,2213,5,28,
        0,0,2128,2213,5,30,0,0,2129,2213,5,44,0,0,2130,2213,5,42,0,0,2131,
        2213,5,43,0,0,2132,2213,5,45,0,0,2133,2213,5,48,0,0,2134,2213,5,
        71,0,0,2135,2213,5,23,0,0,2136,2213,5,26,0,0,2137,2213,5,70,0,0,
        2138,2213,5,357,0,0,2139,2213,5,308,0,0,2140,2213,5,305,0,0,2141,
        2213,5,138,0,0,2142,2213,5,177,0,0,2143,2213,5,178,0,0,2144,2213,
        5,76,0,0,2145,2213,5,78,0,0,2146,2213,5,79,0,0,2147,2213,5,166,0,
        0,2148,2213,5,80,0,0,2149,2213,5,83,0,0,2150,2213,5,84,0,0,2151,
        2213,5,85,0,0,2152,2213,5,86,0,0,2153,2213,5,87,0,0,2154,2213,5,
        88,0,0,2155,2213,5,89,0,0,2156,2213,5,90,0,0,2157,2213,5,91,0,0,
        2158,2213,5,92,0,0,2159,2213,5,93,0,0,2160,2213,5,94,0,0,2161,2213,
        5,95,0,0,2162,2213,5,96,0,0,2163,2213,5,97,0,0,2164,2213,5,98,0,
        0,2165,2213,5,99,0,0,2166,2213,5,100,0,0,2167,2213,5,101,0,0,2168,
        2213,5,102,0,0,2169,2213,5,103,0,0,2170,2213,5,105,0,0,2171,2213,
        5,106,0,0,2172,2213,5,111,0,0,2173,2213,5,109,0,0,2174,2213,5,110,
        0,0,2175,2213,3,232,116,0,2176,2213,3,224,112,0,2177,2213,5,199,
        0,0,2178,2213,5,200,0,0,2179,2213,5,201,0,0,2180,2213,5,202,0,0,
        2181,2213,5,204,0,0,2182,2213,5,205,0,0,2183,2213,5,207,0,0,2184,
        2213,5,208,0,0,2185,2213,5,209,0,0,2186,2213,5,210,0,0,2187,2213,
        5,212,0,0,2188,2213,5,213,0,0,2189,2213,5,214,0,0,2190,2213,5,222,
        0,0,2191,2213,5,223,0,0,2192,2213,5,224,0,0,2193,2213,5,225,0,0,
        2194,2213,5,226,0,0,2195,2213,5,227,0,0,2196,2213,5,228,0,0,2197,
        2213,5,229,0,0,2198,2213,5,230,0,0,2199,2213,5,231,0,0,2200,2213,
        5,232,0,0,2201,2213,5,54,0,0,2202,2213,5,53,0,0,2203,2213,5,58,0,
        0,2204,2213,5,352,0,0,2205,2213,5,351,0,0,2206,2213,5,55,0,0,2207,
        2213,5,56,0,0,2208,2213,5,57,0,0,2209,2213,5,59,0,0,2210,2213,5,
        60,0,0,2211,2213,5,454,0,0,2212,2100,1,0,0,0,2212,2101,1,0,0,0,2212,
        2102,1,0,0,0,2212,2103,1,0,0,0,2212,2104,1,0,0,0,2212,2105,1,0,0,
        0,2212,2106,1,0,0,0,2212,2107,1,0,0,0,2212,2108,1,0,0,0,2212,2109,
        1,0,0,0,2212,2110,1,0,0,0,2212,2111,1,0,0,0,2212,2112,1,0,0,0,2212,
        2113,1,0,0,0,2212,2114,1,0,0,0,2212,2115,1,0,0,0,2212,2116,1,0,0,
        0,2212,2117,1,0,0,0,2212,2118,1,0,0,0,2212,2119,1,0,0,0,2212,2120,
        1,0,0,0,2212,2121,1,0,0,0,2212,2122,1,0,0,0,2212,2123,1,0,0,0,2212,
        2124,1,0,0,0,2212,2125,1,0,0,0,2212,2126,1,0,0,0,2212,2127,1,0,0,
        0,2212,2128,1,0,0,0,2212,2129,1,0,0,0,2212,2130,1,0,0,0,2212,2131,
        1,0,0,0,2212,2132,1,0,0,0,2212,2133,1,0,0,0,2212,2134,1,0,0,0,2212,
        2135,1,0,0,0,2212,2136,1,0,0,0,2212,2137,1,0,0,0,2212,2138,1,0,0,
        0,2212,2139,1,0,0,0,2212,2140,1,0,0,0,2212,2141,1,0,0,0,2212,2142,
        1,0,0,0,2212,2143,1,0,0,0,2212,2144,1,0,0,0,2212,2145,1,0,0,0,2212,
        2146,1,0,0,0,2212,2147,1,0,0,0,2212,2148,1,0,0,0,2212,2149,1,0,0,
        0,2212,2150,1,0,0,0,2212,2151,1,0,0,0,2212,2152,1,0,0,0,2212,2153,
        1,0,0,0,2212,2154,1,0,0,0,2212,2155,1,0,0,0,2212,2156,1,0,0,0,2212,
        2157,1,0,0,0,2212,2158,1,0,0,0,2212,2159,1,0,0,0,2212,2160,1,0,0,
        0,2212,2161,1,0,0,0,2212,2162,1,0,0,0,2212,2163,1,0,0,0,2212,2164,
        1,0,0,0,2212,2165,1,0,0,0,2212,2166,1,0,0,0,2212,2167,1,0,0,0,2212,
        2168,1,0,0,0,2212,2169,1,0,0,0,2212,2170,1,0,0,0,2212,2171,1,0,0,
        0,2212,2172,1,0,0,0,2212,2173,1,0,0,0,2212,2174,1,0,0,0,2212,2175,
        1,0,0,0,2212,2176,1,0,0,0,2212,2177,1,0,0,0,2212,2178,1,0,0,0,2212,
        2179,1,0,0,0,2212,2180,1,0,0,0,2212,2181,1,0,0,0,2212,2182,1,0,0,
        0,2212,2183,1,0,0,0,2212,2184,1,0,0,0,2212,2185,1,0,0,0,2212,2186,
        1,0,0,0,2212,2187,1,0,0,0,2212,2188,1,0,0,0,2212,2189,1,0,0,0,2212,
        2190,1,0,0,0,2212,2191,1,0,0,0,2212,2192,1,0,0,0,2212,2193,1,0,0,
        0,2212,2194,1,0,0,0,2212,2195,1,0,0,0,2212,2196,1,0,0,0,2212,2197,
        1,0,0,0,2212,2198,1,0,0,0,2212,2199,1,0,0,0,2212,2200,1,0,0,0,2212,
        2201,1,0,0,0,2212,2202,1,0,0,0,2212,2203,1,0,0,0,2212,2204,1,0,0,
        0,2212,2205,1,0,0,0,2212,2206,1,0,0,0,2212,2207,1,0,0,0,2212,2208,
        1,0,0,0,2212,2209,1,0,0,0,2212,2210,1,0,0,0,2212,2211,1,0,0,0,2213,
        405,1,0,0,0,206,407,413,420,425,436,442,476,481,486,490,495,506,
        514,516,522,529,546,555,573,579,584,590,595,605,609,612,618,620,
        649,653,657,663,668,672,676,684,690,696,699,708,710,716,724,729,
        733,740,745,757,768,773,777,784,790,795,800,804,808,813,818,822,
        836,847,850,857,862,866,886,893,905,912,917,922,927,932,937,942,
        954,965,972,980,986,992,998,1006,1016,1022,1033,1041,1047,1053,1061,
        1069,1075,1084,1096,1102,1141,1147,1172,1179,1182,1189,1194,1200,
        1209,1213,1222,1233,1239,1243,1247,1253,1258,1263,1269,1272,1276,
        1280,1283,1287,1290,1297,1300,1305,1312,1317,1330,1341,1364,1369,
        1377,1386,1396,1405,1412,1422,1441,1450,1461,1469,1475,1486,1488,
        1494,1502,1511,1515,1517,1534,1539,1556,1566,1573,1575,1590,1611,
        1616,1622,1633,1646,1652,1659,1666,1675,1680,1684,1709,1717,1721,
        1747,1760,1767,1770,1777,1780,1787,1793,1805,1811,1827,1833,1837,
        1843,1877,1913,1950,1959,1964,1969,1974,1983,2004,2014,2022,2030,
        2038,2047,2052,2055,2064,2067,2076,2080,2094,2098,2212
    ];

    private static __ATN: antlr.ATN;
    public static get _ATN(): antlr.ATN {
        if (!OpenSearchPPLParser.__ATN) {
            OpenSearchPPLParser.__ATN = new antlr.ATNDeserializer().deserialize(OpenSearchPPLParser._serializedATN);
        }

        return OpenSearchPPLParser.__ATN;
    }


    private static readonly vocabulary = new antlr.Vocabulary(OpenSearchPPLParser.literalNames, OpenSearchPPLParser.symbolicNames, []);

    public override get vocabulary(): antlr.Vocabulary {
        return OpenSearchPPLParser.vocabulary;
    }

    private static readonly decisionsToDFA = OpenSearchPPLParser._ATN.decisionToState.map( (ds: antlr.DecisionState, index: number) => new antlr.DFA(ds, index) );
}

export class RootContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public EOF(): antlr.TerminalNode {
        return this.getToken(OpenSearchPPLParser.EOF, 0)!;
    }
    public pplStatement(): PplStatementContext | null {
        return this.getRuleContext(0, PplStatementContext);
    }
    public override get ruleIndex(): number {
        return OpenSearchPPLParser.RULE_root;
    }
    public override accept<Result>(visitor: OpenSearchPPLParserVisitor<Result>): Result | null {
        if (visitor.visitRoot) {
            return visitor.visitRoot(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class PplStatementContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public explainStatement(): ExplainStatementContext | null {
        return this.getRuleContext(0, ExplainStatementContext);
    }
    public queryStatement(): QueryStatementContext | null {
        return this.getRuleContext(0, QueryStatementContext);
    }
    public override get ruleIndex(): number {
        return OpenSearchPPLParser.RULE_pplStatement;
    }
    public override accept<Result>(visitor: OpenSearchPPLParserVisitor<Result>): Result | null {
        if (visitor.visitPplStatement) {
            return visitor.visitPplStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class QueryStatementContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public pplCommands(): PplCommandsContext {
        return this.getRuleContext(0, PplCommandsContext)!;
    }
    public PIPE(): antlr.TerminalNode[];
    public PIPE(i: number): antlr.TerminalNode | null;
    public PIPE(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(OpenSearchPPLParser.PIPE);
    	} else {
    		return this.getToken(OpenSearchPPLParser.PIPE, i);
    	}
    }
    public commands(): CommandsContext[];
    public commands(i: number): CommandsContext | null;
    public commands(i?: number): CommandsContext[] | CommandsContext | null {
        if (i === undefined) {
            return this.getRuleContexts(CommandsContext);
        }

        return this.getRuleContext(i, CommandsContext);
    }
    public override get ruleIndex(): number {
        return OpenSearchPPLParser.RULE_queryStatement;
    }
    public override accept<Result>(visitor: OpenSearchPPLParserVisitor<Result>): Result | null {
        if (visitor.visitQueryStatement) {
            return visitor.visitQueryStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ExplainStatementContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public EXPLAIN(): antlr.TerminalNode {
        return this.getToken(OpenSearchPPLParser.EXPLAIN, 0)!;
    }
    public queryStatement(): QueryStatementContext {
        return this.getRuleContext(0, QueryStatementContext)!;
    }
    public explainMode(): ExplainModeContext | null {
        return this.getRuleContext(0, ExplainModeContext);
    }
    public override get ruleIndex(): number {
        return OpenSearchPPLParser.RULE_explainStatement;
    }
    public override accept<Result>(visitor: OpenSearchPPLParserVisitor<Result>): Result | null {
        if (visitor.visitExplainStatement) {
            return visitor.visitExplainStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ExplainModeContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public SIMPLE(): antlr.TerminalNode | null {
        return this.getToken(OpenSearchPPLParser.SIMPLE, 0);
    }
    public STANDARD(): antlr.TerminalNode | null {
        return this.getToken(OpenSearchPPLParser.STANDARD, 0);
    }
    public COST(): antlr.TerminalNode | null {
        return this.getToken(OpenSearchPPLParser.COST, 0);
    }
    public EXTENDED(): antlr.TerminalNode | null {
        return this.getToken(OpenSearchPPLParser.EXTENDED, 0);
    }
    public override get ruleIndex(): number {
        return OpenSearchPPLParser.RULE_explainMode;
    }
    public override accept<Result>(visitor: OpenSearchPPLParserVisitor<Result>): Result | null {
        if (visitor.visitExplainMode) {
            return visitor.visitExplainMode(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class SubSearchContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public searchCommand(): SearchCommandContext {
        return this.getRuleContext(0, SearchCommandContext)!;
    }
    public PIPE(): antlr.TerminalNode[];
    public PIPE(i: number): antlr.TerminalNode | null;
    public PIPE(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(OpenSearchPPLParser.PIPE);
    	} else {
    		return this.getToken(OpenSearchPPLParser.PIPE, i);
    	}
    }
    public commands(): CommandsContext[];
    public commands(i: number): CommandsContext | null;
    public commands(i?: number): CommandsContext[] | CommandsContext | null {
        if (i === undefined) {
            return this.getRuleContexts(CommandsContext);
        }

        return this.getRuleContext(i, CommandsContext);
    }
    public override get ruleIndex(): number {
        return OpenSearchPPLParser.RULE_subSearch;
    }
    public override accept<Result>(visitor: OpenSearchPPLParserVisitor<Result>): Result | null {
        if (visitor.visitSubSearch) {
            return visitor.visitSubSearch(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class PplCommandsContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public describeCommand(): DescribeCommandContext | null {
        return this.getRuleContext(0, DescribeCommandContext);
    }
    public showDataSourcesCommand(): ShowDataSourcesCommandContext | null {
        return this.getRuleContext(0, ShowDataSourcesCommandContext);
    }
    public searchCommand(): SearchCommandContext | null {
        return this.getRuleContext(0, SearchCommandContext);
    }
    public override get ruleIndex(): number {
        return OpenSearchPPLParser.RULE_pplCommands;
    }
    public override accept<Result>(visitor: OpenSearchPPLParserVisitor<Result>): Result | null {
        if (visitor.visitPplCommands) {
            return visitor.visitPplCommands(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class CommandsContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public whereCommand(): WhereCommandContext | null {
        return this.getRuleContext(0, WhereCommandContext);
    }
    public fieldsCommand(): FieldsCommandContext | null {
        return this.getRuleContext(0, FieldsCommandContext);
    }
    public tableCommand(): TableCommandContext | null {
        return this.getRuleContext(0, TableCommandContext);
    }
    public joinCommand(): JoinCommandContext | null {
        return this.getRuleContext(0, JoinCommandContext);
    }
    public renameCommand(): RenameCommandContext | null {
        return this.getRuleContext(0, RenameCommandContext);
    }
    public statsCommand(): StatsCommandContext | null {
        return this.getRuleContext(0, StatsCommandContext);
    }
    public eventstatsCommand(): EventstatsCommandContext | null {
        return this.getRuleContext(0, EventstatsCommandContext);
    }
    public dedupCommand(): DedupCommandContext | null {
        return this.getRuleContext(0, DedupCommandContext);
    }
    public sortCommand(): SortCommandContext | null {
        return this.getRuleContext(0, SortCommandContext);
    }
    public evalCommand(): EvalCommandContext | null {
        return this.getRuleContext(0, EvalCommandContext);
    }
    public headCommand(): HeadCommandContext | null {
        return this.getRuleContext(0, HeadCommandContext);
    }
    public binCommand(): BinCommandContext | null {
        return this.getRuleContext(0, BinCommandContext);
    }
    public topCommand(): TopCommandContext | null {
        return this.getRuleContext(0, TopCommandContext);
    }
    public rareCommand(): RareCommandContext | null {
        return this.getRuleContext(0, RareCommandContext);
    }
    public grokCommand(): GrokCommandContext | null {
        return this.getRuleContext(0, GrokCommandContext);
    }
    public parseCommand(): ParseCommandContext | null {
        return this.getRuleContext(0, ParseCommandContext);
    }
    public spathCommand(): SpathCommandContext | null {
        return this.getRuleContext(0, SpathCommandContext);
    }
    public patternsCommand(): PatternsCommandContext | null {
        return this.getRuleContext(0, PatternsCommandContext);
    }
    public lookupCommand(): LookupCommandContext | null {
        return this.getRuleContext(0, LookupCommandContext);
    }
    public kmeansCommand(): KmeansCommandContext | null {
        return this.getRuleContext(0, KmeansCommandContext);
    }
    public adCommand(): AdCommandContext | null {
        return this.getRuleContext(0, AdCommandContext);
    }
    public mlCommand(): MlCommandContext | null {
        return this.getRuleContext(0, MlCommandContext);
    }
    public fillnullCommand(): FillnullCommandContext | null {
        return this.getRuleContext(0, FillnullCommandContext);
    }
    public trendlineCommand(): TrendlineCommandContext | null {
        return this.getRuleContext(0, TrendlineCommandContext);
    }
    public appendcolCommand(): AppendcolCommandContext | null {
        return this.getRuleContext(0, AppendcolCommandContext);
    }
    public appendCommand(): AppendCommandContext | null {
        return this.getRuleContext(0, AppendCommandContext);
    }
    public expandCommand(): ExpandCommandContext | null {
        return this.getRuleContext(0, ExpandCommandContext);
    }
    public flattenCommand(): FlattenCommandContext | null {
        return this.getRuleContext(0, FlattenCommandContext);
    }
    public reverseCommand(): ReverseCommandContext | null {
        return this.getRuleContext(0, ReverseCommandContext);
    }
    public regexCommand(): RegexCommandContext | null {
        return this.getRuleContext(0, RegexCommandContext);
    }
    public timechartCommand(): TimechartCommandContext | null {
        return this.getRuleContext(0, TimechartCommandContext);
    }
    public rexCommand(): RexCommandContext | null {
        return this.getRuleContext(0, RexCommandContext);
    }
    public override get ruleIndex(): number {
        return OpenSearchPPLParser.RULE_commands;
    }
    public override accept<Result>(visitor: OpenSearchPPLParserVisitor<Result>): Result | null {
        if (visitor.visitCommands) {
            return visitor.visitCommands(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class CommandNameContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public SEARCH(): antlr.TerminalNode | null {
        return this.getToken(OpenSearchPPLParser.SEARCH, 0);
    }
    public DESCRIBE(): antlr.TerminalNode | null {
        return this.getToken(OpenSearchPPLParser.DESCRIBE, 0);
    }
    public SHOW(): antlr.TerminalNode | null {
        return this.getToken(OpenSearchPPLParser.SHOW, 0);
    }
    public WHERE(): antlr.TerminalNode | null {
        return this.getToken(OpenSearchPPLParser.WHERE, 0);
    }
    public FIELDS(): antlr.TerminalNode | null {
        return this.getToken(OpenSearchPPLParser.FIELDS, 0);
    }
    public TABLE(): antlr.TerminalNode | null {
        return this.getToken(OpenSearchPPLParser.TABLE, 0);
    }
    public JOIN(): antlr.TerminalNode | null {
        return this.getToken(OpenSearchPPLParser.JOIN, 0);
    }
    public RENAME(): antlr.TerminalNode | null {
        return this.getToken(OpenSearchPPLParser.RENAME, 0);
    }
    public STATS(): antlr.TerminalNode | null {
        return this.getToken(OpenSearchPPLParser.STATS, 0);
    }
    public EVENTSTATS(): antlr.TerminalNode | null {
        return this.getToken(OpenSearchPPLParser.EVENTSTATS, 0);
    }
    public DEDUP(): antlr.TerminalNode | null {
        return this.getToken(OpenSearchPPLParser.DEDUP, 0);
    }
    public SORT(): antlr.TerminalNode | null {
        return this.getToken(OpenSearchPPLParser.SORT, 0);
    }
    public EVAL(): antlr.TerminalNode | null {
        return this.getToken(OpenSearchPPLParser.EVAL, 0);
    }
    public HEAD(): antlr.TerminalNode | null {
        return this.getToken(OpenSearchPPLParser.HEAD, 0);
    }
    public BIN(): antlr.TerminalNode | null {
        return this.getToken(OpenSearchPPLParser.BIN, 0);
    }
    public TOP(): antlr.TerminalNode | null {
        return this.getToken(OpenSearchPPLParser.TOP, 0);
    }
    public RARE(): antlr.TerminalNode | null {
        return this.getToken(OpenSearchPPLParser.RARE, 0);
    }
    public GROK(): antlr.TerminalNode | null {
        return this.getToken(OpenSearchPPLParser.GROK, 0);
    }
    public PARSE(): antlr.TerminalNode | null {
        return this.getToken(OpenSearchPPLParser.PARSE, 0);
    }
    public PATTERNS(): antlr.TerminalNode | null {
        return this.getToken(OpenSearchPPLParser.PATTERNS, 0);
    }
    public LOOKUP(): antlr.TerminalNode | null {
        return this.getToken(OpenSearchPPLParser.LOOKUP, 0);
    }
    public KMEANS(): antlr.TerminalNode | null {
        return this.getToken(OpenSearchPPLParser.KMEANS, 0);
    }
    public AD(): antlr.TerminalNode | null {
        return this.getToken(OpenSearchPPLParser.AD, 0);
    }
    public ML(): antlr.TerminalNode | null {
        return this.getToken(OpenSearchPPLParser.ML, 0);
    }
    public FILLNULL(): antlr.TerminalNode | null {
        return this.getToken(OpenSearchPPLParser.FILLNULL, 0);
    }
    public EXPAND(): antlr.TerminalNode | null {
        return this.getToken(OpenSearchPPLParser.EXPAND, 0);
    }
    public FLATTEN(): antlr.TerminalNode | null {
        return this.getToken(OpenSearchPPLParser.FLATTEN, 0);
    }
    public TRENDLINE(): antlr.TerminalNode | null {
        return this.getToken(OpenSearchPPLParser.TRENDLINE, 0);
    }
    public TIMECHART(): antlr.TerminalNode | null {
        return this.getToken(OpenSearchPPLParser.TIMECHART, 0);
    }
    public EXPLAIN(): antlr.TerminalNode | null {
        return this.getToken(OpenSearchPPLParser.EXPLAIN, 0);
    }
    public REVERSE(): antlr.TerminalNode | null {
        return this.getToken(OpenSearchPPLParser.REVERSE, 0);
    }
    public REGEX(): antlr.TerminalNode | null {
        return this.getToken(OpenSearchPPLParser.REGEX, 0);
    }
    public APPEND(): antlr.TerminalNode | null {
        return this.getToken(OpenSearchPPLParser.APPEND, 0);
    }
    public REX(): antlr.TerminalNode | null {
        return this.getToken(OpenSearchPPLParser.REX, 0);
    }
    public override get ruleIndex(): number {
        return OpenSearchPPLParser.RULE_commandName;
    }
    public override accept<Result>(visitor: OpenSearchPPLParserVisitor<Result>): Result | null {
        if (visitor.visitCommandName) {
            return visitor.visitCommandName(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class SearchCommandContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public override get ruleIndex(): number {
        return OpenSearchPPLParser.RULE_searchCommand;
    }
    public override copyFrom(ctx: SearchCommandContext): void {
        super.copyFrom(ctx);
    }
}
export class SearchFromContext extends SearchCommandContext {
    public constructor(ctx: SearchCommandContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public SEARCH(): antlr.TerminalNode | null {
        return this.getToken(OpenSearchPPLParser.SEARCH, 0);
    }
    public searchExpression(): SearchExpressionContext[];
    public searchExpression(i: number): SearchExpressionContext | null;
    public searchExpression(i?: number): SearchExpressionContext[] | SearchExpressionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(SearchExpressionContext);
        }

        return this.getRuleContext(i, SearchExpressionContext);
    }
    public fromClause(): FromClauseContext | null {
        return this.getRuleContext(0, FromClauseContext);
    }
    public override accept<Result>(visitor: OpenSearchPPLParserVisitor<Result>): Result | null {
        if (visitor.visitSearchFrom) {
            return visitor.visitSearchFrom(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class SearchExpressionContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public override get ruleIndex(): number {
        return OpenSearchPPLParser.RULE_searchExpression;
    }
    public override copyFrom(ctx: SearchExpressionContext): void {
        super.copyFrom(ctx);
    }
}
export class OrExpressionContext extends SearchExpressionContext {
    public constructor(ctx: SearchExpressionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public searchExpression(): SearchExpressionContext[];
    public searchExpression(i: number): SearchExpressionContext | null;
    public searchExpression(i?: number): SearchExpressionContext[] | SearchExpressionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(SearchExpressionContext);
        }

        return this.getRuleContext(i, SearchExpressionContext);
    }
    public OR(): antlr.TerminalNode {
        return this.getToken(OpenSearchPPLParser.OR, 0)!;
    }
    public override accept<Result>(visitor: OpenSearchPPLParserVisitor<Result>): Result | null {
        if (visitor.visitOrExpression) {
            return visitor.visitOrExpression(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class AndExpressionContext extends SearchExpressionContext {
    public constructor(ctx: SearchExpressionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public searchExpression(): SearchExpressionContext[];
    public searchExpression(i: number): SearchExpressionContext | null;
    public searchExpression(i?: number): SearchExpressionContext[] | SearchExpressionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(SearchExpressionContext);
        }

        return this.getRuleContext(i, SearchExpressionContext);
    }
    public AND(): antlr.TerminalNode {
        return this.getToken(OpenSearchPPLParser.AND, 0)!;
    }
    public override accept<Result>(visitor: OpenSearchPPLParserVisitor<Result>): Result | null {
        if (visitor.visitAndExpression) {
            return visitor.visitAndExpression(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class NotExpressionContext extends SearchExpressionContext {
    public constructor(ctx: SearchExpressionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public NOT(): antlr.TerminalNode {
        return this.getToken(OpenSearchPPLParser.NOT, 0)!;
    }
    public searchExpression(): SearchExpressionContext {
        return this.getRuleContext(0, SearchExpressionContext)!;
    }
    public override accept<Result>(visitor: OpenSearchPPLParserVisitor<Result>): Result | null {
        if (visitor.visitNotExpression) {
            return visitor.visitNotExpression(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class TermExpressionContext extends SearchExpressionContext {
    public constructor(ctx: SearchExpressionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public searchTerm(): SearchTermContext {
        return this.getRuleContext(0, SearchTermContext)!;
    }
    public override accept<Result>(visitor: OpenSearchPPLParserVisitor<Result>): Result | null {
        if (visitor.visitTermExpression) {
            return visitor.visitTermExpression(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class GroupedExpressionContext extends SearchExpressionContext {
    public constructor(ctx: SearchExpressionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public LT_PRTHS(): antlr.TerminalNode {
        return this.getToken(OpenSearchPPLParser.LT_PRTHS, 0)!;
    }
    public searchExpression(): SearchExpressionContext {
        return this.getRuleContext(0, SearchExpressionContext)!;
    }
    public RT_PRTHS(): antlr.TerminalNode {
        return this.getToken(OpenSearchPPLParser.RT_PRTHS, 0)!;
    }
    public override accept<Result>(visitor: OpenSearchPPLParserVisitor<Result>): Result | null {
        if (visitor.visitGroupedExpression) {
            return visitor.visitGroupedExpression(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class SearchTermContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public override get ruleIndex(): number {
        return OpenSearchPPLParser.RULE_searchTerm;
    }
    public override copyFrom(ctx: SearchTermContext): void {
        super.copyFrom(ctx);
    }
}
export class SearchComparisonTermContext extends SearchTermContext {
    public constructor(ctx: SearchTermContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public searchFieldComparison(): SearchFieldComparisonContext {
        return this.getRuleContext(0, SearchFieldComparisonContext)!;
    }
    public override accept<Result>(visitor: OpenSearchPPLParserVisitor<Result>): Result | null {
        if (visitor.visitSearchComparisonTerm) {
            return visitor.visitSearchComparisonTerm(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class SearchInListTermContext extends SearchTermContext {
    public constructor(ctx: SearchTermContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public searchFieldInList(): SearchFieldInListContext {
        return this.getRuleContext(0, SearchFieldInListContext)!;
    }
    public override accept<Result>(visitor: OpenSearchPPLParserVisitor<Result>): Result | null {
        if (visitor.visitSearchInListTerm) {
            return visitor.visitSearchInListTerm(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class SearchLiteralTermContext extends SearchTermContext {
    public constructor(ctx: SearchTermContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public searchLiteral(): SearchLiteralContext {
        return this.getRuleContext(0, SearchLiteralContext)!;
    }
    public override accept<Result>(visitor: OpenSearchPPLParserVisitor<Result>): Result | null {
        if (visitor.visitSearchLiteralTerm) {
            return visitor.visitSearchLiteralTerm(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class SearchLiteralContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public numericLiteral(): NumericLiteralContext | null {
        return this.getRuleContext(0, NumericLiteralContext);
    }
    public booleanLiteral(): BooleanLiteralContext | null {
        return this.getRuleContext(0, BooleanLiteralContext);
    }
    public ID(): antlr.TerminalNode | null {
        return this.getToken(OpenSearchPPLParser.ID, 0);
    }
    public stringLiteral(): StringLiteralContext | null {
        return this.getRuleContext(0, StringLiteralContext);
    }
    public searchableKeyWord(): SearchableKeyWordContext | null {
        return this.getRuleContext(0, SearchableKeyWordContext);
    }
    public override get ruleIndex(): number {
        return OpenSearchPPLParser.RULE_searchLiteral;
    }
    public override accept<Result>(visitor: OpenSearchPPLParserVisitor<Result>): Result | null {
        if (visitor.visitSearchLiteral) {
            return visitor.visitSearchLiteral(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class SearchFieldComparisonContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public override get ruleIndex(): number {
        return OpenSearchPPLParser.RULE_searchFieldComparison;
    }
    public override copyFrom(ctx: SearchFieldComparisonContext): void {
        super.copyFrom(ctx);
    }
}
export class SearchFieldCompareContext extends SearchFieldComparisonContext {
    public constructor(ctx: SearchFieldComparisonContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public fieldExpression(): FieldExpressionContext {
        return this.getRuleContext(0, FieldExpressionContext)!;
    }
    public searchComparisonOperator(): SearchComparisonOperatorContext {
        return this.getRuleContext(0, SearchComparisonOperatorContext)!;
    }
    public searchLiteral(): SearchLiteralContext {
        return this.getRuleContext(0, SearchLiteralContext)!;
    }
    public override accept<Result>(visitor: OpenSearchPPLParserVisitor<Result>): Result | null {
        if (visitor.visitSearchFieldCompare) {
            return visitor.visitSearchFieldCompare(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class SearchFieldInListContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public override get ruleIndex(): number {
        return OpenSearchPPLParser.RULE_searchFieldInList;
    }
    public override copyFrom(ctx: SearchFieldInListContext): void {
        super.copyFrom(ctx);
    }
}
export class SearchFieldInValuesContext extends SearchFieldInListContext {
    public constructor(ctx: SearchFieldInListContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public fieldExpression(): FieldExpressionContext {
        return this.getRuleContext(0, FieldExpressionContext)!;
    }
    public IN(): antlr.TerminalNode {
        return this.getToken(OpenSearchPPLParser.IN, 0)!;
    }
    public LT_PRTHS(): antlr.TerminalNode {
        return this.getToken(OpenSearchPPLParser.LT_PRTHS, 0)!;
    }
    public searchLiteralList(): SearchLiteralListContext {
        return this.getRuleContext(0, SearchLiteralListContext)!;
    }
    public RT_PRTHS(): antlr.TerminalNode {
        return this.getToken(OpenSearchPPLParser.RT_PRTHS, 0)!;
    }
    public override accept<Result>(visitor: OpenSearchPPLParserVisitor<Result>): Result | null {
        if (visitor.visitSearchFieldInValues) {
            return visitor.visitSearchFieldInValues(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class SearchLiteralListContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public override get ruleIndex(): number {
        return OpenSearchPPLParser.RULE_searchLiteralList;
    }
    public override copyFrom(ctx: SearchLiteralListContext): void {
        super.copyFrom(ctx);
    }
}
export class SearchLiteralsContext extends SearchLiteralListContext {
    public constructor(ctx: SearchLiteralListContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public searchLiteral(): SearchLiteralContext[];
    public searchLiteral(i: number): SearchLiteralContext | null;
    public searchLiteral(i?: number): SearchLiteralContext[] | SearchLiteralContext | null {
        if (i === undefined) {
            return this.getRuleContexts(SearchLiteralContext);
        }

        return this.getRuleContext(i, SearchLiteralContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(OpenSearchPPLParser.COMMA);
    	} else {
    		return this.getToken(OpenSearchPPLParser.COMMA, i);
    	}
    }
    public override accept<Result>(visitor: OpenSearchPPLParserVisitor<Result>): Result | null {
        if (visitor.visitSearchLiterals) {
            return visitor.visitSearchLiterals(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class SearchComparisonOperatorContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public override get ruleIndex(): number {
        return OpenSearchPPLParser.RULE_searchComparisonOperator;
    }
    public override copyFrom(ctx: SearchComparisonOperatorContext): void {
        super.copyFrom(ctx);
    }
}
export class GreaterOrEqualContext extends SearchComparisonOperatorContext {
    public constructor(ctx: SearchComparisonOperatorContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public NOT_LESS(): antlr.TerminalNode {
        return this.getToken(OpenSearchPPLParser.NOT_LESS, 0)!;
    }
    public override accept<Result>(visitor: OpenSearchPPLParserVisitor<Result>): Result | null {
        if (visitor.visitGreaterOrEqual) {
            return visitor.visitGreaterOrEqual(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class EqualsContext extends SearchComparisonOperatorContext {
    public constructor(ctx: SearchComparisonOperatorContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public EQUAL(): antlr.TerminalNode {
        return this.getToken(OpenSearchPPLParser.EQUAL, 0)!;
    }
    public override accept<Result>(visitor: OpenSearchPPLParserVisitor<Result>): Result | null {
        if (visitor.visitEquals) {
            return visitor.visitEquals(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class LessThanContext extends SearchComparisonOperatorContext {
    public constructor(ctx: SearchComparisonOperatorContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public LESS(): antlr.TerminalNode {
        return this.getToken(OpenSearchPPLParser.LESS, 0)!;
    }
    public override accept<Result>(visitor: OpenSearchPPLParserVisitor<Result>): Result | null {
        if (visitor.visitLessThan) {
            return visitor.visitLessThan(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class NotEqualsContext extends SearchComparisonOperatorContext {
    public constructor(ctx: SearchComparisonOperatorContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public NOT_EQUAL(): antlr.TerminalNode {
        return this.getToken(OpenSearchPPLParser.NOT_EQUAL, 0)!;
    }
    public override accept<Result>(visitor: OpenSearchPPLParserVisitor<Result>): Result | null {
        if (visitor.visitNotEquals) {
            return visitor.visitNotEquals(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class LessOrEqualContext extends SearchComparisonOperatorContext {
    public constructor(ctx: SearchComparisonOperatorContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public NOT_GREATER(): antlr.TerminalNode {
        return this.getToken(OpenSearchPPLParser.NOT_GREATER, 0)!;
    }
    public override accept<Result>(visitor: OpenSearchPPLParserVisitor<Result>): Result | null {
        if (visitor.visitLessOrEqual) {
            return visitor.visitLessOrEqual(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class GreaterThanContext extends SearchComparisonOperatorContext {
    public constructor(ctx: SearchComparisonOperatorContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public GREATER(): antlr.TerminalNode {
        return this.getToken(OpenSearchPPLParser.GREATER, 0)!;
    }
    public override accept<Result>(visitor: OpenSearchPPLParserVisitor<Result>): Result | null {
        if (visitor.visitGreaterThan) {
            return visitor.visitGreaterThan(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class DescribeCommandContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public DESCRIBE(): antlr.TerminalNode {
        return this.getToken(OpenSearchPPLParser.DESCRIBE, 0)!;
    }
    public tableSourceClause(): TableSourceClauseContext {
        return this.getRuleContext(0, TableSourceClauseContext)!;
    }
    public override get ruleIndex(): number {
        return OpenSearchPPLParser.RULE_describeCommand;
    }
    public override accept<Result>(visitor: OpenSearchPPLParserVisitor<Result>): Result | null {
        if (visitor.visitDescribeCommand) {
            return visitor.visitDescribeCommand(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ShowDataSourcesCommandContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public SHOW(): antlr.TerminalNode {
        return this.getToken(OpenSearchPPLParser.SHOW, 0)!;
    }
    public DATASOURCES(): antlr.TerminalNode {
        return this.getToken(OpenSearchPPLParser.DATASOURCES, 0)!;
    }
    public override get ruleIndex(): number {
        return OpenSearchPPLParser.RULE_showDataSourcesCommand;
    }
    public override accept<Result>(visitor: OpenSearchPPLParserVisitor<Result>): Result | null {
        if (visitor.visitShowDataSourcesCommand) {
            return visitor.visitShowDataSourcesCommand(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class WhereCommandContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public WHERE(): antlr.TerminalNode {
        return this.getToken(OpenSearchPPLParser.WHERE, 0)!;
    }
    public logicalExpression(): LogicalExpressionContext {
        return this.getRuleContext(0, LogicalExpressionContext)!;
    }
    public override get ruleIndex(): number {
        return OpenSearchPPLParser.RULE_whereCommand;
    }
    public override accept<Result>(visitor: OpenSearchPPLParserVisitor<Result>): Result | null {
        if (visitor.visitWhereCommand) {
            return visitor.visitWhereCommand(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class FieldsCommandContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public FIELDS(): antlr.TerminalNode {
        return this.getToken(OpenSearchPPLParser.FIELDS, 0)!;
    }
    public fieldsCommandBody(): FieldsCommandBodyContext {
        return this.getRuleContext(0, FieldsCommandBodyContext)!;
    }
    public override get ruleIndex(): number {
        return OpenSearchPPLParser.RULE_fieldsCommand;
    }
    public override accept<Result>(visitor: OpenSearchPPLParserVisitor<Result>): Result | null {
        if (visitor.visitFieldsCommand) {
            return visitor.visitFieldsCommand(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class TableCommandContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public TABLE(): antlr.TerminalNode {
        return this.getToken(OpenSearchPPLParser.TABLE, 0)!;
    }
    public fieldsCommandBody(): FieldsCommandBodyContext {
        return this.getRuleContext(0, FieldsCommandBodyContext)!;
    }
    public override get ruleIndex(): number {
        return OpenSearchPPLParser.RULE_tableCommand;
    }
    public override accept<Result>(visitor: OpenSearchPPLParserVisitor<Result>): Result | null {
        if (visitor.visitTableCommand) {
            return visitor.visitTableCommand(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class FieldsCommandBodyContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public wcFieldList(): WcFieldListContext {
        return this.getRuleContext(0, WcFieldListContext)!;
    }
    public PLUS(): antlr.TerminalNode | null {
        return this.getToken(OpenSearchPPLParser.PLUS, 0);
    }
    public MINUS(): antlr.TerminalNode | null {
        return this.getToken(OpenSearchPPLParser.MINUS, 0);
    }
    public override get ruleIndex(): number {
        return OpenSearchPPLParser.RULE_fieldsCommandBody;
    }
    public override accept<Result>(visitor: OpenSearchPPLParserVisitor<Result>): Result | null {
        if (visitor.visitFieldsCommandBody) {
            return visitor.visitFieldsCommandBody(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class WcFieldListContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public selectFieldExpression(): SelectFieldExpressionContext[];
    public selectFieldExpression(i: number): SelectFieldExpressionContext | null;
    public selectFieldExpression(i?: number): SelectFieldExpressionContext[] | SelectFieldExpressionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(SelectFieldExpressionContext);
        }

        return this.getRuleContext(i, SelectFieldExpressionContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(OpenSearchPPLParser.COMMA);
    	} else {
    		return this.getToken(OpenSearchPPLParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return OpenSearchPPLParser.RULE_wcFieldList;
    }
    public override accept<Result>(visitor: OpenSearchPPLParserVisitor<Result>): Result | null {
        if (visitor.visitWcFieldList) {
            return visitor.visitWcFieldList(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class RenameCommandContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public RENAME(): antlr.TerminalNode {
        return this.getToken(OpenSearchPPLParser.RENAME, 0)!;
    }
    public renameClasue(): RenameClasueContext[];
    public renameClasue(i: number): RenameClasueContext | null;
    public renameClasue(i?: number): RenameClasueContext[] | RenameClasueContext | null {
        if (i === undefined) {
            return this.getRuleContexts(RenameClasueContext);
        }

        return this.getRuleContext(i, RenameClasueContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(OpenSearchPPLParser.COMMA);
    	} else {
    		return this.getToken(OpenSearchPPLParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return OpenSearchPPLParser.RULE_renameCommand;
    }
    public override accept<Result>(visitor: OpenSearchPPLParserVisitor<Result>): Result | null {
        if (visitor.visitRenameCommand) {
            return visitor.visitRenameCommand(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class StatsCommandContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public STATS(): antlr.TerminalNode {
        return this.getToken(OpenSearchPPLParser.STATS, 0)!;
    }
    public statsArgs(): StatsArgsContext {
        return this.getRuleContext(0, StatsArgsContext)!;
    }
    public statsAggTerm(): StatsAggTermContext[];
    public statsAggTerm(i: number): StatsAggTermContext | null;
    public statsAggTerm(i?: number): StatsAggTermContext[] | StatsAggTermContext | null {
        if (i === undefined) {
            return this.getRuleContexts(StatsAggTermContext);
        }

        return this.getRuleContext(i, StatsAggTermContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(OpenSearchPPLParser.COMMA);
    	} else {
    		return this.getToken(OpenSearchPPLParser.COMMA, i);
    	}
    }
    public statsByClause(): StatsByClauseContext | null {
        return this.getRuleContext(0, StatsByClauseContext);
    }
    public dedupSplitArg(): DedupSplitArgContext | null {
        return this.getRuleContext(0, DedupSplitArgContext);
    }
    public override get ruleIndex(): number {
        return OpenSearchPPLParser.RULE_statsCommand;
    }
    public override accept<Result>(visitor: OpenSearchPPLParserVisitor<Result>): Result | null {
        if (visitor.visitStatsCommand) {
            return visitor.visitStatsCommand(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class StatsArgsContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public partitionsArg(): PartitionsArgContext[];
    public partitionsArg(i: number): PartitionsArgContext | null;
    public partitionsArg(i?: number): PartitionsArgContext[] | PartitionsArgContext | null {
        if (i === undefined) {
            return this.getRuleContexts(PartitionsArgContext);
        }

        return this.getRuleContext(i, PartitionsArgContext);
    }
    public allnumArg(): AllnumArgContext[];
    public allnumArg(i: number): AllnumArgContext | null;
    public allnumArg(i?: number): AllnumArgContext[] | AllnumArgContext | null {
        if (i === undefined) {
            return this.getRuleContexts(AllnumArgContext);
        }

        return this.getRuleContext(i, AllnumArgContext);
    }
    public delimArg(): DelimArgContext[];
    public delimArg(i: number): DelimArgContext | null;
    public delimArg(i?: number): DelimArgContext[] | DelimArgContext | null {
        if (i === undefined) {
            return this.getRuleContexts(DelimArgContext);
        }

        return this.getRuleContext(i, DelimArgContext);
    }
    public bucketNullableArg(): BucketNullableArgContext[];
    public bucketNullableArg(i: number): BucketNullableArgContext | null;
    public bucketNullableArg(i?: number): BucketNullableArgContext[] | BucketNullableArgContext | null {
        if (i === undefined) {
            return this.getRuleContexts(BucketNullableArgContext);
        }

        return this.getRuleContext(i, BucketNullableArgContext);
    }
    public override get ruleIndex(): number {
        return OpenSearchPPLParser.RULE_statsArgs;
    }
    public override accept<Result>(visitor: OpenSearchPPLParserVisitor<Result>): Result | null {
        if (visitor.visitStatsArgs) {
            return visitor.visitStatsArgs(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class PartitionsArgContext extends antlr.ParserRuleContext {
    public _partitions?: IntegerLiteralContext;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public PARTITIONS(): antlr.TerminalNode {
        return this.getToken(OpenSearchPPLParser.PARTITIONS, 0)!;
    }
    public EQUAL(): antlr.TerminalNode {
        return this.getToken(OpenSearchPPLParser.EQUAL, 0)!;
    }
    public integerLiteral(): IntegerLiteralContext {
        return this.getRuleContext(0, IntegerLiteralContext)!;
    }
    public override get ruleIndex(): number {
        return OpenSearchPPLParser.RULE_partitionsArg;
    }
    public override accept<Result>(visitor: OpenSearchPPLParserVisitor<Result>): Result | null {
        if (visitor.visitPartitionsArg) {
            return visitor.visitPartitionsArg(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class AllnumArgContext extends antlr.ParserRuleContext {
    public _allnum?: BooleanLiteralContext;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public ALLNUM(): antlr.TerminalNode {
        return this.getToken(OpenSearchPPLParser.ALLNUM, 0)!;
    }
    public EQUAL(): antlr.TerminalNode {
        return this.getToken(OpenSearchPPLParser.EQUAL, 0)!;
    }
    public booleanLiteral(): BooleanLiteralContext {
        return this.getRuleContext(0, BooleanLiteralContext)!;
    }
    public override get ruleIndex(): number {
        return OpenSearchPPLParser.RULE_allnumArg;
    }
    public override accept<Result>(visitor: OpenSearchPPLParserVisitor<Result>): Result | null {
        if (visitor.visitAllnumArg) {
            return visitor.visitAllnumArg(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class DelimArgContext extends antlr.ParserRuleContext {
    public _delim?: StringLiteralContext;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public DELIM(): antlr.TerminalNode {
        return this.getToken(OpenSearchPPLParser.DELIM, 0)!;
    }
    public EQUAL(): antlr.TerminalNode {
        return this.getToken(OpenSearchPPLParser.EQUAL, 0)!;
    }
    public stringLiteral(): StringLiteralContext {
        return this.getRuleContext(0, StringLiteralContext)!;
    }
    public override get ruleIndex(): number {
        return OpenSearchPPLParser.RULE_delimArg;
    }
    public override accept<Result>(visitor: OpenSearchPPLParserVisitor<Result>): Result | null {
        if (visitor.visitDelimArg) {
            return visitor.visitDelimArg(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class BucketNullableArgContext extends antlr.ParserRuleContext {
    public _bucket_nullable?: BooleanLiteralContext;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public BUCKET_NULLABLE(): antlr.TerminalNode {
        return this.getToken(OpenSearchPPLParser.BUCKET_NULLABLE, 0)!;
    }
    public EQUAL(): antlr.TerminalNode {
        return this.getToken(OpenSearchPPLParser.EQUAL, 0)!;
    }
    public booleanLiteral(): BooleanLiteralContext {
        return this.getRuleContext(0, BooleanLiteralContext)!;
    }
    public override get ruleIndex(): number {
        return OpenSearchPPLParser.RULE_bucketNullableArg;
    }
    public override accept<Result>(visitor: OpenSearchPPLParserVisitor<Result>): Result | null {
        if (visitor.visitBucketNullableArg) {
            return visitor.visitBucketNullableArg(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class DedupSplitArgContext extends antlr.ParserRuleContext {
    public _dedupsplit?: BooleanLiteralContext;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public DEDUP_SPLITVALUES(): antlr.TerminalNode {
        return this.getToken(OpenSearchPPLParser.DEDUP_SPLITVALUES, 0)!;
    }
    public EQUAL(): antlr.TerminalNode {
        return this.getToken(OpenSearchPPLParser.EQUAL, 0)!;
    }
    public booleanLiteral(): BooleanLiteralContext {
        return this.getRuleContext(0, BooleanLiteralContext)!;
    }
    public override get ruleIndex(): number {
        return OpenSearchPPLParser.RULE_dedupSplitArg;
    }
    public override accept<Result>(visitor: OpenSearchPPLParserVisitor<Result>): Result | null {
        if (visitor.visitDedupSplitArg) {
            return visitor.visitDedupSplitArg(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class EventstatsCommandContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public EVENTSTATS(): antlr.TerminalNode {
        return this.getToken(OpenSearchPPLParser.EVENTSTATS, 0)!;
    }
    public eventstatsAggTerm(): EventstatsAggTermContext[];
    public eventstatsAggTerm(i: number): EventstatsAggTermContext | null;
    public eventstatsAggTerm(i?: number): EventstatsAggTermContext[] | EventstatsAggTermContext | null {
        if (i === undefined) {
            return this.getRuleContexts(EventstatsAggTermContext);
        }

        return this.getRuleContext(i, EventstatsAggTermContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(OpenSearchPPLParser.COMMA);
    	} else {
    		return this.getToken(OpenSearchPPLParser.COMMA, i);
    	}
    }
    public statsByClause(): StatsByClauseContext | null {
        return this.getRuleContext(0, StatsByClauseContext);
    }
    public override get ruleIndex(): number {
        return OpenSearchPPLParser.RULE_eventstatsCommand;
    }
    public override accept<Result>(visitor: OpenSearchPPLParserVisitor<Result>): Result | null {
        if (visitor.visitEventstatsCommand) {
            return visitor.visitEventstatsCommand(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class DedupCommandContext extends antlr.ParserRuleContext {
    public _number_?: IntegerLiteralContext;
    public _keepempty?: BooleanLiteralContext;
    public _consecutive?: BooleanLiteralContext;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public DEDUP(): antlr.TerminalNode {
        return this.getToken(OpenSearchPPLParser.DEDUP, 0)!;
    }
    public fieldList(): FieldListContext {
        return this.getRuleContext(0, FieldListContext)!;
    }
    public KEEPEMPTY(): antlr.TerminalNode | null {
        return this.getToken(OpenSearchPPLParser.KEEPEMPTY, 0);
    }
    public EQUAL(): antlr.TerminalNode[];
    public EQUAL(i: number): antlr.TerminalNode | null;
    public EQUAL(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(OpenSearchPPLParser.EQUAL);
    	} else {
    		return this.getToken(OpenSearchPPLParser.EQUAL, i);
    	}
    }
    public CONSECUTIVE(): antlr.TerminalNode | null {
        return this.getToken(OpenSearchPPLParser.CONSECUTIVE, 0);
    }
    public integerLiteral(): IntegerLiteralContext | null {
        return this.getRuleContext(0, IntegerLiteralContext);
    }
    public booleanLiteral(): BooleanLiteralContext[];
    public booleanLiteral(i: number): BooleanLiteralContext | null;
    public booleanLiteral(i?: number): BooleanLiteralContext[] | BooleanLiteralContext | null {
        if (i === undefined) {
            return this.getRuleContexts(BooleanLiteralContext);
        }

        return this.getRuleContext(i, BooleanLiteralContext);
    }
    public override get ruleIndex(): number {
        return OpenSearchPPLParser.RULE_dedupCommand;
    }
    public override accept<Result>(visitor: OpenSearchPPLParserVisitor<Result>): Result | null {
        if (visitor.visitDedupCommand) {
            return visitor.visitDedupCommand(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class SortCommandContext extends antlr.ParserRuleContext {
    public _count?: IntegerLiteralContext;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public SORT(): antlr.TerminalNode {
        return this.getToken(OpenSearchPPLParser.SORT, 0)!;
    }
    public sortbyClause(): SortbyClauseContext {
        return this.getRuleContext(0, SortbyClauseContext)!;
    }
    public integerLiteral(): IntegerLiteralContext | null {
        return this.getRuleContext(0, IntegerLiteralContext);
    }
    public ASC(): antlr.TerminalNode | null {
        return this.getToken(OpenSearchPPLParser.ASC, 0);
    }
    public A(): antlr.TerminalNode | null {
        return this.getToken(OpenSearchPPLParser.A, 0);
    }
    public DESC(): antlr.TerminalNode | null {
        return this.getToken(OpenSearchPPLParser.DESC, 0);
    }
    public D(): antlr.TerminalNode | null {
        return this.getToken(OpenSearchPPLParser.D, 0);
    }
    public override get ruleIndex(): number {
        return OpenSearchPPLParser.RULE_sortCommand;
    }
    public override accept<Result>(visitor: OpenSearchPPLParserVisitor<Result>): Result | null {
        if (visitor.visitSortCommand) {
            return visitor.visitSortCommand(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ReverseCommandContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public REVERSE(): antlr.TerminalNode {
        return this.getToken(OpenSearchPPLParser.REVERSE, 0)!;
    }
    public override get ruleIndex(): number {
        return OpenSearchPPLParser.RULE_reverseCommand;
    }
    public override accept<Result>(visitor: OpenSearchPPLParserVisitor<Result>): Result | null {
        if (visitor.visitReverseCommand) {
            return visitor.visitReverseCommand(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class TimechartCommandContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public TIMECHART(): antlr.TerminalNode {
        return this.getToken(OpenSearchPPLParser.TIMECHART, 0)!;
    }
    public statsFunction(): StatsFunctionContext {
        return this.getRuleContext(0, StatsFunctionContext)!;
    }
    public timechartParameter(): TimechartParameterContext[];
    public timechartParameter(i: number): TimechartParameterContext | null;
    public timechartParameter(i?: number): TimechartParameterContext[] | TimechartParameterContext | null {
        if (i === undefined) {
            return this.getRuleContexts(TimechartParameterContext);
        }

        return this.getRuleContext(i, TimechartParameterContext);
    }
    public BY(): antlr.TerminalNode | null {
        return this.getToken(OpenSearchPPLParser.BY, 0);
    }
    public fieldExpression(): FieldExpressionContext | null {
        return this.getRuleContext(0, FieldExpressionContext);
    }
    public override get ruleIndex(): number {
        return OpenSearchPPLParser.RULE_timechartCommand;
    }
    public override accept<Result>(visitor: OpenSearchPPLParserVisitor<Result>): Result | null {
        if (visitor.visitTimechartCommand) {
            return visitor.visitTimechartCommand(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class TimechartParameterContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public spanClause(): SpanClauseContext | null {
        return this.getRuleContext(0, SpanClauseContext);
    }
    public SPAN(): antlr.TerminalNode | null {
        return this.getToken(OpenSearchPPLParser.SPAN, 0);
    }
    public EQUAL(): antlr.TerminalNode | null {
        return this.getToken(OpenSearchPPLParser.EQUAL, 0);
    }
    public spanLiteral(): SpanLiteralContext | null {
        return this.getRuleContext(0, SpanLiteralContext);
    }
    public timechartArg(): TimechartArgContext | null {
        return this.getRuleContext(0, TimechartArgContext);
    }
    public override get ruleIndex(): number {
        return OpenSearchPPLParser.RULE_timechartParameter;
    }
    public override accept<Result>(visitor: OpenSearchPPLParserVisitor<Result>): Result | null {
        if (visitor.visitTimechartParameter) {
            return visitor.visitTimechartParameter(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class TimechartArgContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public LIMIT(): antlr.TerminalNode | null {
        return this.getToken(OpenSearchPPLParser.LIMIT, 0);
    }
    public EQUAL(): antlr.TerminalNode {
        return this.getToken(OpenSearchPPLParser.EQUAL, 0)!;
    }
    public integerLiteral(): IntegerLiteralContext | null {
        return this.getRuleContext(0, IntegerLiteralContext);
    }
    public USEOTHER(): antlr.TerminalNode | null {
        return this.getToken(OpenSearchPPLParser.USEOTHER, 0);
    }
    public booleanLiteral(): BooleanLiteralContext | null {
        return this.getRuleContext(0, BooleanLiteralContext);
    }
    public ident(): IdentContext | null {
        return this.getRuleContext(0, IdentContext);
    }
    public override get ruleIndex(): number {
        return OpenSearchPPLParser.RULE_timechartArg;
    }
    public override accept<Result>(visitor: OpenSearchPPLParserVisitor<Result>): Result | null {
        if (visitor.visitTimechartArg) {
            return visitor.visitTimechartArg(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class SpanLiteralContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public integerLiteral(): IntegerLiteralContext | null {
        return this.getRuleContext(0, IntegerLiteralContext);
    }
    public timespanUnit(): TimespanUnitContext | null {
        return this.getRuleContext(0, TimespanUnitContext);
    }
    public stringLiteral(): StringLiteralContext | null {
        return this.getRuleContext(0, StringLiteralContext);
    }
    public override get ruleIndex(): number {
        return OpenSearchPPLParser.RULE_spanLiteral;
    }
    public override accept<Result>(visitor: OpenSearchPPLParserVisitor<Result>): Result | null {
        if (visitor.visitSpanLiteral) {
            return visitor.visitSpanLiteral(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class EvalCommandContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public EVAL(): antlr.TerminalNode {
        return this.getToken(OpenSearchPPLParser.EVAL, 0)!;
    }
    public evalClause(): EvalClauseContext[];
    public evalClause(i: number): EvalClauseContext | null;
    public evalClause(i?: number): EvalClauseContext[] | EvalClauseContext | null {
        if (i === undefined) {
            return this.getRuleContexts(EvalClauseContext);
        }

        return this.getRuleContext(i, EvalClauseContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(OpenSearchPPLParser.COMMA);
    	} else {
    		return this.getToken(OpenSearchPPLParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return OpenSearchPPLParser.RULE_evalCommand;
    }
    public override accept<Result>(visitor: OpenSearchPPLParserVisitor<Result>): Result | null {
        if (visitor.visitEvalCommand) {
            return visitor.visitEvalCommand(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class HeadCommandContext extends antlr.ParserRuleContext {
    public _number_?: IntegerLiteralContext;
    public _from_?: IntegerLiteralContext;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public HEAD(): antlr.TerminalNode {
        return this.getToken(OpenSearchPPLParser.HEAD, 0)!;
    }
    public FROM(): antlr.TerminalNode | null {
        return this.getToken(OpenSearchPPLParser.FROM, 0);
    }
    public integerLiteral(): IntegerLiteralContext[];
    public integerLiteral(i: number): IntegerLiteralContext | null;
    public integerLiteral(i?: number): IntegerLiteralContext[] | IntegerLiteralContext | null {
        if (i === undefined) {
            return this.getRuleContexts(IntegerLiteralContext);
        }

        return this.getRuleContext(i, IntegerLiteralContext);
    }
    public override get ruleIndex(): number {
        return OpenSearchPPLParser.RULE_headCommand;
    }
    public override accept<Result>(visitor: OpenSearchPPLParserVisitor<Result>): Result | null {
        if (visitor.visitHeadCommand) {
            return visitor.visitHeadCommand(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class BinCommandContext extends antlr.ParserRuleContext {
    public _alias?: QualifiedNameContext;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public BIN(): antlr.TerminalNode {
        return this.getToken(OpenSearchPPLParser.BIN, 0)!;
    }
    public fieldExpression(): FieldExpressionContext {
        return this.getRuleContext(0, FieldExpressionContext)!;
    }
    public binOption(): BinOptionContext[];
    public binOption(i: number): BinOptionContext | null;
    public binOption(i?: number): BinOptionContext[] | BinOptionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(BinOptionContext);
        }

        return this.getRuleContext(i, BinOptionContext);
    }
    public AS(): antlr.TerminalNode | null {
        return this.getToken(OpenSearchPPLParser.AS, 0);
    }
    public qualifiedName(): QualifiedNameContext | null {
        return this.getRuleContext(0, QualifiedNameContext);
    }
    public override get ruleIndex(): number {
        return OpenSearchPPLParser.RULE_binCommand;
    }
    public override accept<Result>(visitor: OpenSearchPPLParserVisitor<Result>): Result | null {
        if (visitor.visitBinCommand) {
            return visitor.visitBinCommand(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class BinOptionContext extends antlr.ParserRuleContext {
    public _span?: SpanValueContext;
    public _bins?: IntegerLiteralContext;
    public _minspan?: LiteralValueContext;
    public _minspanUnit?: TimespanUnitContext;
    public _aligntime?: AligntimeValueContext;
    public _start?: NumericLiteralContext;
    public _end?: NumericLiteralContext;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public SPAN(): antlr.TerminalNode | null {
        return this.getToken(OpenSearchPPLParser.SPAN, 0);
    }
    public EQUAL(): antlr.TerminalNode {
        return this.getToken(OpenSearchPPLParser.EQUAL, 0)!;
    }
    public spanValue(): SpanValueContext | null {
        return this.getRuleContext(0, SpanValueContext);
    }
    public BINS(): antlr.TerminalNode | null {
        return this.getToken(OpenSearchPPLParser.BINS, 0);
    }
    public integerLiteral(): IntegerLiteralContext | null {
        return this.getRuleContext(0, IntegerLiteralContext);
    }
    public MINSPAN(): antlr.TerminalNode | null {
        return this.getToken(OpenSearchPPLParser.MINSPAN, 0);
    }
    public literalValue(): LiteralValueContext | null {
        return this.getRuleContext(0, LiteralValueContext);
    }
    public timespanUnit(): TimespanUnitContext | null {
        return this.getRuleContext(0, TimespanUnitContext);
    }
    public ALIGNTIME(): antlr.TerminalNode | null {
        return this.getToken(OpenSearchPPLParser.ALIGNTIME, 0);
    }
    public aligntimeValue(): AligntimeValueContext | null {
        return this.getRuleContext(0, AligntimeValueContext);
    }
    public START(): antlr.TerminalNode | null {
        return this.getToken(OpenSearchPPLParser.START, 0);
    }
    public numericLiteral(): NumericLiteralContext | null {
        return this.getRuleContext(0, NumericLiteralContext);
    }
    public END(): antlr.TerminalNode | null {
        return this.getToken(OpenSearchPPLParser.END, 0);
    }
    public override get ruleIndex(): number {
        return OpenSearchPPLParser.RULE_binOption;
    }
    public override accept<Result>(visitor: OpenSearchPPLParserVisitor<Result>): Result | null {
        if (visitor.visitBinOption) {
            return visitor.visitBinOption(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class AligntimeValueContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public EARLIEST(): antlr.TerminalNode | null {
        return this.getToken(OpenSearchPPLParser.EARLIEST, 0);
    }
    public LATEST(): antlr.TerminalNode | null {
        return this.getToken(OpenSearchPPLParser.LATEST, 0);
    }
    public literalValue(): LiteralValueContext | null {
        return this.getRuleContext(0, LiteralValueContext);
    }
    public override get ruleIndex(): number {
        return OpenSearchPPLParser.RULE_aligntimeValue;
    }
    public override accept<Result>(visitor: OpenSearchPPLParserVisitor<Result>): Result | null {
        if (visitor.visitAligntimeValue) {
            return visitor.visitAligntimeValue(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class SpanValueContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public override get ruleIndex(): number {
        return OpenSearchPPLParser.RULE_spanValue;
    }
    public override copyFrom(ctx: SpanValueContext): void {
        super.copyFrom(ctx);
    }
}
export class LogBasedSpanValueContext extends SpanValueContext {
    public constructor(ctx: SpanValueContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public logSpanValue(): LogSpanValueContext {
        return this.getRuleContext(0, LogSpanValueContext)!;
    }
    public override accept<Result>(visitor: OpenSearchPPLParserVisitor<Result>): Result | null {
        if (visitor.visitLogBasedSpanValue) {
            return visitor.visitLogBasedSpanValue(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class ExtendedTimeSpanValueContext extends SpanValueContext {
    public constructor(ctx: SpanValueContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public ident(): IdentContext {
        return this.getRuleContext(0, IdentContext)!;
    }
    public timespanUnit(): TimespanUnitContext {
        return this.getRuleContext(0, TimespanUnitContext)!;
    }
    public override accept<Result>(visitor: OpenSearchPPLParserVisitor<Result>): Result | null {
        if (visitor.visitExtendedTimeSpanValue) {
            return visitor.visitExtendedTimeSpanValue(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class NumericSpanValueContext extends SpanValueContext {
    public constructor(ctx: SpanValueContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public literalValue(): LiteralValueContext {
        return this.getRuleContext(0, LiteralValueContext)!;
    }
    public timespanUnit(): TimespanUnitContext | null {
        return this.getRuleContext(0, TimespanUnitContext);
    }
    public override accept<Result>(visitor: OpenSearchPPLParserVisitor<Result>): Result | null {
        if (visitor.visitNumericSpanValue) {
            return visitor.visitNumericSpanValue(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class IdentifierSpanValueContext extends SpanValueContext {
    public constructor(ctx: SpanValueContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public ident(): IdentContext {
        return this.getRuleContext(0, IdentContext)!;
    }
    public override accept<Result>(visitor: OpenSearchPPLParserVisitor<Result>): Result | null {
        if (visitor.visitIdentifierSpanValue) {
            return visitor.visitIdentifierSpanValue(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class LogSpanValueContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public override get ruleIndex(): number {
        return OpenSearchPPLParser.RULE_logSpanValue;
    }
    public override copyFrom(ctx: LogSpanValueContext): void {
        super.copyFrom(ctx);
    }
}
export class LogWithBaseSpanContext extends LogSpanValueContext {
    public constructor(ctx: LogSpanValueContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public LOG_WITH_BASE(): antlr.TerminalNode {
        return this.getToken(OpenSearchPPLParser.LOG_WITH_BASE, 0)!;
    }
    public override accept<Result>(visitor: OpenSearchPPLParserVisitor<Result>): Result | null {
        if (visitor.visitLogWithBaseSpan) {
            return visitor.visitLogWithBaseSpan(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class TopCommandContext extends antlr.ParserRuleContext {
    public _number_?: IntegerLiteralContext;
    public _countfield?: StringLiteralContext;
    public _showcount?: BooleanLiteralContext;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public TOP(): antlr.TerminalNode {
        return this.getToken(OpenSearchPPLParser.TOP, 0)!;
    }
    public fieldList(): FieldListContext {
        return this.getRuleContext(0, FieldListContext)!;
    }
    public COUNTFIELD(): antlr.TerminalNode | null {
        return this.getToken(OpenSearchPPLParser.COUNTFIELD, 0);
    }
    public EQUAL(): antlr.TerminalNode[];
    public EQUAL(i: number): antlr.TerminalNode | null;
    public EQUAL(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(OpenSearchPPLParser.EQUAL);
    	} else {
    		return this.getToken(OpenSearchPPLParser.EQUAL, i);
    	}
    }
    public SHOWCOUNT(): antlr.TerminalNode | null {
        return this.getToken(OpenSearchPPLParser.SHOWCOUNT, 0);
    }
    public byClause(): ByClauseContext | null {
        return this.getRuleContext(0, ByClauseContext);
    }
    public integerLiteral(): IntegerLiteralContext | null {
        return this.getRuleContext(0, IntegerLiteralContext);
    }
    public stringLiteral(): StringLiteralContext | null {
        return this.getRuleContext(0, StringLiteralContext);
    }
    public booleanLiteral(): BooleanLiteralContext | null {
        return this.getRuleContext(0, BooleanLiteralContext);
    }
    public override get ruleIndex(): number {
        return OpenSearchPPLParser.RULE_topCommand;
    }
    public override accept<Result>(visitor: OpenSearchPPLParserVisitor<Result>): Result | null {
        if (visitor.visitTopCommand) {
            return visitor.visitTopCommand(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class RareCommandContext extends antlr.ParserRuleContext {
    public _number_?: IntegerLiteralContext;
    public _countfield?: StringLiteralContext;
    public _showcount?: BooleanLiteralContext;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public RARE(): antlr.TerminalNode {
        return this.getToken(OpenSearchPPLParser.RARE, 0)!;
    }
    public fieldList(): FieldListContext {
        return this.getRuleContext(0, FieldListContext)!;
    }
    public COUNTFIELD(): antlr.TerminalNode | null {
        return this.getToken(OpenSearchPPLParser.COUNTFIELD, 0);
    }
    public EQUAL(): antlr.TerminalNode[];
    public EQUAL(i: number): antlr.TerminalNode | null;
    public EQUAL(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(OpenSearchPPLParser.EQUAL);
    	} else {
    		return this.getToken(OpenSearchPPLParser.EQUAL, i);
    	}
    }
    public SHOWCOUNT(): antlr.TerminalNode | null {
        return this.getToken(OpenSearchPPLParser.SHOWCOUNT, 0);
    }
    public byClause(): ByClauseContext | null {
        return this.getRuleContext(0, ByClauseContext);
    }
    public integerLiteral(): IntegerLiteralContext | null {
        return this.getRuleContext(0, IntegerLiteralContext);
    }
    public stringLiteral(): StringLiteralContext | null {
        return this.getRuleContext(0, StringLiteralContext);
    }
    public booleanLiteral(): BooleanLiteralContext | null {
        return this.getRuleContext(0, BooleanLiteralContext);
    }
    public override get ruleIndex(): number {
        return OpenSearchPPLParser.RULE_rareCommand;
    }
    public override accept<Result>(visitor: OpenSearchPPLParserVisitor<Result>): Result | null {
        if (visitor.visitRareCommand) {
            return visitor.visitRareCommand(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class GrokCommandContext extends antlr.ParserRuleContext {
    public _source_field?: ExpressionContext;
    public _pattern?: StringLiteralContext;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public GROK(): antlr.TerminalNode {
        return this.getToken(OpenSearchPPLParser.GROK, 0)!;
    }
    public expression(): ExpressionContext | null {
        return this.getRuleContext(0, ExpressionContext);
    }
    public stringLiteral(): StringLiteralContext | null {
        return this.getRuleContext(0, StringLiteralContext);
    }
    public override get ruleIndex(): number {
        return OpenSearchPPLParser.RULE_grokCommand;
    }
    public override accept<Result>(visitor: OpenSearchPPLParserVisitor<Result>): Result | null {
        if (visitor.visitGrokCommand) {
            return visitor.visitGrokCommand(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ParseCommandContext extends antlr.ParserRuleContext {
    public _source_field?: ExpressionContext;
    public _pattern?: StringLiteralContext;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public PARSE(): antlr.TerminalNode {
        return this.getToken(OpenSearchPPLParser.PARSE, 0)!;
    }
    public expression(): ExpressionContext | null {
        return this.getRuleContext(0, ExpressionContext);
    }
    public stringLiteral(): StringLiteralContext | null {
        return this.getRuleContext(0, StringLiteralContext);
    }
    public override get ruleIndex(): number {
        return OpenSearchPPLParser.RULE_parseCommand;
    }
    public override accept<Result>(visitor: OpenSearchPPLParserVisitor<Result>): Result | null {
        if (visitor.visitParseCommand) {
            return visitor.visitParseCommand(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class SpathCommandContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public SPATH(): antlr.TerminalNode {
        return this.getToken(OpenSearchPPLParser.SPATH, 0)!;
    }
    public spathParameter(): SpathParameterContext[];
    public spathParameter(i: number): SpathParameterContext | null;
    public spathParameter(i?: number): SpathParameterContext[] | SpathParameterContext | null {
        if (i === undefined) {
            return this.getRuleContexts(SpathParameterContext);
        }

        return this.getRuleContext(i, SpathParameterContext);
    }
    public override get ruleIndex(): number {
        return OpenSearchPPLParser.RULE_spathCommand;
    }
    public override accept<Result>(visitor: OpenSearchPPLParserVisitor<Result>): Result | null {
        if (visitor.visitSpathCommand) {
            return visitor.visitSpathCommand(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class SpathParameterContext extends antlr.ParserRuleContext {
    public _input?: ExpressionContext;
    public _output?: ExpressionContext;
    public _path?: IndexablePathContext;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public INPUT(): antlr.TerminalNode | null {
        return this.getToken(OpenSearchPPLParser.INPUT, 0);
    }
    public EQUAL(): antlr.TerminalNode | null {
        return this.getToken(OpenSearchPPLParser.EQUAL, 0);
    }
    public expression(): ExpressionContext | null {
        return this.getRuleContext(0, ExpressionContext);
    }
    public OUTPUT(): antlr.TerminalNode | null {
        return this.getToken(OpenSearchPPLParser.OUTPUT, 0);
    }
    public indexablePath(): IndexablePathContext | null {
        return this.getRuleContext(0, IndexablePathContext);
    }
    public PATH(): antlr.TerminalNode | null {
        return this.getToken(OpenSearchPPLParser.PATH, 0);
    }
    public override get ruleIndex(): number {
        return OpenSearchPPLParser.RULE_spathParameter;
    }
    public override accept<Result>(visitor: OpenSearchPPLParserVisitor<Result>): Result | null {
        if (visitor.visitSpathParameter) {
            return visitor.visitSpathParameter(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class IndexablePathContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public pathElement(): PathElementContext[];
    public pathElement(i: number): PathElementContext | null;
    public pathElement(i?: number): PathElementContext[] | PathElementContext | null {
        if (i === undefined) {
            return this.getRuleContexts(PathElementContext);
        }

        return this.getRuleContext(i, PathElementContext);
    }
    public DOT(): antlr.TerminalNode[];
    public DOT(i: number): antlr.TerminalNode | null;
    public DOT(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(OpenSearchPPLParser.DOT);
    	} else {
    		return this.getToken(OpenSearchPPLParser.DOT, i);
    	}
    }
    public override get ruleIndex(): number {
        return OpenSearchPPLParser.RULE_indexablePath;
    }
    public override accept<Result>(visitor: OpenSearchPPLParserVisitor<Result>): Result | null {
        if (visitor.visitIndexablePath) {
            return visitor.visitIndexablePath(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class PathElementContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public ident(): IdentContext {
        return this.getRuleContext(0, IdentContext)!;
    }
    public pathArrayAccess(): PathArrayAccessContext | null {
        return this.getRuleContext(0, PathArrayAccessContext);
    }
    public override get ruleIndex(): number {
        return OpenSearchPPLParser.RULE_pathElement;
    }
    public override accept<Result>(visitor: OpenSearchPPLParserVisitor<Result>): Result | null {
        if (visitor.visitPathElement) {
            return visitor.visitPathElement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class PathArrayAccessContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public LT_CURLY(): antlr.TerminalNode {
        return this.getToken(OpenSearchPPLParser.LT_CURLY, 0)!;
    }
    public RT_CURLY(): antlr.TerminalNode {
        return this.getToken(OpenSearchPPLParser.RT_CURLY, 0)!;
    }
    public INTEGER_LITERAL(): antlr.TerminalNode | null {
        return this.getToken(OpenSearchPPLParser.INTEGER_LITERAL, 0);
    }
    public override get ruleIndex(): number {
        return OpenSearchPPLParser.RULE_pathArrayAccess;
    }
    public override accept<Result>(visitor: OpenSearchPPLParserVisitor<Result>): Result | null {
        if (visitor.visitPathArrayAccess) {
            return visitor.visitPathArrayAccess(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class RegexCommandContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public REGEX(): antlr.TerminalNode {
        return this.getToken(OpenSearchPPLParser.REGEX, 0)!;
    }
    public regexExpr(): RegexExprContext {
        return this.getRuleContext(0, RegexExprContext)!;
    }
    public override get ruleIndex(): number {
        return OpenSearchPPLParser.RULE_regexCommand;
    }
    public override accept<Result>(visitor: OpenSearchPPLParserVisitor<Result>): Result | null {
        if (visitor.visitRegexCommand) {
            return visitor.visitRegexCommand(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class RegexExprContext extends antlr.ParserRuleContext {
    public _field?: QualifiedNameContext;
    public _operator?: Token | null;
    public _pattern?: StringLiteralContext;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public qualifiedName(): QualifiedNameContext {
        return this.getRuleContext(0, QualifiedNameContext)!;
    }
    public stringLiteral(): StringLiteralContext {
        return this.getRuleContext(0, StringLiteralContext)!;
    }
    public EQUAL(): antlr.TerminalNode | null {
        return this.getToken(OpenSearchPPLParser.EQUAL, 0);
    }
    public NOT_EQUAL(): antlr.TerminalNode | null {
        return this.getToken(OpenSearchPPLParser.NOT_EQUAL, 0);
    }
    public override get ruleIndex(): number {
        return OpenSearchPPLParser.RULE_regexExpr;
    }
    public override accept<Result>(visitor: OpenSearchPPLParserVisitor<Result>): Result | null {
        if (visitor.visitRegexExpr) {
            return visitor.visitRegexExpr(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class RexCommandContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public REX(): antlr.TerminalNode {
        return this.getToken(OpenSearchPPLParser.REX, 0)!;
    }
    public rexExpr(): RexExprContext {
        return this.getRuleContext(0, RexExprContext)!;
    }
    public override get ruleIndex(): number {
        return OpenSearchPPLParser.RULE_rexCommand;
    }
    public override accept<Result>(visitor: OpenSearchPPLParserVisitor<Result>): Result | null {
        if (visitor.visitRexCommand) {
            return visitor.visitRexCommand(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class RexExprContext extends antlr.ParserRuleContext {
    public _field?: QualifiedNameContext;
    public _pattern?: StringLiteralContext;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public FIELD(): antlr.TerminalNode {
        return this.getToken(OpenSearchPPLParser.FIELD, 0)!;
    }
    public EQUAL(): antlr.TerminalNode {
        return this.getToken(OpenSearchPPLParser.EQUAL, 0)!;
    }
    public qualifiedName(): QualifiedNameContext {
        return this.getRuleContext(0, QualifiedNameContext)!;
    }
    public stringLiteral(): StringLiteralContext {
        return this.getRuleContext(0, StringLiteralContext)!;
    }
    public rexOption(): RexOptionContext[];
    public rexOption(i: number): RexOptionContext | null;
    public rexOption(i?: number): RexOptionContext[] | RexOptionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(RexOptionContext);
        }

        return this.getRuleContext(i, RexOptionContext);
    }
    public override get ruleIndex(): number {
        return OpenSearchPPLParser.RULE_rexExpr;
    }
    public override accept<Result>(visitor: OpenSearchPPLParserVisitor<Result>): Result | null {
        if (visitor.visitRexExpr) {
            return visitor.visitRexExpr(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class RexOptionContext extends antlr.ParserRuleContext {
    public _maxMatch?: IntegerLiteralContext;
    public _offsetField?: QualifiedNameContext;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public MAX_MATCH(): antlr.TerminalNode | null {
        return this.getToken(OpenSearchPPLParser.MAX_MATCH, 0);
    }
    public EQUAL(): antlr.TerminalNode {
        return this.getToken(OpenSearchPPLParser.EQUAL, 0)!;
    }
    public integerLiteral(): IntegerLiteralContext | null {
        return this.getRuleContext(0, IntegerLiteralContext);
    }
    public MODE(): antlr.TerminalNode | null {
        return this.getToken(OpenSearchPPLParser.MODE, 0);
    }
    public EXTRACT(): antlr.TerminalNode | null {
        return this.getToken(OpenSearchPPLParser.EXTRACT, 0);
    }
    public SED(): antlr.TerminalNode | null {
        return this.getToken(OpenSearchPPLParser.SED, 0);
    }
    public OFFSET_FIELD(): antlr.TerminalNode | null {
        return this.getToken(OpenSearchPPLParser.OFFSET_FIELD, 0);
    }
    public qualifiedName(): QualifiedNameContext | null {
        return this.getRuleContext(0, QualifiedNameContext);
    }
    public override get ruleIndex(): number {
        return OpenSearchPPLParser.RULE_rexOption;
    }
    public override accept<Result>(visitor: OpenSearchPPLParserVisitor<Result>): Result | null {
        if (visitor.visitRexOption) {
            return visitor.visitRexOption(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class PatternsMethodContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public PUNCT(): antlr.TerminalNode | null {
        return this.getToken(OpenSearchPPLParser.PUNCT, 0);
    }
    public REGEX(): antlr.TerminalNode | null {
        return this.getToken(OpenSearchPPLParser.REGEX, 0);
    }
    public override get ruleIndex(): number {
        return OpenSearchPPLParser.RULE_patternsMethod;
    }
    public override accept<Result>(visitor: OpenSearchPPLParserVisitor<Result>): Result | null {
        if (visitor.visitPatternsMethod) {
            return visitor.visitPatternsMethod(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class PatternsCommandContext extends antlr.ParserRuleContext {
    public _source_field?: ExpressionContext;
    public _method?: PatternMethodContext;
    public _pattern_mode?: PatternModeContext;
    public _max_sample_count?: IntegerLiteralContext;
    public _buffer_limit?: IntegerLiteralContext;
    public _new_field?: StringLiteralContext;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public PATTERNS(): antlr.TerminalNode {
        return this.getToken(OpenSearchPPLParser.PATTERNS, 0)!;
    }
    public expression(): ExpressionContext | null {
        return this.getRuleContext(0, ExpressionContext);
    }
    public statsByClause(): StatsByClauseContext | null {
        return this.getRuleContext(0, StatsByClauseContext);
    }
    public METHOD(): antlr.TerminalNode | null {
        return this.getToken(OpenSearchPPLParser.METHOD, 0);
    }
    public EQUAL(): antlr.TerminalNode[];
    public EQUAL(i: number): antlr.TerminalNode | null;
    public EQUAL(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(OpenSearchPPLParser.EQUAL);
    	} else {
    		return this.getToken(OpenSearchPPLParser.EQUAL, i);
    	}
    }
    public MODE(): antlr.TerminalNode | null {
        return this.getToken(OpenSearchPPLParser.MODE, 0);
    }
    public MAX_SAMPLE_COUNT(): antlr.TerminalNode | null {
        return this.getToken(OpenSearchPPLParser.MAX_SAMPLE_COUNT, 0);
    }
    public BUFFER_LIMIT(): antlr.TerminalNode | null {
        return this.getToken(OpenSearchPPLParser.BUFFER_LIMIT, 0);
    }
    public NEW_FIELD(): antlr.TerminalNode | null {
        return this.getToken(OpenSearchPPLParser.NEW_FIELD, 0);
    }
    public patternsParameter(): PatternsParameterContext[];
    public patternsParameter(i: number): PatternsParameterContext | null;
    public patternsParameter(i?: number): PatternsParameterContext[] | PatternsParameterContext | null {
        if (i === undefined) {
            return this.getRuleContexts(PatternsParameterContext);
        }

        return this.getRuleContext(i, PatternsParameterContext);
    }
    public patternMethod(): PatternMethodContext | null {
        return this.getRuleContext(0, PatternMethodContext);
    }
    public patternMode(): PatternModeContext | null {
        return this.getRuleContext(0, PatternModeContext);
    }
    public integerLiteral(): IntegerLiteralContext[];
    public integerLiteral(i: number): IntegerLiteralContext | null;
    public integerLiteral(i?: number): IntegerLiteralContext[] | IntegerLiteralContext | null {
        if (i === undefined) {
            return this.getRuleContexts(IntegerLiteralContext);
        }

        return this.getRuleContext(i, IntegerLiteralContext);
    }
    public stringLiteral(): StringLiteralContext | null {
        return this.getRuleContext(0, StringLiteralContext);
    }
    public override get ruleIndex(): number {
        return OpenSearchPPLParser.RULE_patternsCommand;
    }
    public override accept<Result>(visitor: OpenSearchPPLParserVisitor<Result>): Result | null {
        if (visitor.visitPatternsCommand) {
            return visitor.visitPatternsCommand(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class PatternsParameterContext extends antlr.ParserRuleContext {
    public _pattern?: StringLiteralContext;
    public _variable_count_threshold?: IntegerLiteralContext;
    public _frequency_threshold_percentage?: DecimalLiteralContext;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public PATTERN(): antlr.TerminalNode | null {
        return this.getToken(OpenSearchPPLParser.PATTERN, 0);
    }
    public EQUAL(): antlr.TerminalNode | null {
        return this.getToken(OpenSearchPPLParser.EQUAL, 0);
    }
    public stringLiteral(): StringLiteralContext | null {
        return this.getRuleContext(0, StringLiteralContext);
    }
    public VARIABLE_COUNT_THRESHOLD(): antlr.TerminalNode | null {
        return this.getToken(OpenSearchPPLParser.VARIABLE_COUNT_THRESHOLD, 0);
    }
    public integerLiteral(): IntegerLiteralContext | null {
        return this.getRuleContext(0, IntegerLiteralContext);
    }
    public FREQUENCY_THRESHOLD_PERCENTAGE(): antlr.TerminalNode | null {
        return this.getToken(OpenSearchPPLParser.FREQUENCY_THRESHOLD_PERCENTAGE, 0);
    }
    public decimalLiteral(): DecimalLiteralContext | null {
        return this.getRuleContext(0, DecimalLiteralContext);
    }
    public override get ruleIndex(): number {
        return OpenSearchPPLParser.RULE_patternsParameter;
    }
    public override accept<Result>(visitor: OpenSearchPPLParserVisitor<Result>): Result | null {
        if (visitor.visitPatternsParameter) {
            return visitor.visitPatternsParameter(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class PatternMethodContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public SIMPLE_PATTERN(): antlr.TerminalNode | null {
        return this.getToken(OpenSearchPPLParser.SIMPLE_PATTERN, 0);
    }
    public BRAIN(): antlr.TerminalNode | null {
        return this.getToken(OpenSearchPPLParser.BRAIN, 0);
    }
    public override get ruleIndex(): number {
        return OpenSearchPPLParser.RULE_patternMethod;
    }
    public override accept<Result>(visitor: OpenSearchPPLParserVisitor<Result>): Result | null {
        if (visitor.visitPatternMethod) {
            return visitor.visitPatternMethod(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class PatternModeContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public LABEL(): antlr.TerminalNode | null {
        return this.getToken(OpenSearchPPLParser.LABEL, 0);
    }
    public AGGREGATION(): antlr.TerminalNode | null {
        return this.getToken(OpenSearchPPLParser.AGGREGATION, 0);
    }
    public override get ruleIndex(): number {
        return OpenSearchPPLParser.RULE_patternMode;
    }
    public override accept<Result>(visitor: OpenSearchPPLParserVisitor<Result>): Result | null {
        if (visitor.visitPatternMode) {
            return visitor.visitPatternMode(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class LookupCommandContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public LOOKUP(): antlr.TerminalNode {
        return this.getToken(OpenSearchPPLParser.LOOKUP, 0)!;
    }
    public tableSource(): TableSourceContext {
        return this.getRuleContext(0, TableSourceContext)!;
    }
    public lookupMappingList(): LookupMappingListContext {
        return this.getRuleContext(0, LookupMappingListContext)!;
    }
    public outputCandidateList(): OutputCandidateListContext | null {
        return this.getRuleContext(0, OutputCandidateListContext);
    }
    public APPEND(): antlr.TerminalNode | null {
        return this.getToken(OpenSearchPPLParser.APPEND, 0);
    }
    public REPLACE(): antlr.TerminalNode | null {
        return this.getToken(OpenSearchPPLParser.REPLACE, 0);
    }
    public override get ruleIndex(): number {
        return OpenSearchPPLParser.RULE_lookupCommand;
    }
    public override accept<Result>(visitor: OpenSearchPPLParserVisitor<Result>): Result | null {
        if (visitor.visitLookupCommand) {
            return visitor.visitLookupCommand(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class LookupMappingListContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public lookupPair(): LookupPairContext[];
    public lookupPair(i: number): LookupPairContext | null;
    public lookupPair(i?: number): LookupPairContext[] | LookupPairContext | null {
        if (i === undefined) {
            return this.getRuleContexts(LookupPairContext);
        }

        return this.getRuleContext(i, LookupPairContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(OpenSearchPPLParser.COMMA);
    	} else {
    		return this.getToken(OpenSearchPPLParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return OpenSearchPPLParser.RULE_lookupMappingList;
    }
    public override accept<Result>(visitor: OpenSearchPPLParserVisitor<Result>): Result | null {
        if (visitor.visitLookupMappingList) {
            return visitor.visitLookupMappingList(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class OutputCandidateListContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public lookupPair(): LookupPairContext[];
    public lookupPair(i: number): LookupPairContext | null;
    public lookupPair(i?: number): LookupPairContext[] | LookupPairContext | null {
        if (i === undefined) {
            return this.getRuleContexts(LookupPairContext);
        }

        return this.getRuleContext(i, LookupPairContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(OpenSearchPPLParser.COMMA);
    	} else {
    		return this.getToken(OpenSearchPPLParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return OpenSearchPPLParser.RULE_outputCandidateList;
    }
    public override accept<Result>(visitor: OpenSearchPPLParserVisitor<Result>): Result | null {
        if (visitor.visitOutputCandidateList) {
            return visitor.visitOutputCandidateList(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class LookupPairContext extends antlr.ParserRuleContext {
    public _inputField?: FieldExpressionContext;
    public _outputField?: FieldExpressionContext;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public fieldExpression(): FieldExpressionContext[];
    public fieldExpression(i: number): FieldExpressionContext | null;
    public fieldExpression(i?: number): FieldExpressionContext[] | FieldExpressionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(FieldExpressionContext);
        }

        return this.getRuleContext(i, FieldExpressionContext);
    }
    public AS(): antlr.TerminalNode | null {
        return this.getToken(OpenSearchPPLParser.AS, 0);
    }
    public override get ruleIndex(): number {
        return OpenSearchPPLParser.RULE_lookupPair;
    }
    public override accept<Result>(visitor: OpenSearchPPLParserVisitor<Result>): Result | null {
        if (visitor.visitLookupPair) {
            return visitor.visitLookupPair(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class FillnullCommandContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public FILLNULL(): antlr.TerminalNode {
        return this.getToken(OpenSearchPPLParser.FILLNULL, 0)!;
    }
    public fillNullWith(): FillNullWithContext | null {
        return this.getRuleContext(0, FillNullWithContext);
    }
    public fillNullUsing(): FillNullUsingContext | null {
        return this.getRuleContext(0, FillNullUsingContext);
    }
    public override get ruleIndex(): number {
        return OpenSearchPPLParser.RULE_fillnullCommand;
    }
    public override accept<Result>(visitor: OpenSearchPPLParserVisitor<Result>): Result | null {
        if (visitor.visitFillnullCommand) {
            return visitor.visitFillnullCommand(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class FillNullWithContext extends antlr.ParserRuleContext {
    public _replacement?: ValueExpressionContext;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public WITH(): antlr.TerminalNode {
        return this.getToken(OpenSearchPPLParser.WITH, 0)!;
    }
    public valueExpression(): ValueExpressionContext {
        return this.getRuleContext(0, ValueExpressionContext)!;
    }
    public IN(): antlr.TerminalNode | null {
        return this.getToken(OpenSearchPPLParser.IN, 0);
    }
    public fieldList(): FieldListContext | null {
        return this.getRuleContext(0, FieldListContext);
    }
    public override get ruleIndex(): number {
        return OpenSearchPPLParser.RULE_fillNullWith;
    }
    public override accept<Result>(visitor: OpenSearchPPLParserVisitor<Result>): Result | null {
        if (visitor.visitFillNullWith) {
            return visitor.visitFillNullWith(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class FillNullUsingContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public USING(): antlr.TerminalNode {
        return this.getToken(OpenSearchPPLParser.USING, 0)!;
    }
    public replacementPair(): ReplacementPairContext[];
    public replacementPair(i: number): ReplacementPairContext | null;
    public replacementPair(i?: number): ReplacementPairContext[] | ReplacementPairContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ReplacementPairContext);
        }

        return this.getRuleContext(i, ReplacementPairContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(OpenSearchPPLParser.COMMA);
    	} else {
    		return this.getToken(OpenSearchPPLParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return OpenSearchPPLParser.RULE_fillNullUsing;
    }
    public override accept<Result>(visitor: OpenSearchPPLParserVisitor<Result>): Result | null {
        if (visitor.visitFillNullUsing) {
            return visitor.visitFillNullUsing(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ReplacementPairContext extends antlr.ParserRuleContext {
    public _replacement?: ValueExpressionContext;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public fieldExpression(): FieldExpressionContext {
        return this.getRuleContext(0, FieldExpressionContext)!;
    }
    public EQUAL(): antlr.TerminalNode {
        return this.getToken(OpenSearchPPLParser.EQUAL, 0)!;
    }
    public valueExpression(): ValueExpressionContext {
        return this.getRuleContext(0, ValueExpressionContext)!;
    }
    public override get ruleIndex(): number {
        return OpenSearchPPLParser.RULE_replacementPair;
    }
    public override accept<Result>(visitor: OpenSearchPPLParserVisitor<Result>): Result | null {
        if (visitor.visitReplacementPair) {
            return visitor.visitReplacementPair(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class TrendlineCommandContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public TRENDLINE(): antlr.TerminalNode {
        return this.getToken(OpenSearchPPLParser.TRENDLINE, 0)!;
    }
    public trendlineClause(): TrendlineClauseContext[];
    public trendlineClause(i: number): TrendlineClauseContext | null;
    public trendlineClause(i?: number): TrendlineClauseContext[] | TrendlineClauseContext | null {
        if (i === undefined) {
            return this.getRuleContexts(TrendlineClauseContext);
        }

        return this.getRuleContext(i, TrendlineClauseContext);
    }
    public SORT(): antlr.TerminalNode | null {
        return this.getToken(OpenSearchPPLParser.SORT, 0);
    }
    public sortField(): SortFieldContext | null {
        return this.getRuleContext(0, SortFieldContext);
    }
    public override get ruleIndex(): number {
        return OpenSearchPPLParser.RULE_trendlineCommand;
    }
    public override accept<Result>(visitor: OpenSearchPPLParserVisitor<Result>): Result | null {
        if (visitor.visitTrendlineCommand) {
            return visitor.visitTrendlineCommand(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class TrendlineClauseContext extends antlr.ParserRuleContext {
    public _numberOfDataPoints?: IntegerLiteralContext;
    public _field?: FieldExpressionContext;
    public _alias?: QualifiedNameContext;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public trendlineType(): TrendlineTypeContext {
        return this.getRuleContext(0, TrendlineTypeContext)!;
    }
    public LT_PRTHS(): antlr.TerminalNode {
        return this.getToken(OpenSearchPPLParser.LT_PRTHS, 0)!;
    }
    public COMMA(): antlr.TerminalNode {
        return this.getToken(OpenSearchPPLParser.COMMA, 0)!;
    }
    public RT_PRTHS(): antlr.TerminalNode {
        return this.getToken(OpenSearchPPLParser.RT_PRTHS, 0)!;
    }
    public integerLiteral(): IntegerLiteralContext {
        return this.getRuleContext(0, IntegerLiteralContext)!;
    }
    public fieldExpression(): FieldExpressionContext {
        return this.getRuleContext(0, FieldExpressionContext)!;
    }
    public AS(): antlr.TerminalNode | null {
        return this.getToken(OpenSearchPPLParser.AS, 0);
    }
    public qualifiedName(): QualifiedNameContext | null {
        return this.getRuleContext(0, QualifiedNameContext);
    }
    public override get ruleIndex(): number {
        return OpenSearchPPLParser.RULE_trendlineClause;
    }
    public override accept<Result>(visitor: OpenSearchPPLParserVisitor<Result>): Result | null {
        if (visitor.visitTrendlineClause) {
            return visitor.visitTrendlineClause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class TrendlineTypeContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public SMA(): antlr.TerminalNode | null {
        return this.getToken(OpenSearchPPLParser.SMA, 0);
    }
    public WMA(): antlr.TerminalNode | null {
        return this.getToken(OpenSearchPPLParser.WMA, 0);
    }
    public override get ruleIndex(): number {
        return OpenSearchPPLParser.RULE_trendlineType;
    }
    public override accept<Result>(visitor: OpenSearchPPLParserVisitor<Result>): Result | null {
        if (visitor.visitTrendlineType) {
            return visitor.visitTrendlineType(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ExpandCommandContext extends antlr.ParserRuleContext {
    public _alias?: QualifiedNameContext;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public EXPAND(): antlr.TerminalNode {
        return this.getToken(OpenSearchPPLParser.EXPAND, 0)!;
    }
    public fieldExpression(): FieldExpressionContext {
        return this.getRuleContext(0, FieldExpressionContext)!;
    }
    public AS(): antlr.TerminalNode | null {
        return this.getToken(OpenSearchPPLParser.AS, 0);
    }
    public qualifiedName(): QualifiedNameContext | null {
        return this.getRuleContext(0, QualifiedNameContext);
    }
    public override get ruleIndex(): number {
        return OpenSearchPPLParser.RULE_expandCommand;
    }
    public override accept<Result>(visitor: OpenSearchPPLParserVisitor<Result>): Result | null {
        if (visitor.visitExpandCommand) {
            return visitor.visitExpandCommand(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class FlattenCommandContext extends antlr.ParserRuleContext {
    public _aliases?: IdentifierSeqContext;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public FLATTEN(): antlr.TerminalNode {
        return this.getToken(OpenSearchPPLParser.FLATTEN, 0)!;
    }
    public fieldExpression(): FieldExpressionContext {
        return this.getRuleContext(0, FieldExpressionContext)!;
    }
    public AS(): antlr.TerminalNode | null {
        return this.getToken(OpenSearchPPLParser.AS, 0);
    }
    public identifierSeq(): IdentifierSeqContext | null {
        return this.getRuleContext(0, IdentifierSeqContext);
    }
    public override get ruleIndex(): number {
        return OpenSearchPPLParser.RULE_flattenCommand;
    }
    public override accept<Result>(visitor: OpenSearchPPLParserVisitor<Result>): Result | null {
        if (visitor.visitFlattenCommand) {
            return visitor.visitFlattenCommand(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class AppendcolCommandContext extends antlr.ParserRuleContext {
    public _override?: BooleanLiteralContext;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public APPENDCOL(): antlr.TerminalNode {
        return this.getToken(OpenSearchPPLParser.APPENDCOL, 0)!;
    }
    public LT_SQR_PRTHS(): antlr.TerminalNode {
        return this.getToken(OpenSearchPPLParser.LT_SQR_PRTHS, 0)!;
    }
    public commands(): CommandsContext[];
    public commands(i: number): CommandsContext | null;
    public commands(i?: number): CommandsContext[] | CommandsContext | null {
        if (i === undefined) {
            return this.getRuleContexts(CommandsContext);
        }

        return this.getRuleContext(i, CommandsContext);
    }
    public RT_SQR_PRTHS(): antlr.TerminalNode {
        return this.getToken(OpenSearchPPLParser.RT_SQR_PRTHS, 0)!;
    }
    public OVERRIDE(): antlr.TerminalNode | null {
        return this.getToken(OpenSearchPPLParser.OVERRIDE, 0);
    }
    public EQUAL(): antlr.TerminalNode | null {
        return this.getToken(OpenSearchPPLParser.EQUAL, 0);
    }
    public PIPE(): antlr.TerminalNode[];
    public PIPE(i: number): antlr.TerminalNode | null;
    public PIPE(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(OpenSearchPPLParser.PIPE);
    	} else {
    		return this.getToken(OpenSearchPPLParser.PIPE, i);
    	}
    }
    public booleanLiteral(): BooleanLiteralContext | null {
        return this.getRuleContext(0, BooleanLiteralContext);
    }
    public override get ruleIndex(): number {
        return OpenSearchPPLParser.RULE_appendcolCommand;
    }
    public override accept<Result>(visitor: OpenSearchPPLParserVisitor<Result>): Result | null {
        if (visitor.visitAppendcolCommand) {
            return visitor.visitAppendcolCommand(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class AppendCommandContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public APPEND(): antlr.TerminalNode {
        return this.getToken(OpenSearchPPLParser.APPEND, 0)!;
    }
    public LT_SQR_PRTHS(): antlr.TerminalNode {
        return this.getToken(OpenSearchPPLParser.LT_SQR_PRTHS, 0)!;
    }
    public RT_SQR_PRTHS(): antlr.TerminalNode {
        return this.getToken(OpenSearchPPLParser.RT_SQR_PRTHS, 0)!;
    }
    public searchCommand(): SearchCommandContext | null {
        return this.getRuleContext(0, SearchCommandContext);
    }
    public PIPE(): antlr.TerminalNode[];
    public PIPE(i: number): antlr.TerminalNode | null;
    public PIPE(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(OpenSearchPPLParser.PIPE);
    	} else {
    		return this.getToken(OpenSearchPPLParser.PIPE, i);
    	}
    }
    public commands(): CommandsContext[];
    public commands(i: number): CommandsContext | null;
    public commands(i?: number): CommandsContext[] | CommandsContext | null {
        if (i === undefined) {
            return this.getRuleContexts(CommandsContext);
        }

        return this.getRuleContext(i, CommandsContext);
    }
    public override get ruleIndex(): number {
        return OpenSearchPPLParser.RULE_appendCommand;
    }
    public override accept<Result>(visitor: OpenSearchPPLParserVisitor<Result>): Result | null {
        if (visitor.visitAppendCommand) {
            return visitor.visitAppendCommand(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class KmeansCommandContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KMEANS(): antlr.TerminalNode {
        return this.getToken(OpenSearchPPLParser.KMEANS, 0)!;
    }
    public kmeansParameter(): KmeansParameterContext[];
    public kmeansParameter(i: number): KmeansParameterContext | null;
    public kmeansParameter(i?: number): KmeansParameterContext[] | KmeansParameterContext | null {
        if (i === undefined) {
            return this.getRuleContexts(KmeansParameterContext);
        }

        return this.getRuleContext(i, KmeansParameterContext);
    }
    public override get ruleIndex(): number {
        return OpenSearchPPLParser.RULE_kmeansCommand;
    }
    public override accept<Result>(visitor: OpenSearchPPLParserVisitor<Result>): Result | null {
        if (visitor.visitKmeansCommand) {
            return visitor.visitKmeansCommand(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class KmeansParameterContext extends antlr.ParserRuleContext {
    public _centroids?: IntegerLiteralContext;
    public _iterations?: IntegerLiteralContext;
    public _distance_type?: StringLiteralContext;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public CENTROIDS(): antlr.TerminalNode | null {
        return this.getToken(OpenSearchPPLParser.CENTROIDS, 0);
    }
    public EQUAL(): antlr.TerminalNode | null {
        return this.getToken(OpenSearchPPLParser.EQUAL, 0);
    }
    public integerLiteral(): IntegerLiteralContext | null {
        return this.getRuleContext(0, IntegerLiteralContext);
    }
    public ITERATIONS(): antlr.TerminalNode | null {
        return this.getToken(OpenSearchPPLParser.ITERATIONS, 0);
    }
    public DISTANCE_TYPE(): antlr.TerminalNode | null {
        return this.getToken(OpenSearchPPLParser.DISTANCE_TYPE, 0);
    }
    public stringLiteral(): StringLiteralContext | null {
        return this.getRuleContext(0, StringLiteralContext);
    }
    public override get ruleIndex(): number {
        return OpenSearchPPLParser.RULE_kmeansParameter;
    }
    public override accept<Result>(visitor: OpenSearchPPLParserVisitor<Result>): Result | null {
        if (visitor.visitKmeansParameter) {
            return visitor.visitKmeansParameter(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class AdCommandContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public AD(): antlr.TerminalNode {
        return this.getToken(OpenSearchPPLParser.AD, 0)!;
    }
    public adParameter(): AdParameterContext[];
    public adParameter(i: number): AdParameterContext | null;
    public adParameter(i?: number): AdParameterContext[] | AdParameterContext | null {
        if (i === undefined) {
            return this.getRuleContexts(AdParameterContext);
        }

        return this.getRuleContext(i, AdParameterContext);
    }
    public override get ruleIndex(): number {
        return OpenSearchPPLParser.RULE_adCommand;
    }
    public override accept<Result>(visitor: OpenSearchPPLParserVisitor<Result>): Result | null {
        if (visitor.visitAdCommand) {
            return visitor.visitAdCommand(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class AdParameterContext extends antlr.ParserRuleContext {
    public _number_of_trees?: IntegerLiteralContext;
    public _shingle_size?: IntegerLiteralContext;
    public _sample_size?: IntegerLiteralContext;
    public _output_after?: IntegerLiteralContext;
    public _time_decay?: DecimalLiteralContext;
    public _anomaly_rate?: DecimalLiteralContext;
    public _category_field?: StringLiteralContext;
    public _time_field?: StringLiteralContext;
    public _date_format?: StringLiteralContext;
    public _time_zone?: StringLiteralContext;
    public _training_data_size?: IntegerLiteralContext;
    public _anomaly_score_threshold?: DecimalLiteralContext;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public NUMBER_OF_TREES(): antlr.TerminalNode | null {
        return this.getToken(OpenSearchPPLParser.NUMBER_OF_TREES, 0);
    }
    public EQUAL(): antlr.TerminalNode | null {
        return this.getToken(OpenSearchPPLParser.EQUAL, 0);
    }
    public integerLiteral(): IntegerLiteralContext | null {
        return this.getRuleContext(0, IntegerLiteralContext);
    }
    public SHINGLE_SIZE(): antlr.TerminalNode | null {
        return this.getToken(OpenSearchPPLParser.SHINGLE_SIZE, 0);
    }
    public SAMPLE_SIZE(): antlr.TerminalNode | null {
        return this.getToken(OpenSearchPPLParser.SAMPLE_SIZE, 0);
    }
    public OUTPUT_AFTER(): antlr.TerminalNode | null {
        return this.getToken(OpenSearchPPLParser.OUTPUT_AFTER, 0);
    }
    public TIME_DECAY(): antlr.TerminalNode | null {
        return this.getToken(OpenSearchPPLParser.TIME_DECAY, 0);
    }
    public decimalLiteral(): DecimalLiteralContext | null {
        return this.getRuleContext(0, DecimalLiteralContext);
    }
    public ANOMALY_RATE(): antlr.TerminalNode | null {
        return this.getToken(OpenSearchPPLParser.ANOMALY_RATE, 0);
    }
    public CATEGORY_FIELD(): antlr.TerminalNode | null {
        return this.getToken(OpenSearchPPLParser.CATEGORY_FIELD, 0);
    }
    public stringLiteral(): StringLiteralContext | null {
        return this.getRuleContext(0, StringLiteralContext);
    }
    public TIME_FIELD(): antlr.TerminalNode | null {
        return this.getToken(OpenSearchPPLParser.TIME_FIELD, 0);
    }
    public DATE_FORMAT(): antlr.TerminalNode | null {
        return this.getToken(OpenSearchPPLParser.DATE_FORMAT, 0);
    }
    public TIME_ZONE(): antlr.TerminalNode | null {
        return this.getToken(OpenSearchPPLParser.TIME_ZONE, 0);
    }
    public TRAINING_DATA_SIZE(): antlr.TerminalNode | null {
        return this.getToken(OpenSearchPPLParser.TRAINING_DATA_SIZE, 0);
    }
    public ANOMALY_SCORE_THRESHOLD(): antlr.TerminalNode | null {
        return this.getToken(OpenSearchPPLParser.ANOMALY_SCORE_THRESHOLD, 0);
    }
    public override get ruleIndex(): number {
        return OpenSearchPPLParser.RULE_adParameter;
    }
    public override accept<Result>(visitor: OpenSearchPPLParserVisitor<Result>): Result | null {
        if (visitor.visitAdParameter) {
            return visitor.visitAdParameter(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class MlCommandContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public ML(): antlr.TerminalNode {
        return this.getToken(OpenSearchPPLParser.ML, 0)!;
    }
    public mlArg(): MlArgContext[];
    public mlArg(i: number): MlArgContext | null;
    public mlArg(i?: number): MlArgContext[] | MlArgContext | null {
        if (i === undefined) {
            return this.getRuleContexts(MlArgContext);
        }

        return this.getRuleContext(i, MlArgContext);
    }
    public override get ruleIndex(): number {
        return OpenSearchPPLParser.RULE_mlCommand;
    }
    public override accept<Result>(visitor: OpenSearchPPLParserVisitor<Result>): Result | null {
        if (visitor.visitMlCommand) {
            return visitor.visitMlCommand(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class MlArgContext extends antlr.ParserRuleContext {
    public _argName?: IdentContext;
    public _argValue?: LiteralValueContext;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public EQUAL(): antlr.TerminalNode | null {
        return this.getToken(OpenSearchPPLParser.EQUAL, 0);
    }
    public ident(): IdentContext | null {
        return this.getRuleContext(0, IdentContext);
    }
    public literalValue(): LiteralValueContext | null {
        return this.getRuleContext(0, LiteralValueContext);
    }
    public override get ruleIndex(): number {
        return OpenSearchPPLParser.RULE_mlArg;
    }
    public override accept<Result>(visitor: OpenSearchPPLParserVisitor<Result>): Result | null {
        if (visitor.visitMlArg) {
            return visitor.visitMlArg(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class FromClauseContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public SOURCE(): antlr.TerminalNode | null {
        return this.getToken(OpenSearchPPLParser.SOURCE, 0);
    }
    public EQUAL(): antlr.TerminalNode {
        return this.getToken(OpenSearchPPLParser.EQUAL, 0)!;
    }
    public tableOrSubqueryClause(): TableOrSubqueryClauseContext | null {
        return this.getRuleContext(0, TableOrSubqueryClauseContext);
    }
    public INDEX(): antlr.TerminalNode | null {
        return this.getToken(OpenSearchPPLParser.INDEX, 0);
    }
    public tableFunction(): TableFunctionContext | null {
        return this.getRuleContext(0, TableFunctionContext);
    }
    public dynamicSourceClause(): DynamicSourceClauseContext | null {
        return this.getRuleContext(0, DynamicSourceClauseContext);
    }
    public override get ruleIndex(): number {
        return OpenSearchPPLParser.RULE_fromClause;
    }
    public override accept<Result>(visitor: OpenSearchPPLParserVisitor<Result>): Result | null {
        if (visitor.visitFromClause) {
            return visitor.visitFromClause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class TableOrSubqueryClauseContext extends antlr.ParserRuleContext {
    public _alias?: QualifiedNameContext;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public LT_SQR_PRTHS(): antlr.TerminalNode | null {
        return this.getToken(OpenSearchPPLParser.LT_SQR_PRTHS, 0);
    }
    public subSearch(): SubSearchContext | null {
        return this.getRuleContext(0, SubSearchContext);
    }
    public RT_SQR_PRTHS(): antlr.TerminalNode | null {
        return this.getToken(OpenSearchPPLParser.RT_SQR_PRTHS, 0);
    }
    public AS(): antlr.TerminalNode | null {
        return this.getToken(OpenSearchPPLParser.AS, 0);
    }
    public qualifiedName(): QualifiedNameContext | null {
        return this.getRuleContext(0, QualifiedNameContext);
    }
    public tableSourceClause(): TableSourceClauseContext | null {
        return this.getRuleContext(0, TableSourceClauseContext);
    }
    public override get ruleIndex(): number {
        return OpenSearchPPLParser.RULE_tableOrSubqueryClause;
    }
    public override accept<Result>(visitor: OpenSearchPPLParserVisitor<Result>): Result | null {
        if (visitor.visitTableOrSubqueryClause) {
            return visitor.visitTableOrSubqueryClause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class TableSourceClauseContext extends antlr.ParserRuleContext {
    public _alias?: QualifiedNameContext;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public tableSource(): TableSourceContext[];
    public tableSource(i: number): TableSourceContext | null;
    public tableSource(i?: number): TableSourceContext[] | TableSourceContext | null {
        if (i === undefined) {
            return this.getRuleContexts(TableSourceContext);
        }

        return this.getRuleContext(i, TableSourceContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(OpenSearchPPLParser.COMMA);
    	} else {
    		return this.getToken(OpenSearchPPLParser.COMMA, i);
    	}
    }
    public AS(): antlr.TerminalNode | null {
        return this.getToken(OpenSearchPPLParser.AS, 0);
    }
    public qualifiedName(): QualifiedNameContext | null {
        return this.getRuleContext(0, QualifiedNameContext);
    }
    public override get ruleIndex(): number {
        return OpenSearchPPLParser.RULE_tableSourceClause;
    }
    public override accept<Result>(visitor: OpenSearchPPLParserVisitor<Result>): Result | null {
        if (visitor.visitTableSourceClause) {
            return visitor.visitTableSourceClause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class DynamicSourceClauseContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public LT_SQR_PRTHS(): antlr.TerminalNode {
        return this.getToken(OpenSearchPPLParser.LT_SQR_PRTHS, 0)!;
    }
    public sourceReferences(): SourceReferencesContext {
        return this.getRuleContext(0, SourceReferencesContext)!;
    }
    public RT_SQR_PRTHS(): antlr.TerminalNode {
        return this.getToken(OpenSearchPPLParser.RT_SQR_PRTHS, 0)!;
    }
    public COMMA(): antlr.TerminalNode | null {
        return this.getToken(OpenSearchPPLParser.COMMA, 0);
    }
    public sourceFilterArgs(): SourceFilterArgsContext | null {
        return this.getRuleContext(0, SourceFilterArgsContext);
    }
    public override get ruleIndex(): number {
        return OpenSearchPPLParser.RULE_dynamicSourceClause;
    }
    public override accept<Result>(visitor: OpenSearchPPLParserVisitor<Result>): Result | null {
        if (visitor.visitDynamicSourceClause) {
            return visitor.visitDynamicSourceClause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class SourceReferencesContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public sourceReference(): SourceReferenceContext[];
    public sourceReference(i: number): SourceReferenceContext | null;
    public sourceReference(i?: number): SourceReferenceContext[] | SourceReferenceContext | null {
        if (i === undefined) {
            return this.getRuleContexts(SourceReferenceContext);
        }

        return this.getRuleContext(i, SourceReferenceContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(OpenSearchPPLParser.COMMA);
    	} else {
    		return this.getToken(OpenSearchPPLParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return OpenSearchPPLParser.RULE_sourceReferences;
    }
    public override accept<Result>(visitor: OpenSearchPPLParserVisitor<Result>): Result | null {
        if (visitor.visitSourceReferences) {
            return visitor.visitSourceReferences(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class SourceReferenceContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public wcQualifiedName(): WcQualifiedNameContext {
        return this.getRuleContext(0, WcQualifiedNameContext)!;
    }
    public CLUSTER(): antlr.TerminalNode | null {
        return this.getToken(OpenSearchPPLParser.CLUSTER, 0);
    }
    public override get ruleIndex(): number {
        return OpenSearchPPLParser.RULE_sourceReference;
    }
    public override accept<Result>(visitor: OpenSearchPPLParserVisitor<Result>): Result | null {
        if (visitor.visitSourceReference) {
            return visitor.visitSourceReference(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class SourceFilterArgsContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public sourceFilterArg(): SourceFilterArgContext[];
    public sourceFilterArg(i: number): SourceFilterArgContext | null;
    public sourceFilterArg(i?: number): SourceFilterArgContext[] | SourceFilterArgContext | null {
        if (i === undefined) {
            return this.getRuleContexts(SourceFilterArgContext);
        }

        return this.getRuleContext(i, SourceFilterArgContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(OpenSearchPPLParser.COMMA);
    	} else {
    		return this.getToken(OpenSearchPPLParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return OpenSearchPPLParser.RULE_sourceFilterArgs;
    }
    public override accept<Result>(visitor: OpenSearchPPLParserVisitor<Result>): Result | null {
        if (visitor.visitSourceFilterArgs) {
            return visitor.visitSourceFilterArgs(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class SourceFilterArgContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public ident(): IdentContext {
        return this.getRuleContext(0, IdentContext)!;
    }
    public EQUAL(): antlr.TerminalNode | null {
        return this.getToken(OpenSearchPPLParser.EQUAL, 0);
    }
    public literalValue(): LiteralValueContext | null {
        return this.getRuleContext(0, LiteralValueContext);
    }
    public IN(): antlr.TerminalNode | null {
        return this.getToken(OpenSearchPPLParser.IN, 0);
    }
    public valueList(): ValueListContext | null {
        return this.getRuleContext(0, ValueListContext);
    }
    public override get ruleIndex(): number {
        return OpenSearchPPLParser.RULE_sourceFilterArg;
    }
    public override accept<Result>(visitor: OpenSearchPPLParserVisitor<Result>): Result | null {
        if (visitor.visitSourceFilterArg) {
            return visitor.visitSourceFilterArg(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class JoinCommandContext extends antlr.ParserRuleContext {
    public _right?: TableOrSubqueryClauseContext;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public JOIN(): antlr.TerminalNode {
        return this.getToken(OpenSearchPPLParser.JOIN, 0)!;
    }
    public tableOrSubqueryClause(): TableOrSubqueryClauseContext {
        return this.getRuleContext(0, TableOrSubqueryClauseContext)!;
    }
    public joinOption(): JoinOptionContext[];
    public joinOption(i: number): JoinOptionContext | null;
    public joinOption(i?: number): JoinOptionContext[] | JoinOptionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(JoinOptionContext);
        }

        return this.getRuleContext(i, JoinOptionContext);
    }
    public fieldList(): FieldListContext | null {
        return this.getRuleContext(0, FieldListContext);
    }
    public sideAlias(): SideAliasContext | null {
        return this.getRuleContext(0, SideAliasContext);
    }
    public joinCriteria(): JoinCriteriaContext | null {
        return this.getRuleContext(0, JoinCriteriaContext);
    }
    public sqlLikeJoinType(): SqlLikeJoinTypeContext | null {
        return this.getRuleContext(0, SqlLikeJoinTypeContext);
    }
    public joinHintList(): JoinHintListContext | null {
        return this.getRuleContext(0, JoinHintListContext);
    }
    public override get ruleIndex(): number {
        return OpenSearchPPLParser.RULE_joinCommand;
    }
    public override accept<Result>(visitor: OpenSearchPPLParserVisitor<Result>): Result | null {
        if (visitor.visitJoinCommand) {
            return visitor.visitJoinCommand(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class SqlLikeJoinTypeContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public INNER(): antlr.TerminalNode | null {
        return this.getToken(OpenSearchPPLParser.INNER, 0);
    }
    public CROSS(): antlr.TerminalNode | null {
        return this.getToken(OpenSearchPPLParser.CROSS, 0);
    }
    public LEFT(): antlr.TerminalNode | null {
        return this.getToken(OpenSearchPPLParser.LEFT, 0);
    }
    public OUTER(): antlr.TerminalNode | null {
        return this.getToken(OpenSearchPPLParser.OUTER, 0);
    }
    public RIGHT(): antlr.TerminalNode | null {
        return this.getToken(OpenSearchPPLParser.RIGHT, 0);
    }
    public FULL(): antlr.TerminalNode | null {
        return this.getToken(OpenSearchPPLParser.FULL, 0);
    }
    public SEMI(): antlr.TerminalNode | null {
        return this.getToken(OpenSearchPPLParser.SEMI, 0);
    }
    public ANTI(): antlr.TerminalNode | null {
        return this.getToken(OpenSearchPPLParser.ANTI, 0);
    }
    public override get ruleIndex(): number {
        return OpenSearchPPLParser.RULE_sqlLikeJoinType;
    }
    public override accept<Result>(visitor: OpenSearchPPLParserVisitor<Result>): Result | null {
        if (visitor.visitSqlLikeJoinType) {
            return visitor.visitSqlLikeJoinType(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class JoinTypeContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public INNER(): antlr.TerminalNode | null {
        return this.getToken(OpenSearchPPLParser.INNER, 0);
    }
    public CROSS(): antlr.TerminalNode | null {
        return this.getToken(OpenSearchPPLParser.CROSS, 0);
    }
    public OUTER(): antlr.TerminalNode | null {
        return this.getToken(OpenSearchPPLParser.OUTER, 0);
    }
    public LEFT(): antlr.TerminalNode | null {
        return this.getToken(OpenSearchPPLParser.LEFT, 0);
    }
    public RIGHT(): antlr.TerminalNode | null {
        return this.getToken(OpenSearchPPLParser.RIGHT, 0);
    }
    public FULL(): antlr.TerminalNode | null {
        return this.getToken(OpenSearchPPLParser.FULL, 0);
    }
    public SEMI(): antlr.TerminalNode | null {
        return this.getToken(OpenSearchPPLParser.SEMI, 0);
    }
    public ANTI(): antlr.TerminalNode | null {
        return this.getToken(OpenSearchPPLParser.ANTI, 0);
    }
    public override get ruleIndex(): number {
        return OpenSearchPPLParser.RULE_joinType;
    }
    public override accept<Result>(visitor: OpenSearchPPLParserVisitor<Result>): Result | null {
        if (visitor.visitJoinType) {
            return visitor.visitJoinType(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class SideAliasContext extends antlr.ParserRuleContext {
    public _leftAlias?: QualifiedNameContext;
    public _rightAlias?: QualifiedNameContext;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public LEFT(): antlr.TerminalNode | null {
        return this.getToken(OpenSearchPPLParser.LEFT, 0);
    }
    public EQUAL(): antlr.TerminalNode[];
    public EQUAL(i: number): antlr.TerminalNode | null;
    public EQUAL(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(OpenSearchPPLParser.EQUAL);
    	} else {
    		return this.getToken(OpenSearchPPLParser.EQUAL, i);
    	}
    }
    public COMMA(): antlr.TerminalNode | null {
        return this.getToken(OpenSearchPPLParser.COMMA, 0);
    }
    public RIGHT(): antlr.TerminalNode | null {
        return this.getToken(OpenSearchPPLParser.RIGHT, 0);
    }
    public qualifiedName(): QualifiedNameContext[];
    public qualifiedName(i: number): QualifiedNameContext | null;
    public qualifiedName(i?: number): QualifiedNameContext[] | QualifiedNameContext | null {
        if (i === undefined) {
            return this.getRuleContexts(QualifiedNameContext);
        }

        return this.getRuleContext(i, QualifiedNameContext);
    }
    public override get ruleIndex(): number {
        return OpenSearchPPLParser.RULE_sideAlias;
    }
    public override accept<Result>(visitor: OpenSearchPPLParserVisitor<Result>): Result | null {
        if (visitor.visitSideAlias) {
            return visitor.visitSideAlias(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class JoinCriteriaContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public logicalExpression(): LogicalExpressionContext {
        return this.getRuleContext(0, LogicalExpressionContext)!;
    }
    public ON(): antlr.TerminalNode | null {
        return this.getToken(OpenSearchPPLParser.ON, 0);
    }
    public WHERE(): antlr.TerminalNode | null {
        return this.getToken(OpenSearchPPLParser.WHERE, 0);
    }
    public override get ruleIndex(): number {
        return OpenSearchPPLParser.RULE_joinCriteria;
    }
    public override accept<Result>(visitor: OpenSearchPPLParserVisitor<Result>): Result | null {
        if (visitor.visitJoinCriteria) {
            return visitor.visitJoinCriteria(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class JoinHintListContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public hintPair(): HintPairContext[];
    public hintPair(i: number): HintPairContext | null;
    public hintPair(i?: number): HintPairContext[] | HintPairContext | null {
        if (i === undefined) {
            return this.getRuleContexts(HintPairContext);
        }

        return this.getRuleContext(i, HintPairContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(OpenSearchPPLParser.COMMA);
    	} else {
    		return this.getToken(OpenSearchPPLParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return OpenSearchPPLParser.RULE_joinHintList;
    }
    public override accept<Result>(visitor: OpenSearchPPLParserVisitor<Result>): Result | null {
        if (visitor.visitJoinHintList) {
            return visitor.visitJoinHintList(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class HintPairContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public override get ruleIndex(): number {
        return OpenSearchPPLParser.RULE_hintPair;
    }
    public override copyFrom(ctx: HintPairContext): void {
        super.copyFrom(ctx);
    }
}
export class RightHintContext extends HintPairContext {
    public _rightHintKey?: Token | null;
    public _rightHintValue?: IdentContext;
    public constructor(ctx: HintPairContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public DOT(): antlr.TerminalNode {
        return this.getToken(OpenSearchPPLParser.DOT, 0)!;
    }
    public ID(): antlr.TerminalNode {
        return this.getToken(OpenSearchPPLParser.ID, 0)!;
    }
    public EQUAL(): antlr.TerminalNode {
        return this.getToken(OpenSearchPPLParser.EQUAL, 0)!;
    }
    public RIGHT_HINT(): antlr.TerminalNode {
        return this.getToken(OpenSearchPPLParser.RIGHT_HINT, 0)!;
    }
    public ident(): IdentContext {
        return this.getRuleContext(0, IdentContext)!;
    }
    public override accept<Result>(visitor: OpenSearchPPLParserVisitor<Result>): Result | null {
        if (visitor.visitRightHint) {
            return visitor.visitRightHint(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class LeftHintContext extends HintPairContext {
    public _leftHintKey?: Token | null;
    public _leftHintValue?: IdentContext;
    public constructor(ctx: HintPairContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public DOT(): antlr.TerminalNode {
        return this.getToken(OpenSearchPPLParser.DOT, 0)!;
    }
    public ID(): antlr.TerminalNode {
        return this.getToken(OpenSearchPPLParser.ID, 0)!;
    }
    public EQUAL(): antlr.TerminalNode {
        return this.getToken(OpenSearchPPLParser.EQUAL, 0)!;
    }
    public LEFT_HINT(): antlr.TerminalNode {
        return this.getToken(OpenSearchPPLParser.LEFT_HINT, 0)!;
    }
    public ident(): IdentContext {
        return this.getRuleContext(0, IdentContext)!;
    }
    public override accept<Result>(visitor: OpenSearchPPLParserVisitor<Result>): Result | null {
        if (visitor.visitLeftHint) {
            return visitor.visitLeftHint(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class JoinOptionContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public override get ruleIndex(): number {
        return OpenSearchPPLParser.RULE_joinOption;
    }
    public override copyFrom(ctx: JoinOptionContext): void {
        super.copyFrom(ctx);
    }
}
export class TypeOptionContext extends JoinOptionContext {
    public constructor(ctx: JoinOptionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public TYPE(): antlr.TerminalNode {
        return this.getToken(OpenSearchPPLParser.TYPE, 0)!;
    }
    public EQUAL(): antlr.TerminalNode {
        return this.getToken(OpenSearchPPLParser.EQUAL, 0)!;
    }
    public joinType(): JoinTypeContext {
        return this.getRuleContext(0, JoinTypeContext)!;
    }
    public override accept<Result>(visitor: OpenSearchPPLParserVisitor<Result>): Result | null {
        if (visitor.visitTypeOption) {
            return visitor.visitTypeOption(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class MaxOptionContext extends JoinOptionContext {
    public constructor(ctx: JoinOptionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public MAX(): antlr.TerminalNode {
        return this.getToken(OpenSearchPPLParser.MAX, 0)!;
    }
    public EQUAL(): antlr.TerminalNode {
        return this.getToken(OpenSearchPPLParser.EQUAL, 0)!;
    }
    public integerLiteral(): IntegerLiteralContext {
        return this.getRuleContext(0, IntegerLiteralContext)!;
    }
    public override accept<Result>(visitor: OpenSearchPPLParserVisitor<Result>): Result | null {
        if (visitor.visitMaxOption) {
            return visitor.visitMaxOption(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class OverwriteOptionContext extends JoinOptionContext {
    public constructor(ctx: JoinOptionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public OVERWRITE(): antlr.TerminalNode {
        return this.getToken(OpenSearchPPLParser.OVERWRITE, 0)!;
    }
    public EQUAL(): antlr.TerminalNode {
        return this.getToken(OpenSearchPPLParser.EQUAL, 0)!;
    }
    public booleanLiteral(): BooleanLiteralContext {
        return this.getRuleContext(0, BooleanLiteralContext)!;
    }
    public override accept<Result>(visitor: OpenSearchPPLParserVisitor<Result>): Result | null {
        if (visitor.visitOverwriteOption) {
            return visitor.visitOverwriteOption(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class RenameClasueContext extends antlr.ParserRuleContext {
    public _orignalField?: RenameFieldExpressionContext;
    public _renamedField?: RenameFieldExpressionContext;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public AS(): antlr.TerminalNode {
        return this.getToken(OpenSearchPPLParser.AS, 0)!;
    }
    public renameFieldExpression(): RenameFieldExpressionContext[];
    public renameFieldExpression(i: number): RenameFieldExpressionContext | null;
    public renameFieldExpression(i?: number): RenameFieldExpressionContext[] | RenameFieldExpressionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(RenameFieldExpressionContext);
        }

        return this.getRuleContext(i, RenameFieldExpressionContext);
    }
    public override get ruleIndex(): number {
        return OpenSearchPPLParser.RULE_renameClasue;
    }
    public override accept<Result>(visitor: OpenSearchPPLParserVisitor<Result>): Result | null {
        if (visitor.visitRenameClasue) {
            return visitor.visitRenameClasue(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ByClauseContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public BY(): antlr.TerminalNode {
        return this.getToken(OpenSearchPPLParser.BY, 0)!;
    }
    public fieldList(): FieldListContext {
        return this.getRuleContext(0, FieldListContext)!;
    }
    public override get ruleIndex(): number {
        return OpenSearchPPLParser.RULE_byClause;
    }
    public override accept<Result>(visitor: OpenSearchPPLParserVisitor<Result>): Result | null {
        if (visitor.visitByClause) {
            return visitor.visitByClause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class StatsByClauseContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public BY(): antlr.TerminalNode {
        return this.getToken(OpenSearchPPLParser.BY, 0)!;
    }
    public fieldList(): FieldListContext | null {
        return this.getRuleContext(0, FieldListContext);
    }
    public bySpanClause(): BySpanClauseContext | null {
        return this.getRuleContext(0, BySpanClauseContext);
    }
    public COMMA(): antlr.TerminalNode | null {
        return this.getToken(OpenSearchPPLParser.COMMA, 0);
    }
    public override get ruleIndex(): number {
        return OpenSearchPPLParser.RULE_statsByClause;
    }
    public override accept<Result>(visitor: OpenSearchPPLParserVisitor<Result>): Result | null {
        if (visitor.visitStatsByClause) {
            return visitor.visitStatsByClause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class BySpanClauseContext extends antlr.ParserRuleContext {
    public _alias?: QualifiedNameContext;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public spanClause(): SpanClauseContext {
        return this.getRuleContext(0, SpanClauseContext)!;
    }
    public AS(): antlr.TerminalNode | null {
        return this.getToken(OpenSearchPPLParser.AS, 0);
    }
    public qualifiedName(): QualifiedNameContext | null {
        return this.getRuleContext(0, QualifiedNameContext);
    }
    public override get ruleIndex(): number {
        return OpenSearchPPLParser.RULE_bySpanClause;
    }
    public override accept<Result>(visitor: OpenSearchPPLParserVisitor<Result>): Result | null {
        if (visitor.visitBySpanClause) {
            return visitor.visitBySpanClause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class SpanClauseContext extends antlr.ParserRuleContext {
    public _value?: LiteralValueContext;
    public _unit?: TimespanUnitContext;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public SPAN(): antlr.TerminalNode {
        return this.getToken(OpenSearchPPLParser.SPAN, 0)!;
    }
    public LT_PRTHS(): antlr.TerminalNode {
        return this.getToken(OpenSearchPPLParser.LT_PRTHS, 0)!;
    }
    public fieldExpression(): FieldExpressionContext {
        return this.getRuleContext(0, FieldExpressionContext)!;
    }
    public COMMA(): antlr.TerminalNode {
        return this.getToken(OpenSearchPPLParser.COMMA, 0)!;
    }
    public RT_PRTHS(): antlr.TerminalNode {
        return this.getToken(OpenSearchPPLParser.RT_PRTHS, 0)!;
    }
    public literalValue(): LiteralValueContext {
        return this.getRuleContext(0, LiteralValueContext)!;
    }
    public timespanUnit(): TimespanUnitContext | null {
        return this.getRuleContext(0, TimespanUnitContext);
    }
    public override get ruleIndex(): number {
        return OpenSearchPPLParser.RULE_spanClause;
    }
    public override accept<Result>(visitor: OpenSearchPPLParserVisitor<Result>): Result | null {
        if (visitor.visitSpanClause) {
            return visitor.visitSpanClause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class SortbyClauseContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public sortField(): SortFieldContext[];
    public sortField(i: number): SortFieldContext | null;
    public sortField(i?: number): SortFieldContext[] | SortFieldContext | null {
        if (i === undefined) {
            return this.getRuleContexts(SortFieldContext);
        }

        return this.getRuleContext(i, SortFieldContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(OpenSearchPPLParser.COMMA);
    	} else {
    		return this.getToken(OpenSearchPPLParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return OpenSearchPPLParser.RULE_sortbyClause;
    }
    public override accept<Result>(visitor: OpenSearchPPLParserVisitor<Result>): Result | null {
        if (visitor.visitSortbyClause) {
            return visitor.visitSortbyClause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class EvalClauseContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public fieldExpression(): FieldExpressionContext {
        return this.getRuleContext(0, FieldExpressionContext)!;
    }
    public EQUAL(): antlr.TerminalNode {
        return this.getToken(OpenSearchPPLParser.EQUAL, 0)!;
    }
    public logicalExpression(): LogicalExpressionContext {
        return this.getRuleContext(0, LogicalExpressionContext)!;
    }
    public override get ruleIndex(): number {
        return OpenSearchPPLParser.RULE_evalClause;
    }
    public override accept<Result>(visitor: OpenSearchPPLParserVisitor<Result>): Result | null {
        if (visitor.visitEvalClause) {
            return visitor.visitEvalClause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class EventstatsAggTermContext extends antlr.ParserRuleContext {
    public _alias?: WcFieldExpressionContext;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public windowFunction(): WindowFunctionContext {
        return this.getRuleContext(0, WindowFunctionContext)!;
    }
    public AS(): antlr.TerminalNode | null {
        return this.getToken(OpenSearchPPLParser.AS, 0);
    }
    public wcFieldExpression(): WcFieldExpressionContext | null {
        return this.getRuleContext(0, WcFieldExpressionContext);
    }
    public override get ruleIndex(): number {
        return OpenSearchPPLParser.RULE_eventstatsAggTerm;
    }
    public override accept<Result>(visitor: OpenSearchPPLParserVisitor<Result>): Result | null {
        if (visitor.visitEventstatsAggTerm) {
            return visitor.visitEventstatsAggTerm(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class WindowFunctionContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public windowFunctionName(): WindowFunctionNameContext {
        return this.getRuleContext(0, WindowFunctionNameContext)!;
    }
    public LT_PRTHS(): antlr.TerminalNode {
        return this.getToken(OpenSearchPPLParser.LT_PRTHS, 0)!;
    }
    public functionArgs(): FunctionArgsContext {
        return this.getRuleContext(0, FunctionArgsContext)!;
    }
    public RT_PRTHS(): antlr.TerminalNode {
        return this.getToken(OpenSearchPPLParser.RT_PRTHS, 0)!;
    }
    public override get ruleIndex(): number {
        return OpenSearchPPLParser.RULE_windowFunction;
    }
    public override accept<Result>(visitor: OpenSearchPPLParserVisitor<Result>): Result | null {
        if (visitor.visitWindowFunction) {
            return visitor.visitWindowFunction(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class WindowFunctionNameContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public statsFunctionName(): StatsFunctionNameContext | null {
        return this.getRuleContext(0, StatsFunctionNameContext);
    }
    public scalarWindowFunctionName(): ScalarWindowFunctionNameContext | null {
        return this.getRuleContext(0, ScalarWindowFunctionNameContext);
    }
    public override get ruleIndex(): number {
        return OpenSearchPPLParser.RULE_windowFunctionName;
    }
    public override accept<Result>(visitor: OpenSearchPPLParserVisitor<Result>): Result | null {
        if (visitor.visitWindowFunctionName) {
            return visitor.visitWindowFunctionName(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ScalarWindowFunctionNameContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public ROW_NUMBER(): antlr.TerminalNode | null {
        return this.getToken(OpenSearchPPLParser.ROW_NUMBER, 0);
    }
    public RANK(): antlr.TerminalNode | null {
        return this.getToken(OpenSearchPPLParser.RANK, 0);
    }
    public DENSE_RANK(): antlr.TerminalNode | null {
        return this.getToken(OpenSearchPPLParser.DENSE_RANK, 0);
    }
    public PERCENT_RANK(): antlr.TerminalNode | null {
        return this.getToken(OpenSearchPPLParser.PERCENT_RANK, 0);
    }
    public CUME_DIST(): antlr.TerminalNode | null {
        return this.getToken(OpenSearchPPLParser.CUME_DIST, 0);
    }
    public FIRST(): antlr.TerminalNode | null {
        return this.getToken(OpenSearchPPLParser.FIRST, 0);
    }
    public LAST(): antlr.TerminalNode | null {
        return this.getToken(OpenSearchPPLParser.LAST, 0);
    }
    public NTH(): antlr.TerminalNode | null {
        return this.getToken(OpenSearchPPLParser.NTH, 0);
    }
    public NTILE(): antlr.TerminalNode | null {
        return this.getToken(OpenSearchPPLParser.NTILE, 0);
    }
    public DISTINCT_COUNT(): antlr.TerminalNode | null {
        return this.getToken(OpenSearchPPLParser.DISTINCT_COUNT, 0);
    }
    public DC(): antlr.TerminalNode | null {
        return this.getToken(OpenSearchPPLParser.DC, 0);
    }
    public override get ruleIndex(): number {
        return OpenSearchPPLParser.RULE_scalarWindowFunctionName;
    }
    public override accept<Result>(visitor: OpenSearchPPLParserVisitor<Result>): Result | null {
        if (visitor.visitScalarWindowFunctionName) {
            return visitor.visitScalarWindowFunctionName(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class StatsAggTermContext extends antlr.ParserRuleContext {
    public _alias?: WcFieldExpressionContext;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public statsFunction(): StatsFunctionContext {
        return this.getRuleContext(0, StatsFunctionContext)!;
    }
    public AS(): antlr.TerminalNode | null {
        return this.getToken(OpenSearchPPLParser.AS, 0);
    }
    public wcFieldExpression(): WcFieldExpressionContext | null {
        return this.getRuleContext(0, WcFieldExpressionContext);
    }
    public override get ruleIndex(): number {
        return OpenSearchPPLParser.RULE_statsAggTerm;
    }
    public override accept<Result>(visitor: OpenSearchPPLParserVisitor<Result>): Result | null {
        if (visitor.visitStatsAggTerm) {
            return visitor.visitStatsAggTerm(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class StatsFunctionContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public override get ruleIndex(): number {
        return OpenSearchPPLParser.RULE_statsFunction;
    }
    public override copyFrom(ctx: StatsFunctionContext): void {
        super.copyFrom(ctx);
    }
}
export class DistinctCountFunctionCallContext extends StatsFunctionContext {
    public constructor(ctx: StatsFunctionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public LT_PRTHS(): antlr.TerminalNode {
        return this.getToken(OpenSearchPPLParser.LT_PRTHS, 0)!;
    }
    public valueExpression(): ValueExpressionContext {
        return this.getRuleContext(0, ValueExpressionContext)!;
    }
    public RT_PRTHS(): antlr.TerminalNode {
        return this.getToken(OpenSearchPPLParser.RT_PRTHS, 0)!;
    }
    public DISTINCT_COUNT(): antlr.TerminalNode | null {
        return this.getToken(OpenSearchPPLParser.DISTINCT_COUNT, 0);
    }
    public DC(): antlr.TerminalNode | null {
        return this.getToken(OpenSearchPPLParser.DC, 0);
    }
    public DISTINCT_COUNT_APPROX(): antlr.TerminalNode | null {
        return this.getToken(OpenSearchPPLParser.DISTINCT_COUNT_APPROX, 0);
    }
    public override accept<Result>(visitor: OpenSearchPPLParserVisitor<Result>): Result | null {
        if (visitor.visitDistinctCountFunctionCall) {
            return visitor.visitDistinctCountFunctionCall(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class PercentileApproxFunctionCallContext extends StatsFunctionContext {
    public constructor(ctx: StatsFunctionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public percentileApproxFunction(): PercentileApproxFunctionContext {
        return this.getRuleContext(0, PercentileApproxFunctionContext)!;
    }
    public override accept<Result>(visitor: OpenSearchPPLParserVisitor<Result>): Result | null {
        if (visitor.visitPercentileApproxFunctionCall) {
            return visitor.visitPercentileApproxFunctionCall(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class PercentileShortcutFunctionCallContext extends StatsFunctionContext {
    public constructor(ctx: StatsFunctionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public PERCENTILE_SHORTCUT(): antlr.TerminalNode {
        return this.getToken(OpenSearchPPLParser.PERCENTILE_SHORTCUT, 0)!;
    }
    public LT_PRTHS(): antlr.TerminalNode {
        return this.getToken(OpenSearchPPLParser.LT_PRTHS, 0)!;
    }
    public valueExpression(): ValueExpressionContext {
        return this.getRuleContext(0, ValueExpressionContext)!;
    }
    public RT_PRTHS(): antlr.TerminalNode {
        return this.getToken(OpenSearchPPLParser.RT_PRTHS, 0)!;
    }
    public override accept<Result>(visitor: OpenSearchPPLParserVisitor<Result>): Result | null {
        if (visitor.visitPercentileShortcutFunctionCall) {
            return visitor.visitPercentileShortcutFunctionCall(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class StatsFunctionCallContext extends StatsFunctionContext {
    public constructor(ctx: StatsFunctionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public statsFunctionName(): StatsFunctionNameContext {
        return this.getRuleContext(0, StatsFunctionNameContext)!;
    }
    public LT_PRTHS(): antlr.TerminalNode {
        return this.getToken(OpenSearchPPLParser.LT_PRTHS, 0)!;
    }
    public functionArgs(): FunctionArgsContext {
        return this.getRuleContext(0, FunctionArgsContext)!;
    }
    public RT_PRTHS(): antlr.TerminalNode {
        return this.getToken(OpenSearchPPLParser.RT_PRTHS, 0)!;
    }
    public override accept<Result>(visitor: OpenSearchPPLParserVisitor<Result>): Result | null {
        if (visitor.visitStatsFunctionCall) {
            return visitor.visitStatsFunctionCall(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class CountEvalFunctionCallContext extends StatsFunctionContext {
    public constructor(ctx: StatsFunctionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public LT_PRTHS(): antlr.TerminalNode {
        return this.getToken(OpenSearchPPLParser.LT_PRTHS, 0)!;
    }
    public evalExpression(): EvalExpressionContext {
        return this.getRuleContext(0, EvalExpressionContext)!;
    }
    public RT_PRTHS(): antlr.TerminalNode {
        return this.getToken(OpenSearchPPLParser.RT_PRTHS, 0)!;
    }
    public COUNT(): antlr.TerminalNode | null {
        return this.getToken(OpenSearchPPLParser.COUNT, 0);
    }
    public C(): antlr.TerminalNode | null {
        return this.getToken(OpenSearchPPLParser.C, 0);
    }
    public override accept<Result>(visitor: OpenSearchPPLParserVisitor<Result>): Result | null {
        if (visitor.visitCountEvalFunctionCall) {
            return visitor.visitCountEvalFunctionCall(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class CountAllFunctionCallContext extends StatsFunctionContext {
    public constructor(ctx: StatsFunctionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public COUNT(): antlr.TerminalNode | null {
        return this.getToken(OpenSearchPPLParser.COUNT, 0);
    }
    public C(): antlr.TerminalNode | null {
        return this.getToken(OpenSearchPPLParser.C, 0);
    }
    public LT_PRTHS(): antlr.TerminalNode | null {
        return this.getToken(OpenSearchPPLParser.LT_PRTHS, 0);
    }
    public RT_PRTHS(): antlr.TerminalNode | null {
        return this.getToken(OpenSearchPPLParser.RT_PRTHS, 0);
    }
    public override accept<Result>(visitor: OpenSearchPPLParserVisitor<Result>): Result | null {
        if (visitor.visitCountAllFunctionCall) {
            return visitor.visitCountAllFunctionCall(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class TakeAggFunctionCallContext extends StatsFunctionContext {
    public constructor(ctx: StatsFunctionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public takeAggFunction(): TakeAggFunctionContext {
        return this.getRuleContext(0, TakeAggFunctionContext)!;
    }
    public override accept<Result>(visitor: OpenSearchPPLParserVisitor<Result>): Result | null {
        if (visitor.visitTakeAggFunctionCall) {
            return visitor.visitTakeAggFunctionCall(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class StatsFunctionNameContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public AVG(): antlr.TerminalNode | null {
        return this.getToken(OpenSearchPPLParser.AVG, 0);
    }
    public COUNT(): antlr.TerminalNode | null {
        return this.getToken(OpenSearchPPLParser.COUNT, 0);
    }
    public SUM(): antlr.TerminalNode | null {
        return this.getToken(OpenSearchPPLParser.SUM, 0);
    }
    public MIN(): antlr.TerminalNode | null {
        return this.getToken(OpenSearchPPLParser.MIN, 0);
    }
    public MAX(): antlr.TerminalNode | null {
        return this.getToken(OpenSearchPPLParser.MAX, 0);
    }
    public VAR_SAMP(): antlr.TerminalNode | null {
        return this.getToken(OpenSearchPPLParser.VAR_SAMP, 0);
    }
    public VAR_POP(): antlr.TerminalNode | null {
        return this.getToken(OpenSearchPPLParser.VAR_POP, 0);
    }
    public STDDEV_SAMP(): antlr.TerminalNode | null {
        return this.getToken(OpenSearchPPLParser.STDDEV_SAMP, 0);
    }
    public STDDEV_POP(): antlr.TerminalNode | null {
        return this.getToken(OpenSearchPPLParser.STDDEV_POP, 0);
    }
    public PERCENTILE(): antlr.TerminalNode | null {
        return this.getToken(OpenSearchPPLParser.PERCENTILE, 0);
    }
    public PERCENTILE_APPROX(): antlr.TerminalNode | null {
        return this.getToken(OpenSearchPPLParser.PERCENTILE_APPROX, 0);
    }
    public MEDIAN(): antlr.TerminalNode | null {
        return this.getToken(OpenSearchPPLParser.MEDIAN, 0);
    }
    public LIST(): antlr.TerminalNode | null {
        return this.getToken(OpenSearchPPLParser.LIST, 0);
    }
    public FIRST(): antlr.TerminalNode | null {
        return this.getToken(OpenSearchPPLParser.FIRST, 0);
    }
    public EARLIEST(): antlr.TerminalNode | null {
        return this.getToken(OpenSearchPPLParser.EARLIEST, 0);
    }
    public LATEST(): antlr.TerminalNode | null {
        return this.getToken(OpenSearchPPLParser.LATEST, 0);
    }
    public LAST(): antlr.TerminalNode | null {
        return this.getToken(OpenSearchPPLParser.LAST, 0);
    }
    public override get ruleIndex(): number {
        return OpenSearchPPLParser.RULE_statsFunctionName;
    }
    public override accept<Result>(visitor: OpenSearchPPLParserVisitor<Result>): Result | null {
        if (visitor.visitStatsFunctionName) {
            return visitor.visitStatsFunctionName(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class TakeAggFunctionContext extends antlr.ParserRuleContext {
    public _size?: IntegerLiteralContext;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public TAKE(): antlr.TerminalNode {
        return this.getToken(OpenSearchPPLParser.TAKE, 0)!;
    }
    public LT_PRTHS(): antlr.TerminalNode {
        return this.getToken(OpenSearchPPLParser.LT_PRTHS, 0)!;
    }
    public fieldExpression(): FieldExpressionContext {
        return this.getRuleContext(0, FieldExpressionContext)!;
    }
    public RT_PRTHS(): antlr.TerminalNode {
        return this.getToken(OpenSearchPPLParser.RT_PRTHS, 0)!;
    }
    public COMMA(): antlr.TerminalNode | null {
        return this.getToken(OpenSearchPPLParser.COMMA, 0);
    }
    public integerLiteral(): IntegerLiteralContext | null {
        return this.getRuleContext(0, IntegerLiteralContext);
    }
    public override get ruleIndex(): number {
        return OpenSearchPPLParser.RULE_takeAggFunction;
    }
    public override accept<Result>(visitor: OpenSearchPPLParserVisitor<Result>): Result | null {
        if (visitor.visitTakeAggFunction) {
            return visitor.visitTakeAggFunction(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class PercentileApproxFunctionContext extends antlr.ParserRuleContext {
    public _aggField?: ValueExpressionContext;
    public _percent?: NumericLiteralContext;
    public _compression?: NumericLiteralContext;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public LT_PRTHS(): antlr.TerminalNode {
        return this.getToken(OpenSearchPPLParser.LT_PRTHS, 0)!;
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(OpenSearchPPLParser.COMMA);
    	} else {
    		return this.getToken(OpenSearchPPLParser.COMMA, i);
    	}
    }
    public RT_PRTHS(): antlr.TerminalNode {
        return this.getToken(OpenSearchPPLParser.RT_PRTHS, 0)!;
    }
    public PERCENTILE(): antlr.TerminalNode | null {
        return this.getToken(OpenSearchPPLParser.PERCENTILE, 0);
    }
    public PERCENTILE_APPROX(): antlr.TerminalNode | null {
        return this.getToken(OpenSearchPPLParser.PERCENTILE_APPROX, 0);
    }
    public valueExpression(): ValueExpressionContext {
        return this.getRuleContext(0, ValueExpressionContext)!;
    }
    public numericLiteral(): NumericLiteralContext[];
    public numericLiteral(i: number): NumericLiteralContext | null;
    public numericLiteral(i?: number): NumericLiteralContext[] | NumericLiteralContext | null {
        if (i === undefined) {
            return this.getRuleContexts(NumericLiteralContext);
        }

        return this.getRuleContext(i, NumericLiteralContext);
    }
    public override get ruleIndex(): number {
        return OpenSearchPPLParser.RULE_percentileApproxFunction;
    }
    public override accept<Result>(visitor: OpenSearchPPLParserVisitor<Result>): Result | null {
        if (visitor.visitPercentileApproxFunction) {
            return visitor.visitPercentileApproxFunction(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class NumericLiteralContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public integerLiteral(): IntegerLiteralContext | null {
        return this.getRuleContext(0, IntegerLiteralContext);
    }
    public decimalLiteral(): DecimalLiteralContext | null {
        return this.getRuleContext(0, DecimalLiteralContext);
    }
    public doubleLiteral(): DoubleLiteralContext | null {
        return this.getRuleContext(0, DoubleLiteralContext);
    }
    public floatLiteral(): FloatLiteralContext | null {
        return this.getRuleContext(0, FloatLiteralContext);
    }
    public override get ruleIndex(): number {
        return OpenSearchPPLParser.RULE_numericLiteral;
    }
    public override accept<Result>(visitor: OpenSearchPPLParserVisitor<Result>): Result | null {
        if (visitor.visitNumericLiteral) {
            return visitor.visitNumericLiteral(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class LogicalExpressionContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public override get ruleIndex(): number {
        return OpenSearchPPLParser.RULE_logicalExpression;
    }
    public override copyFrom(ctx: LogicalExpressionContext): void {
        super.copyFrom(ctx);
    }
}
export class LogicalNotContext extends LogicalExpressionContext {
    public constructor(ctx: LogicalExpressionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public NOT(): antlr.TerminalNode {
        return this.getToken(OpenSearchPPLParser.NOT, 0)!;
    }
    public logicalExpression(): LogicalExpressionContext {
        return this.getRuleContext(0, LogicalExpressionContext)!;
    }
    public override accept<Result>(visitor: OpenSearchPPLParserVisitor<Result>): Result | null {
        if (visitor.visitLogicalNot) {
            return visitor.visitLogicalNot(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class LogicalExprContext extends LogicalExpressionContext {
    public constructor(ctx: LogicalExpressionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public expression(): ExpressionContext {
        return this.getRuleContext(0, ExpressionContext)!;
    }
    public override accept<Result>(visitor: OpenSearchPPLParserVisitor<Result>): Result | null {
        if (visitor.visitLogicalExpr) {
            return visitor.visitLogicalExpr(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class LogicalAndContext extends LogicalExpressionContext {
    public _left?: LogicalExpressionContext;
    public _right?: LogicalExpressionContext;
    public constructor(ctx: LogicalExpressionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public AND(): antlr.TerminalNode {
        return this.getToken(OpenSearchPPLParser.AND, 0)!;
    }
    public logicalExpression(): LogicalExpressionContext[];
    public logicalExpression(i: number): LogicalExpressionContext | null;
    public logicalExpression(i?: number): LogicalExpressionContext[] | LogicalExpressionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(LogicalExpressionContext);
        }

        return this.getRuleContext(i, LogicalExpressionContext);
    }
    public override accept<Result>(visitor: OpenSearchPPLParserVisitor<Result>): Result | null {
        if (visitor.visitLogicalAnd) {
            return visitor.visitLogicalAnd(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class LogicalXorContext extends LogicalExpressionContext {
    public _left?: LogicalExpressionContext;
    public _right?: LogicalExpressionContext;
    public constructor(ctx: LogicalExpressionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public XOR(): antlr.TerminalNode {
        return this.getToken(OpenSearchPPLParser.XOR, 0)!;
    }
    public logicalExpression(): LogicalExpressionContext[];
    public logicalExpression(i: number): LogicalExpressionContext | null;
    public logicalExpression(i?: number): LogicalExpressionContext[] | LogicalExpressionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(LogicalExpressionContext);
        }

        return this.getRuleContext(i, LogicalExpressionContext);
    }
    public override accept<Result>(visitor: OpenSearchPPLParserVisitor<Result>): Result | null {
        if (visitor.visitLogicalXor) {
            return visitor.visitLogicalXor(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class LogicalOrContext extends LogicalExpressionContext {
    public _left?: LogicalExpressionContext;
    public _right?: LogicalExpressionContext;
    public constructor(ctx: LogicalExpressionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public OR(): antlr.TerminalNode {
        return this.getToken(OpenSearchPPLParser.OR, 0)!;
    }
    public logicalExpression(): LogicalExpressionContext[];
    public logicalExpression(i: number): LogicalExpressionContext | null;
    public logicalExpression(i?: number): LogicalExpressionContext[] | LogicalExpressionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(LogicalExpressionContext);
        }

        return this.getRuleContext(i, LogicalExpressionContext);
    }
    public override accept<Result>(visitor: OpenSearchPPLParserVisitor<Result>): Result | null {
        if (visitor.visitLogicalOr) {
            return visitor.visitLogicalOr(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ExpressionContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public override get ruleIndex(): number {
        return OpenSearchPPLParser.RULE_expression;
    }
    public override copyFrom(ctx: ExpressionContext): void {
        super.copyFrom(ctx);
    }
}
export class RelevanceExprContext extends ExpressionContext {
    public constructor(ctx: ExpressionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public relevanceExpression(): RelevanceExpressionContext {
        return this.getRuleContext(0, RelevanceExpressionContext)!;
    }
    public override accept<Result>(visitor: OpenSearchPPLParserVisitor<Result>): Result | null {
        if (visitor.visitRelevanceExpr) {
            return visitor.visitRelevanceExpr(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class ValueExprContext extends ExpressionContext {
    public constructor(ctx: ExpressionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public valueExpression(): ValueExpressionContext {
        return this.getRuleContext(0, ValueExpressionContext)!;
    }
    public override accept<Result>(visitor: OpenSearchPPLParserVisitor<Result>): Result | null {
        if (visitor.visitValueExpr) {
            return visitor.visitValueExpr(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class InExprContext extends ExpressionContext {
    public constructor(ctx: ExpressionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public expression(): ExpressionContext {
        return this.getRuleContext(0, ExpressionContext)!;
    }
    public IN(): antlr.TerminalNode {
        return this.getToken(OpenSearchPPLParser.IN, 0)!;
    }
    public valueList(): ValueListContext {
        return this.getRuleContext(0, ValueListContext)!;
    }
    public NOT(): antlr.TerminalNode | null {
        return this.getToken(OpenSearchPPLParser.NOT, 0);
    }
    public override accept<Result>(visitor: OpenSearchPPLParserVisitor<Result>): Result | null {
        if (visitor.visitInExpr) {
            return visitor.visitInExpr(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class BetweenContext extends ExpressionContext {
    public constructor(ctx: ExpressionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public expression(): ExpressionContext[];
    public expression(i: number): ExpressionContext | null;
    public expression(i?: number): ExpressionContext[] | ExpressionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ExpressionContext);
        }

        return this.getRuleContext(i, ExpressionContext);
    }
    public BETWEEN(): antlr.TerminalNode {
        return this.getToken(OpenSearchPPLParser.BETWEEN, 0)!;
    }
    public AND(): antlr.TerminalNode {
        return this.getToken(OpenSearchPPLParser.AND, 0)!;
    }
    public NOT(): antlr.TerminalNode | null {
        return this.getToken(OpenSearchPPLParser.NOT, 0);
    }
    public override accept<Result>(visitor: OpenSearchPPLParserVisitor<Result>): Result | null {
        if (visitor.visitBetween) {
            return visitor.visitBetween(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class CompareExprContext extends ExpressionContext {
    public _left?: ExpressionContext;
    public _right?: ExpressionContext;
    public constructor(ctx: ExpressionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public comparisonOperator(): ComparisonOperatorContext {
        return this.getRuleContext(0, ComparisonOperatorContext)!;
    }
    public expression(): ExpressionContext[];
    public expression(i: number): ExpressionContext | null;
    public expression(i?: number): ExpressionContext[] | ExpressionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ExpressionContext);
        }

        return this.getRuleContext(i, ExpressionContext);
    }
    public override accept<Result>(visitor: OpenSearchPPLParserVisitor<Result>): Result | null {
        if (visitor.visitCompareExpr) {
            return visitor.visitCompareExpr(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ValueExpressionContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public override get ruleIndex(): number {
        return OpenSearchPPLParser.RULE_valueExpression;
    }
    public override copyFrom(ctx: ValueExpressionContext): void {
        super.copyFrom(ctx);
    }
}
export class InSubqueryExprContext extends ValueExpressionContext {
    public constructor(ctx: ValueExpressionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public LT_PRTHS(): antlr.TerminalNode | null {
        return this.getToken(OpenSearchPPLParser.LT_PRTHS, 0);
    }
    public valueExpression(): ValueExpressionContext[];
    public valueExpression(i: number): ValueExpressionContext | null;
    public valueExpression(i?: number): ValueExpressionContext[] | ValueExpressionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ValueExpressionContext);
        }

        return this.getRuleContext(i, ValueExpressionContext);
    }
    public RT_PRTHS(): antlr.TerminalNode | null {
        return this.getToken(OpenSearchPPLParser.RT_PRTHS, 0);
    }
    public IN(): antlr.TerminalNode {
        return this.getToken(OpenSearchPPLParser.IN, 0)!;
    }
    public LT_SQR_PRTHS(): antlr.TerminalNode {
        return this.getToken(OpenSearchPPLParser.LT_SQR_PRTHS, 0)!;
    }
    public subSearch(): SubSearchContext {
        return this.getRuleContext(0, SubSearchContext)!;
    }
    public RT_SQR_PRTHS(): antlr.TerminalNode {
        return this.getToken(OpenSearchPPLParser.RT_SQR_PRTHS, 0)!;
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(OpenSearchPPLParser.COMMA);
    	} else {
    		return this.getToken(OpenSearchPPLParser.COMMA, i);
    	}
    }
    public NOT(): antlr.TerminalNode | null {
        return this.getToken(OpenSearchPPLParser.NOT, 0);
    }
    public override accept<Result>(visitor: OpenSearchPPLParserVisitor<Result>): Result | null {
        if (visitor.visitInSubqueryExpr) {
            return visitor.visitInSubqueryExpr(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class LambdaExprContext extends ValueExpressionContext {
    public constructor(ctx: ValueExpressionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public lambda(): LambdaContext {
        return this.getRuleContext(0, LambdaContext)!;
    }
    public override accept<Result>(visitor: OpenSearchPPLParserVisitor<Result>): Result | null {
        if (visitor.visitLambdaExpr) {
            return visitor.visitLambdaExpr(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class LiteralValueExprContext extends ValueExpressionContext {
    public constructor(ctx: ValueExpressionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public literalValue(): LiteralValueContext {
        return this.getRuleContext(0, LiteralValueContext)!;
    }
    public override accept<Result>(visitor: OpenSearchPPLParserVisitor<Result>): Result | null {
        if (visitor.visitLiteralValueExpr) {
            return visitor.visitLiteralValueExpr(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class FunctionCallExprContext extends ValueExpressionContext {
    public constructor(ctx: ValueExpressionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public functionCall(): FunctionCallContext {
        return this.getRuleContext(0, FunctionCallContext)!;
    }
    public override accept<Result>(visitor: OpenSearchPPLParserVisitor<Result>): Result | null {
        if (visitor.visitFunctionCallExpr) {
            return visitor.visitFunctionCallExpr(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class ExistsSubqueryExprContext extends ValueExpressionContext {
    public constructor(ctx: ValueExpressionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public EXISTS(): antlr.TerminalNode {
        return this.getToken(OpenSearchPPLParser.EXISTS, 0)!;
    }
    public LT_SQR_PRTHS(): antlr.TerminalNode {
        return this.getToken(OpenSearchPPLParser.LT_SQR_PRTHS, 0)!;
    }
    public subSearch(): SubSearchContext {
        return this.getRuleContext(0, SubSearchContext)!;
    }
    public RT_SQR_PRTHS(): antlr.TerminalNode {
        return this.getToken(OpenSearchPPLParser.RT_SQR_PRTHS, 0)!;
    }
    public override accept<Result>(visitor: OpenSearchPPLParserVisitor<Result>): Result | null {
        if (visitor.visitExistsSubqueryExpr) {
            return visitor.visitExistsSubqueryExpr(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class ScalarSubqueryExprContext extends ValueExpressionContext {
    public constructor(ctx: ValueExpressionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public LT_SQR_PRTHS(): antlr.TerminalNode {
        return this.getToken(OpenSearchPPLParser.LT_SQR_PRTHS, 0)!;
    }
    public subSearch(): SubSearchContext {
        return this.getRuleContext(0, SubSearchContext)!;
    }
    public RT_SQR_PRTHS(): antlr.TerminalNode {
        return this.getToken(OpenSearchPPLParser.RT_SQR_PRTHS, 0)!;
    }
    public override accept<Result>(visitor: OpenSearchPPLParserVisitor<Result>): Result | null {
        if (visitor.visitScalarSubqueryExpr) {
            return visitor.visitScalarSubqueryExpr(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class NestedValueExprContext extends ValueExpressionContext {
    public constructor(ctx: ValueExpressionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public LT_PRTHS(): antlr.TerminalNode {
        return this.getToken(OpenSearchPPLParser.LT_PRTHS, 0)!;
    }
    public logicalExpression(): LogicalExpressionContext {
        return this.getRuleContext(0, LogicalExpressionContext)!;
    }
    public RT_PRTHS(): antlr.TerminalNode {
        return this.getToken(OpenSearchPPLParser.RT_PRTHS, 0)!;
    }
    public override accept<Result>(visitor: OpenSearchPPLParserVisitor<Result>): Result | null {
        if (visitor.visitNestedValueExpr) {
            return visitor.visitNestedValueExpr(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class BinaryArithmeticContext extends ValueExpressionContext {
    public _left?: ValueExpressionContext;
    public _binaryOperator?: Token | null;
    public _right?: ValueExpressionContext;
    public constructor(ctx: ValueExpressionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public valueExpression(): ValueExpressionContext[];
    public valueExpression(i: number): ValueExpressionContext | null;
    public valueExpression(i?: number): ValueExpressionContext[] | ValueExpressionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ValueExpressionContext);
        }

        return this.getRuleContext(i, ValueExpressionContext);
    }
    public STAR(): antlr.TerminalNode | null {
        return this.getToken(OpenSearchPPLParser.STAR, 0);
    }
    public DIVIDE(): antlr.TerminalNode | null {
        return this.getToken(OpenSearchPPLParser.DIVIDE, 0);
    }
    public MODULE(): antlr.TerminalNode | null {
        return this.getToken(OpenSearchPPLParser.MODULE, 0);
    }
    public PLUS(): antlr.TerminalNode | null {
        return this.getToken(OpenSearchPPLParser.PLUS, 0);
    }
    public MINUS(): antlr.TerminalNode | null {
        return this.getToken(OpenSearchPPLParser.MINUS, 0);
    }
    public override accept<Result>(visitor: OpenSearchPPLParserVisitor<Result>): Result | null {
        if (visitor.visitBinaryArithmetic) {
            return visitor.visitBinaryArithmetic(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class FieldExprContext extends ValueExpressionContext {
    public constructor(ctx: ValueExpressionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public fieldExpression(): FieldExpressionContext {
        return this.getRuleContext(0, FieldExpressionContext)!;
    }
    public override accept<Result>(visitor: OpenSearchPPLParserVisitor<Result>): Result | null {
        if (visitor.visitFieldExpr) {
            return visitor.visitFieldExpr(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class EvalExpressionContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public EVAL(): antlr.TerminalNode {
        return this.getToken(OpenSearchPPLParser.EVAL, 0)!;
    }
    public LT_PRTHS(): antlr.TerminalNode {
        return this.getToken(OpenSearchPPLParser.LT_PRTHS, 0)!;
    }
    public logicalExpression(): LogicalExpressionContext {
        return this.getRuleContext(0, LogicalExpressionContext)!;
    }
    public RT_PRTHS(): antlr.TerminalNode {
        return this.getToken(OpenSearchPPLParser.RT_PRTHS, 0)!;
    }
    public override get ruleIndex(): number {
        return OpenSearchPPLParser.RULE_evalExpression;
    }
    public override accept<Result>(visitor: OpenSearchPPLParserVisitor<Result>): Result | null {
        if (visitor.visitEvalExpression) {
            return visitor.visitEvalExpression(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class FunctionCallContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public evalFunctionCall(): EvalFunctionCallContext | null {
        return this.getRuleContext(0, EvalFunctionCallContext);
    }
    public dataTypeFunctionCall(): DataTypeFunctionCallContext | null {
        return this.getRuleContext(0, DataTypeFunctionCallContext);
    }
    public positionFunctionCall(): PositionFunctionCallContext | null {
        return this.getRuleContext(0, PositionFunctionCallContext);
    }
    public caseFunctionCall(): CaseFunctionCallContext | null {
        return this.getRuleContext(0, CaseFunctionCallContext);
    }
    public timestampFunctionCall(): TimestampFunctionCallContext | null {
        return this.getRuleContext(0, TimestampFunctionCallContext);
    }
    public extractFunctionCall(): ExtractFunctionCallContext | null {
        return this.getRuleContext(0, ExtractFunctionCallContext);
    }
    public getFormatFunctionCall(): GetFormatFunctionCallContext | null {
        return this.getRuleContext(0, GetFormatFunctionCallContext);
    }
    public override get ruleIndex(): number {
        return OpenSearchPPLParser.RULE_functionCall;
    }
    public override accept<Result>(visitor: OpenSearchPPLParserVisitor<Result>): Result | null {
        if (visitor.visitFunctionCall) {
            return visitor.visitFunctionCall(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class PositionFunctionCallContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public positionFunctionName(): PositionFunctionNameContext {
        return this.getRuleContext(0, PositionFunctionNameContext)!;
    }
    public LT_PRTHS(): antlr.TerminalNode {
        return this.getToken(OpenSearchPPLParser.LT_PRTHS, 0)!;
    }
    public functionArg(): FunctionArgContext[];
    public functionArg(i: number): FunctionArgContext | null;
    public functionArg(i?: number): FunctionArgContext[] | FunctionArgContext | null {
        if (i === undefined) {
            return this.getRuleContexts(FunctionArgContext);
        }

        return this.getRuleContext(i, FunctionArgContext);
    }
    public IN(): antlr.TerminalNode {
        return this.getToken(OpenSearchPPLParser.IN, 0)!;
    }
    public RT_PRTHS(): antlr.TerminalNode {
        return this.getToken(OpenSearchPPLParser.RT_PRTHS, 0)!;
    }
    public override get ruleIndex(): number {
        return OpenSearchPPLParser.RULE_positionFunctionCall;
    }
    public override accept<Result>(visitor: OpenSearchPPLParserVisitor<Result>): Result | null {
        if (visitor.visitPositionFunctionCall) {
            return visitor.visitPositionFunctionCall(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class CaseFunctionCallContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public CASE(): antlr.TerminalNode {
        return this.getToken(OpenSearchPPLParser.CASE, 0)!;
    }
    public LT_PRTHS(): antlr.TerminalNode {
        return this.getToken(OpenSearchPPLParser.LT_PRTHS, 0)!;
    }
    public logicalExpression(): LogicalExpressionContext[];
    public logicalExpression(i: number): LogicalExpressionContext | null;
    public logicalExpression(i?: number): LogicalExpressionContext[] | LogicalExpressionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(LogicalExpressionContext);
        }

        return this.getRuleContext(i, LogicalExpressionContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(OpenSearchPPLParser.COMMA);
    	} else {
    		return this.getToken(OpenSearchPPLParser.COMMA, i);
    	}
    }
    public valueExpression(): ValueExpressionContext[];
    public valueExpression(i: number): ValueExpressionContext | null;
    public valueExpression(i?: number): ValueExpressionContext[] | ValueExpressionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ValueExpressionContext);
        }

        return this.getRuleContext(i, ValueExpressionContext);
    }
    public RT_PRTHS(): antlr.TerminalNode {
        return this.getToken(OpenSearchPPLParser.RT_PRTHS, 0)!;
    }
    public ELSE(): antlr.TerminalNode | null {
        return this.getToken(OpenSearchPPLParser.ELSE, 0);
    }
    public override get ruleIndex(): number {
        return OpenSearchPPLParser.RULE_caseFunctionCall;
    }
    public override accept<Result>(visitor: OpenSearchPPLParserVisitor<Result>): Result | null {
        if (visitor.visitCaseFunctionCall) {
            return visitor.visitCaseFunctionCall(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class RelevanceExpressionContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public singleFieldRelevanceFunction(): SingleFieldRelevanceFunctionContext | null {
        return this.getRuleContext(0, SingleFieldRelevanceFunctionContext);
    }
    public multiFieldRelevanceFunction(): MultiFieldRelevanceFunctionContext | null {
        return this.getRuleContext(0, MultiFieldRelevanceFunctionContext);
    }
    public override get ruleIndex(): number {
        return OpenSearchPPLParser.RULE_relevanceExpression;
    }
    public override accept<Result>(visitor: OpenSearchPPLParserVisitor<Result>): Result | null {
        if (visitor.visitRelevanceExpression) {
            return visitor.visitRelevanceExpression(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class SingleFieldRelevanceFunctionContext extends antlr.ParserRuleContext {
    public _field?: RelevanceFieldContext;
    public _query?: RelevanceQueryContext;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public singleFieldRelevanceFunctionName(): SingleFieldRelevanceFunctionNameContext {
        return this.getRuleContext(0, SingleFieldRelevanceFunctionNameContext)!;
    }
    public LT_PRTHS(): antlr.TerminalNode {
        return this.getToken(OpenSearchPPLParser.LT_PRTHS, 0)!;
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(OpenSearchPPLParser.COMMA);
    	} else {
    		return this.getToken(OpenSearchPPLParser.COMMA, i);
    	}
    }
    public RT_PRTHS(): antlr.TerminalNode {
        return this.getToken(OpenSearchPPLParser.RT_PRTHS, 0)!;
    }
    public relevanceField(): RelevanceFieldContext {
        return this.getRuleContext(0, RelevanceFieldContext)!;
    }
    public relevanceQuery(): RelevanceQueryContext {
        return this.getRuleContext(0, RelevanceQueryContext)!;
    }
    public relevanceArg(): RelevanceArgContext[];
    public relevanceArg(i: number): RelevanceArgContext | null;
    public relevanceArg(i?: number): RelevanceArgContext[] | RelevanceArgContext | null {
        if (i === undefined) {
            return this.getRuleContexts(RelevanceArgContext);
        }

        return this.getRuleContext(i, RelevanceArgContext);
    }
    public override get ruleIndex(): number {
        return OpenSearchPPLParser.RULE_singleFieldRelevanceFunction;
    }
    public override accept<Result>(visitor: OpenSearchPPLParserVisitor<Result>): Result | null {
        if (visitor.visitSingleFieldRelevanceFunction) {
            return visitor.visitSingleFieldRelevanceFunction(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class MultiFieldRelevanceFunctionContext extends antlr.ParserRuleContext {
    public _field?: RelevanceFieldAndWeightContext;
    public _query?: RelevanceQueryContext;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public multiFieldRelevanceFunctionName(): MultiFieldRelevanceFunctionNameContext {
        return this.getRuleContext(0, MultiFieldRelevanceFunctionNameContext)!;
    }
    public LT_PRTHS(): antlr.TerminalNode {
        return this.getToken(OpenSearchPPLParser.LT_PRTHS, 0)!;
    }
    public RT_PRTHS(): antlr.TerminalNode {
        return this.getToken(OpenSearchPPLParser.RT_PRTHS, 0)!;
    }
    public relevanceQuery(): RelevanceQueryContext {
        return this.getRuleContext(0, RelevanceQueryContext)!;
    }
    public LT_SQR_PRTHS(): antlr.TerminalNode | null {
        return this.getToken(OpenSearchPPLParser.LT_SQR_PRTHS, 0);
    }
    public RT_SQR_PRTHS(): antlr.TerminalNode | null {
        return this.getToken(OpenSearchPPLParser.RT_SQR_PRTHS, 0);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(OpenSearchPPLParser.COMMA);
    	} else {
    		return this.getToken(OpenSearchPPLParser.COMMA, i);
    	}
    }
    public relevanceArg(): RelevanceArgContext[];
    public relevanceArg(i: number): RelevanceArgContext | null;
    public relevanceArg(i?: number): RelevanceArgContext[] | RelevanceArgContext | null {
        if (i === undefined) {
            return this.getRuleContexts(RelevanceArgContext);
        }

        return this.getRuleContext(i, RelevanceArgContext);
    }
    public relevanceFieldAndWeight(): RelevanceFieldAndWeightContext[];
    public relevanceFieldAndWeight(i: number): RelevanceFieldAndWeightContext | null;
    public relevanceFieldAndWeight(i?: number): RelevanceFieldAndWeightContext[] | RelevanceFieldAndWeightContext | null {
        if (i === undefined) {
            return this.getRuleContexts(RelevanceFieldAndWeightContext);
        }

        return this.getRuleContext(i, RelevanceFieldAndWeightContext);
    }
    public override get ruleIndex(): number {
        return OpenSearchPPLParser.RULE_multiFieldRelevanceFunction;
    }
    public override accept<Result>(visitor: OpenSearchPPLParserVisitor<Result>): Result | null {
        if (visitor.visitMultiFieldRelevanceFunction) {
            return visitor.visitMultiFieldRelevanceFunction(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class TableSourceContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public tableQualifiedName(): TableQualifiedNameContext | null {
        return this.getRuleContext(0, TableQualifiedNameContext);
    }
    public ID_DATE_SUFFIX(): antlr.TerminalNode | null {
        return this.getToken(OpenSearchPPLParser.ID_DATE_SUFFIX, 0);
    }
    public override get ruleIndex(): number {
        return OpenSearchPPLParser.RULE_tableSource;
    }
    public override accept<Result>(visitor: OpenSearchPPLParserVisitor<Result>): Result | null {
        if (visitor.visitTableSource) {
            return visitor.visitTableSource(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class TableFunctionContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public qualifiedName(): QualifiedNameContext {
        return this.getRuleContext(0, QualifiedNameContext)!;
    }
    public LT_PRTHS(): antlr.TerminalNode {
        return this.getToken(OpenSearchPPLParser.LT_PRTHS, 0)!;
    }
    public namedFunctionArgs(): NamedFunctionArgsContext {
        return this.getRuleContext(0, NamedFunctionArgsContext)!;
    }
    public RT_PRTHS(): antlr.TerminalNode {
        return this.getToken(OpenSearchPPLParser.RT_PRTHS, 0)!;
    }
    public override get ruleIndex(): number {
        return OpenSearchPPLParser.RULE_tableFunction;
    }
    public override accept<Result>(visitor: OpenSearchPPLParserVisitor<Result>): Result | null {
        if (visitor.visitTableFunction) {
            return visitor.visitTableFunction(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class FieldListContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public fieldExpression(): FieldExpressionContext[];
    public fieldExpression(i: number): FieldExpressionContext | null;
    public fieldExpression(i?: number): FieldExpressionContext[] | FieldExpressionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(FieldExpressionContext);
        }

        return this.getRuleContext(i, FieldExpressionContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(OpenSearchPPLParser.COMMA);
    	} else {
    		return this.getToken(OpenSearchPPLParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return OpenSearchPPLParser.RULE_fieldList;
    }
    public override accept<Result>(visitor: OpenSearchPPLParserVisitor<Result>): Result | null {
        if (visitor.visitFieldList) {
            return visitor.visitFieldList(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class SortFieldContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public sortFieldExpression(): SortFieldExpressionContext {
        return this.getRuleContext(0, SortFieldExpressionContext)!;
    }
    public PLUS(): antlr.TerminalNode | null {
        return this.getToken(OpenSearchPPLParser.PLUS, 0);
    }
    public MINUS(): antlr.TerminalNode | null {
        return this.getToken(OpenSearchPPLParser.MINUS, 0);
    }
    public override get ruleIndex(): number {
        return OpenSearchPPLParser.RULE_sortField;
    }
    public override accept<Result>(visitor: OpenSearchPPLParserVisitor<Result>): Result | null {
        if (visitor.visitSortField) {
            return visitor.visitSortField(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class SortFieldExpressionContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public fieldExpression(): FieldExpressionContext {
        return this.getRuleContext(0, FieldExpressionContext)!;
    }
    public AUTO(): antlr.TerminalNode | null {
        return this.getToken(OpenSearchPPLParser.AUTO, 0);
    }
    public LT_PRTHS(): antlr.TerminalNode | null {
        return this.getToken(OpenSearchPPLParser.LT_PRTHS, 0);
    }
    public RT_PRTHS(): antlr.TerminalNode | null {
        return this.getToken(OpenSearchPPLParser.RT_PRTHS, 0);
    }
    public STR(): antlr.TerminalNode | null {
        return this.getToken(OpenSearchPPLParser.STR, 0);
    }
    public IP(): antlr.TerminalNode | null {
        return this.getToken(OpenSearchPPLParser.IP, 0);
    }
    public NUM(): antlr.TerminalNode | null {
        return this.getToken(OpenSearchPPLParser.NUM, 0);
    }
    public override get ruleIndex(): number {
        return OpenSearchPPLParser.RULE_sortFieldExpression;
    }
    public override accept<Result>(visitor: OpenSearchPPLParserVisitor<Result>): Result | null {
        if (visitor.visitSortFieldExpression) {
            return visitor.visitSortFieldExpression(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class FieldExpressionContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public qualifiedName(): QualifiedNameContext {
        return this.getRuleContext(0, QualifiedNameContext)!;
    }
    public override get ruleIndex(): number {
        return OpenSearchPPLParser.RULE_fieldExpression;
    }
    public override accept<Result>(visitor: OpenSearchPPLParserVisitor<Result>): Result | null {
        if (visitor.visitFieldExpression) {
            return visitor.visitFieldExpression(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class WcFieldExpressionContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public wcQualifiedName(): WcQualifiedNameContext {
        return this.getRuleContext(0, WcQualifiedNameContext)!;
    }
    public override get ruleIndex(): number {
        return OpenSearchPPLParser.RULE_wcFieldExpression;
    }
    public override accept<Result>(visitor: OpenSearchPPLParserVisitor<Result>): Result | null {
        if (visitor.visitWcFieldExpression) {
            return visitor.visitWcFieldExpression(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class SelectFieldExpressionContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public wcQualifiedName(): WcQualifiedNameContext | null {
        return this.getRuleContext(0, WcQualifiedNameContext);
    }
    public STAR(): antlr.TerminalNode | null {
        return this.getToken(OpenSearchPPLParser.STAR, 0);
    }
    public override get ruleIndex(): number {
        return OpenSearchPPLParser.RULE_selectFieldExpression;
    }
    public override accept<Result>(visitor: OpenSearchPPLParserVisitor<Result>): Result | null {
        if (visitor.visitSelectFieldExpression) {
            return visitor.visitSelectFieldExpression(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class RenameFieldExpressionContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public wcQualifiedName(): WcQualifiedNameContext | null {
        return this.getRuleContext(0, WcQualifiedNameContext);
    }
    public STAR(): antlr.TerminalNode | null {
        return this.getToken(OpenSearchPPLParser.STAR, 0);
    }
    public override get ruleIndex(): number {
        return OpenSearchPPLParser.RULE_renameFieldExpression;
    }
    public override accept<Result>(visitor: OpenSearchPPLParserVisitor<Result>): Result | null {
        if (visitor.visitRenameFieldExpression) {
            return visitor.visitRenameFieldExpression(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class EvalFunctionCallContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public evalFunctionName(): EvalFunctionNameContext {
        return this.getRuleContext(0, EvalFunctionNameContext)!;
    }
    public LT_PRTHS(): antlr.TerminalNode {
        return this.getToken(OpenSearchPPLParser.LT_PRTHS, 0)!;
    }
    public functionArgs(): FunctionArgsContext {
        return this.getRuleContext(0, FunctionArgsContext)!;
    }
    public RT_PRTHS(): antlr.TerminalNode {
        return this.getToken(OpenSearchPPLParser.RT_PRTHS, 0)!;
    }
    public override get ruleIndex(): number {
        return OpenSearchPPLParser.RULE_evalFunctionCall;
    }
    public override accept<Result>(visitor: OpenSearchPPLParserVisitor<Result>): Result | null {
        if (visitor.visitEvalFunctionCall) {
            return visitor.visitEvalFunctionCall(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class DataTypeFunctionCallContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public CAST(): antlr.TerminalNode {
        return this.getToken(OpenSearchPPLParser.CAST, 0)!;
    }
    public LT_PRTHS(): antlr.TerminalNode {
        return this.getToken(OpenSearchPPLParser.LT_PRTHS, 0)!;
    }
    public logicalExpression(): LogicalExpressionContext {
        return this.getRuleContext(0, LogicalExpressionContext)!;
    }
    public AS(): antlr.TerminalNode {
        return this.getToken(OpenSearchPPLParser.AS, 0)!;
    }
    public convertedDataType(): ConvertedDataTypeContext {
        return this.getRuleContext(0, ConvertedDataTypeContext)!;
    }
    public RT_PRTHS(): antlr.TerminalNode {
        return this.getToken(OpenSearchPPLParser.RT_PRTHS, 0)!;
    }
    public override get ruleIndex(): number {
        return OpenSearchPPLParser.RULE_dataTypeFunctionCall;
    }
    public override accept<Result>(visitor: OpenSearchPPLParserVisitor<Result>): Result | null {
        if (visitor.visitDataTypeFunctionCall) {
            return visitor.visitDataTypeFunctionCall(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ConvertedDataTypeContext extends antlr.ParserRuleContext {
    public _typeName?: Token | null;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public DATE(): antlr.TerminalNode | null {
        return this.getToken(OpenSearchPPLParser.DATE, 0);
    }
    public TIME(): antlr.TerminalNode | null {
        return this.getToken(OpenSearchPPLParser.TIME, 0);
    }
    public TIMESTAMP(): antlr.TerminalNode | null {
        return this.getToken(OpenSearchPPLParser.TIMESTAMP, 0);
    }
    public INT(): antlr.TerminalNode | null {
        return this.getToken(OpenSearchPPLParser.INT, 0);
    }
    public INTEGER(): antlr.TerminalNode | null {
        return this.getToken(OpenSearchPPLParser.INTEGER, 0);
    }
    public DOUBLE(): antlr.TerminalNode | null {
        return this.getToken(OpenSearchPPLParser.DOUBLE, 0);
    }
    public LONG(): antlr.TerminalNode | null {
        return this.getToken(OpenSearchPPLParser.LONG, 0);
    }
    public FLOAT(): antlr.TerminalNode | null {
        return this.getToken(OpenSearchPPLParser.FLOAT, 0);
    }
    public STRING(): antlr.TerminalNode | null {
        return this.getToken(OpenSearchPPLParser.STRING, 0);
    }
    public BOOLEAN(): antlr.TerminalNode | null {
        return this.getToken(OpenSearchPPLParser.BOOLEAN, 0);
    }
    public IP(): antlr.TerminalNode | null {
        return this.getToken(OpenSearchPPLParser.IP, 0);
    }
    public JSON(): antlr.TerminalNode | null {
        return this.getToken(OpenSearchPPLParser.JSON, 0);
    }
    public override get ruleIndex(): number {
        return OpenSearchPPLParser.RULE_convertedDataType;
    }
    public override accept<Result>(visitor: OpenSearchPPLParserVisitor<Result>): Result | null {
        if (visitor.visitConvertedDataType) {
            return visitor.visitConvertedDataType(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class EvalFunctionNameContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public mathematicalFunctionName(): MathematicalFunctionNameContext | null {
        return this.getRuleContext(0, MathematicalFunctionNameContext);
    }
    public dateTimeFunctionName(): DateTimeFunctionNameContext | null {
        return this.getRuleContext(0, DateTimeFunctionNameContext);
    }
    public textFunctionName(): TextFunctionNameContext | null {
        return this.getRuleContext(0, TextFunctionNameContext);
    }
    public conditionFunctionName(): ConditionFunctionNameContext | null {
        return this.getRuleContext(0, ConditionFunctionNameContext);
    }
    public flowControlFunctionName(): FlowControlFunctionNameContext | null {
        return this.getRuleContext(0, FlowControlFunctionNameContext);
    }
    public systemFunctionName(): SystemFunctionNameContext | null {
        return this.getRuleContext(0, SystemFunctionNameContext);
    }
    public positionFunctionName(): PositionFunctionNameContext | null {
        return this.getRuleContext(0, PositionFunctionNameContext);
    }
    public cryptographicFunctionName(): CryptographicFunctionNameContext | null {
        return this.getRuleContext(0, CryptographicFunctionNameContext);
    }
    public jsonFunctionName(): JsonFunctionNameContext | null {
        return this.getRuleContext(0, JsonFunctionNameContext);
    }
    public geoipFunctionName(): GeoipFunctionNameContext | null {
        return this.getRuleContext(0, GeoipFunctionNameContext);
    }
    public collectionFunctionName(): CollectionFunctionNameContext | null {
        return this.getRuleContext(0, CollectionFunctionNameContext);
    }
    public override get ruleIndex(): number {
        return OpenSearchPPLParser.RULE_evalFunctionName;
    }
    public override accept<Result>(visitor: OpenSearchPPLParserVisitor<Result>): Result | null {
        if (visitor.visitEvalFunctionName) {
            return visitor.visitEvalFunctionName(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class FunctionArgsContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public functionArg(): FunctionArgContext[];
    public functionArg(i: number): FunctionArgContext | null;
    public functionArg(i?: number): FunctionArgContext[] | FunctionArgContext | null {
        if (i === undefined) {
            return this.getRuleContexts(FunctionArgContext);
        }

        return this.getRuleContext(i, FunctionArgContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(OpenSearchPPLParser.COMMA);
    	} else {
    		return this.getToken(OpenSearchPPLParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return OpenSearchPPLParser.RULE_functionArgs;
    }
    public override accept<Result>(visitor: OpenSearchPPLParserVisitor<Result>): Result | null {
        if (visitor.visitFunctionArgs) {
            return visitor.visitFunctionArgs(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class NamedFunctionArgsContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public namedFunctionArg(): NamedFunctionArgContext[];
    public namedFunctionArg(i: number): NamedFunctionArgContext | null;
    public namedFunctionArg(i?: number): NamedFunctionArgContext[] | NamedFunctionArgContext | null {
        if (i === undefined) {
            return this.getRuleContexts(NamedFunctionArgContext);
        }

        return this.getRuleContext(i, NamedFunctionArgContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(OpenSearchPPLParser.COMMA);
    	} else {
    		return this.getToken(OpenSearchPPLParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return OpenSearchPPLParser.RULE_namedFunctionArgs;
    }
    public override accept<Result>(visitor: OpenSearchPPLParserVisitor<Result>): Result | null {
        if (visitor.visitNamedFunctionArgs) {
            return visitor.visitNamedFunctionArgs(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class FunctionArgContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public functionArgExpression(): FunctionArgExpressionContext {
        return this.getRuleContext(0, FunctionArgExpressionContext)!;
    }
    public override get ruleIndex(): number {
        return OpenSearchPPLParser.RULE_functionArg;
    }
    public override accept<Result>(visitor: OpenSearchPPLParserVisitor<Result>): Result | null {
        if (visitor.visitFunctionArg) {
            return visitor.visitFunctionArg(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class NamedFunctionArgContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public functionArgExpression(): FunctionArgExpressionContext {
        return this.getRuleContext(0, FunctionArgExpressionContext)!;
    }
    public ident(): IdentContext | null {
        return this.getRuleContext(0, IdentContext);
    }
    public EQUAL(): antlr.TerminalNode | null {
        return this.getToken(OpenSearchPPLParser.EQUAL, 0);
    }
    public override get ruleIndex(): number {
        return OpenSearchPPLParser.RULE_namedFunctionArg;
    }
    public override accept<Result>(visitor: OpenSearchPPLParserVisitor<Result>): Result | null {
        if (visitor.visitNamedFunctionArg) {
            return visitor.visitNamedFunctionArg(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class FunctionArgExpressionContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public lambda(): LambdaContext | null {
        return this.getRuleContext(0, LambdaContext);
    }
    public logicalExpression(): LogicalExpressionContext | null {
        return this.getRuleContext(0, LogicalExpressionContext);
    }
    public override get ruleIndex(): number {
        return OpenSearchPPLParser.RULE_functionArgExpression;
    }
    public override accept<Result>(visitor: OpenSearchPPLParserVisitor<Result>): Result | null {
        if (visitor.visitFunctionArgExpression) {
            return visitor.visitFunctionArgExpression(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class LambdaContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public ident(): IdentContext[];
    public ident(i: number): IdentContext | null;
    public ident(i?: number): IdentContext[] | IdentContext | null {
        if (i === undefined) {
            return this.getRuleContexts(IdentContext);
        }

        return this.getRuleContext(i, IdentContext);
    }
    public ARROW(): antlr.TerminalNode {
        return this.getToken(OpenSearchPPLParser.ARROW, 0)!;
    }
    public logicalExpression(): LogicalExpressionContext {
        return this.getRuleContext(0, LogicalExpressionContext)!;
    }
    public LT_PRTHS(): antlr.TerminalNode | null {
        return this.getToken(OpenSearchPPLParser.LT_PRTHS, 0);
    }
    public RT_PRTHS(): antlr.TerminalNode | null {
        return this.getToken(OpenSearchPPLParser.RT_PRTHS, 0);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(OpenSearchPPLParser.COMMA);
    	} else {
    		return this.getToken(OpenSearchPPLParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return OpenSearchPPLParser.RULE_lambda;
    }
    public override accept<Result>(visitor: OpenSearchPPLParserVisitor<Result>): Result | null {
        if (visitor.visitLambda) {
            return visitor.visitLambda(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class RelevanceArgContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public relevanceArgName(): RelevanceArgNameContext {
        return this.getRuleContext(0, RelevanceArgNameContext)!;
    }
    public EQUAL(): antlr.TerminalNode {
        return this.getToken(OpenSearchPPLParser.EQUAL, 0)!;
    }
    public relevanceArgValue(): RelevanceArgValueContext {
        return this.getRuleContext(0, RelevanceArgValueContext)!;
    }
    public override get ruleIndex(): number {
        return OpenSearchPPLParser.RULE_relevanceArg;
    }
    public override accept<Result>(visitor: OpenSearchPPLParserVisitor<Result>): Result | null {
        if (visitor.visitRelevanceArg) {
            return visitor.visitRelevanceArg(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class RelevanceArgNameContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public ALLOW_LEADING_WILDCARD(): antlr.TerminalNode | null {
        return this.getToken(OpenSearchPPLParser.ALLOW_LEADING_WILDCARD, 0);
    }
    public ANALYZER(): antlr.TerminalNode | null {
        return this.getToken(OpenSearchPPLParser.ANALYZER, 0);
    }
    public ANALYZE_WILDCARD(): antlr.TerminalNode | null {
        return this.getToken(OpenSearchPPLParser.ANALYZE_WILDCARD, 0);
    }
    public AUTO_GENERATE_SYNONYMS_PHRASE_QUERY(): antlr.TerminalNode | null {
        return this.getToken(OpenSearchPPLParser.AUTO_GENERATE_SYNONYMS_PHRASE_QUERY, 0);
    }
    public BOOST(): antlr.TerminalNode | null {
        return this.getToken(OpenSearchPPLParser.BOOST, 0);
    }
    public CUTOFF_FREQUENCY(): antlr.TerminalNode | null {
        return this.getToken(OpenSearchPPLParser.CUTOFF_FREQUENCY, 0);
    }
    public DEFAULT_FIELD(): antlr.TerminalNode | null {
        return this.getToken(OpenSearchPPLParser.DEFAULT_FIELD, 0);
    }
    public DEFAULT_OPERATOR(): antlr.TerminalNode | null {
        return this.getToken(OpenSearchPPLParser.DEFAULT_OPERATOR, 0);
    }
    public ENABLE_POSITION_INCREMENTS(): antlr.TerminalNode | null {
        return this.getToken(OpenSearchPPLParser.ENABLE_POSITION_INCREMENTS, 0);
    }
    public ESCAPE(): antlr.TerminalNode | null {
        return this.getToken(OpenSearchPPLParser.ESCAPE, 0);
    }
    public FIELDS(): antlr.TerminalNode | null {
        return this.getToken(OpenSearchPPLParser.FIELDS, 0);
    }
    public FLAGS(): antlr.TerminalNode | null {
        return this.getToken(OpenSearchPPLParser.FLAGS, 0);
    }
    public FUZZINESS(): antlr.TerminalNode | null {
        return this.getToken(OpenSearchPPLParser.FUZZINESS, 0);
    }
    public FUZZY_MAX_EXPANSIONS(): antlr.TerminalNode | null {
        return this.getToken(OpenSearchPPLParser.FUZZY_MAX_EXPANSIONS, 0);
    }
    public FUZZY_PREFIX_LENGTH(): antlr.TerminalNode | null {
        return this.getToken(OpenSearchPPLParser.FUZZY_PREFIX_LENGTH, 0);
    }
    public FUZZY_REWRITE(): antlr.TerminalNode | null {
        return this.getToken(OpenSearchPPLParser.FUZZY_REWRITE, 0);
    }
    public FUZZY_TRANSPOSITIONS(): antlr.TerminalNode | null {
        return this.getToken(OpenSearchPPLParser.FUZZY_TRANSPOSITIONS, 0);
    }
    public LENIENT(): antlr.TerminalNode | null {
        return this.getToken(OpenSearchPPLParser.LENIENT, 0);
    }
    public LOW_FREQ_OPERATOR(): antlr.TerminalNode | null {
        return this.getToken(OpenSearchPPLParser.LOW_FREQ_OPERATOR, 0);
    }
    public MAX_DETERMINIZED_STATES(): antlr.TerminalNode | null {
        return this.getToken(OpenSearchPPLParser.MAX_DETERMINIZED_STATES, 0);
    }
    public MAX_EXPANSIONS(): antlr.TerminalNode | null {
        return this.getToken(OpenSearchPPLParser.MAX_EXPANSIONS, 0);
    }
    public MINIMUM_SHOULD_MATCH(): antlr.TerminalNode | null {
        return this.getToken(OpenSearchPPLParser.MINIMUM_SHOULD_MATCH, 0);
    }
    public OPERATOR(): antlr.TerminalNode | null {
        return this.getToken(OpenSearchPPLParser.OPERATOR, 0);
    }
    public PHRASE_SLOP(): antlr.TerminalNode | null {
        return this.getToken(OpenSearchPPLParser.PHRASE_SLOP, 0);
    }
    public PREFIX_LENGTH(): antlr.TerminalNode | null {
        return this.getToken(OpenSearchPPLParser.PREFIX_LENGTH, 0);
    }
    public QUOTE_ANALYZER(): antlr.TerminalNode | null {
        return this.getToken(OpenSearchPPLParser.QUOTE_ANALYZER, 0);
    }
    public QUOTE_FIELD_SUFFIX(): antlr.TerminalNode | null {
        return this.getToken(OpenSearchPPLParser.QUOTE_FIELD_SUFFIX, 0);
    }
    public REWRITE(): antlr.TerminalNode | null {
        return this.getToken(OpenSearchPPLParser.REWRITE, 0);
    }
    public SLOP(): antlr.TerminalNode | null {
        return this.getToken(OpenSearchPPLParser.SLOP, 0);
    }
    public TIE_BREAKER(): antlr.TerminalNode | null {
        return this.getToken(OpenSearchPPLParser.TIE_BREAKER, 0);
    }
    public TIME_ZONE(): antlr.TerminalNode | null {
        return this.getToken(OpenSearchPPLParser.TIME_ZONE, 0);
    }
    public TYPE(): antlr.TerminalNode | null {
        return this.getToken(OpenSearchPPLParser.TYPE, 0);
    }
    public ZERO_TERMS_QUERY(): antlr.TerminalNode | null {
        return this.getToken(OpenSearchPPLParser.ZERO_TERMS_QUERY, 0);
    }
    public override get ruleIndex(): number {
        return OpenSearchPPLParser.RULE_relevanceArgName;
    }
    public override accept<Result>(visitor: OpenSearchPPLParserVisitor<Result>): Result | null {
        if (visitor.visitRelevanceArgName) {
            return visitor.visitRelevanceArgName(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class RelevanceFieldAndWeightContext extends antlr.ParserRuleContext {
    public _field?: RelevanceFieldContext;
    public _weight?: RelevanceFieldWeightContext;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public relevanceField(): RelevanceFieldContext {
        return this.getRuleContext(0, RelevanceFieldContext)!;
    }
    public relevanceFieldWeight(): RelevanceFieldWeightContext | null {
        return this.getRuleContext(0, RelevanceFieldWeightContext);
    }
    public BIT_XOR_OP(): antlr.TerminalNode | null {
        return this.getToken(OpenSearchPPLParser.BIT_XOR_OP, 0);
    }
    public override get ruleIndex(): number {
        return OpenSearchPPLParser.RULE_relevanceFieldAndWeight;
    }
    public override accept<Result>(visitor: OpenSearchPPLParserVisitor<Result>): Result | null {
        if (visitor.visitRelevanceFieldAndWeight) {
            return visitor.visitRelevanceFieldAndWeight(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class RelevanceFieldWeightContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public integerLiteral(): IntegerLiteralContext | null {
        return this.getRuleContext(0, IntegerLiteralContext);
    }
    public decimalLiteral(): DecimalLiteralContext | null {
        return this.getRuleContext(0, DecimalLiteralContext);
    }
    public doubleLiteral(): DoubleLiteralContext | null {
        return this.getRuleContext(0, DoubleLiteralContext);
    }
    public floatLiteral(): FloatLiteralContext | null {
        return this.getRuleContext(0, FloatLiteralContext);
    }
    public override get ruleIndex(): number {
        return OpenSearchPPLParser.RULE_relevanceFieldWeight;
    }
    public override accept<Result>(visitor: OpenSearchPPLParserVisitor<Result>): Result | null {
        if (visitor.visitRelevanceFieldWeight) {
            return visitor.visitRelevanceFieldWeight(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class RelevanceFieldContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public qualifiedName(): QualifiedNameContext | null {
        return this.getRuleContext(0, QualifiedNameContext);
    }
    public stringLiteral(): StringLiteralContext | null {
        return this.getRuleContext(0, StringLiteralContext);
    }
    public override get ruleIndex(): number {
        return OpenSearchPPLParser.RULE_relevanceField;
    }
    public override accept<Result>(visitor: OpenSearchPPLParserVisitor<Result>): Result | null {
        if (visitor.visitRelevanceField) {
            return visitor.visitRelevanceField(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class RelevanceQueryContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public relevanceArgValue(): RelevanceArgValueContext {
        return this.getRuleContext(0, RelevanceArgValueContext)!;
    }
    public override get ruleIndex(): number {
        return OpenSearchPPLParser.RULE_relevanceQuery;
    }
    public override accept<Result>(visitor: OpenSearchPPLParserVisitor<Result>): Result | null {
        if (visitor.visitRelevanceQuery) {
            return visitor.visitRelevanceQuery(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class RelevanceArgValueContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public qualifiedName(): QualifiedNameContext | null {
        return this.getRuleContext(0, QualifiedNameContext);
    }
    public literalValue(): LiteralValueContext | null {
        return this.getRuleContext(0, LiteralValueContext);
    }
    public override get ruleIndex(): number {
        return OpenSearchPPLParser.RULE_relevanceArgValue;
    }
    public override accept<Result>(visitor: OpenSearchPPLParserVisitor<Result>): Result | null {
        if (visitor.visitRelevanceArgValue) {
            return visitor.visitRelevanceArgValue(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class MathematicalFunctionNameContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public ABS(): antlr.TerminalNode | null {
        return this.getToken(OpenSearchPPLParser.ABS, 0);
    }
    public PLUS_FUCTION(): antlr.TerminalNode | null {
        return this.getToken(OpenSearchPPLParser.PLUS_FUCTION, 0);
    }
    public MINUS_FUCTION(): antlr.TerminalNode | null {
        return this.getToken(OpenSearchPPLParser.MINUS_FUCTION, 0);
    }
    public STAR_FUNCTION(): antlr.TerminalNode | null {
        return this.getToken(OpenSearchPPLParser.STAR_FUNCTION, 0);
    }
    public DIVIDE_FUNCTION(): antlr.TerminalNode | null {
        return this.getToken(OpenSearchPPLParser.DIVIDE_FUNCTION, 0);
    }
    public CBRT(): antlr.TerminalNode | null {
        return this.getToken(OpenSearchPPLParser.CBRT, 0);
    }
    public CEIL(): antlr.TerminalNode | null {
        return this.getToken(OpenSearchPPLParser.CEIL, 0);
    }
    public CEILING(): antlr.TerminalNode | null {
        return this.getToken(OpenSearchPPLParser.CEILING, 0);
    }
    public CONV(): antlr.TerminalNode | null {
        return this.getToken(OpenSearchPPLParser.CONV, 0);
    }
    public CRC32(): antlr.TerminalNode | null {
        return this.getToken(OpenSearchPPLParser.CRC32, 0);
    }
    public E(): antlr.TerminalNode | null {
        return this.getToken(OpenSearchPPLParser.E, 0);
    }
    public EXP(): antlr.TerminalNode | null {
        return this.getToken(OpenSearchPPLParser.EXP, 0);
    }
    public EXPM1(): antlr.TerminalNode | null {
        return this.getToken(OpenSearchPPLParser.EXPM1, 0);
    }
    public FLOOR(): antlr.TerminalNode | null {
        return this.getToken(OpenSearchPPLParser.FLOOR, 0);
    }
    public LN(): antlr.TerminalNode | null {
        return this.getToken(OpenSearchPPLParser.LN, 0);
    }
    public LOG(): antlr.TerminalNode | null {
        return this.getToken(OpenSearchPPLParser.LOG, 0);
    }
    public LOG_WITH_BASE(): antlr.TerminalNode | null {
        return this.getToken(OpenSearchPPLParser.LOG_WITH_BASE, 0);
    }
    public MOD(): antlr.TerminalNode | null {
        return this.getToken(OpenSearchPPLParser.MOD, 0);
    }
    public MODULUS(): antlr.TerminalNode | null {
        return this.getToken(OpenSearchPPLParser.MODULUS, 0);
    }
    public PI(): antlr.TerminalNode | null {
        return this.getToken(OpenSearchPPLParser.PI, 0);
    }
    public POW(): antlr.TerminalNode | null {
        return this.getToken(OpenSearchPPLParser.POW, 0);
    }
    public POWER(): antlr.TerminalNode | null {
        return this.getToken(OpenSearchPPLParser.POWER, 0);
    }
    public RAND(): antlr.TerminalNode | null {
        return this.getToken(OpenSearchPPLParser.RAND, 0);
    }
    public ROUND(): antlr.TerminalNode | null {
        return this.getToken(OpenSearchPPLParser.ROUND, 0);
    }
    public SIGN(): antlr.TerminalNode | null {
        return this.getToken(OpenSearchPPLParser.SIGN, 0);
    }
    public SQRT(): antlr.TerminalNode | null {
        return this.getToken(OpenSearchPPLParser.SQRT, 0);
    }
    public TRUNCATE(): antlr.TerminalNode | null {
        return this.getToken(OpenSearchPPLParser.TRUNCATE, 0);
    }
    public RINT(): antlr.TerminalNode | null {
        return this.getToken(OpenSearchPPLParser.RINT, 0);
    }
    public SIGNUM(): antlr.TerminalNode | null {
        return this.getToken(OpenSearchPPLParser.SIGNUM, 0);
    }
    public SUM(): antlr.TerminalNode | null {
        return this.getToken(OpenSearchPPLParser.SUM, 0);
    }
    public AVG(): antlr.TerminalNode | null {
        return this.getToken(OpenSearchPPLParser.AVG, 0);
    }
    public trigonometricFunctionName(): TrigonometricFunctionNameContext | null {
        return this.getRuleContext(0, TrigonometricFunctionNameContext);
    }
    public override get ruleIndex(): number {
        return OpenSearchPPLParser.RULE_mathematicalFunctionName;
    }
    public override accept<Result>(visitor: OpenSearchPPLParserVisitor<Result>): Result | null {
        if (visitor.visitMathematicalFunctionName) {
            return visitor.visitMathematicalFunctionName(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class GeoipFunctionNameContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public GEOIP(): antlr.TerminalNode {
        return this.getToken(OpenSearchPPLParser.GEOIP, 0)!;
    }
    public override get ruleIndex(): number {
        return OpenSearchPPLParser.RULE_geoipFunctionName;
    }
    public override accept<Result>(visitor: OpenSearchPPLParserVisitor<Result>): Result | null {
        if (visitor.visitGeoipFunctionName) {
            return visitor.visitGeoipFunctionName(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class CollectionFunctionNameContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public ARRAY(): antlr.TerminalNode | null {
        return this.getToken(OpenSearchPPLParser.ARRAY, 0);
    }
    public ARRAY_LENGTH(): antlr.TerminalNode | null {
        return this.getToken(OpenSearchPPLParser.ARRAY_LENGTH, 0);
    }
    public MVJOIN(): antlr.TerminalNode | null {
        return this.getToken(OpenSearchPPLParser.MVJOIN, 0);
    }
    public FORALL(): antlr.TerminalNode | null {
        return this.getToken(OpenSearchPPLParser.FORALL, 0);
    }
    public EXISTS(): antlr.TerminalNode | null {
        return this.getToken(OpenSearchPPLParser.EXISTS, 0);
    }
    public FILTER(): antlr.TerminalNode | null {
        return this.getToken(OpenSearchPPLParser.FILTER, 0);
    }
    public TRANSFORM(): antlr.TerminalNode | null {
        return this.getToken(OpenSearchPPLParser.TRANSFORM, 0);
    }
    public REDUCE(): antlr.TerminalNode | null {
        return this.getToken(OpenSearchPPLParser.REDUCE, 0);
    }
    public override get ruleIndex(): number {
        return OpenSearchPPLParser.RULE_collectionFunctionName;
    }
    public override accept<Result>(visitor: OpenSearchPPLParserVisitor<Result>): Result | null {
        if (visitor.visitCollectionFunctionName) {
            return visitor.visitCollectionFunctionName(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class TrigonometricFunctionNameContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public ACOS(): antlr.TerminalNode | null {
        return this.getToken(OpenSearchPPLParser.ACOS, 0);
    }
    public ASIN(): antlr.TerminalNode | null {
        return this.getToken(OpenSearchPPLParser.ASIN, 0);
    }
    public ATAN(): antlr.TerminalNode | null {
        return this.getToken(OpenSearchPPLParser.ATAN, 0);
    }
    public ATAN2(): antlr.TerminalNode | null {
        return this.getToken(OpenSearchPPLParser.ATAN2, 0);
    }
    public COS(): antlr.TerminalNode | null {
        return this.getToken(OpenSearchPPLParser.COS, 0);
    }
    public COSH(): antlr.TerminalNode | null {
        return this.getToken(OpenSearchPPLParser.COSH, 0);
    }
    public COT(): antlr.TerminalNode | null {
        return this.getToken(OpenSearchPPLParser.COT, 0);
    }
    public DEGREES(): antlr.TerminalNode | null {
        return this.getToken(OpenSearchPPLParser.DEGREES, 0);
    }
    public RADIANS(): antlr.TerminalNode | null {
        return this.getToken(OpenSearchPPLParser.RADIANS, 0);
    }
    public SIN(): antlr.TerminalNode | null {
        return this.getToken(OpenSearchPPLParser.SIN, 0);
    }
    public SINH(): antlr.TerminalNode | null {
        return this.getToken(OpenSearchPPLParser.SINH, 0);
    }
    public TAN(): antlr.TerminalNode | null {
        return this.getToken(OpenSearchPPLParser.TAN, 0);
    }
    public override get ruleIndex(): number {
        return OpenSearchPPLParser.RULE_trigonometricFunctionName;
    }
    public override accept<Result>(visitor: OpenSearchPPLParserVisitor<Result>): Result | null {
        if (visitor.visitTrigonometricFunctionName) {
            return visitor.visitTrigonometricFunctionName(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class JsonFunctionNameContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public JSON(): antlr.TerminalNode | null {
        return this.getToken(OpenSearchPPLParser.JSON, 0);
    }
    public JSON_OBJECT(): antlr.TerminalNode | null {
        return this.getToken(OpenSearchPPLParser.JSON_OBJECT, 0);
    }
    public JSON_ARRAY(): antlr.TerminalNode | null {
        return this.getToken(OpenSearchPPLParser.JSON_ARRAY, 0);
    }
    public JSON_ARRAY_LENGTH(): antlr.TerminalNode | null {
        return this.getToken(OpenSearchPPLParser.JSON_ARRAY_LENGTH, 0);
    }
    public JSON_EXTRACT(): antlr.TerminalNode | null {
        return this.getToken(OpenSearchPPLParser.JSON_EXTRACT, 0);
    }
    public JSON_KEYS(): antlr.TerminalNode | null {
        return this.getToken(OpenSearchPPLParser.JSON_KEYS, 0);
    }
    public JSON_SET(): antlr.TerminalNode | null {
        return this.getToken(OpenSearchPPLParser.JSON_SET, 0);
    }
    public JSON_DELETE(): antlr.TerminalNode | null {
        return this.getToken(OpenSearchPPLParser.JSON_DELETE, 0);
    }
    public JSON_APPEND(): antlr.TerminalNode | null {
        return this.getToken(OpenSearchPPLParser.JSON_APPEND, 0);
    }
    public JSON_EXTEND(): antlr.TerminalNode | null {
        return this.getToken(OpenSearchPPLParser.JSON_EXTEND, 0);
    }
    public override get ruleIndex(): number {
        return OpenSearchPPLParser.RULE_jsonFunctionName;
    }
    public override accept<Result>(visitor: OpenSearchPPLParserVisitor<Result>): Result | null {
        if (visitor.visitJsonFunctionName) {
            return visitor.visitJsonFunctionName(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class CryptographicFunctionNameContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public MD5(): antlr.TerminalNode | null {
        return this.getToken(OpenSearchPPLParser.MD5, 0);
    }
    public SHA1(): antlr.TerminalNode | null {
        return this.getToken(OpenSearchPPLParser.SHA1, 0);
    }
    public SHA2(): antlr.TerminalNode | null {
        return this.getToken(OpenSearchPPLParser.SHA2, 0);
    }
    public override get ruleIndex(): number {
        return OpenSearchPPLParser.RULE_cryptographicFunctionName;
    }
    public override accept<Result>(visitor: OpenSearchPPLParserVisitor<Result>): Result | null {
        if (visitor.visitCryptographicFunctionName) {
            return visitor.visitCryptographicFunctionName(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class DateTimeFunctionNameContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public ADDDATE(): antlr.TerminalNode | null {
        return this.getToken(OpenSearchPPLParser.ADDDATE, 0);
    }
    public ADDTIME(): antlr.TerminalNode | null {
        return this.getToken(OpenSearchPPLParser.ADDTIME, 0);
    }
    public CONVERT_TZ(): antlr.TerminalNode | null {
        return this.getToken(OpenSearchPPLParser.CONVERT_TZ, 0);
    }
    public CURDATE(): antlr.TerminalNode | null {
        return this.getToken(OpenSearchPPLParser.CURDATE, 0);
    }
    public CURRENT_DATE(): antlr.TerminalNode | null {
        return this.getToken(OpenSearchPPLParser.CURRENT_DATE, 0);
    }
    public CURRENT_TIME(): antlr.TerminalNode | null {
        return this.getToken(OpenSearchPPLParser.CURRENT_TIME, 0);
    }
    public CURRENT_TIMESTAMP(): antlr.TerminalNode | null {
        return this.getToken(OpenSearchPPLParser.CURRENT_TIMESTAMP, 0);
    }
    public CURTIME(): antlr.TerminalNode | null {
        return this.getToken(OpenSearchPPLParser.CURTIME, 0);
    }
    public DATE(): antlr.TerminalNode | null {
        return this.getToken(OpenSearchPPLParser.DATE, 0);
    }
    public DATEDIFF(): antlr.TerminalNode | null {
        return this.getToken(OpenSearchPPLParser.DATEDIFF, 0);
    }
    public DATETIME(): antlr.TerminalNode | null {
        return this.getToken(OpenSearchPPLParser.DATETIME, 0);
    }
    public DATE_ADD(): antlr.TerminalNode | null {
        return this.getToken(OpenSearchPPLParser.DATE_ADD, 0);
    }
    public DATE_FORMAT(): antlr.TerminalNode | null {
        return this.getToken(OpenSearchPPLParser.DATE_FORMAT, 0);
    }
    public DATE_SUB(): antlr.TerminalNode | null {
        return this.getToken(OpenSearchPPLParser.DATE_SUB, 0);
    }
    public DAY(): antlr.TerminalNode | null {
        return this.getToken(OpenSearchPPLParser.DAY, 0);
    }
    public DAYNAME(): antlr.TerminalNode | null {
        return this.getToken(OpenSearchPPLParser.DAYNAME, 0);
    }
    public DAYOFMONTH(): antlr.TerminalNode | null {
        return this.getToken(OpenSearchPPLParser.DAYOFMONTH, 0);
    }
    public DAYOFWEEK(): antlr.TerminalNode | null {
        return this.getToken(OpenSearchPPLParser.DAYOFWEEK, 0);
    }
    public DAYOFYEAR(): antlr.TerminalNode | null {
        return this.getToken(OpenSearchPPLParser.DAYOFYEAR, 0);
    }
    public DAY_OF_MONTH(): antlr.TerminalNode | null {
        return this.getToken(OpenSearchPPLParser.DAY_OF_MONTH, 0);
    }
    public DAY_OF_WEEK(): antlr.TerminalNode | null {
        return this.getToken(OpenSearchPPLParser.DAY_OF_WEEK, 0);
    }
    public DAY_OF_YEAR(): antlr.TerminalNode | null {
        return this.getToken(OpenSearchPPLParser.DAY_OF_YEAR, 0);
    }
    public FROM_DAYS(): antlr.TerminalNode | null {
        return this.getToken(OpenSearchPPLParser.FROM_DAYS, 0);
    }
    public FROM_UNIXTIME(): antlr.TerminalNode | null {
        return this.getToken(OpenSearchPPLParser.FROM_UNIXTIME, 0);
    }
    public HOUR(): antlr.TerminalNode | null {
        return this.getToken(OpenSearchPPLParser.HOUR, 0);
    }
    public HOUR_OF_DAY(): antlr.TerminalNode | null {
        return this.getToken(OpenSearchPPLParser.HOUR_OF_DAY, 0);
    }
    public LAST_DAY(): antlr.TerminalNode | null {
        return this.getToken(OpenSearchPPLParser.LAST_DAY, 0);
    }
    public LOCALTIME(): antlr.TerminalNode | null {
        return this.getToken(OpenSearchPPLParser.LOCALTIME, 0);
    }
    public LOCALTIMESTAMP(): antlr.TerminalNode | null {
        return this.getToken(OpenSearchPPLParser.LOCALTIMESTAMP, 0);
    }
    public MAKEDATE(): antlr.TerminalNode | null {
        return this.getToken(OpenSearchPPLParser.MAKEDATE, 0);
    }
    public MAKETIME(): antlr.TerminalNode | null {
        return this.getToken(OpenSearchPPLParser.MAKETIME, 0);
    }
    public MICROSECOND(): antlr.TerminalNode | null {
        return this.getToken(OpenSearchPPLParser.MICROSECOND, 0);
    }
    public MINUTE(): antlr.TerminalNode | null {
        return this.getToken(OpenSearchPPLParser.MINUTE, 0);
    }
    public MINUTE_OF_DAY(): antlr.TerminalNode | null {
        return this.getToken(OpenSearchPPLParser.MINUTE_OF_DAY, 0);
    }
    public MINUTE_OF_HOUR(): antlr.TerminalNode | null {
        return this.getToken(OpenSearchPPLParser.MINUTE_OF_HOUR, 0);
    }
    public MONTH(): antlr.TerminalNode | null {
        return this.getToken(OpenSearchPPLParser.MONTH, 0);
    }
    public MONTHNAME(): antlr.TerminalNode | null {
        return this.getToken(OpenSearchPPLParser.MONTHNAME, 0);
    }
    public MONTH_OF_YEAR(): antlr.TerminalNode | null {
        return this.getToken(OpenSearchPPLParser.MONTH_OF_YEAR, 0);
    }
    public NOW(): antlr.TerminalNode | null {
        return this.getToken(OpenSearchPPLParser.NOW, 0);
    }
    public PERIOD_ADD(): antlr.TerminalNode | null {
        return this.getToken(OpenSearchPPLParser.PERIOD_ADD, 0);
    }
    public PERIOD_DIFF(): antlr.TerminalNode | null {
        return this.getToken(OpenSearchPPLParser.PERIOD_DIFF, 0);
    }
    public QUARTER(): antlr.TerminalNode | null {
        return this.getToken(OpenSearchPPLParser.QUARTER, 0);
    }
    public SECOND(): antlr.TerminalNode | null {
        return this.getToken(OpenSearchPPLParser.SECOND, 0);
    }
    public SECOND_OF_MINUTE(): antlr.TerminalNode | null {
        return this.getToken(OpenSearchPPLParser.SECOND_OF_MINUTE, 0);
    }
    public SEC_TO_TIME(): antlr.TerminalNode | null {
        return this.getToken(OpenSearchPPLParser.SEC_TO_TIME, 0);
    }
    public STR_TO_DATE(): antlr.TerminalNode | null {
        return this.getToken(OpenSearchPPLParser.STR_TO_DATE, 0);
    }
    public SUBDATE(): antlr.TerminalNode | null {
        return this.getToken(OpenSearchPPLParser.SUBDATE, 0);
    }
    public SUBTIME(): antlr.TerminalNode | null {
        return this.getToken(OpenSearchPPLParser.SUBTIME, 0);
    }
    public SYSDATE(): antlr.TerminalNode | null {
        return this.getToken(OpenSearchPPLParser.SYSDATE, 0);
    }
    public TIME(): antlr.TerminalNode | null {
        return this.getToken(OpenSearchPPLParser.TIME, 0);
    }
    public TIMEDIFF(): antlr.TerminalNode | null {
        return this.getToken(OpenSearchPPLParser.TIMEDIFF, 0);
    }
    public TIMESTAMP(): antlr.TerminalNode | null {
        return this.getToken(OpenSearchPPLParser.TIMESTAMP, 0);
    }
    public TIME_FORMAT(): antlr.TerminalNode | null {
        return this.getToken(OpenSearchPPLParser.TIME_FORMAT, 0);
    }
    public TIME_TO_SEC(): antlr.TerminalNode | null {
        return this.getToken(OpenSearchPPLParser.TIME_TO_SEC, 0);
    }
    public TO_DAYS(): antlr.TerminalNode | null {
        return this.getToken(OpenSearchPPLParser.TO_DAYS, 0);
    }
    public TO_SECONDS(): antlr.TerminalNode | null {
        return this.getToken(OpenSearchPPLParser.TO_SECONDS, 0);
    }
    public UNIX_TIMESTAMP(): antlr.TerminalNode | null {
        return this.getToken(OpenSearchPPLParser.UNIX_TIMESTAMP, 0);
    }
    public UTC_DATE(): antlr.TerminalNode | null {
        return this.getToken(OpenSearchPPLParser.UTC_DATE, 0);
    }
    public UTC_TIME(): antlr.TerminalNode | null {
        return this.getToken(OpenSearchPPLParser.UTC_TIME, 0);
    }
    public UTC_TIMESTAMP(): antlr.TerminalNode | null {
        return this.getToken(OpenSearchPPLParser.UTC_TIMESTAMP, 0);
    }
    public WEEK(): antlr.TerminalNode | null {
        return this.getToken(OpenSearchPPLParser.WEEK, 0);
    }
    public WEEKDAY(): antlr.TerminalNode | null {
        return this.getToken(OpenSearchPPLParser.WEEKDAY, 0);
    }
    public WEEK_OF_YEAR(): antlr.TerminalNode | null {
        return this.getToken(OpenSearchPPLParser.WEEK_OF_YEAR, 0);
    }
    public YEAR(): antlr.TerminalNode | null {
        return this.getToken(OpenSearchPPLParser.YEAR, 0);
    }
    public YEARWEEK(): antlr.TerminalNode | null {
        return this.getToken(OpenSearchPPLParser.YEARWEEK, 0);
    }
    public STRFTIME(): antlr.TerminalNode | null {
        return this.getToken(OpenSearchPPLParser.STRFTIME, 0);
    }
    public override get ruleIndex(): number {
        return OpenSearchPPLParser.RULE_dateTimeFunctionName;
    }
    public override accept<Result>(visitor: OpenSearchPPLParserVisitor<Result>): Result | null {
        if (visitor.visitDateTimeFunctionName) {
            return visitor.visitDateTimeFunctionName(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class GetFormatFunctionCallContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public GET_FORMAT(): antlr.TerminalNode {
        return this.getToken(OpenSearchPPLParser.GET_FORMAT, 0)!;
    }
    public LT_PRTHS(): antlr.TerminalNode {
        return this.getToken(OpenSearchPPLParser.LT_PRTHS, 0)!;
    }
    public getFormatType(): GetFormatTypeContext {
        return this.getRuleContext(0, GetFormatTypeContext)!;
    }
    public COMMA(): antlr.TerminalNode {
        return this.getToken(OpenSearchPPLParser.COMMA, 0)!;
    }
    public functionArg(): FunctionArgContext {
        return this.getRuleContext(0, FunctionArgContext)!;
    }
    public RT_PRTHS(): antlr.TerminalNode {
        return this.getToken(OpenSearchPPLParser.RT_PRTHS, 0)!;
    }
    public override get ruleIndex(): number {
        return OpenSearchPPLParser.RULE_getFormatFunctionCall;
    }
    public override accept<Result>(visitor: OpenSearchPPLParserVisitor<Result>): Result | null {
        if (visitor.visitGetFormatFunctionCall) {
            return visitor.visitGetFormatFunctionCall(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class GetFormatTypeContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public DATE(): antlr.TerminalNode | null {
        return this.getToken(OpenSearchPPLParser.DATE, 0);
    }
    public DATETIME(): antlr.TerminalNode | null {
        return this.getToken(OpenSearchPPLParser.DATETIME, 0);
    }
    public TIME(): antlr.TerminalNode | null {
        return this.getToken(OpenSearchPPLParser.TIME, 0);
    }
    public TIMESTAMP(): antlr.TerminalNode | null {
        return this.getToken(OpenSearchPPLParser.TIMESTAMP, 0);
    }
    public override get ruleIndex(): number {
        return OpenSearchPPLParser.RULE_getFormatType;
    }
    public override accept<Result>(visitor: OpenSearchPPLParserVisitor<Result>): Result | null {
        if (visitor.visitGetFormatType) {
            return visitor.visitGetFormatType(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ExtractFunctionCallContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public EXTRACT(): antlr.TerminalNode {
        return this.getToken(OpenSearchPPLParser.EXTRACT, 0)!;
    }
    public LT_PRTHS(): antlr.TerminalNode {
        return this.getToken(OpenSearchPPLParser.LT_PRTHS, 0)!;
    }
    public datetimePart(): DatetimePartContext {
        return this.getRuleContext(0, DatetimePartContext)!;
    }
    public FROM(): antlr.TerminalNode {
        return this.getToken(OpenSearchPPLParser.FROM, 0)!;
    }
    public functionArg(): FunctionArgContext {
        return this.getRuleContext(0, FunctionArgContext)!;
    }
    public RT_PRTHS(): antlr.TerminalNode {
        return this.getToken(OpenSearchPPLParser.RT_PRTHS, 0)!;
    }
    public override get ruleIndex(): number {
        return OpenSearchPPLParser.RULE_extractFunctionCall;
    }
    public override accept<Result>(visitor: OpenSearchPPLParserVisitor<Result>): Result | null {
        if (visitor.visitExtractFunctionCall) {
            return visitor.visitExtractFunctionCall(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class SimpleDateTimePartContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public MICROSECOND(): antlr.TerminalNode | null {
        return this.getToken(OpenSearchPPLParser.MICROSECOND, 0);
    }
    public SECOND(): antlr.TerminalNode | null {
        return this.getToken(OpenSearchPPLParser.SECOND, 0);
    }
    public MINUTE(): antlr.TerminalNode | null {
        return this.getToken(OpenSearchPPLParser.MINUTE, 0);
    }
    public HOUR(): antlr.TerminalNode | null {
        return this.getToken(OpenSearchPPLParser.HOUR, 0);
    }
    public DAY(): antlr.TerminalNode | null {
        return this.getToken(OpenSearchPPLParser.DAY, 0);
    }
    public WEEK(): antlr.TerminalNode | null {
        return this.getToken(OpenSearchPPLParser.WEEK, 0);
    }
    public MONTH(): antlr.TerminalNode | null {
        return this.getToken(OpenSearchPPLParser.MONTH, 0);
    }
    public QUARTER(): antlr.TerminalNode | null {
        return this.getToken(OpenSearchPPLParser.QUARTER, 0);
    }
    public YEAR(): antlr.TerminalNode | null {
        return this.getToken(OpenSearchPPLParser.YEAR, 0);
    }
    public override get ruleIndex(): number {
        return OpenSearchPPLParser.RULE_simpleDateTimePart;
    }
    public override accept<Result>(visitor: OpenSearchPPLParserVisitor<Result>): Result | null {
        if (visitor.visitSimpleDateTimePart) {
            return visitor.visitSimpleDateTimePart(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ComplexDateTimePartContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public SECOND_MICROSECOND(): antlr.TerminalNode | null {
        return this.getToken(OpenSearchPPLParser.SECOND_MICROSECOND, 0);
    }
    public MINUTE_MICROSECOND(): antlr.TerminalNode | null {
        return this.getToken(OpenSearchPPLParser.MINUTE_MICROSECOND, 0);
    }
    public MINUTE_SECOND(): antlr.TerminalNode | null {
        return this.getToken(OpenSearchPPLParser.MINUTE_SECOND, 0);
    }
    public HOUR_MICROSECOND(): antlr.TerminalNode | null {
        return this.getToken(OpenSearchPPLParser.HOUR_MICROSECOND, 0);
    }
    public HOUR_SECOND(): antlr.TerminalNode | null {
        return this.getToken(OpenSearchPPLParser.HOUR_SECOND, 0);
    }
    public HOUR_MINUTE(): antlr.TerminalNode | null {
        return this.getToken(OpenSearchPPLParser.HOUR_MINUTE, 0);
    }
    public DAY_MICROSECOND(): antlr.TerminalNode | null {
        return this.getToken(OpenSearchPPLParser.DAY_MICROSECOND, 0);
    }
    public DAY_SECOND(): antlr.TerminalNode | null {
        return this.getToken(OpenSearchPPLParser.DAY_SECOND, 0);
    }
    public DAY_MINUTE(): antlr.TerminalNode | null {
        return this.getToken(OpenSearchPPLParser.DAY_MINUTE, 0);
    }
    public DAY_HOUR(): antlr.TerminalNode | null {
        return this.getToken(OpenSearchPPLParser.DAY_HOUR, 0);
    }
    public YEAR_MONTH(): antlr.TerminalNode | null {
        return this.getToken(OpenSearchPPLParser.YEAR_MONTH, 0);
    }
    public override get ruleIndex(): number {
        return OpenSearchPPLParser.RULE_complexDateTimePart;
    }
    public override accept<Result>(visitor: OpenSearchPPLParserVisitor<Result>): Result | null {
        if (visitor.visitComplexDateTimePart) {
            return visitor.visitComplexDateTimePart(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class DatetimePartContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public simpleDateTimePart(): SimpleDateTimePartContext | null {
        return this.getRuleContext(0, SimpleDateTimePartContext);
    }
    public complexDateTimePart(): ComplexDateTimePartContext | null {
        return this.getRuleContext(0, ComplexDateTimePartContext);
    }
    public override get ruleIndex(): number {
        return OpenSearchPPLParser.RULE_datetimePart;
    }
    public override accept<Result>(visitor: OpenSearchPPLParserVisitor<Result>): Result | null {
        if (visitor.visitDatetimePart) {
            return visitor.visitDatetimePart(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class TimestampFunctionCallContext extends antlr.ParserRuleContext {
    public _firstArg?: FunctionArgContext;
    public _secondArg?: FunctionArgContext;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public timestampFunctionName(): TimestampFunctionNameContext {
        return this.getRuleContext(0, TimestampFunctionNameContext)!;
    }
    public LT_PRTHS(): antlr.TerminalNode {
        return this.getToken(OpenSearchPPLParser.LT_PRTHS, 0)!;
    }
    public simpleDateTimePart(): SimpleDateTimePartContext {
        return this.getRuleContext(0, SimpleDateTimePartContext)!;
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(OpenSearchPPLParser.COMMA);
    	} else {
    		return this.getToken(OpenSearchPPLParser.COMMA, i);
    	}
    }
    public RT_PRTHS(): antlr.TerminalNode {
        return this.getToken(OpenSearchPPLParser.RT_PRTHS, 0)!;
    }
    public functionArg(): FunctionArgContext[];
    public functionArg(i: number): FunctionArgContext | null;
    public functionArg(i?: number): FunctionArgContext[] | FunctionArgContext | null {
        if (i === undefined) {
            return this.getRuleContexts(FunctionArgContext);
        }

        return this.getRuleContext(i, FunctionArgContext);
    }
    public override get ruleIndex(): number {
        return OpenSearchPPLParser.RULE_timestampFunctionCall;
    }
    public override accept<Result>(visitor: OpenSearchPPLParserVisitor<Result>): Result | null {
        if (visitor.visitTimestampFunctionCall) {
            return visitor.visitTimestampFunctionCall(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class TimestampFunctionNameContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public TIMESTAMPADD(): antlr.TerminalNode | null {
        return this.getToken(OpenSearchPPLParser.TIMESTAMPADD, 0);
    }
    public TIMESTAMPDIFF(): antlr.TerminalNode | null {
        return this.getToken(OpenSearchPPLParser.TIMESTAMPDIFF, 0);
    }
    public override get ruleIndex(): number {
        return OpenSearchPPLParser.RULE_timestampFunctionName;
    }
    public override accept<Result>(visitor: OpenSearchPPLParserVisitor<Result>): Result | null {
        if (visitor.visitTimestampFunctionName) {
            return visitor.visitTimestampFunctionName(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ConditionFunctionNameContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public LIKE(): antlr.TerminalNode | null {
        return this.getToken(OpenSearchPPLParser.LIKE, 0);
    }
    public ISNULL(): antlr.TerminalNode | null {
        return this.getToken(OpenSearchPPLParser.ISNULL, 0);
    }
    public ISNOTNULL(): antlr.TerminalNode | null {
        return this.getToken(OpenSearchPPLParser.ISNOTNULL, 0);
    }
    public CIDRMATCH(): antlr.TerminalNode | null {
        return this.getToken(OpenSearchPPLParser.CIDRMATCH, 0);
    }
    public REGEX_MATCH(): antlr.TerminalNode | null {
        return this.getToken(OpenSearchPPLParser.REGEX_MATCH, 0);
    }
    public JSON_VALID(): antlr.TerminalNode | null {
        return this.getToken(OpenSearchPPLParser.JSON_VALID, 0);
    }
    public ISPRESENT(): antlr.TerminalNode | null {
        return this.getToken(OpenSearchPPLParser.ISPRESENT, 0);
    }
    public ISEMPTY(): antlr.TerminalNode | null {
        return this.getToken(OpenSearchPPLParser.ISEMPTY, 0);
    }
    public ISBLANK(): antlr.TerminalNode | null {
        return this.getToken(OpenSearchPPLParser.ISBLANK, 0);
    }
    public EARLIEST(): antlr.TerminalNode | null {
        return this.getToken(OpenSearchPPLParser.EARLIEST, 0);
    }
    public LATEST(): antlr.TerminalNode | null {
        return this.getToken(OpenSearchPPLParser.LATEST, 0);
    }
    public override get ruleIndex(): number {
        return OpenSearchPPLParser.RULE_conditionFunctionName;
    }
    public override accept<Result>(visitor: OpenSearchPPLParserVisitor<Result>): Result | null {
        if (visitor.visitConditionFunctionName) {
            return visitor.visitConditionFunctionName(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class FlowControlFunctionNameContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public IF(): antlr.TerminalNode | null {
        return this.getToken(OpenSearchPPLParser.IF, 0);
    }
    public IFNULL(): antlr.TerminalNode | null {
        return this.getToken(OpenSearchPPLParser.IFNULL, 0);
    }
    public NULLIF(): antlr.TerminalNode | null {
        return this.getToken(OpenSearchPPLParser.NULLIF, 0);
    }
    public COALESCE(): antlr.TerminalNode | null {
        return this.getToken(OpenSearchPPLParser.COALESCE, 0);
    }
    public override get ruleIndex(): number {
        return OpenSearchPPLParser.RULE_flowControlFunctionName;
    }
    public override accept<Result>(visitor: OpenSearchPPLParserVisitor<Result>): Result | null {
        if (visitor.visitFlowControlFunctionName) {
            return visitor.visitFlowControlFunctionName(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class SystemFunctionNameContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public TYPEOF(): antlr.TerminalNode {
        return this.getToken(OpenSearchPPLParser.TYPEOF, 0)!;
    }
    public override get ruleIndex(): number {
        return OpenSearchPPLParser.RULE_systemFunctionName;
    }
    public override accept<Result>(visitor: OpenSearchPPLParserVisitor<Result>): Result | null {
        if (visitor.visitSystemFunctionName) {
            return visitor.visitSystemFunctionName(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class TextFunctionNameContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public SUBSTR(): antlr.TerminalNode | null {
        return this.getToken(OpenSearchPPLParser.SUBSTR, 0);
    }
    public SUBSTRING(): antlr.TerminalNode | null {
        return this.getToken(OpenSearchPPLParser.SUBSTRING, 0);
    }
    public TRIM(): antlr.TerminalNode | null {
        return this.getToken(OpenSearchPPLParser.TRIM, 0);
    }
    public LTRIM(): antlr.TerminalNode | null {
        return this.getToken(OpenSearchPPLParser.LTRIM, 0);
    }
    public RTRIM(): antlr.TerminalNode | null {
        return this.getToken(OpenSearchPPLParser.RTRIM, 0);
    }
    public LOWER(): antlr.TerminalNode | null {
        return this.getToken(OpenSearchPPLParser.LOWER, 0);
    }
    public UPPER(): antlr.TerminalNode | null {
        return this.getToken(OpenSearchPPLParser.UPPER, 0);
    }
    public CONCAT(): antlr.TerminalNode | null {
        return this.getToken(OpenSearchPPLParser.CONCAT, 0);
    }
    public CONCAT_WS(): antlr.TerminalNode | null {
        return this.getToken(OpenSearchPPLParser.CONCAT_WS, 0);
    }
    public LENGTH(): antlr.TerminalNode | null {
        return this.getToken(OpenSearchPPLParser.LENGTH, 0);
    }
    public STRCMP(): antlr.TerminalNode | null {
        return this.getToken(OpenSearchPPLParser.STRCMP, 0);
    }
    public RIGHT(): antlr.TerminalNode | null {
        return this.getToken(OpenSearchPPLParser.RIGHT, 0);
    }
    public LEFT(): antlr.TerminalNode | null {
        return this.getToken(OpenSearchPPLParser.LEFT, 0);
    }
    public ASCII(): antlr.TerminalNode | null {
        return this.getToken(OpenSearchPPLParser.ASCII, 0);
    }
    public LOCATE(): antlr.TerminalNode | null {
        return this.getToken(OpenSearchPPLParser.LOCATE, 0);
    }
    public REPLACE(): antlr.TerminalNode | null {
        return this.getToken(OpenSearchPPLParser.REPLACE, 0);
    }
    public REVERSE(): antlr.TerminalNode | null {
        return this.getToken(OpenSearchPPLParser.REVERSE, 0);
    }
    public override get ruleIndex(): number {
        return OpenSearchPPLParser.RULE_textFunctionName;
    }
    public override accept<Result>(visitor: OpenSearchPPLParserVisitor<Result>): Result | null {
        if (visitor.visitTextFunctionName) {
            return visitor.visitTextFunctionName(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class PositionFunctionNameContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public POSITION(): antlr.TerminalNode {
        return this.getToken(OpenSearchPPLParser.POSITION, 0)!;
    }
    public override get ruleIndex(): number {
        return OpenSearchPPLParser.RULE_positionFunctionName;
    }
    public override accept<Result>(visitor: OpenSearchPPLParserVisitor<Result>): Result | null {
        if (visitor.visitPositionFunctionName) {
            return visitor.visitPositionFunctionName(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ComparisonOperatorContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public EQUAL(): antlr.TerminalNode | null {
        return this.getToken(OpenSearchPPLParser.EQUAL, 0);
    }
    public DOUBLE_EQUAL(): antlr.TerminalNode | null {
        return this.getToken(OpenSearchPPLParser.DOUBLE_EQUAL, 0);
    }
    public NOT_EQUAL(): antlr.TerminalNode | null {
        return this.getToken(OpenSearchPPLParser.NOT_EQUAL, 0);
    }
    public LESS(): antlr.TerminalNode | null {
        return this.getToken(OpenSearchPPLParser.LESS, 0);
    }
    public NOT_LESS(): antlr.TerminalNode | null {
        return this.getToken(OpenSearchPPLParser.NOT_LESS, 0);
    }
    public GREATER(): antlr.TerminalNode | null {
        return this.getToken(OpenSearchPPLParser.GREATER, 0);
    }
    public NOT_GREATER(): antlr.TerminalNode | null {
        return this.getToken(OpenSearchPPLParser.NOT_GREATER, 0);
    }
    public REGEXP(): antlr.TerminalNode | null {
        return this.getToken(OpenSearchPPLParser.REGEXP, 0);
    }
    public LIKE(): antlr.TerminalNode | null {
        return this.getToken(OpenSearchPPLParser.LIKE, 0);
    }
    public override get ruleIndex(): number {
        return OpenSearchPPLParser.RULE_comparisonOperator;
    }
    public override accept<Result>(visitor: OpenSearchPPLParserVisitor<Result>): Result | null {
        if (visitor.visitComparisonOperator) {
            return visitor.visitComparisonOperator(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class SingleFieldRelevanceFunctionNameContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public MATCH(): antlr.TerminalNode | null {
        return this.getToken(OpenSearchPPLParser.MATCH, 0);
    }
    public MATCH_PHRASE(): antlr.TerminalNode | null {
        return this.getToken(OpenSearchPPLParser.MATCH_PHRASE, 0);
    }
    public MATCH_BOOL_PREFIX(): antlr.TerminalNode | null {
        return this.getToken(OpenSearchPPLParser.MATCH_BOOL_PREFIX, 0);
    }
    public MATCH_PHRASE_PREFIX(): antlr.TerminalNode | null {
        return this.getToken(OpenSearchPPLParser.MATCH_PHRASE_PREFIX, 0);
    }
    public override get ruleIndex(): number {
        return OpenSearchPPLParser.RULE_singleFieldRelevanceFunctionName;
    }
    public override accept<Result>(visitor: OpenSearchPPLParserVisitor<Result>): Result | null {
        if (visitor.visitSingleFieldRelevanceFunctionName) {
            return visitor.visitSingleFieldRelevanceFunctionName(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class MultiFieldRelevanceFunctionNameContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public SIMPLE_QUERY_STRING(): antlr.TerminalNode | null {
        return this.getToken(OpenSearchPPLParser.SIMPLE_QUERY_STRING, 0);
    }
    public MULTI_MATCH(): antlr.TerminalNode | null {
        return this.getToken(OpenSearchPPLParser.MULTI_MATCH, 0);
    }
    public QUERY_STRING(): antlr.TerminalNode | null {
        return this.getToken(OpenSearchPPLParser.QUERY_STRING, 0);
    }
    public override get ruleIndex(): number {
        return OpenSearchPPLParser.RULE_multiFieldRelevanceFunctionName;
    }
    public override accept<Result>(visitor: OpenSearchPPLParserVisitor<Result>): Result | null {
        if (visitor.visitMultiFieldRelevanceFunctionName) {
            return visitor.visitMultiFieldRelevanceFunctionName(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class LiteralValueContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public intervalLiteral(): IntervalLiteralContext | null {
        return this.getRuleContext(0, IntervalLiteralContext);
    }
    public stringLiteral(): StringLiteralContext | null {
        return this.getRuleContext(0, StringLiteralContext);
    }
    public integerLiteral(): IntegerLiteralContext | null {
        return this.getRuleContext(0, IntegerLiteralContext);
    }
    public decimalLiteral(): DecimalLiteralContext | null {
        return this.getRuleContext(0, DecimalLiteralContext);
    }
    public doubleLiteral(): DoubleLiteralContext | null {
        return this.getRuleContext(0, DoubleLiteralContext);
    }
    public floatLiteral(): FloatLiteralContext | null {
        return this.getRuleContext(0, FloatLiteralContext);
    }
    public booleanLiteral(): BooleanLiteralContext | null {
        return this.getRuleContext(0, BooleanLiteralContext);
    }
    public datetimeLiteral(): DatetimeLiteralContext | null {
        return this.getRuleContext(0, DatetimeLiteralContext);
    }
    public override get ruleIndex(): number {
        return OpenSearchPPLParser.RULE_literalValue;
    }
    public override accept<Result>(visitor: OpenSearchPPLParserVisitor<Result>): Result | null {
        if (visitor.visitLiteralValue) {
            return visitor.visitLiteralValue(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class IntervalLiteralContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public INTERVAL(): antlr.TerminalNode {
        return this.getToken(OpenSearchPPLParser.INTERVAL, 0)!;
    }
    public valueExpression(): ValueExpressionContext {
        return this.getRuleContext(0, ValueExpressionContext)!;
    }
    public intervalUnit(): IntervalUnitContext {
        return this.getRuleContext(0, IntervalUnitContext)!;
    }
    public override get ruleIndex(): number {
        return OpenSearchPPLParser.RULE_intervalLiteral;
    }
    public override accept<Result>(visitor: OpenSearchPPLParserVisitor<Result>): Result | null {
        if (visitor.visitIntervalLiteral) {
            return visitor.visitIntervalLiteral(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class StringLiteralContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public DQUOTA_STRING(): antlr.TerminalNode | null {
        return this.getToken(OpenSearchPPLParser.DQUOTA_STRING, 0);
    }
    public SQUOTA_STRING(): antlr.TerminalNode | null {
        return this.getToken(OpenSearchPPLParser.SQUOTA_STRING, 0);
    }
    public override get ruleIndex(): number {
        return OpenSearchPPLParser.RULE_stringLiteral;
    }
    public override accept<Result>(visitor: OpenSearchPPLParserVisitor<Result>): Result | null {
        if (visitor.visitStringLiteral) {
            return visitor.visitStringLiteral(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class IntegerLiteralContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public INTEGER_LITERAL(): antlr.TerminalNode {
        return this.getToken(OpenSearchPPLParser.INTEGER_LITERAL, 0)!;
    }
    public PLUS(): antlr.TerminalNode | null {
        return this.getToken(OpenSearchPPLParser.PLUS, 0);
    }
    public MINUS(): antlr.TerminalNode | null {
        return this.getToken(OpenSearchPPLParser.MINUS, 0);
    }
    public override get ruleIndex(): number {
        return OpenSearchPPLParser.RULE_integerLiteral;
    }
    public override accept<Result>(visitor: OpenSearchPPLParserVisitor<Result>): Result | null {
        if (visitor.visitIntegerLiteral) {
            return visitor.visitIntegerLiteral(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class DecimalLiteralContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public DECIMAL_LITERAL(): antlr.TerminalNode {
        return this.getToken(OpenSearchPPLParser.DECIMAL_LITERAL, 0)!;
    }
    public PLUS(): antlr.TerminalNode | null {
        return this.getToken(OpenSearchPPLParser.PLUS, 0);
    }
    public MINUS(): antlr.TerminalNode | null {
        return this.getToken(OpenSearchPPLParser.MINUS, 0);
    }
    public override get ruleIndex(): number {
        return OpenSearchPPLParser.RULE_decimalLiteral;
    }
    public override accept<Result>(visitor: OpenSearchPPLParserVisitor<Result>): Result | null {
        if (visitor.visitDecimalLiteral) {
            return visitor.visitDecimalLiteral(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class DoubleLiteralContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public DOUBLE_LITERAL(): antlr.TerminalNode {
        return this.getToken(OpenSearchPPLParser.DOUBLE_LITERAL, 0)!;
    }
    public PLUS(): antlr.TerminalNode | null {
        return this.getToken(OpenSearchPPLParser.PLUS, 0);
    }
    public MINUS(): antlr.TerminalNode | null {
        return this.getToken(OpenSearchPPLParser.MINUS, 0);
    }
    public override get ruleIndex(): number {
        return OpenSearchPPLParser.RULE_doubleLiteral;
    }
    public override accept<Result>(visitor: OpenSearchPPLParserVisitor<Result>): Result | null {
        if (visitor.visitDoubleLiteral) {
            return visitor.visitDoubleLiteral(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class FloatLiteralContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public FLOAT_LITERAL(): antlr.TerminalNode {
        return this.getToken(OpenSearchPPLParser.FLOAT_LITERAL, 0)!;
    }
    public PLUS(): antlr.TerminalNode | null {
        return this.getToken(OpenSearchPPLParser.PLUS, 0);
    }
    public MINUS(): antlr.TerminalNode | null {
        return this.getToken(OpenSearchPPLParser.MINUS, 0);
    }
    public override get ruleIndex(): number {
        return OpenSearchPPLParser.RULE_floatLiteral;
    }
    public override accept<Result>(visitor: OpenSearchPPLParserVisitor<Result>): Result | null {
        if (visitor.visitFloatLiteral) {
            return visitor.visitFloatLiteral(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class BooleanLiteralContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public TRUE(): antlr.TerminalNode | null {
        return this.getToken(OpenSearchPPLParser.TRUE, 0);
    }
    public FALSE(): antlr.TerminalNode | null {
        return this.getToken(OpenSearchPPLParser.FALSE, 0);
    }
    public override get ruleIndex(): number {
        return OpenSearchPPLParser.RULE_booleanLiteral;
    }
    public override accept<Result>(visitor: OpenSearchPPLParserVisitor<Result>): Result | null {
        if (visitor.visitBooleanLiteral) {
            return visitor.visitBooleanLiteral(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class DatetimeLiteralContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public dateLiteral(): DateLiteralContext | null {
        return this.getRuleContext(0, DateLiteralContext);
    }
    public timeLiteral(): TimeLiteralContext | null {
        return this.getRuleContext(0, TimeLiteralContext);
    }
    public timestampLiteral(): TimestampLiteralContext | null {
        return this.getRuleContext(0, TimestampLiteralContext);
    }
    public override get ruleIndex(): number {
        return OpenSearchPPLParser.RULE_datetimeLiteral;
    }
    public override accept<Result>(visitor: OpenSearchPPLParserVisitor<Result>): Result | null {
        if (visitor.visitDatetimeLiteral) {
            return visitor.visitDatetimeLiteral(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class DateLiteralContext extends antlr.ParserRuleContext {
    public _date?: StringLiteralContext;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public DATE(): antlr.TerminalNode {
        return this.getToken(OpenSearchPPLParser.DATE, 0)!;
    }
    public stringLiteral(): StringLiteralContext {
        return this.getRuleContext(0, StringLiteralContext)!;
    }
    public override get ruleIndex(): number {
        return OpenSearchPPLParser.RULE_dateLiteral;
    }
    public override accept<Result>(visitor: OpenSearchPPLParserVisitor<Result>): Result | null {
        if (visitor.visitDateLiteral) {
            return visitor.visitDateLiteral(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class TimeLiteralContext extends antlr.ParserRuleContext {
    public _time?: StringLiteralContext;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public TIME(): antlr.TerminalNode {
        return this.getToken(OpenSearchPPLParser.TIME, 0)!;
    }
    public stringLiteral(): StringLiteralContext {
        return this.getRuleContext(0, StringLiteralContext)!;
    }
    public override get ruleIndex(): number {
        return OpenSearchPPLParser.RULE_timeLiteral;
    }
    public override accept<Result>(visitor: OpenSearchPPLParserVisitor<Result>): Result | null {
        if (visitor.visitTimeLiteral) {
            return visitor.visitTimeLiteral(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class TimestampLiteralContext extends antlr.ParserRuleContext {
    public _timestamp?: StringLiteralContext;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public TIMESTAMP(): antlr.TerminalNode {
        return this.getToken(OpenSearchPPLParser.TIMESTAMP, 0)!;
    }
    public stringLiteral(): StringLiteralContext {
        return this.getRuleContext(0, StringLiteralContext)!;
    }
    public override get ruleIndex(): number {
        return OpenSearchPPLParser.RULE_timestampLiteral;
    }
    public override accept<Result>(visitor: OpenSearchPPLParserVisitor<Result>): Result | null {
        if (visitor.visitTimestampLiteral) {
            return visitor.visitTimestampLiteral(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class IntervalUnitContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public MICROSECOND(): antlr.TerminalNode | null {
        return this.getToken(OpenSearchPPLParser.MICROSECOND, 0);
    }
    public SECOND(): antlr.TerminalNode | null {
        return this.getToken(OpenSearchPPLParser.SECOND, 0);
    }
    public MINUTE(): antlr.TerminalNode | null {
        return this.getToken(OpenSearchPPLParser.MINUTE, 0);
    }
    public HOUR(): antlr.TerminalNode | null {
        return this.getToken(OpenSearchPPLParser.HOUR, 0);
    }
    public DAY(): antlr.TerminalNode | null {
        return this.getToken(OpenSearchPPLParser.DAY, 0);
    }
    public WEEK(): antlr.TerminalNode | null {
        return this.getToken(OpenSearchPPLParser.WEEK, 0);
    }
    public MONTH(): antlr.TerminalNode | null {
        return this.getToken(OpenSearchPPLParser.MONTH, 0);
    }
    public QUARTER(): antlr.TerminalNode | null {
        return this.getToken(OpenSearchPPLParser.QUARTER, 0);
    }
    public YEAR(): antlr.TerminalNode | null {
        return this.getToken(OpenSearchPPLParser.YEAR, 0);
    }
    public SECOND_MICROSECOND(): antlr.TerminalNode | null {
        return this.getToken(OpenSearchPPLParser.SECOND_MICROSECOND, 0);
    }
    public MINUTE_MICROSECOND(): antlr.TerminalNode | null {
        return this.getToken(OpenSearchPPLParser.MINUTE_MICROSECOND, 0);
    }
    public MINUTE_SECOND(): antlr.TerminalNode | null {
        return this.getToken(OpenSearchPPLParser.MINUTE_SECOND, 0);
    }
    public HOUR_MICROSECOND(): antlr.TerminalNode | null {
        return this.getToken(OpenSearchPPLParser.HOUR_MICROSECOND, 0);
    }
    public HOUR_SECOND(): antlr.TerminalNode | null {
        return this.getToken(OpenSearchPPLParser.HOUR_SECOND, 0);
    }
    public HOUR_MINUTE(): antlr.TerminalNode | null {
        return this.getToken(OpenSearchPPLParser.HOUR_MINUTE, 0);
    }
    public DAY_MICROSECOND(): antlr.TerminalNode | null {
        return this.getToken(OpenSearchPPLParser.DAY_MICROSECOND, 0);
    }
    public DAY_SECOND(): antlr.TerminalNode | null {
        return this.getToken(OpenSearchPPLParser.DAY_SECOND, 0);
    }
    public DAY_MINUTE(): antlr.TerminalNode | null {
        return this.getToken(OpenSearchPPLParser.DAY_MINUTE, 0);
    }
    public DAY_HOUR(): antlr.TerminalNode | null {
        return this.getToken(OpenSearchPPLParser.DAY_HOUR, 0);
    }
    public YEAR_MONTH(): antlr.TerminalNode | null {
        return this.getToken(OpenSearchPPLParser.YEAR_MONTH, 0);
    }
    public override get ruleIndex(): number {
        return OpenSearchPPLParser.RULE_intervalUnit;
    }
    public override accept<Result>(visitor: OpenSearchPPLParserVisitor<Result>): Result | null {
        if (visitor.visitIntervalUnit) {
            return visitor.visitIntervalUnit(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class TimespanUnitContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public MS(): antlr.TerminalNode | null {
        return this.getToken(OpenSearchPPLParser.MS, 0);
    }
    public S(): antlr.TerminalNode | null {
        return this.getToken(OpenSearchPPLParser.S, 0);
    }
    public M(): antlr.TerminalNode | null {
        return this.getToken(OpenSearchPPLParser.M, 0);
    }
    public H(): antlr.TerminalNode | null {
        return this.getToken(OpenSearchPPLParser.H, 0);
    }
    public D(): antlr.TerminalNode | null {
        return this.getToken(OpenSearchPPLParser.D, 0);
    }
    public W(): antlr.TerminalNode | null {
        return this.getToken(OpenSearchPPLParser.W, 0);
    }
    public Q(): antlr.TerminalNode | null {
        return this.getToken(OpenSearchPPLParser.Q, 0);
    }
    public Y(): antlr.TerminalNode | null {
        return this.getToken(OpenSearchPPLParser.Y, 0);
    }
    public MILLISECOND(): antlr.TerminalNode | null {
        return this.getToken(OpenSearchPPLParser.MILLISECOND, 0);
    }
    public SECOND(): antlr.TerminalNode | null {
        return this.getToken(OpenSearchPPLParser.SECOND, 0);
    }
    public MINUTE(): antlr.TerminalNode | null {
        return this.getToken(OpenSearchPPLParser.MINUTE, 0);
    }
    public HOUR(): antlr.TerminalNode | null {
        return this.getToken(OpenSearchPPLParser.HOUR, 0);
    }
    public DAY(): antlr.TerminalNode | null {
        return this.getToken(OpenSearchPPLParser.DAY, 0);
    }
    public WEEK(): antlr.TerminalNode | null {
        return this.getToken(OpenSearchPPLParser.WEEK, 0);
    }
    public MONTH(): antlr.TerminalNode | null {
        return this.getToken(OpenSearchPPLParser.MONTH, 0);
    }
    public QUARTER(): antlr.TerminalNode | null {
        return this.getToken(OpenSearchPPLParser.QUARTER, 0);
    }
    public YEAR(): antlr.TerminalNode | null {
        return this.getToken(OpenSearchPPLParser.YEAR, 0);
    }
    public SEC(): antlr.TerminalNode | null {
        return this.getToken(OpenSearchPPLParser.SEC, 0);
    }
    public SECS(): antlr.TerminalNode | null {
        return this.getToken(OpenSearchPPLParser.SECS, 0);
    }
    public SECONDS(): antlr.TerminalNode | null {
        return this.getToken(OpenSearchPPLParser.SECONDS, 0);
    }
    public MINS(): antlr.TerminalNode | null {
        return this.getToken(OpenSearchPPLParser.MINS, 0);
    }
    public MINUTES(): antlr.TerminalNode | null {
        return this.getToken(OpenSearchPPLParser.MINUTES, 0);
    }
    public HR(): antlr.TerminalNode | null {
        return this.getToken(OpenSearchPPLParser.HR, 0);
    }
    public HRS(): antlr.TerminalNode | null {
        return this.getToken(OpenSearchPPLParser.HRS, 0);
    }
    public HOURS(): antlr.TerminalNode | null {
        return this.getToken(OpenSearchPPLParser.HOURS, 0);
    }
    public DAYS(): antlr.TerminalNode | null {
        return this.getToken(OpenSearchPPLParser.DAYS, 0);
    }
    public MON(): antlr.TerminalNode | null {
        return this.getToken(OpenSearchPPLParser.MON, 0);
    }
    public MONTHS(): antlr.TerminalNode | null {
        return this.getToken(OpenSearchPPLParser.MONTHS, 0);
    }
    public US(): antlr.TerminalNode | null {
        return this.getToken(OpenSearchPPLParser.US, 0);
    }
    public CS(): antlr.TerminalNode | null {
        return this.getToken(OpenSearchPPLParser.CS, 0);
    }
    public DS(): antlr.TerminalNode | null {
        return this.getToken(OpenSearchPPLParser.DS, 0);
    }
    public override get ruleIndex(): number {
        return OpenSearchPPLParser.RULE_timespanUnit;
    }
    public override accept<Result>(visitor: OpenSearchPPLParserVisitor<Result>): Result | null {
        if (visitor.visitTimespanUnit) {
            return visitor.visitTimespanUnit(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ValueListContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public LT_PRTHS(): antlr.TerminalNode {
        return this.getToken(OpenSearchPPLParser.LT_PRTHS, 0)!;
    }
    public literalValue(): LiteralValueContext[];
    public literalValue(i: number): LiteralValueContext | null;
    public literalValue(i?: number): LiteralValueContext[] | LiteralValueContext | null {
        if (i === undefined) {
            return this.getRuleContexts(LiteralValueContext);
        }

        return this.getRuleContext(i, LiteralValueContext);
    }
    public RT_PRTHS(): antlr.TerminalNode {
        return this.getToken(OpenSearchPPLParser.RT_PRTHS, 0)!;
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(OpenSearchPPLParser.COMMA);
    	} else {
    		return this.getToken(OpenSearchPPLParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return OpenSearchPPLParser.RULE_valueList;
    }
    public override accept<Result>(visitor: OpenSearchPPLParserVisitor<Result>): Result | null {
        if (visitor.visitValueList) {
            return visitor.visitValueList(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class QualifiedNameContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public override get ruleIndex(): number {
        return OpenSearchPPLParser.RULE_qualifiedName;
    }
    public override copyFrom(ctx: QualifiedNameContext): void {
        super.copyFrom(ctx);
    }
}
export class IdentsAsQualifiedNameContext extends QualifiedNameContext {
    public constructor(ctx: QualifiedNameContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public ident(): IdentContext[];
    public ident(i: number): IdentContext | null;
    public ident(i?: number): IdentContext[] | IdentContext | null {
        if (i === undefined) {
            return this.getRuleContexts(IdentContext);
        }

        return this.getRuleContext(i, IdentContext);
    }
    public DOT(): antlr.TerminalNode[];
    public DOT(i: number): antlr.TerminalNode | null;
    public DOT(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(OpenSearchPPLParser.DOT);
    	} else {
    		return this.getToken(OpenSearchPPLParser.DOT, i);
    	}
    }
    public override accept<Result>(visitor: OpenSearchPPLParserVisitor<Result>): Result | null {
        if (visitor.visitIdentsAsQualifiedName) {
            return visitor.visitIdentsAsQualifiedName(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class TableQualifiedNameContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public override get ruleIndex(): number {
        return OpenSearchPPLParser.RULE_tableQualifiedName;
    }
    public override copyFrom(ctx: TableQualifiedNameContext): void {
        super.copyFrom(ctx);
    }
}
export class IdentsAsTableQualifiedNameContext extends TableQualifiedNameContext {
    public constructor(ctx: TableQualifiedNameContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public tableIdent(): TableIdentContext {
        return this.getRuleContext(0, TableIdentContext)!;
    }
    public DOT(): antlr.TerminalNode[];
    public DOT(i: number): antlr.TerminalNode | null;
    public DOT(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(OpenSearchPPLParser.DOT);
    	} else {
    		return this.getToken(OpenSearchPPLParser.DOT, i);
    	}
    }
    public ident(): IdentContext[];
    public ident(i: number): IdentContext | null;
    public ident(i?: number): IdentContext[] | IdentContext | null {
        if (i === undefined) {
            return this.getRuleContexts(IdentContext);
        }

        return this.getRuleContext(i, IdentContext);
    }
    public override accept<Result>(visitor: OpenSearchPPLParserVisitor<Result>): Result | null {
        if (visitor.visitIdentsAsTableQualifiedName) {
            return visitor.visitIdentsAsTableQualifiedName(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class WcQualifiedNameContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public override get ruleIndex(): number {
        return OpenSearchPPLParser.RULE_wcQualifiedName;
    }
    public override copyFrom(ctx: WcQualifiedNameContext): void {
        super.copyFrom(ctx);
    }
}
export class IdentsAsWildcardQualifiedNameContext extends WcQualifiedNameContext {
    public constructor(ctx: WcQualifiedNameContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public wildcard(): WildcardContext[];
    public wildcard(i: number): WildcardContext | null;
    public wildcard(i?: number): WildcardContext[] | WildcardContext | null {
        if (i === undefined) {
            return this.getRuleContexts(WildcardContext);
        }

        return this.getRuleContext(i, WildcardContext);
    }
    public DOT(): antlr.TerminalNode[];
    public DOT(i: number): antlr.TerminalNode | null;
    public DOT(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(OpenSearchPPLParser.DOT);
    	} else {
    		return this.getToken(OpenSearchPPLParser.DOT, i);
    	}
    }
    public override accept<Result>(visitor: OpenSearchPPLParserVisitor<Result>): Result | null {
        if (visitor.visitIdentsAsWildcardQualifiedName) {
            return visitor.visitIdentsAsWildcardQualifiedName(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class IdentifierSeqContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public override get ruleIndex(): number {
        return OpenSearchPPLParser.RULE_identifierSeq;
    }
    public override copyFrom(ctx: IdentifierSeqContext): void {
        super.copyFrom(ctx);
    }
}
export class IdentsAsQualifiedNameSeqContext extends IdentifierSeqContext {
    public constructor(ctx: IdentifierSeqContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public qualifiedName(): QualifiedNameContext[];
    public qualifiedName(i: number): QualifiedNameContext | null;
    public qualifiedName(i?: number): QualifiedNameContext[] | QualifiedNameContext | null {
        if (i === undefined) {
            return this.getRuleContexts(QualifiedNameContext);
        }

        return this.getRuleContext(i, QualifiedNameContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(OpenSearchPPLParser.COMMA);
    	} else {
    		return this.getToken(OpenSearchPPLParser.COMMA, i);
    	}
    }
    public LT_PRTHS(): antlr.TerminalNode | null {
        return this.getToken(OpenSearchPPLParser.LT_PRTHS, 0);
    }
    public RT_PRTHS(): antlr.TerminalNode | null {
        return this.getToken(OpenSearchPPLParser.RT_PRTHS, 0);
    }
    public override accept<Result>(visitor: OpenSearchPPLParserVisitor<Result>): Result | null {
        if (visitor.visitIdentsAsQualifiedNameSeq) {
            return visitor.visitIdentsAsQualifiedNameSeq(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class IdentContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public ID(): antlr.TerminalNode | null {
        return this.getToken(OpenSearchPPLParser.ID, 0);
    }
    public DOT(): antlr.TerminalNode | null {
        return this.getToken(OpenSearchPPLParser.DOT, 0);
    }
    public BACKTICK(): antlr.TerminalNode[];
    public BACKTICK(i: number): antlr.TerminalNode | null;
    public BACKTICK(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(OpenSearchPPLParser.BACKTICK);
    	} else {
    		return this.getToken(OpenSearchPPLParser.BACKTICK, i);
    	}
    }
    public ident(): IdentContext | null {
        return this.getRuleContext(0, IdentContext);
    }
    public BQUOTA_STRING(): antlr.TerminalNode | null {
        return this.getToken(OpenSearchPPLParser.BQUOTA_STRING, 0);
    }
    public keywordsCanBeId(): KeywordsCanBeIdContext | null {
        return this.getRuleContext(0, KeywordsCanBeIdContext);
    }
    public override get ruleIndex(): number {
        return OpenSearchPPLParser.RULE_ident;
    }
    public override accept<Result>(visitor: OpenSearchPPLParserVisitor<Result>): Result | null {
        if (visitor.visitIdent) {
            return visitor.visitIdent(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class TableIdentContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public ident(): IdentContext {
        return this.getRuleContext(0, IdentContext)!;
    }
    public CLUSTER(): antlr.TerminalNode | null {
        return this.getToken(OpenSearchPPLParser.CLUSTER, 0);
    }
    public override get ruleIndex(): number {
        return OpenSearchPPLParser.RULE_tableIdent;
    }
    public override accept<Result>(visitor: OpenSearchPPLParserVisitor<Result>): Result | null {
        if (visitor.visitTableIdent) {
            return visitor.visitTableIdent(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class WildcardContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public ident(): IdentContext[];
    public ident(i: number): IdentContext | null;
    public ident(i?: number): IdentContext[] | IdentContext | null {
        if (i === undefined) {
            return this.getRuleContexts(IdentContext);
        }

        return this.getRuleContext(i, IdentContext);
    }
    public MODULE(): antlr.TerminalNode[];
    public MODULE(i: number): antlr.TerminalNode | null;
    public MODULE(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(OpenSearchPPLParser.MODULE);
    	} else {
    		return this.getToken(OpenSearchPPLParser.MODULE, i);
    	}
    }
    public SINGLE_QUOTE(): antlr.TerminalNode[];
    public SINGLE_QUOTE(i: number): antlr.TerminalNode | null;
    public SINGLE_QUOTE(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(OpenSearchPPLParser.SINGLE_QUOTE);
    	} else {
    		return this.getToken(OpenSearchPPLParser.SINGLE_QUOTE, i);
    	}
    }
    public wildcard(): WildcardContext | null {
        return this.getRuleContext(0, WildcardContext);
    }
    public DOUBLE_QUOTE(): antlr.TerminalNode[];
    public DOUBLE_QUOTE(i: number): antlr.TerminalNode | null;
    public DOUBLE_QUOTE(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(OpenSearchPPLParser.DOUBLE_QUOTE);
    	} else {
    		return this.getToken(OpenSearchPPLParser.DOUBLE_QUOTE, i);
    	}
    }
    public BACKTICK(): antlr.TerminalNode[];
    public BACKTICK(i: number): antlr.TerminalNode | null;
    public BACKTICK(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(OpenSearchPPLParser.BACKTICK);
    	} else {
    		return this.getToken(OpenSearchPPLParser.BACKTICK, i);
    	}
    }
    public override get ruleIndex(): number {
        return OpenSearchPPLParser.RULE_wildcard;
    }
    public override accept<Result>(visitor: OpenSearchPPLParserVisitor<Result>): Result | null {
        if (visitor.visitWildcard) {
            return visitor.visitWildcard(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class KeywordsCanBeIdContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public searchableKeyWord(): SearchableKeyWordContext | null {
        return this.getRuleContext(0, SearchableKeyWordContext);
    }
    public IN(): antlr.TerminalNode | null {
        return this.getToken(OpenSearchPPLParser.IN, 0);
    }
    public override get ruleIndex(): number {
        return OpenSearchPPLParser.RULE_keywordsCanBeId;
    }
    public override accept<Result>(visitor: OpenSearchPPLParserVisitor<Result>): Result | null {
        if (visitor.visitKeywordsCanBeId) {
            return visitor.visitKeywordsCanBeId(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class SearchableKeyWordContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public D(): antlr.TerminalNode | null {
        return this.getToken(OpenSearchPPLParser.D, 0);
    }
    public timespanUnit(): TimespanUnitContext | null {
        return this.getRuleContext(0, TimespanUnitContext);
    }
    public SPAN(): antlr.TerminalNode | null {
        return this.getToken(OpenSearchPPLParser.SPAN, 0);
    }
    public evalFunctionName(): EvalFunctionNameContext | null {
        return this.getRuleContext(0, EvalFunctionNameContext);
    }
    public jsonFunctionName(): JsonFunctionNameContext | null {
        return this.getRuleContext(0, JsonFunctionNameContext);
    }
    public relevanceArgName(): RelevanceArgNameContext | null {
        return this.getRuleContext(0, RelevanceArgNameContext);
    }
    public intervalUnit(): IntervalUnitContext | null {
        return this.getRuleContext(0, IntervalUnitContext);
    }
    public trendlineType(): TrendlineTypeContext | null {
        return this.getRuleContext(0, TrendlineTypeContext);
    }
    public singleFieldRelevanceFunctionName(): SingleFieldRelevanceFunctionNameContext | null {
        return this.getRuleContext(0, SingleFieldRelevanceFunctionNameContext);
    }
    public multiFieldRelevanceFunctionName(): MultiFieldRelevanceFunctionNameContext | null {
        return this.getRuleContext(0, MultiFieldRelevanceFunctionNameContext);
    }
    public commandName(): CommandNameContext | null {
        return this.getRuleContext(0, CommandNameContext);
    }
    public collectionFunctionName(): CollectionFunctionNameContext | null {
        return this.getRuleContext(0, CollectionFunctionNameContext);
    }
    public REGEX(): antlr.TerminalNode | null {
        return this.getToken(OpenSearchPPLParser.REGEX, 0);
    }
    public explainMode(): ExplainModeContext | null {
        return this.getRuleContext(0, ExplainModeContext);
    }
    public REGEXP(): antlr.TerminalNode | null {
        return this.getToken(OpenSearchPPLParser.REGEXP, 0);
    }
    public CASE(): antlr.TerminalNode | null {
        return this.getToken(OpenSearchPPLParser.CASE, 0);
    }
    public ELSE(): antlr.TerminalNode | null {
        return this.getToken(OpenSearchPPLParser.ELSE, 0);
    }
    public ARROW(): antlr.TerminalNode | null {
        return this.getToken(OpenSearchPPLParser.ARROW, 0);
    }
    public BETWEEN(): antlr.TerminalNode | null {
        return this.getToken(OpenSearchPPLParser.BETWEEN, 0);
    }
    public EXISTS(): antlr.TerminalNode | null {
        return this.getToken(OpenSearchPPLParser.EXISTS, 0);
    }
    public SOURCE(): antlr.TerminalNode | null {
        return this.getToken(OpenSearchPPLParser.SOURCE, 0);
    }
    public INDEX(): antlr.TerminalNode | null {
        return this.getToken(OpenSearchPPLParser.INDEX, 0);
    }
    public A(): antlr.TerminalNode | null {
        return this.getToken(OpenSearchPPLParser.A, 0);
    }
    public ASC(): antlr.TerminalNode | null {
        return this.getToken(OpenSearchPPLParser.ASC, 0);
    }
    public DESC(): antlr.TerminalNode | null {
        return this.getToken(OpenSearchPPLParser.DESC, 0);
    }
    public DATASOURCES(): antlr.TerminalNode | null {
        return this.getToken(OpenSearchPPLParser.DATASOURCES, 0);
    }
    public FROM(): antlr.TerminalNode | null {
        return this.getToken(OpenSearchPPLParser.FROM, 0);
    }
    public PATTERN(): antlr.TerminalNode | null {
        return this.getToken(OpenSearchPPLParser.PATTERN, 0);
    }
    public NEW_FIELD(): antlr.TerminalNode | null {
        return this.getToken(OpenSearchPPLParser.NEW_FIELD, 0);
    }
    public METHOD(): antlr.TerminalNode | null {
        return this.getToken(OpenSearchPPLParser.METHOD, 0);
    }
    public VARIABLE_COUNT_THRESHOLD(): antlr.TerminalNode | null {
        return this.getToken(OpenSearchPPLParser.VARIABLE_COUNT_THRESHOLD, 0);
    }
    public FREQUENCY_THRESHOLD_PERCENTAGE(): antlr.TerminalNode | null {
        return this.getToken(OpenSearchPPLParser.FREQUENCY_THRESHOLD_PERCENTAGE, 0);
    }
    public MAX_SAMPLE_COUNT(): antlr.TerminalNode | null {
        return this.getToken(OpenSearchPPLParser.MAX_SAMPLE_COUNT, 0);
    }
    public BUFFER_LIMIT(): antlr.TerminalNode | null {
        return this.getToken(OpenSearchPPLParser.BUFFER_LIMIT, 0);
    }
    public WITH(): antlr.TerminalNode | null {
        return this.getToken(OpenSearchPPLParser.WITH, 0);
    }
    public PUNCT(): antlr.TerminalNode | null {
        return this.getToken(OpenSearchPPLParser.PUNCT, 0);
    }
    public USING(): antlr.TerminalNode | null {
        return this.getToken(OpenSearchPPLParser.USING, 0);
    }
    public CAST(): antlr.TerminalNode | null {
        return this.getToken(OpenSearchPPLParser.CAST, 0);
    }
    public GET_FORMAT(): antlr.TerminalNode | null {
        return this.getToken(OpenSearchPPLParser.GET_FORMAT, 0);
    }
    public EXTRACT(): antlr.TerminalNode | null {
        return this.getToken(OpenSearchPPLParser.EXTRACT, 0);
    }
    public INTERVAL(): antlr.TerminalNode | null {
        return this.getToken(OpenSearchPPLParser.INTERVAL, 0);
    }
    public PLUS(): antlr.TerminalNode | null {
        return this.getToken(OpenSearchPPLParser.PLUS, 0);
    }
    public MINUS(): antlr.TerminalNode | null {
        return this.getToken(OpenSearchPPLParser.MINUS, 0);
    }
    public OVERRIDE(): antlr.TerminalNode | null {
        return this.getToken(OpenSearchPPLParser.OVERRIDE, 0);
    }
    public AUTO(): antlr.TerminalNode | null {
        return this.getToken(OpenSearchPPLParser.AUTO, 0);
    }
    public STR(): antlr.TerminalNode | null {
        return this.getToken(OpenSearchPPLParser.STR, 0);
    }
    public IP(): antlr.TerminalNode | null {
        return this.getToken(OpenSearchPPLParser.IP, 0);
    }
    public NUM(): antlr.TerminalNode | null {
        return this.getToken(OpenSearchPPLParser.NUM, 0);
    }
    public KEEPEMPTY(): antlr.TerminalNode | null {
        return this.getToken(OpenSearchPPLParser.KEEPEMPTY, 0);
    }
    public CONSECUTIVE(): antlr.TerminalNode | null {
        return this.getToken(OpenSearchPPLParser.CONSECUTIVE, 0);
    }
    public DEDUP_SPLITVALUES(): antlr.TerminalNode | null {
        return this.getToken(OpenSearchPPLParser.DEDUP_SPLITVALUES, 0);
    }
    public PARTITIONS(): antlr.TerminalNode | null {
        return this.getToken(OpenSearchPPLParser.PARTITIONS, 0);
    }
    public ALLNUM(): antlr.TerminalNode | null {
        return this.getToken(OpenSearchPPLParser.ALLNUM, 0);
    }
    public DELIM(): antlr.TerminalNode | null {
        return this.getToken(OpenSearchPPLParser.DELIM, 0);
    }
    public BUCKET_NULLABLE(): antlr.TerminalNode | null {
        return this.getToken(OpenSearchPPLParser.BUCKET_NULLABLE, 0);
    }
    public CENTROIDS(): antlr.TerminalNode | null {
        return this.getToken(OpenSearchPPLParser.CENTROIDS, 0);
    }
    public ITERATIONS(): antlr.TerminalNode | null {
        return this.getToken(OpenSearchPPLParser.ITERATIONS, 0);
    }
    public DISTANCE_TYPE(): antlr.TerminalNode | null {
        return this.getToken(OpenSearchPPLParser.DISTANCE_TYPE, 0);
    }
    public NUMBER_OF_TREES(): antlr.TerminalNode | null {
        return this.getToken(OpenSearchPPLParser.NUMBER_OF_TREES, 0);
    }
    public SHINGLE_SIZE(): antlr.TerminalNode | null {
        return this.getToken(OpenSearchPPLParser.SHINGLE_SIZE, 0);
    }
    public SAMPLE_SIZE(): antlr.TerminalNode | null {
        return this.getToken(OpenSearchPPLParser.SAMPLE_SIZE, 0);
    }
    public OUTPUT_AFTER(): antlr.TerminalNode | null {
        return this.getToken(OpenSearchPPLParser.OUTPUT_AFTER, 0);
    }
    public TIME_DECAY(): antlr.TerminalNode | null {
        return this.getToken(OpenSearchPPLParser.TIME_DECAY, 0);
    }
    public ANOMALY_RATE(): antlr.TerminalNode | null {
        return this.getToken(OpenSearchPPLParser.ANOMALY_RATE, 0);
    }
    public CATEGORY_FIELD(): antlr.TerminalNode | null {
        return this.getToken(OpenSearchPPLParser.CATEGORY_FIELD, 0);
    }
    public TIME_FIELD(): antlr.TerminalNode | null {
        return this.getToken(OpenSearchPPLParser.TIME_FIELD, 0);
    }
    public TIME_ZONE(): antlr.TerminalNode | null {
        return this.getToken(OpenSearchPPLParser.TIME_ZONE, 0);
    }
    public TRAINING_DATA_SIZE(): antlr.TerminalNode | null {
        return this.getToken(OpenSearchPPLParser.TRAINING_DATA_SIZE, 0);
    }
    public ANOMALY_SCORE_THRESHOLD(): antlr.TerminalNode | null {
        return this.getToken(OpenSearchPPLParser.ANOMALY_SCORE_THRESHOLD, 0);
    }
    public COUNTFIELD(): antlr.TerminalNode | null {
        return this.getToken(OpenSearchPPLParser.COUNTFIELD, 0);
    }
    public SHOWCOUNT(): antlr.TerminalNode | null {
        return this.getToken(OpenSearchPPLParser.SHOWCOUNT, 0);
    }
    public PATH(): antlr.TerminalNode | null {
        return this.getToken(OpenSearchPPLParser.PATH, 0);
    }
    public INPUT(): antlr.TerminalNode | null {
        return this.getToken(OpenSearchPPLParser.INPUT, 0);
    }
    public OUTPUT(): antlr.TerminalNode | null {
        return this.getToken(OpenSearchPPLParser.OUTPUT, 0);
    }
    public statsFunctionName(): StatsFunctionNameContext | null {
        return this.getRuleContext(0, StatsFunctionNameContext);
    }
    public windowFunctionName(): WindowFunctionNameContext | null {
        return this.getRuleContext(0, WindowFunctionNameContext);
    }
    public DISTINCT_COUNT(): antlr.TerminalNode | null {
        return this.getToken(OpenSearchPPLParser.DISTINCT_COUNT, 0);
    }
    public DISTINCT_COUNT_APPROX(): antlr.TerminalNode | null {
        return this.getToken(OpenSearchPPLParser.DISTINCT_COUNT_APPROX, 0);
    }
    public ESTDC(): antlr.TerminalNode | null {
        return this.getToken(OpenSearchPPLParser.ESTDC, 0);
    }
    public ESTDC_ERROR(): antlr.TerminalNode | null {
        return this.getToken(OpenSearchPPLParser.ESTDC_ERROR, 0);
    }
    public MEAN(): antlr.TerminalNode | null {
        return this.getToken(OpenSearchPPLParser.MEAN, 0);
    }
    public MEDIAN(): antlr.TerminalNode | null {
        return this.getToken(OpenSearchPPLParser.MEDIAN, 0);
    }
    public MODE(): antlr.TerminalNode | null {
        return this.getToken(OpenSearchPPLParser.MODE, 0);
    }
    public RANGE(): antlr.TerminalNode | null {
        return this.getToken(OpenSearchPPLParser.RANGE, 0);
    }
    public STDEV(): antlr.TerminalNode | null {
        return this.getToken(OpenSearchPPLParser.STDEV, 0);
    }
    public STDEVP(): antlr.TerminalNode | null {
        return this.getToken(OpenSearchPPLParser.STDEVP, 0);
    }
    public SUMSQ(): antlr.TerminalNode | null {
        return this.getToken(OpenSearchPPLParser.SUMSQ, 0);
    }
    public VAR_SAMP(): antlr.TerminalNode | null {
        return this.getToken(OpenSearchPPLParser.VAR_SAMP, 0);
    }
    public VAR_POP(): antlr.TerminalNode | null {
        return this.getToken(OpenSearchPPLParser.VAR_POP, 0);
    }
    public TAKE(): antlr.TerminalNode | null {
        return this.getToken(OpenSearchPPLParser.TAKE, 0);
    }
    public LIST(): antlr.TerminalNode | null {
        return this.getToken(OpenSearchPPLParser.LIST, 0);
    }
    public VALUES(): antlr.TerminalNode | null {
        return this.getToken(OpenSearchPPLParser.VALUES, 0);
    }
    public PER_DAY(): antlr.TerminalNode | null {
        return this.getToken(OpenSearchPPLParser.PER_DAY, 0);
    }
    public PER_HOUR(): antlr.TerminalNode | null {
        return this.getToken(OpenSearchPPLParser.PER_HOUR, 0);
    }
    public PER_MINUTE(): antlr.TerminalNode | null {
        return this.getToken(OpenSearchPPLParser.PER_MINUTE, 0);
    }
    public PER_SECOND(): antlr.TerminalNode | null {
        return this.getToken(OpenSearchPPLParser.PER_SECOND, 0);
    }
    public RATE(): antlr.TerminalNode | null {
        return this.getToken(OpenSearchPPLParser.RATE, 0);
    }
    public SPARKLINE(): antlr.TerminalNode | null {
        return this.getToken(OpenSearchPPLParser.SPARKLINE, 0);
    }
    public C(): antlr.TerminalNode | null {
        return this.getToken(OpenSearchPPLParser.C, 0);
    }
    public DC(): antlr.TerminalNode | null {
        return this.getToken(OpenSearchPPLParser.DC, 0);
    }
    public OUTER(): antlr.TerminalNode | null {
        return this.getToken(OpenSearchPPLParser.OUTER, 0);
    }
    public INNER(): antlr.TerminalNode | null {
        return this.getToken(OpenSearchPPLParser.INNER, 0);
    }
    public CROSS(): antlr.TerminalNode | null {
        return this.getToken(OpenSearchPPLParser.CROSS, 0);
    }
    public LEFT(): antlr.TerminalNode | null {
        return this.getToken(OpenSearchPPLParser.LEFT, 0);
    }
    public RIGHT(): antlr.TerminalNode | null {
        return this.getToken(OpenSearchPPLParser.RIGHT, 0);
    }
    public FULL(): antlr.TerminalNode | null {
        return this.getToken(OpenSearchPPLParser.FULL, 0);
    }
    public SEMI(): antlr.TerminalNode | null {
        return this.getToken(OpenSearchPPLParser.SEMI, 0);
    }
    public ANTI(): antlr.TerminalNode | null {
        return this.getToken(OpenSearchPPLParser.ANTI, 0);
    }
    public LEFT_HINT(): antlr.TerminalNode | null {
        return this.getToken(OpenSearchPPLParser.LEFT_HINT, 0);
    }
    public RIGHT_HINT(): antlr.TerminalNode | null {
        return this.getToken(OpenSearchPPLParser.RIGHT_HINT, 0);
    }
    public PERCENTILE_SHORTCUT(): antlr.TerminalNode | null {
        return this.getToken(OpenSearchPPLParser.PERCENTILE_SHORTCUT, 0);
    }
    public override get ruleIndex(): number {
        return OpenSearchPPLParser.RULE_searchableKeyWord;
    }
    public override accept<Result>(visitor: OpenSearchPPLParserVisitor<Result>): Result | null {
        if (visitor.visitSearchableKeyWord) {
            return visitor.visitSearchableKeyWord(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
