// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`SavedObjectsTable delete should show a confirm modal 1`] = `
<EuiConfirmModal
  buttonColor="danger"
  cancelButtonText={
    <FormattedMessage
      defaultMessage="Cancel"
      id="savedObjectsManagement.objectsTable.deleteSavedObjectsConfirmModal.cancelButtonLabel"
      values={Object {}}
    />
  }
  confirmButtonText={
    <FormattedMessage
      defaultMessage="Delete"
      id="savedObjectsManagement.objectsTable.deleteSavedObjectsConfirmModal.deleteButtonLabel"
      values={Object {}}
    />
  }
  defaultFocusedButton="confirm"
  onCancel={[Function]}
  onConfirm={[Function]}
  title={
    <FormattedMessage
      defaultMessage="Delete saved objects"
      id="savedObjectsManagement.objectsTable.deleteSavedObjectsConfirmModalTitle"
      values={Object {}}
    />
  }
>
  <EuiText
    size="s"
  >
    <p>
      <FormattedMessage
        defaultMessage="This action will delete the following saved objects:"
        id="savedObjectsManagement.deleteSavedObjectsConfirmModalDescription"
        values={Object {}}
      />
    </p>
  </EuiText>
  <EuiInMemoryTable
    columns={
      Array [
        Object {
          "field": "type",
          "name": "Type",
          "render": [Function],
          "width": "50px",
        },
        Object {
          "field": "id",
          "name": "Id",
        },
        Object {
          "field": "meta.title",
          "name": "Title",
        },
      ]
    }
    items={
      Array [
        Object {
          "id": "1",
          "type": "index-pattern",
        },
        Object {
          "id": "3",
          "type": "dashboard",
        },
      ]
    }
    pagination={true}
    responsive={true}
    sorting={false}
    tableLayout="fixed"
  />
</EuiConfirmModal>
`;

exports[`SavedObjectsTable delete should show error toast when failing to delete saved objects 1`] = `
<EuiConfirmModal
  buttonColor="danger"
  cancelButtonText={
    <FormattedMessage
      defaultMessage="Cancel"
      id="savedObjectsManagement.objectsTable.deleteSavedObjectsConfirmModal.cancelButtonLabel"
      values={Object {}}
    />
  }
  confirmButtonText={
    <FormattedMessage
      defaultMessage="Delete"
      id="savedObjectsManagement.objectsTable.deleteSavedObjectsConfirmModal.deleteButtonLabel"
      values={Object {}}
    />
  }
  defaultFocusedButton="confirm"
  onCancel={[Function]}
  onConfirm={[Function]}
  title={
    <FormattedMessage
      defaultMessage="Delete saved objects"
      id="savedObjectsManagement.objectsTable.deleteSavedObjectsConfirmModalTitle"
      values={Object {}}
    />
  }
>
  <EuiText
    size="s"
  >
    <p>
      <FormattedMessage
        defaultMessage="This action will delete the following saved objects:"
        id="savedObjectsManagement.deleteSavedObjectsConfirmModalDescription"
        values={Object {}}
      />
    </p>
  </EuiText>
  <EuiInMemoryTable
    columns={
      Array [
        Object {
          "field": "type",
          "name": "Type",
          "render": [Function],
          "width": "50px",
        },
        Object {
          "field": "id",
          "name": "Id",
        },
        Object {
          "field": "meta.title",
          "name": "Title",
        },
      ]
    }
    items={
      Array [
        Object {
          "id": "1",
          "type": "index-pattern",
        },
      ]
    }
    pagination={true}
    responsive={true}
    sorting={false}
    tableLayout="fixed"
  />
</EuiConfirmModal>
`;

exports[`SavedObjectsTable delete should show error toast when failing to delete saved objects 2`] = `
<EuiConfirmModal
  buttonColor="danger"
  cancelButtonText={
    <FormattedMessage
      defaultMessage="Cancel"
      id="savedObjectsManagement.objectsTable.deleteSavedObjectsConfirmModal.cancelButtonLabel"
      values={Object {}}
    />
  }
  confirmButtonText={
    <FormattedMessage
      defaultMessage="Delete"
      id="savedObjectsManagement.objectsTable.deleteSavedObjectsConfirmModal.deleteButtonLabel"
      values={Object {}}
    />
  }
  defaultFocusedButton="confirm"
  onCancel={[Function]}
  onConfirm={[Function]}
  title={
    <FormattedMessage
      defaultMessage="Delete saved objects"
      id="savedObjectsManagement.objectsTable.deleteSavedObjectsConfirmModalTitle"
      values={Object {}}
    />
  }
>
  <EuiText
    size="s"
  >
    <p>
      <FormattedMessage
        defaultMessage="This action will delete the following saved objects:"
        id="savedObjectsManagement.deleteSavedObjectsConfirmModalDescription"
        values={Object {}}
      />
    </p>
  </EuiText>
  <EuiInMemoryTable
    columns={
      Array [
        Object {
          "field": "type",
          "name": "Type",
          "render": [Function],
          "width": "50px",
        },
        Object {
          "field": "id",
          "name": "Id",
        },
        Object {
          "field": "meta.title",
          "name": "Title",
        },
      ]
    }
    items={
      Array [
        Object {
          "id": "1",
          "type": "index-pattern",
        },
      ]
    }
    pagination={true}
    responsive={true}
    sorting={false}
    tableLayout="fixed"
  />
</EuiConfirmModal>
`;

exports[`SavedObjectsTable duplicate should allow the user to choose on header when duplicating all 1`] = `
<SavedObjectsDuplicateModal
  http={
    Object {
      "addLoadingCountSource": [MockFunction],
      "anonymousPaths": Object {
        "isAnonymous": [MockFunction],
        "register": [MockFunction],
      },
      "basePath": BasePath {
        "basePath": "",
        "clientBasePath": "",
        "get": [Function],
        "getBasePath": [Function],
        "prepend": [Function],
        "remove": [Function],
        "serverBasePath": "",
      },
      "delete": [MockFunction],
      "fetch": [MockFunction],
      "get": [MockFunction],
      "getLoadingCount$": [MockFunction],
      "head": [MockFunction],
      "intercept": [MockFunction],
      "options": [MockFunction],
      "patch": [MockFunction],
      "post": [MockFunction],
      "put": [MockFunction],
    }
  }
  notifications={
    Object {
      "toasts": Object {
        "add": [MockFunction],
        "addDanger": [MockFunction],
        "addError": [MockFunction],
        "addInfo": [MockFunction],
        "addSuccess": [MockFunction],
        "addWarning": [MockFunction],
        "get$": [MockFunction],
        "remove": [MockFunction],
      },
    }
  }
  onClose={[Function]}
  onDuplicate={[Function]}
  selectedSavedObjects={
    Array [
      Object {
        "id": "1",
        "meta": Object {
          "editUrl": "#/management/opensearch-dashboards/indexPatterns/patterns/1",
          "icon": "indexPatternApp",
          "inAppUrl": Object {
            "path": "/management/opensearch-dashboards/indexPatterns/patterns/1",
            "uiCapabilitiesPath": "management.opensearchDashboards.indexPatterns",
          },
          "title": "MyIndexPattern*",
        },
        "type": "index-pattern",
        "workspaces": undefined,
      },
      Object {
        "id": "2",
        "meta": Object {
          "editUrl": "/management/opensearch-dashboards/objects/savedSearches/2",
          "icon": "search",
          "inAppUrl": Object {
            "path": "/discover/2",
            "uiCapabilitiesPath": "discover.show",
          },
          "title": "MySearch",
        },
        "type": "search",
        "workspaces": undefined,
      },
      Object {
        "id": "3",
        "meta": Object {
          "editUrl": "/management/opensearch-dashboards/objects/savedDashboards/3",
          "icon": "dashboardApp",
          "inAppUrl": Object {
            "path": "/dashboard/3",
            "uiCapabilitiesPath": "dashboard.show",
          },
          "title": "MyDashboard",
        },
        "type": "dashboard",
        "workspaces": undefined,
      },
      Object {
        "id": "4",
        "meta": Object {
          "editUrl": "/management/opensearch-dashboards/objects/savedVisualizations/4",
          "icon": "visualizeApp",
          "inAppUrl": Object {
            "path": "/edit/4",
            "uiCapabilitiesPath": "visualize.show",
          },
          "title": "MyViz",
        },
        "type": "visualization",
        "workspaces": undefined,
      },
    ]
  }
  workspaces={
    Object {
      "currentWorkspace$": BehaviorSubject {
        "_isScalar": false,
        "_value": Object {
          "id": "workspace1",
          "name": "foo",
        },
        "closed": false,
        "hasError": false,
        "isStopped": false,
        "observers": Array [],
        "thrownError": null,
      },
      "currentWorkspaceId$": BehaviorSubject {
        "_isScalar": false,
        "_value": "workspace1",
        "closed": false,
        "hasError": false,
        "isStopped": false,
        "observers": Array [
          Subscriber {
            "_parentOrParents": null,
            "_subscriptions": Array [
              SubjectSubscription {
                "_parentOrParents": [Circular],
                "_subscriptions": null,
                "closed": false,
                "subject": [Circular],
                "subscriber": [Circular],
              },
            ],
            "closed": false,
            "destination": SafeSubscriber {
              "_complete": undefined,
              "_context": [Circular],
              "_error": undefined,
              "_next": [Function],
              "_parentOrParents": null,
              "_parentSubscriber": [Circular],
              "_subscriptions": null,
              "closed": false,
              "destination": Object {
                "closed": true,
                "complete": [Function],
                "error": [Function],
                "next": [Function],
              },
              "isStopped": false,
              "syncErrorThrowable": false,
              "syncErrorThrown": false,
              "syncErrorValue": null,
            },
            "isStopped": false,
            "syncErrorThrowable": true,
            "syncErrorThrown": false,
            "syncErrorValue": null,
          },
        ],
        "thrownError": null,
      },
      "initialized$": BehaviorSubject {
        "_isScalar": false,
        "_value": false,
        "closed": false,
        "hasError": false,
        "isStopped": false,
        "observers": Array [],
        "thrownError": null,
      },
      "workspaceList$": BehaviorSubject {
        "_isScalar": false,
        "_value": Array [
          Object {
            "id": "workspace1",
            "name": "foo",
          },
          Object {
            "id": "workspace2",
            "name": "bar",
          },
        ],
        "closed": false,
        "hasError": false,
        "isStopped": false,
        "observers": Array [
          Subscriber {
            "_parentOrParents": null,
            "_subscriptions": Array [
              SubjectSubscription {
                "_parentOrParents": [Circular],
                "_subscriptions": null,
                "closed": false,
                "subject": [Circular],
                "subscriber": [Circular],
              },
            ],
            "closed": false,
            "destination": SafeSubscriber {
              "_complete": undefined,
              "_context": [Circular],
              "_error": undefined,
              "_next": [Function],
              "_parentOrParents": null,
              "_parentSubscriber": [Circular],
              "_subscriptions": null,
              "closed": false,
              "destination": Object {
                "closed": true,
                "complete": [Function],
                "error": [Function],
                "next": [Function],
              },
              "isStopped": false,
              "syncErrorThrowable": false,
              "syncErrorThrown": false,
              "syncErrorValue": null,
            },
            "isStopped": false,
            "syncErrorThrowable": true,
            "syncErrorThrown": false,
            "syncErrorValue": null,
          },
        ],
        "thrownError": null,
      },
    }
  }
/>
`;

exports[`SavedObjectsTable duplicate should allow the user to choose on table when duplicating all 1`] = `
<SavedObjectsDuplicateModal
  http={
    Object {
      "addLoadingCountSource": [MockFunction],
      "anonymousPaths": Object {
        "isAnonymous": [MockFunction],
        "register": [MockFunction],
      },
      "basePath": BasePath {
        "basePath": "",
        "clientBasePath": "",
        "get": [Function],
        "getBasePath": [Function],
        "prepend": [Function],
        "remove": [Function],
        "serverBasePath": "",
      },
      "delete": [MockFunction],
      "fetch": [MockFunction],
      "get": [MockFunction],
      "getLoadingCount$": [MockFunction],
      "head": [MockFunction],
      "intercept": [MockFunction],
      "options": [MockFunction],
      "patch": [MockFunction],
      "post": [MockFunction],
      "put": [MockFunction],
    }
  }
  notifications={
    Object {
      "toasts": Object {
        "add": [MockFunction],
        "addDanger": [MockFunction],
        "addError": [MockFunction],
        "addInfo": [MockFunction],
        "addSuccess": [MockFunction],
        "addWarning": [MockFunction],
        "get$": [MockFunction],
        "remove": [MockFunction],
      },
    }
  }
  onClose={[Function]}
  onDuplicate={[Function]}
  selectedSavedObjects={Array []}
  workspaces={
    Object {
      "currentWorkspace$": BehaviorSubject {
        "_isScalar": false,
        "_value": Object {
          "id": "workspace1",
          "name": "foo",
        },
        "closed": false,
        "hasError": false,
        "isStopped": false,
        "observers": Array [],
        "thrownError": null,
      },
      "currentWorkspaceId$": BehaviorSubject {
        "_isScalar": false,
        "_value": "workspace1",
        "closed": false,
        "hasError": false,
        "isStopped": false,
        "observers": Array [
          Subscriber {
            "_parentOrParents": null,
            "_subscriptions": Array [
              SubjectSubscription {
                "_parentOrParents": [Circular],
                "_subscriptions": null,
                "closed": false,
                "subject": [Circular],
                "subscriber": [Circular],
              },
            ],
            "closed": false,
            "destination": SafeSubscriber {
              "_complete": undefined,
              "_context": [Circular],
              "_error": undefined,
              "_next": [Function],
              "_parentOrParents": null,
              "_parentSubscriber": [Circular],
              "_subscriptions": null,
              "closed": false,
              "destination": Object {
                "closed": true,
                "complete": [Function],
                "error": [Function],
                "next": [Function],
              },
              "isStopped": false,
              "syncErrorThrowable": false,
              "syncErrorThrown": false,
              "syncErrorValue": null,
            },
            "isStopped": false,
            "syncErrorThrowable": true,
            "syncErrorThrown": false,
            "syncErrorValue": null,
          },
        ],
        "thrownError": null,
      },
      "initialized$": BehaviorSubject {
        "_isScalar": false,
        "_value": false,
        "closed": false,
        "hasError": false,
        "isStopped": false,
        "observers": Array [],
        "thrownError": null,
      },
      "workspaceList$": BehaviorSubject {
        "_isScalar": false,
        "_value": Array [
          Object {
            "id": "workspace1",
            "name": "foo",
          },
          Object {
            "id": "workspace2",
            "name": "bar",
          },
        ],
        "closed": false,
        "hasError": false,
        "isStopped": false,
        "observers": Array [
          Subscriber {
            "_parentOrParents": null,
            "_subscriptions": Array [
              SubjectSubscription {
                "_parentOrParents": [Circular],
                "_subscriptions": null,
                "closed": false,
                "subject": [Circular],
                "subscriber": [Circular],
              },
            ],
            "closed": false,
            "destination": SafeSubscriber {
              "_complete": undefined,
              "_context": [Circular],
              "_error": undefined,
              "_next": [Function],
              "_parentOrParents": null,
              "_parentSubscriber": [Circular],
              "_subscriptions": null,
              "closed": false,
              "destination": Object {
                "closed": true,
                "complete": [Function],
                "error": [Function],
                "next": [Function],
              },
              "isStopped": false,
              "syncErrorThrowable": false,
              "syncErrorThrown": false,
              "syncErrorValue": null,
            },
            "isStopped": false,
            "syncErrorThrowable": true,
            "syncErrorThrown": false,
            "syncErrorValue": null,
          },
        ],
        "thrownError": null,
      },
    }
  }
/>
`;

exports[`SavedObjectsTable duplicate should allow the user to choose on table when duplicating single 1`] = `
<SavedObjectsDuplicateModal
  http={
    Object {
      "addLoadingCountSource": [MockFunction],
      "anonymousPaths": Object {
        "isAnonymous": [MockFunction],
        "register": [MockFunction],
      },
      "basePath": BasePath {
        "basePath": "",
        "clientBasePath": "",
        "get": [Function],
        "getBasePath": [Function],
        "prepend": [Function],
        "remove": [Function],
        "serverBasePath": "",
      },
      "delete": [MockFunction],
      "fetch": [MockFunction],
      "get": [MockFunction],
      "getLoadingCount$": [MockFunction],
      "head": [MockFunction],
      "intercept": [MockFunction],
      "options": [MockFunction],
      "patch": [MockFunction],
      "post": [MockFunction],
      "put": [MockFunction],
    }
  }
  notifications={
    Object {
      "toasts": Object {
        "add": [MockFunction],
        "addDanger": [MockFunction],
        "addError": [MockFunction],
        "addInfo": [MockFunction],
        "addSuccess": [MockFunction],
        "addWarning": [MockFunction],
        "get$": [MockFunction],
        "remove": [MockFunction],
      },
    }
  }
  onClose={[Function]}
  onDuplicate={[Function]}
  selectedSavedObjects={
    Array [
      Array [
        Object {
          "id": "1",
          "type": "dashboard",
          "workspaces": Array [
            "workspace1",
          ],
        },
      ],
    ]
  }
  workspaces={
    Object {
      "currentWorkspace$": BehaviorSubject {
        "_isScalar": false,
        "_value": Object {
          "id": "workspace1",
          "name": "foo",
        },
        "closed": false,
        "hasError": false,
        "isStopped": false,
        "observers": Array [],
        "thrownError": null,
      },
      "currentWorkspaceId$": BehaviorSubject {
        "_isScalar": false,
        "_value": "workspace1",
        "closed": false,
        "hasError": false,
        "isStopped": false,
        "observers": Array [
          Subscriber {
            "_parentOrParents": null,
            "_subscriptions": Array [
              SubjectSubscription {
                "_parentOrParents": [Circular],
                "_subscriptions": null,
                "closed": false,
                "subject": [Circular],
                "subscriber": [Circular],
              },
            ],
            "closed": false,
            "destination": SafeSubscriber {
              "_complete": undefined,
              "_context": [Circular],
              "_error": undefined,
              "_next": [Function],
              "_parentOrParents": null,
              "_parentSubscriber": [Circular],
              "_subscriptions": null,
              "closed": false,
              "destination": Object {
                "closed": true,
                "complete": [Function],
                "error": [Function],
                "next": [Function],
              },
              "isStopped": false,
              "syncErrorThrowable": false,
              "syncErrorThrown": false,
              "syncErrorValue": null,
            },
            "isStopped": false,
            "syncErrorThrowable": true,
            "syncErrorThrown": false,
            "syncErrorValue": null,
          },
        ],
        "thrownError": null,
      },
      "initialized$": BehaviorSubject {
        "_isScalar": false,
        "_value": false,
        "closed": false,
        "hasError": false,
        "isStopped": false,
        "observers": Array [],
        "thrownError": null,
      },
      "workspaceList$": BehaviorSubject {
        "_isScalar": false,
        "_value": Array [
          Object {
            "id": "workspace1",
            "name": "foo",
          },
          Object {
            "id": "workspace2",
            "name": "bar",
          },
        ],
        "closed": false,
        "hasError": false,
        "isStopped": false,
        "observers": Array [
          Subscriber {
            "_parentOrParents": null,
            "_subscriptions": Array [
              SubjectSubscription {
                "_parentOrParents": [Circular],
                "_subscriptions": null,
                "closed": false,
                "subject": [Circular],
                "subscriber": [Circular],
              },
            ],
            "closed": false,
            "destination": SafeSubscriber {
              "_complete": undefined,
              "_context": [Circular],
              "_error": undefined,
              "_next": [Function],
              "_parentOrParents": null,
              "_parentSubscriber": [Circular],
              "_subscriptions": null,
              "closed": false,
              "destination": Object {
                "closed": true,
                "complete": [Function],
                "error": [Function],
                "next": [Function],
              },
              "isStopped": false,
              "syncErrorThrowable": false,
              "syncErrorThrown": false,
              "syncErrorValue": null,
            },
            "isStopped": false,
            "syncErrorThrowable": true,
            "syncErrorThrown": false,
            "syncErrorValue": null,
          },
        ],
        "thrownError": null,
      },
    }
  }
/>
`;

exports[`SavedObjectsTable export should allow the user to choose when exporting all 1`] = `
<EuiModal
  onClose={[Function]}
>
  <EuiModalHeader>
    <EuiModalHeaderTitle>
      <EuiText
        size="s"
      >
        <h2>
          <FormattedMessage
            defaultMessage="Export {filteredItemCount, plural, one{# object} other {# objects}}"
            id="savedObjectsManagement.objectsTable.exportObjectsConfirmModalTitle"
            values={
              Object {
                "filteredItemCount": 4,
              }
            }
          />
        </h2>
      </EuiText>
    </EuiModalHeaderTitle>
  </EuiModalHeader>
  <EuiModalBody>
    <EuiCompressedFormRow
      describedByIds={Array []}
      display="rowCompressed"
      fullWidth={false}
      hasChildLabel={true}
      hasEmptyLabelSpace={false}
      label={
        <FormattedMessage
          defaultMessage="Select which types to export"
          id="savedObjectsManagement.objectsTable.exportObjectsConfirmModalDescription"
          values={Object {}}
        />
      }
      labelType="legend"
    >
      <EuiCompressedCheckboxGroup
        idToSelectedMap={
          Object {
            "dashboard": true,
            "index-pattern": true,
            "search": true,
            "visualization": true,
          }
        }
        onChange={[Function]}
        options={
          Array [
            Object {
              "id": "index-pattern",
              "label": "index-pattern (0)",
            },
            Object {
              "id": "visualization",
              "label": "visualization (0)",
            },
            Object {
              "id": "dashboard",
              "label": "dashboard (0)",
            },
            Object {
              "id": "search",
              "label": "search (0)",
            },
          ]
        }
      />
    </EuiCompressedFormRow>
    <EuiSpacer
      size="m"
    />
    <EuiCompressedSwitch
      checked={true}
      label={
        <FormattedMessage
          defaultMessage="Include related objects"
          id="savedObjectsManagement.objectsTable.exportObjectsConfirmModal.includeReferencesDeepLabel"
          values={Object {}}
        />
      }
      name="includeReferencesDeep"
      onChange={[Function]}
    />
  </EuiModalBody>
  <EuiModalFooter>
    <EuiFlexGroup
      justifyContent="flexEnd"
    >
      <EuiFlexItem
        grow={false}
      >
        <EuiFlexGroup>
          <EuiFlexItem
            grow={false}
          >
            <EuiSmallButtonEmpty
              onClick={[Function]}
            >
              <FormattedMessage
                defaultMessage="Cancel"
                id="savedObjectsManagement.objectsTable.exportObjectsConfirmModal.cancelButtonLabel"
                values={Object {}}
              />
            </EuiSmallButtonEmpty>
          </EuiFlexItem>
          <EuiFlexItem
            grow={false}
          >
            <EuiSmallButton
              fill={true}
              onClick={[Function]}
            >
              <FormattedMessage
                defaultMessage="Export all"
                id="savedObjectsManagement.objectsTable.exportObjectsConfirmModal.exportAllButtonLabel"
                values={Object {}}
              />
            </EuiSmallButton>
          </EuiFlexItem>
        </EuiFlexGroup>
      </EuiFlexItem>
    </EuiFlexGroup>
  </EuiModalFooter>
</EuiModal>
`;

exports[`SavedObjectsTable should render normally 1`] = `
<EuiPageContent
  horizontalPosition="center"
>
  <Header
    objectCount={4}
    onDuplicate={[Function]}
    onExportAll={[Function]}
    onImport={[Function]}
    onRefresh={[Function]}
  />
  <EuiSpacer
    size="xs"
  />
  <RedirectAppLinks
    application={
      Object {
        "applications$": BehaviorSubject {
          "_isScalar": false,
          "_value": Map {},
          "closed": false,
          "hasError": false,
          "isStopped": false,
          "observers": Array [],
          "thrownError": null,
        },
        "capabilities": Object {
          "catalogue": Object {},
          "management": Object {},
          "navLinks": Object {},
          "savedObjectsManagement": Object {
            "delete": false,
            "edit": false,
            "read": true,
          },
          "workspaces": Object {},
        },
        "currentAppId$": Observable {
          "_isScalar": false,
          "source": Subject {
            "_isScalar": false,
            "closed": false,
            "hasError": false,
            "isStopped": false,
            "observers": Array [],
            "thrownError": null,
          },
        },
        "getUrlForApp": [MockFunction],
        "navigateToApp": [MockFunction],
        "navigateToUrl": [MockFunction],
        "registerMountContext": [MockFunction],
        "setAppBadgeControls": [MockFunction],
        "setAppBottomControls": [MockFunction],
        "setAppCenterControls": [MockFunction],
        "setAppDescriptionControls": [MockFunction],
        "setAppLeftControls": [MockFunction],
        "setAppRightControls": [MockFunction],
      }
    }
  >
    <Table
      actionRegistry={
        Object {
          "getAll": [MockFunction],
          "has": [MockFunction],
        }
      }
      availableWorkspaces={Array []}
      basePath={
        BasePath {
          "basePath": "",
          "clientBasePath": "",
          "get": [Function],
          "getBasePath": [Function],
          "prepend": [Function],
          "remove": [Function],
          "serverBasePath": "",
        }
      }
      canDelete={false}
      canGoInApp={[Function]}
      columnRegistry={
        Object {
          "getAll": [MockFunction],
          "has": [MockFunction],
        }
      }
      currentWorkspaceId=""
      filters={
        Array [
          Object {
            "field": "type",
            "multiSelect": "or",
            "name": "Type",
            "options": Array [
              Object {
                "name": "index-pattern",
                "value": "index-pattern",
                "view": "index-pattern (0)",
              },
              Object {
                "name": "visualization",
                "value": "visualization",
                "view": "visualization (0)",
              },
              Object {
                "name": "dashboard",
                "value": "dashboard",
                "view": "dashboard (0)",
              },
              Object {
                "name": "search",
                "value": "search",
                "view": "search (0)",
              },
            ],
            "searchThreshold": 1,
            "type": "field_value_selection",
          },
        ]
      }
      goInspectObject={[Function]}
      isSearching={false}
      itemId="id"
      items={
        Array [
          Object {
            "id": "1",
            "meta": Object {
              "editUrl": "#/management/opensearch-dashboards/indexPatterns/patterns/1",
              "icon": "indexPatternApp",
              "inAppUrl": Object {
                "path": "/management/opensearch-dashboards/indexPatterns/patterns/1",
                "uiCapabilitiesPath": "management.opensearchDashboards.indexPatterns",
              },
              "title": "MyIndexPattern*",
            },
            "type": "index-pattern",
          },
          Object {
            "id": "2",
            "meta": Object {
              "editUrl": "/management/opensearch-dashboards/objects/savedSearches/2",
              "icon": "search",
              "inAppUrl": Object {
                "path": "/discover/2",
                "uiCapabilitiesPath": "discover.show",
              },
              "title": "MySearch",
            },
            "type": "search",
          },
          Object {
            "id": "3",
            "meta": Object {
              "editUrl": "/management/opensearch-dashboards/objects/savedDashboards/3",
              "icon": "dashboardApp",
              "inAppUrl": Object {
                "path": "/dashboard/3",
                "uiCapabilitiesPath": "dashboard.show",
              },
              "title": "MyDashboard",
            },
            "type": "dashboard",
          },
          Object {
            "id": "4",
            "meta": Object {
              "editUrl": "/management/opensearch-dashboards/objects/savedVisualizations/4",
              "icon": "visualizeApp",
              "inAppUrl": Object {
                "path": "/edit/4",
                "uiCapabilitiesPath": "visualize.show",
              },
              "title": "MyViz",
            },
            "type": "visualization",
          },
        ]
      }
      onActionRefresh={[Function]}
      onDelete={[Function]}
      onDuplicate={[Function]}
      onDuplicateSingle={[Function]}
      onExport={[Function]}
      onQueryChange={[Function]}
      onShowRelationships={[Function]}
      onTableChange={[Function]}
      pageIndex={0}
      pageSize={15}
      selectedSavedObjects={Array []}
      selectionConfig={
        Object {
          "onSelectionChange": [Function],
        }
      }
      totalItemCount={4}
    />
  </RedirectAppLinks>
</EuiPageContent>
`;

exports[`SavedObjectsTable should unmount normally 1`] = `""`;
