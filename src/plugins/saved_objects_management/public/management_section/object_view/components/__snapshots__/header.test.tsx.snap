// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Intro component renders correctly 1`] = `
<Header
  application={
    Object {
      "applications$": BehaviorSubject {
        "_isScalar": false,
        "_value": Map {},
        "closed": false,
        "hasError": false,
        "isStopped": false,
        "observers": Array [],
        "thrownError": null,
      },
      "capabilities": Object {
        "catalogue": Object {},
        "management": Object {},
        "navLinks": Object {},
        "workspaces": Object {},
      },
      "currentAppId$": Observable {
        "_isScalar": false,
        "source": Subject {
          "_isScalar": false,
          "closed": false,
          "hasError": false,
          "isStopped": false,
          "observers": Array [],
          "thrownError": null,
        },
      },
      "getUrlForApp": [MockFunction],
      "navigateToApp": [MockFunction],
      "navigateToUrl": [MockFunction],
      "registerMountContext": [MockFunction],
      "setAppBadgeControls": [MockFunction],
      "setAppBottomControls": [MockFunction],
      "setAppCenterControls": [MockFunction],
      "setAppDescriptionControls": [MockFunction],
      "setAppLeftControls": [MockFunction],
      "setAppRightControls": [MockFunction],
    }
  }
  canDelete={true}
  canEdit={true}
  canViewInApp={true}
  navigationUI={
    Object {
      "HeaderControl": [Function],
    }
  }
  onDeleteClick={[Function]}
  type="search"
  useUpdatedUX={false}
  viewUrl="/some-url"
>
  <EuiPageContentHeader>
    <div
      className="euiPageContentHeader euiPageContentHeader--responsive"
    >
      <EuiPageContentHeaderSection>
        <div
          className="euiPageContentHeaderSection"
        >
          <EuiText
            size="s"
          >
            <div
              className="euiText euiText--small"
            >
              <h1>
                <FormattedMessage
                  defaultMessage="Edit {title}"
                  id="savedObjectsManagement.view.editItemTitle"
                  values={
                    Object {
                      "title": "search",
                    }
                  }
                >
                  Edit search
                </FormattedMessage>
              </h1>
            </div>
          </EuiText>
        </div>
      </EuiPageContentHeaderSection>
      <EuiPageContentHeaderSection>
        <div
          className="euiPageContentHeaderSection"
        >
          <EuiFlexGroup
            responsive={false}
          >
            <div
              className="euiFlexGroup euiFlexGroup--gutterLarge euiFlexGroup--directionRow"
            >
              <EuiFlexItem
                grow={false}
              >
                <div
                  className="euiFlexItem euiFlexItem--flexGrowZero"
                >
                  <EuiButton
                    data-test-subj="savedObjectEditViewInApp"
                    href="/some-url"
                    iconType="eye"
                    size="s"
                  >
                    <EuiButtonDisplay
                      baseClassName="euiButton"
                      data-test-subj="savedObjectEditViewInApp"
                      element="a"
                      href="/some-url"
                      iconType="eye"
                      isDisabled={false}
                      rel="noreferrer"
                      size="s"
                    >
                      <a
                        className="euiButton euiButton--primary euiButton--small"
                        data-test-subj="savedObjectEditViewInApp"
                        disabled={false}
                        href="/some-url"
                        rel="noreferrer"
                        style={
                          Object {
                            "minWidth": undefined,
                          }
                        }
                      >
                        <EuiButtonContent
                          className="euiButton__content"
                          iconGap="m"
                          iconSide="left"
                          iconType="eye"
                          textProps={
                            Object {
                              "className": "euiButton__text",
                            }
                          }
                        >
                          <span
                            className="euiButtonContent euiButton__content"
                          >
                            <EuiIcon
                              className="euiButtonContent__icon"
                              color="inherit"
                              size="m"
                              type="eye"
                            >
                              <span
                                className="euiButtonContent__icon"
                                color="inherit"
                                data-euiicon-type="eye"
                                size="m"
                              />
                            </EuiIcon>
                            <span
                              className="euiButton__text"
                            >
                              <FormattedMessage
                                defaultMessage="View {title}"
                                id="savedObjectsManagement.view.viewItemButtonLabel"
                                values={
                                  Object {
                                    "title": "search",
                                  }
                                }
                              >
                                View search
                              </FormattedMessage>
                            </span>
                          </span>
                        </EuiButtonContent>
                      </a>
                    </EuiButtonDisplay>
                  </EuiButton>
                </div>
              </EuiFlexItem>
              <EuiFlexItem
                grow={false}
              >
                <div
                  className="euiFlexItem euiFlexItem--flexGrowZero"
                >
                  <EuiButton
                    color="danger"
                    data-test-subj="savedObjectEditDelete"
                    iconType="trash"
                    onClick={[Function]}
                    size="s"
                  >
                    <EuiButtonDisplay
                      baseClassName="euiButton"
                      color="danger"
                      data-test-subj="savedObjectEditDelete"
                      disabled={false}
                      element="button"
                      iconType="trash"
                      isDisabled={false}
                      onClick={[Function]}
                      size="s"
                      type="button"
                    >
                      <button
                        className="euiButton euiButton--danger euiButton--small"
                        data-test-subj="savedObjectEditDelete"
                        disabled={false}
                        onClick={[Function]}
                        style={
                          Object {
                            "minWidth": undefined,
                          }
                        }
                        type="button"
                      >
                        <EuiButtonContent
                          className="euiButton__content"
                          iconGap="m"
                          iconSide="left"
                          iconType="trash"
                          textProps={
                            Object {
                              "className": "euiButton__text",
                            }
                          }
                        >
                          <span
                            className="euiButtonContent euiButton__content"
                          >
                            <EuiIcon
                              className="euiButtonContent__icon"
                              color="inherit"
                              size="m"
                              type="trash"
                            >
                              <span
                                className="euiButtonContent__icon"
                                color="inherit"
                                data-euiicon-type="trash"
                                size="m"
                              />
                            </EuiIcon>
                            <span
                              className="euiButton__text"
                            >
                              <FormattedMessage
                                defaultMessage="Delete {title}"
                                id="savedObjectsManagement.view.deleteItemButtonLabel"
                                values={
                                  Object {
                                    "title": "search",
                                  }
                                }
                              >
                                Delete search
                              </FormattedMessage>
                            </span>
                          </span>
                        </EuiButtonContent>
                      </button>
                    </EuiButtonDisplay>
                  </EuiButton>
                </div>
              </EuiFlexItem>
            </div>
          </EuiFlexGroup>
        </div>
      </EuiPageContentHeaderSection>
    </div>
  </EuiPageContentHeader>
</Header>
`;

exports[`Intro component renders correctly when use new UX 1`] = `
<Header
  application={
    Object {
      "applications$": BehaviorSubject {
        "_isScalar": false,
        "_value": Map {},
        "closed": false,
        "hasError": false,
        "isStopped": false,
        "observers": Array [],
        "thrownError": null,
      },
      "capabilities": Object {
        "catalogue": Object {},
        "management": Object {},
        "navLinks": Object {},
        "workspaces": Object {},
      },
      "currentAppId$": Observable {
        "_isScalar": false,
        "source": Subject {
          "_isScalar": false,
          "closed": false,
          "hasError": false,
          "isStopped": false,
          "observers": Array [],
          "thrownError": null,
        },
      },
      "getUrlForApp": [MockFunction],
      "navigateToApp": [MockFunction],
      "navigateToUrl": [MockFunction],
      "registerMountContext": [MockFunction],
      "setAppBadgeControls": [MockFunction],
      "setAppBottomControls": [MockFunction],
      "setAppCenterControls": [MockFunction],
      "setAppDescriptionControls": [MockFunction],
      "setAppLeftControls": [MockFunction],
      "setAppRightControls": [MockFunction],
    }
  }
  canDelete={true}
  canEdit={true}
  canViewInApp={true}
  navigationUI={
    Object {
      "HeaderControl": [Function],
    }
  }
  onDeleteClick={[Function]}
  type="search"
  useUpdatedUX={true}
  viewUrl="/some-url"
>
  <HeaderControl
    controls={
      Array [
        Object {
          "ariaLabel": "Delete search",
          "color": "danger",
          "controlType": "icon",
          "display": "base",
          "iconType": "trash",
          "run": [Function],
          "testId": "savedObjectEditDelete",
        },
        Object {
          "controlType": "button",
          "fill": true,
          "href": "/some-url",
          "iconSide": "right",
          "iconType": "popout",
          "label": "View search",
          "testId": "savedObjectEditViewInApp",
        },
      ]
    }
    setMountPoint={[MockFunction]}
  >
    Delete search
  </HeaderControl>
</Header>
`;

exports[`Intro component renders correctly when use new UX and canDelete is true 1`] = `
<Header
  application={
    Object {
      "applications$": BehaviorSubject {
        "_isScalar": false,
        "_value": Map {},
        "closed": false,
        "hasError": false,
        "isStopped": false,
        "observers": Array [],
        "thrownError": null,
      },
      "capabilities": Object {
        "catalogue": Object {},
        "management": Object {},
        "navLinks": Object {},
        "workspaces": Object {},
      },
      "currentAppId$": Observable {
        "_isScalar": false,
        "source": Subject {
          "_isScalar": false,
          "closed": false,
          "hasError": false,
          "isStopped": false,
          "observers": Array [],
          "thrownError": null,
        },
      },
      "getUrlForApp": [MockFunction],
      "navigateToApp": [MockFunction],
      "navigateToUrl": [MockFunction],
      "registerMountContext": [MockFunction],
      "setAppBadgeControls": [MockFunction],
      "setAppBottomControls": [MockFunction],
      "setAppCenterControls": [MockFunction],
      "setAppDescriptionControls": [MockFunction],
      "setAppLeftControls": [MockFunction],
      "setAppRightControls": [MockFunction],
    }
  }
  canDelete={true}
  canEdit={true}
  canViewInApp={true}
  navigationUI={
    Object {
      "HeaderControl": [Function],
    }
  }
  onDeleteClick={[Function]}
  type="search"
  useUpdatedUX={true}
  viewUrl="/some-url"
>
  <HeaderControl
    controls={
      Array [
        Object {
          "ariaLabel": "Delete search",
          "color": "danger",
          "controlType": "icon",
          "display": "base",
          "iconType": "trash",
          "run": [Function],
          "testId": "savedObjectEditDelete",
        },
        Object {
          "controlType": "button",
          "fill": true,
          "href": "/some-url",
          "iconSide": "right",
          "iconType": "popout",
          "label": "View search",
          "testId": "savedObjectEditViewInApp",
        },
      ]
    }
    setMountPoint={[MockFunction]}
  >
    Delete search
  </HeaderControl>
</Header>
`;

exports[`Intro component renders correctly when use new UX and canViewInApp is true 1`] = `
<Header
  application={
    Object {
      "applications$": BehaviorSubject {
        "_isScalar": false,
        "_value": Map {},
        "closed": false,
        "hasError": false,
        "isStopped": false,
        "observers": Array [],
        "thrownError": null,
      },
      "capabilities": Object {
        "catalogue": Object {},
        "management": Object {},
        "navLinks": Object {},
        "workspaces": Object {},
      },
      "currentAppId$": Observable {
        "_isScalar": false,
        "source": Subject {
          "_isScalar": false,
          "closed": false,
          "hasError": false,
          "isStopped": false,
          "observers": Array [],
          "thrownError": null,
        },
      },
      "getUrlForApp": [MockFunction],
      "navigateToApp": [MockFunction],
      "navigateToUrl": [MockFunction],
      "registerMountContext": [MockFunction],
      "setAppBadgeControls": [MockFunction],
      "setAppBottomControls": [MockFunction],
      "setAppCenterControls": [MockFunction],
      "setAppDescriptionControls": [MockFunction],
      "setAppLeftControls": [MockFunction],
      "setAppRightControls": [MockFunction],
    }
  }
  canDelete={true}
  canEdit={true}
  canViewInApp={true}
  navigationUI={
    Object {
      "HeaderControl": [Function],
    }
  }
  onDeleteClick={[Function]}
  type="search"
  useUpdatedUX={true}
  viewUrl="/some-url"
>
  <HeaderControl
    controls={
      Array [
        Object {
          "ariaLabel": "Delete search",
          "color": "danger",
          "controlType": "icon",
          "display": "base",
          "iconType": "trash",
          "run": [Function],
          "testId": "savedObjectEditDelete",
        },
        Object {
          "controlType": "button",
          "fill": true,
          "href": "/some-url",
          "iconSide": "right",
          "iconType": "popout",
          "label": "View search",
          "testId": "savedObjectEditViewInApp",
        },
      ]
    }
    setMountPoint={[MockFunction]}
  >
    Delete search
  </HeaderControl>
</Header>
`;
