// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`DataSourceView Should render successfully when provided datasource has not been filtered out 1`] = `
<EuiPopover
  anchorPosition="downLeft"
  button={
    <DataSourceMenuPopoverButton
      className="dataSourceView"
      label=""
      onClick={[Function]}
    />
  }
  closePopover={[Function]}
  display="inlineBlock"
  hasArrow={true}
  id="dataSourceViewPopover"
  isOpen={false}
  ownFocus={true}
  panelPaddingSize="none"
>
  <DataSourceDropDownHeader
    totalDataSourceCount={1}
  />
  <EuiContextMenuPanel
    className="dataSourceViewOuiPanel"
    hasFocus={true}
    items={Array []}
  >
    <EuiPanel
      borderRadius="none"
      color="subdued"
      paddingSize="none"
    >
      <EuiSelectable
        data-test-subj="dataSourceView"
        isPreFiltered={false}
        options={
          Array [
            Object {
              "checked": "on",
              "disabled": true,
              "id": "test1",
            },
          ]
        }
        renderOption={[Function]}
        searchable={false}
        singleSelection={true}
      >
        <Component />
      </EuiSelectable>
    </EuiPanel>
  </EuiContextMenuPanel>
</EuiPopover>
`;

exports[`DataSourceView Should return error when provided datasource has been filtered out 1`] = `
<EuiPopover
  anchorPosition="downLeft"
  button={
    <DataSourceMenuPopoverButton
      className="dataSourceView"
      label=""
      onClick={[Function]}
    />
  }
  closePopover={[Function]}
  display="inlineBlock"
  hasArrow={true}
  id="dataSourceViewPopover"
  isOpen={false}
  ownFocus={true}
  panelPaddingSize="none"
>
  <DataSourceDropDownHeader
    totalDataSourceCount={1}
  />
  <EuiContextMenuPanel
    className="dataSourceViewOuiPanel"
    hasFocus={true}
    items={Array []}
  >
    <EuiPanel
      borderRadius="none"
      color="subdued"
      paddingSize="none"
    >
      <EuiSelectable
        data-test-subj="dataSourceView"
        isPreFiltered={false}
        options={Array []}
        renderOption={[Function]}
        searchable={false}
        singleSelection={true}
      >
        <Component />
      </EuiSelectable>
    </EuiPanel>
  </EuiContextMenuPanel>
</EuiPopover>
`;

exports[`DataSourceView When selected option is local cluster and hide local Cluster is true, should return error 1`] = `
<EuiPopover
  anchorPosition="downLeft"
  button={
    <DataSourceMenuPopoverButton
      className="dataSourceView"
      label=""
      onClick={[Function]}
    />
  }
  closePopover={[Function]}
  display="inlineBlock"
  hasArrow={true}
  id="dataSourceViewPopover"
  isOpen={false}
  ownFocus={true}
  panelPaddingSize="none"
>
  <DataSourceDropDownHeader
    totalDataSourceCount={1}
  />
  <EuiContextMenuPanel
    className="dataSourceViewOuiPanel"
    hasFocus={true}
    items={Array []}
  >
    <EuiPanel
      borderRadius="none"
      color="subdued"
      paddingSize="none"
    >
      <EuiSelectable
        data-test-subj="dataSourceView"
        isPreFiltered={false}
        options={Array []}
        renderOption={[Function]}
        searchable={false}
        singleSelection={true}
      >
        <Component />
      </EuiSelectable>
    </EuiPanel>
  </EuiContextMenuPanel>
</EuiPopover>
`;

exports[`DataSourceView should call getDataSourceById when only pass id with no label 1`] = `
<EuiPopover
  anchorPosition="downLeft"
  button={
    <DataSourceMenuPopoverButton
      className="dataSourceView"
      label=""
      onClick={[Function]}
    />
  }
  closePopover={[Function]}
  display="inlineBlock"
  hasArrow={true}
  id="dataSourceViewPopover"
  isOpen={false}
  ownFocus={true}
  panelPaddingSize="none"
>
  <DataSourceDropDownHeader
    totalDataSourceCount={1}
  />
  <EuiContextMenuPanel
    className="dataSourceViewOuiPanel"
    hasFocus={true}
    items={Array []}
  >
    <EuiPanel
      borderRadius="none"
      color="subdued"
      paddingSize="none"
    >
      <EuiSelectable
        data-test-subj="dataSourceView"
        isPreFiltered={false}
        options={
          Array [
            Object {
              "checked": "on",
              "disabled": true,
              "id": "test1",
            },
          ]
        }
        renderOption={[Function]}
        searchable={false}
        singleSelection={true}
      >
        <Component />
      </EuiSelectable>
    </EuiPanel>
  </EuiContextMenuPanel>
</EuiPopover>
`;

exports[`DataSourceView should call notification warning when there is data source fetch error 1`] = `
<DataSourceViewError
  dataSourceId="test1"
  handleSwitchDefaultDatasource={[Function]}
  showSwitchButton={false}
/>
`;

exports[`DataSourceView should render expected error message when pass in invalid data source id  1`] = `
<DataSourceViewError
  dataSourceId="test1"
  handleSwitchDefaultDatasource={[Function]}
  showSwitchButton={false}
/>
`;

exports[`DataSourceView should render fetch error when pass in invalid data source id 1`] = `
<DataSourceViewError
  dataSourceId="test1"
  handleSwitchDefaultDatasource={[Function]}
  showSwitchButton={false}
/>
`;

exports[`DataSourceView should render normally with local cluster not hidden 1`] = `
<EuiPopover
  anchorPosition="downLeft"
  button={
    <DataSourceMenuPopoverButton
      className="dataSourceView"
      label="test1"
      onClick={[Function]}
    />
  }
  closePopover={[Function]}
  display="inlineBlock"
  hasArrow={true}
  id="dataSourceViewPopover"
  isOpen={false}
  ownFocus={true}
  panelPaddingSize="none"
>
  <DataSourceDropDownHeader
    totalDataSourceCount={1}
  />
  <EuiContextMenuPanel
    className="dataSourceViewOuiPanel"
    hasFocus={true}
    items={Array []}
  >
    <EuiPanel
      borderRadius="none"
      color="subdued"
      paddingSize="none"
    >
      <EuiSelectable
        data-test-subj="dataSourceView"
        isPreFiltered={false}
        options={
          Array [
            Object {
              "checked": "on",
              "disabled": true,
              "id": "test1",
              "label": "test1",
            },
          ]
        }
        renderOption={[Function]}
        searchable={false}
        singleSelection={true}
      >
        <Component />
      </EuiSelectable>
    </EuiPanel>
  </EuiContextMenuPanel>
</EuiPopover>
`;

exports[`DataSourceView should show popover when click on data source view button 1`] = `
Object {
  "asFragment": [Function],
  "baseElement": <body>
    <div>
      <div
        class="euiPopover euiPopover--anchorDownLeft"
        data-test-subj="dataSourceViewErrorPopover"
        id="dataSourceViewErrorPopover"
      >
        <div
          class="euiPopover__anchor"
        >
          <button
            aria-label="dataSourceViewErrorHeaderLink"
            class="euiButtonIcon euiButtonIcon--primary euiButtonIcon--empty euiButtonIcon--small dataSourceViewErrorHeaderLink"
            data-test-subj="dataSourceViewErrorHeaderLink"
            type="button"
          >
            <span
              aria-hidden="true"
              class="euiButtonIcon__icon"
              color="inherit"
              data-euiicon-type="iconType"
            />
          </button>
        </div>
      </div>
    </div>
  </body>,
  "container": <div>
    <div
      class="euiPopover euiPopover--anchorDownLeft"
      data-test-subj="dataSourceViewErrorPopover"
      id="dataSourceViewErrorPopover"
    >
      <div
        class="euiPopover__anchor"
      >
        <button
          aria-label="dataSourceViewErrorHeaderLink"
          class="euiButtonIcon euiButtonIcon--primary euiButtonIcon--empty euiButtonIcon--small dataSourceViewErrorHeaderLink"
          data-test-subj="dataSourceViewErrorHeaderLink"
          type="button"
        >
          <span
            aria-hidden="true"
            class="euiButtonIcon__icon"
            color="inherit"
            data-euiicon-type="iconType"
          />
        </button>
      </div>
    </div>
  </div>,
  "debug": [Function],
  "findAllByAltText": [Function],
  "findAllByDisplayValue": [Function],
  "findAllByLabelText": [Function],
  "findAllByPlaceholderText": [Function],
  "findAllByRole": [Function],
  "findAllByTestId": [Function],
  "findAllByText": [Function],
  "findAllByTitle": [Function],
  "findByAltText": [Function],
  "findByDisplayValue": [Function],
  "findByLabelText": [Function],
  "findByPlaceholderText": [Function],
  "findByRole": [Function],
  "findByTestId": [Function],
  "findByText": [Function],
  "findByTitle": [Function],
  "getAllByAltText": [Function],
  "getAllByDisplayValue": [Function],
  "getAllByLabelText": [Function],
  "getAllByPlaceholderText": [Function],
  "getAllByRole": [Function],
  "getAllByTestId": [Function],
  "getAllByText": [Function],
  "getAllByTitle": [Function],
  "getByAltText": [Function],
  "getByDisplayValue": [Function],
  "getByLabelText": [Function],
  "getByPlaceholderText": [Function],
  "getByRole": [Function],
  "getByTestId": [Function],
  "getByText": [Function],
  "getByTitle": [Function],
  "queryAllByAltText": [Function],
  "queryAllByDisplayValue": [Function],
  "queryAllByLabelText": [Function],
  "queryAllByPlaceholderText": [Function],
  "queryAllByRole": [Function],
  "queryAllByTestId": [Function],
  "queryAllByText": [Function],
  "queryAllByTitle": [Function],
  "queryByAltText": [Function],
  "queryByDisplayValue": [Function],
  "queryByLabelText": [Function],
  "queryByPlaceholderText": [Function],
  "queryByRole": [Function],
  "queryByTestId": [Function],
  "queryByText": [Function],
  "queryByTitle": [Function],
  "rerender": [Function],
  "unmount": [Function],
}
`;
