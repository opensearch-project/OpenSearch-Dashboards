// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`DataSourceView should call getDataSourceById when only pass id no label 1`] = `
<Fragment>
  <EuiButtonEmpty
    aria-label="dataSourceViewMenuButton"
    className="euiHeaderLink"
    data-test-subj="dataSourceViewContextMenuHeaderLink"
    disabled={true}
    iconSide="left"
    iconType="database"
    size="s"
  />
  <EuiPopover
    anchorPosition="downLeft"
    button={
      <EuiButtonIcon
        aria-label="Next"
        display="empty"
        iconType="iInCircle"
        onClick={[Function]}
      />
    }
    closePopover={[Function]}
    display="inlineBlock"
    hasArrow={true}
    id="dataSourceViewContextMenuPopover"
    isOpen={false}
    ownFocus={true}
    panelPaddingSize="none"
  >
    <EuiContextMenu
      initialPanelId={0}
      panels={
        Array [
          Object {
            "id": 0,
            "items": Array [
              Object {
                "disabled": true,
                "name": undefined,
              },
            ],
            "title": "Selected data source",
          },
        ]
      }
      size="m"
    />
  </EuiPopover>
</Fragment>
`;

exports[`DataSourceView should call notification warning when there is data source fetch error 1`] = `
<Fragment>
  <EuiButtonEmpty
    aria-label="dataSourceViewMenuButton"
    className="euiHeaderLink"
    data-test-subj="dataSourceViewContextMenuHeaderLink"
    disabled={true}
    iconSide="left"
    iconType="database"
    size="s"
  />
  <EuiPopover
    anchorPosition="downLeft"
    button={
      <EuiButtonIcon
        aria-label="Next"
        display="empty"
        iconType="iInCircle"
        onClick={[Function]}
      />
    }
    closePopover={[Function]}
    display="inlineBlock"
    hasArrow={true}
    id="dataSourceViewContextMenuPopover"
    isOpen={false}
    ownFocus={true}
    panelPaddingSize="none"
  >
    <EuiContextMenu
      initialPanelId={0}
      panels={
        Array [
          Object {
            "id": 0,
            "items": Array [
              Object {
                "disabled": true,
                "name": undefined,
              },
            ],
            "title": "Selected data source",
          },
        ]
      }
      size="m"
    />
  </EuiPopover>
</Fragment>
`;

exports[`DataSourceView should render normally with local cluster not hidden 1`] = `
<Fragment>
  <EuiButtonEmpty
    aria-label="dataSourceViewMenuButton"
    className="euiHeaderLink"
    data-test-subj="dataSourceViewContextMenuHeaderLink"
    disabled={true}
    iconSide="left"
    iconType="database"
    size="s"
  >
    test1
  </EuiButtonEmpty>
  <EuiPopover
    anchorPosition="downLeft"
    button={
      <EuiButtonIcon
        aria-label="Next"
        display="empty"
        iconType="iInCircle"
        onClick={[Function]}
      />
    }
    closePopover={[Function]}
    display="inlineBlock"
    hasArrow={true}
    id="dataSourceViewContextMenuPopover"
    isOpen={false}
    ownFocus={true}
    panelPaddingSize="none"
  >
    <EuiContextMenu
      initialPanelId={0}
      panels={
        Array [
          Object {
            "id": 0,
            "items": Array [
              Object {
                "disabled": true,
                "name": "test1",
              },
            ],
            "title": "Selected data source",
          },
        ]
      }
      size="m"
    />
  </EuiPopover>
</Fragment>
`;

exports[`DataSourceView should show popover when click on button 1`] = `
Object {
  "asFragment": [Function],
  "baseElement": <body>
    <div>
      <button
        aria-label="dataSourceViewMenuButton"
        class="euiButtonEmpty euiButtonEmpty--primary euiButtonEmpty--small euiButtonEmpty-isDisabled euiHeaderLink"
        data-test-subj="dataSourceViewContextMenuHeaderLink"
        disabled=""
        type="button"
      >
        <span
          class="euiButtonContent euiButtonEmpty__content"
        >
          <span
            class="euiButtonContent__icon"
            color="inherit"
            data-euiicon-type="database"
          />
          <span
            class="euiButtonEmpty__text"
          >
            test1
          </span>
        </span>
      </button>
      <div
        class="euiPopover euiPopover--anchorDownLeft"
        id="dataSourceViewContextMenuPopover"
      >
        <div
          class="euiPopover__anchor"
        >
          <button
            aria-label="Next"
            class="euiButtonIcon euiButtonIcon--primary euiButtonIcon--empty euiButtonIcon--xSmall"
            type="button"
          >
            <span
              aria-hidden="true"
              class="euiButtonIcon__icon"
              color="inherit"
              data-euiicon-type="iInCircle"
            />
          </button>
        </div>
      </div>
    </div>
  </body>,
  "container": <div>
    <button
      aria-label="dataSourceViewMenuButton"
      class="euiButtonEmpty euiButtonEmpty--primary euiButtonEmpty--small euiButtonEmpty-isDisabled euiHeaderLink"
      data-test-subj="dataSourceViewContextMenuHeaderLink"
      disabled=""
      type="button"
    >
      <span
        class="euiButtonContent euiButtonEmpty__content"
      >
        <span
          class="euiButtonContent__icon"
          color="inherit"
          data-euiicon-type="database"
        />
        <span
          class="euiButtonEmpty__text"
        >
          test1
        </span>
      </span>
    </button>
    <div
      class="euiPopover euiPopover--anchorDownLeft"
      id="dataSourceViewContextMenuPopover"
    >
      <div
        class="euiPopover__anchor"
      >
        <button
          aria-label="Next"
          class="euiButtonIcon euiButtonIcon--primary euiButtonIcon--empty euiButtonIcon--xSmall"
          type="button"
        >
          <span
            aria-hidden="true"
            class="euiButtonIcon__icon"
            color="inherit"
            data-euiicon-type="iInCircle"
          />
        </button>
      </div>
    </div>
  </div>,
  "debug": [Function],
  "findAllByAltText": [Function],
  "findAllByDisplayValue": [Function],
  "findAllByLabelText": [Function],
  "findAllByPlaceholderText": [Function],
  "findAllByRole": [Function],
  "findAllByTestId": [Function],
  "findAllByText": [Function],
  "findAllByTitle": [Function],
  "findByAltText": [Function],
  "findByDisplayValue": [Function],
  "findByLabelText": [Function],
  "findByPlaceholderText": [Function],
  "findByRole": [Function],
  "findByTestId": [Function],
  "findByText": [Function],
  "findByTitle": [Function],
  "getAllByAltText": [Function],
  "getAllByDisplayValue": [Function],
  "getAllByLabelText": [Function],
  "getAllByPlaceholderText": [Function],
  "getAllByRole": [Function],
  "getAllByTestId": [Function],
  "getAllByText": [Function],
  "getAllByTitle": [Function],
  "getByAltText": [Function],
  "getByDisplayValue": [Function],
  "getByLabelText": [Function],
  "getByPlaceholderText": [Function],
  "getByRole": [Function],
  "getByTestId": [Function],
  "getByText": [Function],
  "getByTitle": [Function],
  "queryAllByAltText": [Function],
  "queryAllByDisplayValue": [Function],
  "queryAllByLabelText": [Function],
  "queryAllByPlaceholderText": [Function],
  "queryAllByRole": [Function],
  "queryAllByTestId": [Function],
  "queryAllByText": [Function],
  "queryAllByTitle": [Function],
  "queryByAltText": [Function],
  "queryByDisplayValue": [Function],
  "queryByLabelText": [Function],
  "queryByPlaceholderText": [Function],
  "queryByRole": [Function],
  "queryByTestId": [Function],
  "queryByText": [Function],
  "queryByTitle": [Function],
  "rerender": [Function],
  "unmount": [Function],
}
`;
