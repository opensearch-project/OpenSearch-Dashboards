// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`DataSourcePicker render correct default option when datasource id is valid 1`] = `
<DataSourcePicker
  dataSourceManagement={
    Object {
      "registerAuthenticationMethod": [Function],
      "ui": Object {
        "DataSourceMenu": [Function],
        "DataSourceSelector": [Function],
      },
    }
  }
  defaultDataSourceId="some-valid-id"
  handleChange={[MockFunction]}
  savedObjectsClient={
    Object {
      "bulkCreate": [MockFunction],
      "bulkGet": [MockFunction],
      "bulkUpdate": [MockFunction],
      "create": [MockFunction],
      "delete": [MockFunction],
      "find": [MockFunction] {
        "calls": Array [
          Array [
            Object {
              "fields": Array [
                "id",
                "title",
                "auth.type",
              ],
              "perPage": 10000,
              "type": "data-source",
            },
          ],
        ],
        "results": Array [
          Object {
            "type": "return",
            "value": undefined,
          },
        ],
      },
      "get": [MockFunction] {
        "calls": Array [
          Array [
            "data-source",
            "some-valid-id",
          ],
        ],
        "results": Array [
          Object {
            "type": "return",
            "value": Promise {},
          },
        ],
      },
      "setCurrentWorkspace": [MockFunction],
      "update": [MockFunction],
    }
  }
  toasts={
    Object {
      "add": [MockFunction],
      "addDanger": [MockFunction],
      "addError": [MockFunction],
      "addInfo": [MockFunction],
      "addSuccess": [MockFunction],
      "addWarning": [MockFunction],
      "get$": [MockFunction],
      "remove": [MockFunction],
    }
  }
>
  <Component
    defaultOption={
      Array [
        Object {
          "id": "some-valid-id",
          "label": "some-title-for-some-valid-id",
        },
      ]
    }
    disabled={false}
    filterFunc={[Function]}
    fullWidth={false}
    notifications={
      Object {
        "add": [MockFunction],
        "addDanger": [MockFunction],
        "addError": [MockFunction],
        "addInfo": [MockFunction],
        "addSuccess": [MockFunction],
        "addWarning": [MockFunction],
        "get$": [MockFunction],
        "remove": [MockFunction],
      }
    }
    onSelectedDataSource={[Function]}
    removePrepend={true}
    savedObjectsClient={
      Object {
        "bulkCreate": [MockFunction],
        "bulkGet": [MockFunction],
        "bulkUpdate": [MockFunction],
        "create": [MockFunction],
        "delete": [MockFunction],
        "find": [MockFunction] {
          "calls": Array [
            Array [
              Object {
                "fields": Array [
                  "id",
                  "title",
                  "auth.type",
                ],
                "perPage": 10000,
                "type": "data-source",
              },
            ],
          ],
          "results": Array [
            Object {
              "type": "return",
              "value": undefined,
            },
          ],
        },
        "get": [MockFunction] {
          "calls": Array [
            Array [
              "data-source",
              "some-valid-id",
            ],
          ],
          "results": Array [
            Object {
              "type": "return",
              "value": Promise {},
            },
          ],
        },
        "setCurrentWorkspace": [MockFunction],
        "update": [MockFunction],
      }
    }
  >
    <DataSourceSelector
      defaultOption={
        Array [
          Object {
            "id": "some-valid-id",
            "label": "some-title-for-some-valid-id",
          },
        ]
      }
      disabled={false}
      filterFunc={[Function]}
      fullWidth={false}
      notifications={
        Object {
          "add": [MockFunction],
          "addDanger": [MockFunction],
          "addError": [MockFunction],
          "addInfo": [MockFunction],
          "addSuccess": [MockFunction],
          "addWarning": [MockFunction],
          "get$": [MockFunction],
          "remove": [MockFunction],
        }
      }
      onSelectedDataSource={[Function]}
      removePrepend={true}
      savedObjectsClient={
        Object {
          "bulkCreate": [MockFunction],
          "bulkGet": [MockFunction],
          "bulkUpdate": [MockFunction],
          "create": [MockFunction],
          "delete": [MockFunction],
          "find": [MockFunction] {
            "calls": Array [
              Array [
                Object {
                  "fields": Array [
                    "id",
                    "title",
                    "auth.type",
                  ],
                  "perPage": 10000,
                  "type": "data-source",
                },
              ],
            ],
            "results": Array [
              Object {
                "type": "return",
                "value": undefined,
              },
            ],
          },
          "get": [MockFunction] {
            "calls": Array [
              Array [
                "data-source",
                "some-valid-id",
              ],
            ],
            "results": Array [
              Object {
                "type": "return",
                "value": Promise {},
              },
            ],
          },
          "setCurrentWorkspace": [MockFunction],
          "update": [MockFunction],
        }
      }
    >
      <EuiComboBox
        aria-label="Select a data source"
        async={false}
        compressed={false}
        data-test-subj="dataSourceSelectorComboBox"
        fullWidth={false}
        isClearable={true}
        isDisabled={false}
        onChange={[Function]}
        options={
          Array [
            Object {
              "id": "",
              "label": "Local cluster",
            },
          ]
        }
        placeholder="Select a data source"
        selectedOptions={
          Array [
            Object {
              "id": "some-valid-id",
              "label": "some-title-for-some-valid-id",
            },
          ]
        }
        singleSelection={
          Object {
            "asPlainText": true,
          }
        }
        sortMatchesBy="none"
      >
        <div
          aria-expanded={false}
          aria-haspopup="listbox"
          aria-label="Select a data source"
          className="euiComboBox"
          data-test-subj="dataSourceSelectorComboBox"
          onKeyDown={[Function]}
          role="combobox"
        >
          <EuiComboBoxInput
            autoSizeInputRef={[Function]}
            compressed={false}
            fullWidth={false}
            hasSelectedOptions={true}
            inputRef={[Function]}
            isDisabled={false}
            isListOpen={false}
            noIcon={false}
            onChange={[Function]}
            onClear={[Function]}
            onClick={[Function]}
            onCloseListClick={[Function]}
            onFocus={[Function]}
            onOpenListClick={[Function]}
            onRemoveOption={[Function]}
            placeholder="Select a data source"
            rootId={[Function]}
            searchValue=""
            selectedOptions={
              Array [
                Object {
                  "id": "some-valid-id",
                  "label": "some-title-for-some-valid-id",
                },
              ]
            }
            singleSelection={
              Object {
                "asPlainText": true,
              }
            }
            toggleButtonRef={[Function]}
            updatePosition={[Function]}
            value="some-title-for-some-valid-id"
          >
            <EuiFormControlLayout
              clear={
                Object {
                  "data-test-subj": "comboBoxClearButton",
                  "onClick": [Function],
                }
              }
              compressed={false}
              fullWidth={false}
              icon={
                Object {
                  "aria-label": "Open list of options",
                  "data-test-subj": "comboBoxToggleListButton",
                  "disabled": false,
                  "onClick": [Function],
                  "ref": [Function],
                  "side": "right",
                  "type": "arrowDown",
                }
              }
            >
              <div
                className="euiFormControlLayout"
              >
                <div
                  className="euiFormControlLayout__childrenWrapper"
                >
                  <div
                    className="euiComboBox__inputWrap euiComboBox__inputWrap--noWrap euiComboBox__inputWrap-isClearable"
                    data-test-subj="comboBoxInput"
                    onClick={[Function]}
                    tabIndex={-1}
                  >
                    <EuiComboBoxPill
                      asPlainText={true}
                      color="hollow"
                      id="some-valid-id"
                      key="some-title-for-some-valid-id"
                      option={
                        Object {
                          "id": "some-valid-id",
                          "label": "some-title-for-some-valid-id",
                        }
                      }
                    >
                      <span
                        className="euiComboBoxPill euiComboBoxPill--plainText"
                        id="some-valid-id"
                      >
                        some-title-for-some-valid-id
                      </span>
                    </EuiComboBoxPill>
                    <AutosizeInput
                      aria-controls=""
                      className="euiComboBox__input"
                      data-test-subj="comboBoxSearchInput"
                      disabled={false}
                      injectStyles={true}
                      inputRef={[Function]}
                      minWidth={1}
                      onBlur={[Function]}
                      onChange={[Function]}
                      onFocus={[Function]}
                      role="textbox"
                      style={
                        Object {
                          "fontSize": 14,
                        }
                      }
                      value=""
                    >
                      <div
                        className="euiComboBox__input"
                        style={
                          Object {
                            "display": "inline-block",
                            "fontSize": 14,
                          }
                        }
                      >
                        <input
                          aria-controls=""
                          data-test-subj="comboBoxSearchInput"
                          disabled={false}
                          onBlur={[Function]}
                          onChange={[Function]}
                          onFocus={[Function]}
                          role="textbox"
                          style={
                            Object {
                              "boxSizing": "content-box",
                              "width": "2px",
                            }
                          }
                          value=""
                        />
                        <div
                          style={
                            Object {
                              "height": 0,
                              "left": 0,
                              "overflow": "scroll",
                              "position": "absolute",
                              "top": 0,
                              "visibility": "hidden",
                              "whiteSpace": "pre",
                            }
                          }
                        />
                      </div>
                    </AutosizeInput>
                  </div>
                  <EuiFormControlLayoutIcons
                    clear={
                      Object {
                        "data-test-subj": "comboBoxClearButton",
                        "onClick": [Function],
                      }
                    }
                    compressed={false}
                    icon={
                      Object {
                        "aria-label": "Open list of options",
                        "data-test-subj": "comboBoxToggleListButton",
                        "disabled": false,
                        "onClick": [Function],
                        "ref": [Function],
                        "side": "right",
                        "type": "arrowDown",
                      }
                    }
                  >
                    <div
                      className="euiFormControlLayoutIcons euiFormControlLayoutIcons--right"
                    >
                      <EuiFormControlLayoutClearButton
                        data-test-subj="comboBoxClearButton"
                        onClick={[Function]}
                        size="m"
                      >
                        <EuiI18n
                          default="Clear input"
                          token="euiFormControlLayoutClearButton.label"
                        >
                          <button
                            aria-label="Clear input"
                            className="euiFormControlLayoutClearButton"
                            data-test-subj="comboBoxClearButton"
                            onClick={[Function]}
                            type="button"
                          >
                            <EuiIcon
                              className="euiFormControlLayoutClearButton__icon"
                              type="cross"
                            >
                              <span
                                className="euiFormControlLayoutClearButton__icon"
                                data-euiicon-type="cross"
                              />
                            </EuiIcon>
                          </button>
                        </EuiI18n>
                      </EuiFormControlLayoutClearButton>
                      <EuiFormControlLayoutCustomIcon
                        aria-label="Open list of options"
                        data-test-subj="comboBoxToggleListButton"
                        disabled={false}
                        iconRef={[Function]}
                        onClick={[Function]}
                        size="m"
                        type="arrowDown"
                      >
                        <button
                          aria-label="Open list of options"
                          className="euiFormControlLayoutCustomIcon euiFormControlLayoutCustomIcon--clickable"
                          data-test-subj="comboBoxToggleListButton"
                          disabled={false}
                          onClick={[Function]}
                          type="button"
                        >
                          <EuiIcon
                            aria-hidden="true"
                            className="euiFormControlLayoutCustomIcon__icon"
                            size="m"
                            type="arrowDown"
                          >
                            <span
                              aria-hidden="true"
                              className="euiFormControlLayoutCustomIcon__icon"
                              data-euiicon-type="arrowDown"
                              size="m"
                            />
                          </EuiIcon>
                        </button>
                      </EuiFormControlLayoutCustomIcon>
                    </div>
                  </EuiFormControlLayoutIcons>
                </div>
              </div>
            </EuiFormControlLayout>
          </EuiComboBoxInput>
        </div>
      </EuiComboBox>
    </DataSourceSelector>
  </Component>
</DataSourcePicker>
`;

exports[`DataSourcePicker render local cluster when datasource id = "" 1`] = `
<DataSourcePicker
  dataSourceManagement={
    Object {
      "registerAuthenticationMethod": [Function],
      "ui": Object {
        "DataSourceMenu": [Function],
        "DataSourceSelector": [Function],
      },
    }
  }
  defaultDataSourceId=""
  handleChange={[MockFunction]}
  savedObjectsClient={
    Object {
      "bulkCreate": [MockFunction],
      "bulkGet": [MockFunction],
      "bulkUpdate": [MockFunction],
      "create": [MockFunction],
      "delete": [MockFunction],
      "find": [MockFunction] {
        "calls": Array [
          Array [
            Object {
              "fields": Array [
                "id",
                "title",
                "auth.type",
              ],
              "perPage": 10000,
              "type": "data-source",
            },
          ],
        ],
        "results": Array [
          Object {
            "type": "return",
            "value": undefined,
          },
        ],
      },
      "get": [MockFunction],
      "setCurrentWorkspace": [MockFunction],
      "update": [MockFunction],
    }
  }
  toasts={
    Object {
      "add": [MockFunction],
      "addDanger": [MockFunction],
      "addError": [MockFunction],
      "addInfo": [MockFunction],
      "addSuccess": [MockFunction],
      "addWarning": [MockFunction],
      "get$": [MockFunction],
      "remove": [MockFunction],
    }
  }
>
  <Component
    defaultOption={null}
    disabled={false}
    filterFunc={[Function]}
    fullWidth={false}
    notifications={
      Object {
        "add": [MockFunction],
        "addDanger": [MockFunction],
        "addError": [MockFunction],
        "addInfo": [MockFunction],
        "addSuccess": [MockFunction],
        "addWarning": [MockFunction],
        "get$": [MockFunction],
        "remove": [MockFunction],
      }
    }
    onSelectedDataSource={[Function]}
    removePrepend={true}
    savedObjectsClient={
      Object {
        "bulkCreate": [MockFunction],
        "bulkGet": [MockFunction],
        "bulkUpdate": [MockFunction],
        "create": [MockFunction],
        "delete": [MockFunction],
        "find": [MockFunction] {
          "calls": Array [
            Array [
              Object {
                "fields": Array [
                  "id",
                  "title",
                  "auth.type",
                ],
                "perPage": 10000,
                "type": "data-source",
              },
            ],
          ],
          "results": Array [
            Object {
              "type": "return",
              "value": undefined,
            },
          ],
        },
        "get": [MockFunction],
        "setCurrentWorkspace": [MockFunction],
        "update": [MockFunction],
      }
    }
  >
    <DataSourceSelector
      defaultOption={null}
      disabled={false}
      filterFunc={[Function]}
      fullWidth={false}
      notifications={
        Object {
          "add": [MockFunction],
          "addDanger": [MockFunction],
          "addError": [MockFunction],
          "addInfo": [MockFunction],
          "addSuccess": [MockFunction],
          "addWarning": [MockFunction],
          "get$": [MockFunction],
          "remove": [MockFunction],
        }
      }
      onSelectedDataSource={[Function]}
      removePrepend={true}
      savedObjectsClient={
        Object {
          "bulkCreate": [MockFunction],
          "bulkGet": [MockFunction],
          "bulkUpdate": [MockFunction],
          "create": [MockFunction],
          "delete": [MockFunction],
          "find": [MockFunction] {
            "calls": Array [
              Array [
                Object {
                  "fields": Array [
                    "id",
                    "title",
                    "auth.type",
                  ],
                  "perPage": 10000,
                  "type": "data-source",
                },
              ],
            ],
            "results": Array [
              Object {
                "type": "return",
                "value": undefined,
              },
            ],
          },
          "get": [MockFunction],
          "setCurrentWorkspace": [MockFunction],
          "update": [MockFunction],
        }
      }
    >
      <EuiComboBox
        aria-label="Select a data source"
        async={false}
        compressed={false}
        data-test-subj="dataSourceSelectorComboBox"
        fullWidth={false}
        isClearable={true}
        isDisabled={false}
        onChange={[Function]}
        options={
          Array [
            Object {
              "id": "",
              "label": "Local cluster",
            },
          ]
        }
        placeholder="Select a data source"
        selectedOptions={
          Array [
            Object {
              "id": "",
              "label": "Local cluster",
            },
          ]
        }
        singleSelection={
          Object {
            "asPlainText": true,
          }
        }
        sortMatchesBy="none"
      >
        <div
          aria-expanded={false}
          aria-haspopup="listbox"
          aria-label="Select a data source"
          className="euiComboBox"
          data-test-subj="dataSourceSelectorComboBox"
          onKeyDown={[Function]}
          role="combobox"
        >
          <EuiComboBoxInput
            autoSizeInputRef={[Function]}
            compressed={false}
            fullWidth={false}
            hasSelectedOptions={true}
            inputRef={[Function]}
            isDisabled={false}
            isListOpen={false}
            noIcon={false}
            onChange={[Function]}
            onClear={[Function]}
            onClick={[Function]}
            onCloseListClick={[Function]}
            onFocus={[Function]}
            onOpenListClick={[Function]}
            onRemoveOption={[Function]}
            placeholder="Select a data source"
            rootId={[Function]}
            searchValue=""
            selectedOptions={
              Array [
                Object {
                  "id": "",
                  "label": "Local cluster",
                },
              ]
            }
            singleSelection={
              Object {
                "asPlainText": true,
              }
            }
            toggleButtonRef={[Function]}
            updatePosition={[Function]}
            value="Local cluster"
          >
            <EuiFormControlLayout
              clear={
                Object {
                  "data-test-subj": "comboBoxClearButton",
                  "onClick": [Function],
                }
              }
              compressed={false}
              fullWidth={false}
              icon={
                Object {
                  "aria-label": "Open list of options",
                  "data-test-subj": "comboBoxToggleListButton",
                  "disabled": false,
                  "onClick": [Function],
                  "ref": [Function],
                  "side": "right",
                  "type": "arrowDown",
                }
              }
            >
              <div
                className="euiFormControlLayout"
              >
                <div
                  className="euiFormControlLayout__childrenWrapper"
                >
                  <div
                    className="euiComboBox__inputWrap euiComboBox__inputWrap--noWrap euiComboBox__inputWrap-isClearable"
                    data-test-subj="comboBoxInput"
                    onClick={[Function]}
                    tabIndex={-1}
                  >
                    <EuiComboBoxPill
                      asPlainText={true}
                      color="hollow"
                      id=""
                      key="local cluster"
                      option={
                        Object {
                          "id": "",
                          "label": "Local cluster",
                        }
                      }
                    >
                      <span
                        className="euiComboBoxPill euiComboBoxPill--plainText"
                        id=""
                      >
                        Local cluster
                      </span>
                    </EuiComboBoxPill>
                    <AutosizeInput
                      aria-controls=""
                      className="euiComboBox__input"
                      data-test-subj="comboBoxSearchInput"
                      disabled={false}
                      injectStyles={true}
                      inputRef={[Function]}
                      minWidth={1}
                      onBlur={[Function]}
                      onChange={[Function]}
                      onFocus={[Function]}
                      role="textbox"
                      style={
                        Object {
                          "fontSize": 14,
                        }
                      }
                      value=""
                    >
                      <div
                        className="euiComboBox__input"
                        style={
                          Object {
                            "display": "inline-block",
                            "fontSize": 14,
                          }
                        }
                      >
                        <input
                          aria-controls=""
                          data-test-subj="comboBoxSearchInput"
                          disabled={false}
                          onBlur={[Function]}
                          onChange={[Function]}
                          onFocus={[Function]}
                          role="textbox"
                          style={
                            Object {
                              "boxSizing": "content-box",
                              "width": "2px",
                            }
                          }
                          value=""
                        />
                        <div
                          style={
                            Object {
                              "height": 0,
                              "left": 0,
                              "overflow": "scroll",
                              "position": "absolute",
                              "top": 0,
                              "visibility": "hidden",
                              "whiteSpace": "pre",
                            }
                          }
                        />
                      </div>
                    </AutosizeInput>
                  </div>
                  <EuiFormControlLayoutIcons
                    clear={
                      Object {
                        "data-test-subj": "comboBoxClearButton",
                        "onClick": [Function],
                      }
                    }
                    compressed={false}
                    icon={
                      Object {
                        "aria-label": "Open list of options",
                        "data-test-subj": "comboBoxToggleListButton",
                        "disabled": false,
                        "onClick": [Function],
                        "ref": [Function],
                        "side": "right",
                        "type": "arrowDown",
                      }
                    }
                  >
                    <div
                      className="euiFormControlLayoutIcons euiFormControlLayoutIcons--right"
                    >
                      <EuiFormControlLayoutClearButton
                        data-test-subj="comboBoxClearButton"
                        onClick={[Function]}
                        size="m"
                      >
                        <EuiI18n
                          default="Clear input"
                          token="euiFormControlLayoutClearButton.label"
                        >
                          <button
                            aria-label="Clear input"
                            className="euiFormControlLayoutClearButton"
                            data-test-subj="comboBoxClearButton"
                            onClick={[Function]}
                            type="button"
                          >
                            <EuiIcon
                              className="euiFormControlLayoutClearButton__icon"
                              type="cross"
                            >
                              <span
                                className="euiFormControlLayoutClearButton__icon"
                                data-euiicon-type="cross"
                              />
                            </EuiIcon>
                          </button>
                        </EuiI18n>
                      </EuiFormControlLayoutClearButton>
                      <EuiFormControlLayoutCustomIcon
                        aria-label="Open list of options"
                        data-test-subj="comboBoxToggleListButton"
                        disabled={false}
                        iconRef={[Function]}
                        onClick={[Function]}
                        size="m"
                        type="arrowDown"
                      >
                        <button
                          aria-label="Open list of options"
                          className="euiFormControlLayoutCustomIcon euiFormControlLayoutCustomIcon--clickable"
                          data-test-subj="comboBoxToggleListButton"
                          disabled={false}
                          onClick={[Function]}
                          type="button"
                        >
                          <EuiIcon
                            aria-hidden="true"
                            className="euiFormControlLayoutCustomIcon__icon"
                            size="m"
                            type="arrowDown"
                          >
                            <span
                              aria-hidden="true"
                              className="euiFormControlLayoutCustomIcon__icon"
                              data-euiicon-type="arrowDown"
                              size="m"
                            />
                          </EuiIcon>
                        </button>
                      </EuiFormControlLayoutCustomIcon>
                    </div>
                  </EuiFormControlLayoutIcons>
                </div>
              </div>
            </EuiFormControlLayout>
          </EuiComboBoxInput>
        </div>
      </EuiComboBox>
    </DataSourceSelector>
  </Component>
</DataSourcePicker>
`;

exports[`DataSourcePicker render local cluster when datasource id is not in saved objects 1`] = `
<DataSourcePicker
  dataSourceManagement={
    Object {
      "registerAuthenticationMethod": [Function],
      "ui": Object {
        "DataSourceMenu": [Function],
        "DataSourceSelector": [Function],
      },
    }
  }
  defaultDataSourceId="nonexistent-id"
  handleChange={[MockFunction]}
  savedObjectsClient={
    Object {
      "bulkCreate": [MockFunction],
      "bulkGet": [MockFunction],
      "bulkUpdate": [MockFunction],
      "create": [MockFunction],
      "delete": [MockFunction],
      "find": [MockFunction] {
        "calls": Array [
          Array [
            Object {
              "fields": Array [
                "id",
                "title",
                "auth.type",
              ],
              "perPage": 10000,
              "type": "data-source",
            },
          ],
        ],
        "results": Array [
          Object {
            "type": "return",
            "value": undefined,
          },
        ],
      },
      "get": [MockFunction] {
        "calls": Array [
          Array [
            "data-source",
            "nonexistent-id",
          ],
        ],
        "results": Array [
          Object {
            "type": "return",
            "value": Promise {},
          },
        ],
      },
      "setCurrentWorkspace": [MockFunction],
      "update": [MockFunction],
    }
  }
  toasts={
    Object {
      "add": [MockFunction],
      "addDanger": [MockFunction],
      "addError": [MockFunction],
      "addInfo": [MockFunction],
      "addSuccess": [MockFunction],
      "addWarning": [MockFunction],
      "get$": [MockFunction],
      "remove": [MockFunction],
    }
  }
>
  <Component
    defaultOption={null}
    disabled={false}
    filterFunc={[Function]}
    fullWidth={false}
    notifications={
      Object {
        "add": [MockFunction],
        "addDanger": [MockFunction],
        "addError": [MockFunction],
        "addInfo": [MockFunction],
        "addSuccess": [MockFunction],
        "addWarning": [MockFunction],
        "get$": [MockFunction],
        "remove": [MockFunction],
      }
    }
    onSelectedDataSource={[Function]}
    removePrepend={true}
    savedObjectsClient={
      Object {
        "bulkCreate": [MockFunction],
        "bulkGet": [MockFunction],
        "bulkUpdate": [MockFunction],
        "create": [MockFunction],
        "delete": [MockFunction],
        "find": [MockFunction] {
          "calls": Array [
            Array [
              Object {
                "fields": Array [
                  "id",
                  "title",
                  "auth.type",
                ],
                "perPage": 10000,
                "type": "data-source",
              },
            ],
          ],
          "results": Array [
            Object {
              "type": "return",
              "value": undefined,
            },
          ],
        },
        "get": [MockFunction] {
          "calls": Array [
            Array [
              "data-source",
              "nonexistent-id",
            ],
          ],
          "results": Array [
            Object {
              "type": "return",
              "value": Promise {},
            },
          ],
        },
        "setCurrentWorkspace": [MockFunction],
        "update": [MockFunction],
      }
    }
  >
    <DataSourceSelector
      defaultOption={null}
      disabled={false}
      filterFunc={[Function]}
      fullWidth={false}
      notifications={
        Object {
          "add": [MockFunction],
          "addDanger": [MockFunction],
          "addError": [MockFunction],
          "addInfo": [MockFunction],
          "addSuccess": [MockFunction],
          "addWarning": [MockFunction],
          "get$": [MockFunction],
          "remove": [MockFunction],
        }
      }
      onSelectedDataSource={[Function]}
      removePrepend={true}
      savedObjectsClient={
        Object {
          "bulkCreate": [MockFunction],
          "bulkGet": [MockFunction],
          "bulkUpdate": [MockFunction],
          "create": [MockFunction],
          "delete": [MockFunction],
          "find": [MockFunction] {
            "calls": Array [
              Array [
                Object {
                  "fields": Array [
                    "id",
                    "title",
                    "auth.type",
                  ],
                  "perPage": 10000,
                  "type": "data-source",
                },
              ],
            ],
            "results": Array [
              Object {
                "type": "return",
                "value": undefined,
              },
            ],
          },
          "get": [MockFunction] {
            "calls": Array [
              Array [
                "data-source",
                "nonexistent-id",
              ],
            ],
            "results": Array [
              Object {
                "type": "return",
                "value": Promise {},
              },
            ],
          },
          "setCurrentWorkspace": [MockFunction],
          "update": [MockFunction],
        }
      }
    >
      <EuiComboBox
        aria-label="Select a data source"
        async={false}
        compressed={false}
        data-test-subj="dataSourceSelectorComboBox"
        fullWidth={false}
        isClearable={true}
        isDisabled={false}
        onChange={[Function]}
        options={
          Array [
            Object {
              "id": "",
              "label": "Local cluster",
            },
          ]
        }
        placeholder="Select a data source"
        selectedOptions={
          Array [
            Object {
              "id": "",
              "label": "Local cluster",
            },
          ]
        }
        singleSelection={
          Object {
            "asPlainText": true,
          }
        }
        sortMatchesBy="none"
      >
        <div
          aria-expanded={false}
          aria-haspopup="listbox"
          aria-label="Select a data source"
          className="euiComboBox"
          data-test-subj="dataSourceSelectorComboBox"
          onKeyDown={[Function]}
          role="combobox"
        >
          <EuiComboBoxInput
            autoSizeInputRef={[Function]}
            compressed={false}
            fullWidth={false}
            hasSelectedOptions={true}
            inputRef={[Function]}
            isDisabled={false}
            isListOpen={false}
            noIcon={false}
            onChange={[Function]}
            onClear={[Function]}
            onClick={[Function]}
            onCloseListClick={[Function]}
            onFocus={[Function]}
            onOpenListClick={[Function]}
            onRemoveOption={[Function]}
            placeholder="Select a data source"
            rootId={[Function]}
            searchValue=""
            selectedOptions={
              Array [
                Object {
                  "id": "",
                  "label": "Local cluster",
                },
              ]
            }
            singleSelection={
              Object {
                "asPlainText": true,
              }
            }
            toggleButtonRef={[Function]}
            updatePosition={[Function]}
            value="Local cluster"
          >
            <EuiFormControlLayout
              clear={
                Object {
                  "data-test-subj": "comboBoxClearButton",
                  "onClick": [Function],
                }
              }
              compressed={false}
              fullWidth={false}
              icon={
                Object {
                  "aria-label": "Open list of options",
                  "data-test-subj": "comboBoxToggleListButton",
                  "disabled": false,
                  "onClick": [Function],
                  "ref": [Function],
                  "side": "right",
                  "type": "arrowDown",
                }
              }
            >
              <div
                className="euiFormControlLayout"
              >
                <div
                  className="euiFormControlLayout__childrenWrapper"
                >
                  <div
                    className="euiComboBox__inputWrap euiComboBox__inputWrap--noWrap euiComboBox__inputWrap-isClearable"
                    data-test-subj="comboBoxInput"
                    onClick={[Function]}
                    tabIndex={-1}
                  >
                    <EuiComboBoxPill
                      asPlainText={true}
                      color="hollow"
                      id=""
                      key="local cluster"
                      option={
                        Object {
                          "id": "",
                          "label": "Local cluster",
                        }
                      }
                    >
                      <span
                        className="euiComboBoxPill euiComboBoxPill--plainText"
                        id=""
                      >
                        Local cluster
                      </span>
                    </EuiComboBoxPill>
                    <AutosizeInput
                      aria-controls=""
                      className="euiComboBox__input"
                      data-test-subj="comboBoxSearchInput"
                      disabled={false}
                      injectStyles={true}
                      inputRef={[Function]}
                      minWidth={1}
                      onBlur={[Function]}
                      onChange={[Function]}
                      onFocus={[Function]}
                      role="textbox"
                      style={
                        Object {
                          "fontSize": 14,
                        }
                      }
                      value=""
                    >
                      <div
                        className="euiComboBox__input"
                        style={
                          Object {
                            "display": "inline-block",
                            "fontSize": 14,
                          }
                        }
                      >
                        <input
                          aria-controls=""
                          data-test-subj="comboBoxSearchInput"
                          disabled={false}
                          onBlur={[Function]}
                          onChange={[Function]}
                          onFocus={[Function]}
                          role="textbox"
                          style={
                            Object {
                              "boxSizing": "content-box",
                              "width": "2px",
                            }
                          }
                          value=""
                        />
                        <div
                          style={
                            Object {
                              "height": 0,
                              "left": 0,
                              "overflow": "scroll",
                              "position": "absolute",
                              "top": 0,
                              "visibility": "hidden",
                              "whiteSpace": "pre",
                            }
                          }
                        />
                      </div>
                    </AutosizeInput>
                  </div>
                  <EuiFormControlLayoutIcons
                    clear={
                      Object {
                        "data-test-subj": "comboBoxClearButton",
                        "onClick": [Function],
                      }
                    }
                    compressed={false}
                    icon={
                      Object {
                        "aria-label": "Open list of options",
                        "data-test-subj": "comboBoxToggleListButton",
                        "disabled": false,
                        "onClick": [Function],
                        "ref": [Function],
                        "side": "right",
                        "type": "arrowDown",
                      }
                    }
                  >
                    <div
                      className="euiFormControlLayoutIcons euiFormControlLayoutIcons--right"
                    >
                      <EuiFormControlLayoutClearButton
                        data-test-subj="comboBoxClearButton"
                        onClick={[Function]}
                        size="m"
                      >
                        <EuiI18n
                          default="Clear input"
                          token="euiFormControlLayoutClearButton.label"
                        >
                          <button
                            aria-label="Clear input"
                            className="euiFormControlLayoutClearButton"
                            data-test-subj="comboBoxClearButton"
                            onClick={[Function]}
                            type="button"
                          >
                            <EuiIcon
                              className="euiFormControlLayoutClearButton__icon"
                              type="cross"
                            >
                              <span
                                className="euiFormControlLayoutClearButton__icon"
                                data-euiicon-type="cross"
                              />
                            </EuiIcon>
                          </button>
                        </EuiI18n>
                      </EuiFormControlLayoutClearButton>
                      <EuiFormControlLayoutCustomIcon
                        aria-label="Open list of options"
                        data-test-subj="comboBoxToggleListButton"
                        disabled={false}
                        iconRef={[Function]}
                        onClick={[Function]}
                        size="m"
                        type="arrowDown"
                      >
                        <button
                          aria-label="Open list of options"
                          className="euiFormControlLayoutCustomIcon euiFormControlLayoutCustomIcon--clickable"
                          data-test-subj="comboBoxToggleListButton"
                          disabled={false}
                          onClick={[Function]}
                          type="button"
                        >
                          <EuiIcon
                            aria-hidden="true"
                            className="euiFormControlLayoutCustomIcon__icon"
                            size="m"
                            type="arrowDown"
                          >
                            <span
                              aria-hidden="true"
                              className="euiFormControlLayoutCustomIcon__icon"
                              data-euiicon-type="arrowDown"
                              size="m"
                            />
                          </EuiIcon>
                        </button>
                      </EuiFormControlLayoutCustomIcon>
                    </div>
                  </EuiFormControlLayoutIcons>
                </div>
              </div>
            </EuiFormControlLayout>
          </EuiComboBoxInput>
        </div>
      </EuiComboBox>
    </DataSourceSelector>
  </Component>
</DataSourcePicker>
`;

exports[`DataSourcePicker should render local cluster without datasource id provided 1`] = `
<DataSourcePicker
  dataSourceManagement={
    Object {
      "registerAuthenticationMethod": [Function],
      "ui": Object {
        "DataSourceMenu": [Function],
        "DataSourceSelector": [Function],
      },
    }
  }
  handleChange={[MockFunction]}
  savedObjectsClient={
    Object {
      "bulkCreate": [MockFunction],
      "bulkGet": [MockFunction],
      "bulkUpdate": [MockFunction],
      "create": [MockFunction],
      "delete": [MockFunction],
      "find": [MockFunction] {
        "calls": Array [
          Array [
            Object {
              "fields": Array [
                "id",
                "title",
                "auth.type",
              ],
              "perPage": 10000,
              "type": "data-source",
            },
          ],
        ],
        "results": Array [
          Object {
            "type": "return",
            "value": undefined,
          },
        ],
      },
      "get": [MockFunction],
      "setCurrentWorkspace": [MockFunction],
      "update": [MockFunction],
    }
  }
  toasts={
    Object {
      "add": [MockFunction],
      "addDanger": [MockFunction],
      "addError": [MockFunction],
      "addInfo": [MockFunction],
      "addSuccess": [MockFunction],
      "addWarning": [MockFunction],
      "get$": [MockFunction],
      "remove": [MockFunction],
    }
  }
>
  <Component
    defaultOption={null}
    disabled={false}
    filterFunc={[Function]}
    fullWidth={false}
    notifications={
      Object {
        "add": [MockFunction],
        "addDanger": [MockFunction],
        "addError": [MockFunction],
        "addInfo": [MockFunction],
        "addSuccess": [MockFunction],
        "addWarning": [MockFunction],
        "get$": [MockFunction],
        "remove": [MockFunction],
      }
    }
    onSelectedDataSource={[Function]}
    removePrepend={true}
    savedObjectsClient={
      Object {
        "bulkCreate": [MockFunction],
        "bulkGet": [MockFunction],
        "bulkUpdate": [MockFunction],
        "create": [MockFunction],
        "delete": [MockFunction],
        "find": [MockFunction] {
          "calls": Array [
            Array [
              Object {
                "fields": Array [
                  "id",
                  "title",
                  "auth.type",
                ],
                "perPage": 10000,
                "type": "data-source",
              },
            ],
          ],
          "results": Array [
            Object {
              "type": "return",
              "value": undefined,
            },
          ],
        },
        "get": [MockFunction],
        "setCurrentWorkspace": [MockFunction],
        "update": [MockFunction],
      }
    }
  >
    <DataSourceSelector
      defaultOption={null}
      disabled={false}
      filterFunc={[Function]}
      fullWidth={false}
      notifications={
        Object {
          "add": [MockFunction],
          "addDanger": [MockFunction],
          "addError": [MockFunction],
          "addInfo": [MockFunction],
          "addSuccess": [MockFunction],
          "addWarning": [MockFunction],
          "get$": [MockFunction],
          "remove": [MockFunction],
        }
      }
      onSelectedDataSource={[Function]}
      removePrepend={true}
      savedObjectsClient={
        Object {
          "bulkCreate": [MockFunction],
          "bulkGet": [MockFunction],
          "bulkUpdate": [MockFunction],
          "create": [MockFunction],
          "delete": [MockFunction],
          "find": [MockFunction] {
            "calls": Array [
              Array [
                Object {
                  "fields": Array [
                    "id",
                    "title",
                    "auth.type",
                  ],
                  "perPage": 10000,
                  "type": "data-source",
                },
              ],
            ],
            "results": Array [
              Object {
                "type": "return",
                "value": undefined,
              },
            ],
          },
          "get": [MockFunction],
          "setCurrentWorkspace": [MockFunction],
          "update": [MockFunction],
        }
      }
    >
      <EuiComboBox
        aria-label="Select a data source"
        async={false}
        compressed={false}
        data-test-subj="dataSourceSelectorComboBox"
        fullWidth={false}
        isClearable={true}
        isDisabled={false}
        onChange={[Function]}
        options={
          Array [
            Object {
              "id": "",
              "label": "Local cluster",
            },
          ]
        }
        placeholder="Select a data source"
        selectedOptions={
          Array [
            Object {
              "id": "",
              "label": "Local cluster",
            },
          ]
        }
        singleSelection={
          Object {
            "asPlainText": true,
          }
        }
        sortMatchesBy="none"
      >
        <div
          aria-expanded={false}
          aria-haspopup="listbox"
          aria-label="Select a data source"
          className="euiComboBox"
          data-test-subj="dataSourceSelectorComboBox"
          onKeyDown={[Function]}
          role="combobox"
        >
          <EuiComboBoxInput
            autoSizeInputRef={[Function]}
            compressed={false}
            fullWidth={false}
            hasSelectedOptions={true}
            inputRef={[Function]}
            isDisabled={false}
            isListOpen={false}
            noIcon={false}
            onChange={[Function]}
            onClear={[Function]}
            onClick={[Function]}
            onCloseListClick={[Function]}
            onFocus={[Function]}
            onOpenListClick={[Function]}
            onRemoveOption={[Function]}
            placeholder="Select a data source"
            rootId={[Function]}
            searchValue=""
            selectedOptions={
              Array [
                Object {
                  "id": "",
                  "label": "Local cluster",
                },
              ]
            }
            singleSelection={
              Object {
                "asPlainText": true,
              }
            }
            toggleButtonRef={[Function]}
            updatePosition={[Function]}
            value="Local cluster"
          >
            <EuiFormControlLayout
              clear={
                Object {
                  "data-test-subj": "comboBoxClearButton",
                  "onClick": [Function],
                }
              }
              compressed={false}
              fullWidth={false}
              icon={
                Object {
                  "aria-label": "Open list of options",
                  "data-test-subj": "comboBoxToggleListButton",
                  "disabled": false,
                  "onClick": [Function],
                  "ref": [Function],
                  "side": "right",
                  "type": "arrowDown",
                }
              }
            >
              <div
                className="euiFormControlLayout"
              >
                <div
                  className="euiFormControlLayout__childrenWrapper"
                >
                  <div
                    className="euiComboBox__inputWrap euiComboBox__inputWrap--noWrap euiComboBox__inputWrap-isClearable"
                    data-test-subj="comboBoxInput"
                    onClick={[Function]}
                    tabIndex={-1}
                  >
                    <EuiComboBoxPill
                      asPlainText={true}
                      color="hollow"
                      id=""
                      key="local cluster"
                      option={
                        Object {
                          "id": "",
                          "label": "Local cluster",
                        }
                      }
                    >
                      <span
                        className="euiComboBoxPill euiComboBoxPill--plainText"
                        id=""
                      >
                        Local cluster
                      </span>
                    </EuiComboBoxPill>
                    <AutosizeInput
                      aria-controls=""
                      className="euiComboBox__input"
                      data-test-subj="comboBoxSearchInput"
                      disabled={false}
                      injectStyles={true}
                      inputRef={[Function]}
                      minWidth={1}
                      onBlur={[Function]}
                      onChange={[Function]}
                      onFocus={[Function]}
                      role="textbox"
                      style={
                        Object {
                          "fontSize": 14,
                        }
                      }
                      value=""
                    >
                      <div
                        className="euiComboBox__input"
                        style={
                          Object {
                            "display": "inline-block",
                            "fontSize": 14,
                          }
                        }
                      >
                        <input
                          aria-controls=""
                          data-test-subj="comboBoxSearchInput"
                          disabled={false}
                          onBlur={[Function]}
                          onChange={[Function]}
                          onFocus={[Function]}
                          role="textbox"
                          style={
                            Object {
                              "boxSizing": "content-box",
                              "width": "2px",
                            }
                          }
                          value=""
                        />
                        <div
                          style={
                            Object {
                              "height": 0,
                              "left": 0,
                              "overflow": "scroll",
                              "position": "absolute",
                              "top": 0,
                              "visibility": "hidden",
                              "whiteSpace": "pre",
                            }
                          }
                        />
                      </div>
                    </AutosizeInput>
                  </div>
                  <EuiFormControlLayoutIcons
                    clear={
                      Object {
                        "data-test-subj": "comboBoxClearButton",
                        "onClick": [Function],
                      }
                    }
                    compressed={false}
                    icon={
                      Object {
                        "aria-label": "Open list of options",
                        "data-test-subj": "comboBoxToggleListButton",
                        "disabled": false,
                        "onClick": [Function],
                        "ref": [Function],
                        "side": "right",
                        "type": "arrowDown",
                      }
                    }
                  >
                    <div
                      className="euiFormControlLayoutIcons euiFormControlLayoutIcons--right"
                    >
                      <EuiFormControlLayoutClearButton
                        data-test-subj="comboBoxClearButton"
                        onClick={[Function]}
                        size="m"
                      >
                        <EuiI18n
                          default="Clear input"
                          token="euiFormControlLayoutClearButton.label"
                        >
                          <button
                            aria-label="Clear input"
                            className="euiFormControlLayoutClearButton"
                            data-test-subj="comboBoxClearButton"
                            onClick={[Function]}
                            type="button"
                          >
                            <EuiIcon
                              className="euiFormControlLayoutClearButton__icon"
                              type="cross"
                            >
                              <span
                                className="euiFormControlLayoutClearButton__icon"
                                data-euiicon-type="cross"
                              />
                            </EuiIcon>
                          </button>
                        </EuiI18n>
                      </EuiFormControlLayoutClearButton>
                      <EuiFormControlLayoutCustomIcon
                        aria-label="Open list of options"
                        data-test-subj="comboBoxToggleListButton"
                        disabled={false}
                        iconRef={[Function]}
                        onClick={[Function]}
                        size="m"
                        type="arrowDown"
                      >
                        <button
                          aria-label="Open list of options"
                          className="euiFormControlLayoutCustomIcon euiFormControlLayoutCustomIcon--clickable"
                          data-test-subj="comboBoxToggleListButton"
                          disabled={false}
                          onClick={[Function]}
                          type="button"
                        >
                          <EuiIcon
                            aria-hidden="true"
                            className="euiFormControlLayoutCustomIcon__icon"
                            size="m"
                            type="arrowDown"
                          >
                            <span
                              aria-hidden="true"
                              className="euiFormControlLayoutCustomIcon__icon"
                              data-euiicon-type="arrowDown"
                              size="m"
                            />
                          </EuiIcon>
                        </button>
                      </EuiFormControlLayoutCustomIcon>
                    </div>
                  </EuiFormControlLayoutIcons>
                </div>
              </div>
            </EuiFormControlLayout>
          </EuiComboBoxInput>
        </div>
      </EuiComboBox>
    </DataSourceSelector>
  </Component>
</DataSourcePicker>
`;
