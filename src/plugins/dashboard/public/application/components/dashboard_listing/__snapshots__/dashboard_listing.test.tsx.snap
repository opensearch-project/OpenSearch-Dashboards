// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`dashboard listing hideWriteControls 1`] = `
<I18nProvider>
  <IntlProvider
    defaultLocale="en"
    formats={
      Object {
        "date": Object {
          "full": Object {
            "day": "numeric",
            "month": "long",
            "weekday": "long",
            "year": "numeric",
          },
          "long": Object {
            "day": "numeric",
            "month": "long",
            "year": "numeric",
          },
          "medium": Object {
            "day": "numeric",
            "month": "short",
            "year": "numeric",
          },
          "short": Object {
            "day": "numeric",
            "month": "numeric",
            "year": "2-digit",
          },
        },
        "number": Object {
          "currency": Object {
            "style": "currency",
          },
          "percent": Object {
            "style": "percent",
          },
        },
        "relative": Object {
          "days": Object {
            "units": "day",
          },
          "hours": Object {
            "units": "hour",
          },
          "minutes": Object {
            "units": "minute",
          },
          "months": Object {
            "units": "month",
          },
          "seconds": Object {
            "units": "second",
          },
          "years": Object {
            "units": "year",
          },
        },
        "time": Object {
          "full": Object {
            "hour": "numeric",
            "minute": "numeric",
            "second": "numeric",
            "timeZoneName": "short",
          },
          "long": Object {
            "hour": "numeric",
            "minute": "numeric",
            "second": "numeric",
            "timeZoneName": "short",
          },
          "medium": Object {
            "hour": "numeric",
            "minute": "numeric",
            "second": "numeric",
          },
          "short": Object {
            "hour": "numeric",
            "minute": "numeric",
          },
        },
      }
    }
    locale="en"
    messages={Object {}}
    textComponent={Symbol(react.fragment)}
  >
    <PseudoLocaleWrapper>
      <Provider
        services={
          Object {
            "application": Object {
              "applications$": BehaviorSubject {
                "_isScalar": false,
                "_value": Map {},
                "closed": false,
                "hasError": false,
                "isStopped": false,
                "observers": Array [],
                "thrownError": null,
              },
              "capabilities": Object {
                "catalogue": Object {},
                "management": Object {},
                "navLinks": Object {},
                "workspaces": Object {},
              },
              "currentAppId$": Observable {
                "_isScalar": false,
                "source": Subject {
                  "_isScalar": false,
                  "closed": false,
                  "hasError": false,
                  "isStopped": false,
                  "observers": Array [],
                  "thrownError": null,
                },
              },
              "getUrlForApp": [MockFunction],
              "navigateToApp": [MockFunction],
              "navigateToUrl": [MockFunction],
              "registerMountContext": [MockFunction],
            },
            "chrome": Object {
              "addApplicationClass": [MockFunction],
              "docTitle": Object {
                "change": [MockFunction] {
                  "calls": Array [
                    Array [
                      "Dashboards",
                    ],
                  ],
                  "results": Array [
                    Object {
                      "type": "return",
                      "value": undefined,
                    },
                  ],
                },
                "reset": [MockFunction],
              },
              "getApplicationClasses$": [MockFunction],
              "getBadge$": [MockFunction],
              "getBreadcrumbs$": [MockFunction],
              "getCustomNavLink$": [MockFunction],
              "getHeaderComponent": [MockFunction],
              "getHelpExtension$": [MockFunction],
              "getIsNavDrawerLocked$": [MockFunction],
              "getIsVisible$": [MockFunction],
              "logos": Object {
                "AnimatedMark": Object {
                  "dark": Object {
                    "type": "default",
                    "url": "/ui/logos/opensearch_spinner_on_dark.svg",
                  },
                  "light": Object {
                    "type": "default",
                    "url": "/ui/logos/opensearch_spinner_on_light.svg",
                  },
                  "type": "default",
                  "url": "/ui/logos/opensearch_spinner_on_light.svg",
                },
                "Application": Object {
                  "dark": Object {
                    "type": "default",
                    "url": "/ui/logos/opensearch_dashboards_on_dark.svg",
                  },
                  "light": Object {
                    "type": "default",
                    "url": "/ui/logos/opensearch_dashboards_on_light.svg",
                  },
                  "type": "default",
                  "url": "/ui/logos/opensearch_dashboards_on_light.svg",
                },
                "CenterMark": Object {
                  "dark": Object {
                    "type": "default",
                    "url": "/ui/logos/opensearch_center_mark_on_dark.svg",
                  },
                  "light": Object {
                    "type": "default",
                    "url": "/ui/logos/opensearch_center_mark_on_light.svg",
                  },
                  "type": "default",
                  "url": "/ui/logos/opensearch_center_mark_on_light.svg",
                },
                "Mark": Object {
                  "dark": Object {
                    "type": "default",
                    "url": "/ui/logos/opensearch_mark_on_dark.svg",
                  },
                  "light": Object {
                    "type": "default",
                    "url": "/ui/logos/opensearch_mark_on_light.svg",
                  },
                  "type": "default",
                  "url": "/ui/logos/opensearch_mark_on_light.svg",
                },
                "OpenSearch": Object {
                  "dark": Object {
                    "type": "default",
                    "url": "/ui/logos/opensearch_on_dark.svg",
                  },
                  "light": Object {
                    "type": "default",
                    "url": "/ui/logos/opensearch_on_light.svg",
                  },
                  "type": "default",
                  "url": "/ui/logos/opensearch_on_light.svg",
                },
                "colorScheme": "light",
              },
              "navControls": Object {
                "getCenter$": [MockFunction],
                "getLeft$": [MockFunction],
                "getRight$": [MockFunction],
                "registerCenter": [MockFunction],
                "registerLeft": [MockFunction],
                "registerRight": [MockFunction],
              },
              "navLinks": Object {
                "enableForcedAppSwitcherNavigation": [MockFunction],
                "get": [MockFunction],
                "getAll": [MockFunction],
                "getForceAppSwitcherNavigation$": [MockFunction],
                "getNavLinks$": [MockFunction],
                "has": [MockFunction],
                "showOnly": [MockFunction],
                "update": [MockFunction],
              },
              "recentlyAccessed": Object {
                "add": [MockFunction],
                "get": [MockFunction],
                "get$": [MockFunction],
              },
              "removeApplicationClass": [MockFunction],
              "setAppTitle": [MockFunction],
              "setBadge": [MockFunction],
              "setBreadcrumbs": [MockFunction] {
                "calls": Array [
                  Array [
                    Array [
                      Object {
                        "text": "Dashboards",
                      },
                    ],
                  ],
                ],
                "results": Array [
                  Object {
                    "type": "return",
                    "value": undefined,
                  },
                ],
              },
              "setCustomNavLink": [MockFunction],
              "setHelpExtension": [MockFunction],
              "setHelpSupportUrl": [MockFunction],
              "setIsVisible": [MockFunction],
            },
            "dashboard": Object {
              "getAttributeService": [MockFunction],
            },
            "dashboardConfig": Object {
              "getHideWriteControls": [Function],
            },
            "dashboardProviders": [Function],
            "data": Object {
              "actions": Object {
                "createFiltersFromRangeSelectAction": [MockFunction],
                "createFiltersFromValueClickAction": [MockFunction],
              },
              "autocomplete": Object {
                "getQuerySuggestions": [MockFunction],
                "getValueSuggestions": [MockFunction],
                "hasQuerySuggestions": [MockFunction],
              },
              "fieldFormats": Object {
                "deserialize": [MockFunction],
                "getByFieldType": [MockFunction],
                "getDefaultConfig": [MockFunction],
                "getDefaultInstance": [MockFunction],
                "getDefaultInstanceCacheResolver": [MockFunction],
                "getDefaultInstancePlain": [MockFunction],
                "getDefaultType": [MockFunction],
                "getDefaultTypeName": [MockFunction],
                "getInstance": [MockFunction],
                "getType": [MockFunction],
                "getTypeNameByOpenSearchTypes": [MockFunction],
                "getTypeWithoutMetaParams": [MockFunction],
                "init": [MockFunction],
                "parseDefaultTypeMap": [MockFunction],
                "register": [MockFunction],
              },
              "indexPatterns": Object {
                "clearCache": [MockFunction],
                "createField": [MockFunction],
                "createFieldList": [MockFunction],
                "ensureDefaultIndexPattern": [MockFunction],
                "find": [MockFunction],
                "get": [MockFunction],
                "getDefault": [MockFunction],
                "make": [Function],
              },
              "query": Object {
                "addToQueryLog": [MockFunction],
                "filterManager": Object {
                  "addFilters": [MockFunction],
                  "getAppFilters": [MockFunction],
                  "getFetches$": [MockFunction],
                  "getFilters": [MockFunction],
                  "getGlobalFilters": [MockFunction] {
                    "calls": Array [
                      Array [],
                      Array [],
                      Array [],
                    ],
                    "results": Array [
                      Object {
                        "type": "return",
                        "value": undefined,
                      },
                      Object {
                        "type": "return",
                        "value": undefined,
                      },
                      Object {
                        "type": "return",
                        "value": undefined,
                      },
                    ],
                  },
                  "getPartitionedFilters": [MockFunction],
                  "getUpdates$": [MockFunction],
                  "handleStateUpdate": [MockFunction],
                  "mergeIncomingFilters": [MockFunction],
                  "removeAll": [MockFunction],
                  "removeFilter": [MockFunction],
                  "setAppFilters": [MockFunction],
                  "setFilters": [MockFunction],
                  "setGlobalFilters": [MockFunction] {
                    "calls": Array [
                      Array [
                        Array [],
                      ],
                    ],
                    "results": Array [
                      Object {
                        "type": "return",
                        "value": undefined,
                      },
                    ],
                  },
                },
                "getOpenSearchQuery": [MockFunction],
                "queryString": Object {
                  "clearQuery": [MockFunction],
                  "formatQuery": [MockFunction],
                  "getDefaultQuery": [MockFunction],
                  "getQuery": [MockFunction],
                  "getUpdates$": [MockFunction],
                  "setQuery": [MockFunction],
                },
                "savedQueries": [MockFunction],
                "state$": Observable {
                  "_isScalar": false,
                },
                "timefilter": Object {
                  "history": Object {
                    "add": [MockFunction],
                    "get": [MockFunction],
                  },
                  "timefilter": Object {
                    "calculateBounds": [MockFunction],
                    "createFilter": [MockFunction],
                    "disableAutoRefreshSelector": [MockFunction],
                    "disableTimeRangeSelector": [MockFunction],
                    "enableAutoRefreshSelector": [MockFunction],
                    "enableTimeRangeSelector": [MockFunction],
                    "getActiveBounds": [MockFunction],
                    "getAutoRefreshFetch$": [MockFunction],
                    "getBounds": [MockFunction],
                    "getEnabledUpdated$": [MockFunction],
                    "getFetch$": [MockFunction],
                    "getRefreshInterval": [MockFunction] {
                      "calls": Array [
                        Array [],
                        Array [],
                        Array [],
                      ],
                      "results": Array [
                        Object {
                          "type": "return",
                          "value": undefined,
                        },
                        Object {
                          "type": "return",
                          "value": undefined,
                        },
                        Object {
                          "type": "return",
                          "value": undefined,
                        },
                      ],
                    },
                    "getRefreshIntervalDefaults": [MockFunction] {
                      "calls": Array [
                        Array [],
                      ],
                      "results": Array [
                        Object {
                          "type": "return",
                          "value": undefined,
                        },
                      ],
                    },
                    "getRefreshIntervalUpdate$": [MockFunction],
                    "getTime": [MockFunction] {
                      "calls": Array [
                        Array [],
                        Array [],
                        Array [],
                      ],
                      "results": Array [
                        Object {
                          "type": "return",
                          "value": undefined,
                        },
                        Object {
                          "type": "return",
                          "value": undefined,
                        },
                        Object {
                          "type": "return",
                          "value": undefined,
                        },
                      ],
                    },
                    "getTimeDefaults": [MockFunction] {
                      "calls": Array [
                        Array [],
                      ],
                      "results": Array [
                        Object {
                          "type": "return",
                          "value": undefined,
                        },
                      ],
                    },
                    "getTimeUpdate$": [MockFunction],
                    "isAutoRefreshSelectorEnabled": [MockFunction],
                    "isTimeRangeSelectorEnabled": [MockFunction],
                    "setRefreshInterval": [MockFunction],
                    "setTime": [MockFunction],
                  },
                },
              },
              "search": Object {
                "aggs": Object {
                  "calculateAutoTimeExpression": [Function],
                  "createAggConfigs": [MockFunction],
                  "types": Object {
                    "get": [Function],
                    "getAll": [Function],
                  },
                },
                "search": [MockFunction],
                "searchSource": Object {
                  "create": [MockFunction],
                  "createEmpty": [MockFunction],
                },
                "showError": [MockFunction],
              },
              "ui": Object {
                "IndexPatternSelect": [MockFunction],
                "SearchBar": [MockFunction],
              },
            },
            "docLinks": Object {
              "DOC_LINK_VERSION": "mocked-test-branch",
              "OPENSEARCH_WEBSITE_URL": "https://opensearch.org/",
              "links": Object {
                "noDocumentation": Object {
                  "addData": "https://opensearch.org/docs/mocked-test-branch",
                  "apmServer": "https://opensearch.org/docs/mocked-test-branch",
                  "auditbeat": "https://opensearch.org/docs/mocked-test-branchtools/index/#downloads",
                  "clusterAPI": Object {
                    "clusterPending": "https://opensearch.org/docs/mocked-test-branch",
                    "clusterRoute": "https://opensearch.org/docs/mocked-test-branch/api-reference/cluster-api/cluster-awareness/",
                    "clusterState": "https://opensearch.org/docs/mocked-test-branch",
                    "clusterStats": "https://opensearch.org/docs/mocked-test-branch/api-reference/cluster-api/cluster-stats/",
                  },
                  "documentAPI": Object {
                    "delete_by_query": "https://opensearch.org/docs/mocked-test-branch/api-reference/document-apis/delete-by-query/",
                    "multiTermVector": "https://opensearch.org/docs/mocked-test-branch",
                    "termVector": "https://opensearch.org/docs/mocked-test-branch",
                    "update_by_query_rethrottle": "https://opensearch.org/docs/mocked-test-branch/api-reference/document-apis/update-by-query/",
                  },
                  "filebeat": "https://opensearch.org/docs/mocked-test-branchtools/index/#downloads",
                  "filed_caps": "https://opensearch.org/docs/mocked-test-branch",
                  "functionbeat": "https://opensearch.org/docs/mocked-test-branchtools/index/#downloads",
                  "heartbeat": "https://opensearch.org/docs/mocked-test-branchtools/index/#downloads",
                  "indexAPI": Object {
                    "indexAnalyze": "https://opensearch.org/docs/mocked-test-branch/api-reference/analyze-apis/index/",
                    "indexClearCache": "https://opensearch.org/docs/mocked-test-branch/api-reference/index-apis/clear-index-cache/",
                    "indexClone": "https://opensearch.org/docs/mocked-test-branch/api-reference/index-apis/clone/",
                    "indexFlush": "https://opensearch.org/docs/mocked-test-branch",
                    "indexForceMerge": "https://opensearch.org/docs/mocked-test-branch",
                    "indexGetFieldMapping": "https://opensearch.org/docs/mocked-test-branch",
                    "indexGetMapping": "https://opensearch.org/docs/mocked-test-branch",
                    "indexOpenClose": "https://opensearch.org/docs/mocked-test-branch/api-reference/index-apis/open-index/",
                    "indexPutMapping": "https://opensearch.org/docs/mocked-test-branch/api-reference/index-apis/put-mapping/",
                    "indexRecovery": "https://opensearch.org/docs/mocked-test-branch",
                    "indexRefresh": "https://opensearch.org/docs/mocked-test-branch",
                    "indexRollover": "https://opensearch.org/docs/mocked-test-branch",
                    "indexSearchValidate": "https://opensearch.org/docs/mocked-test-branch",
                    "indexSegment": "https://opensearch.org/docs/mocked-test-branch",
                    "indexSetting": "https://opensearch.org/docs/mocked-test-branch/api-reference/index-apis/get-settings/",
                    "indexShardStore": "https://opensearch.org/docs/mocked-test-branch",
                    "indexShrink": "https://opensearch.org/docs/mocked-test-branch/api-reference/index-apis/shrink-index/",
                    "indexSplit": "https://opensearch.org/docs/mocked-test-branch/api-reference/index-apis/split/",
                    "indexStats": "https://opensearch.org/docs/mocked-test-branch",
                    "indexSynced": "https://opensearch.org/docs/mocked-test-branch",
                    "indexUpdateSetting": "https://opensearch.org/docs/mocked-test-branch/api-reference/index-apis/update-settings/",
                    "indexUpgrade": "https://opensearch.org/docs/mocked-test-branch",
                  },
                  "indexPatterns": Object {
                    "introduction": "https://opensearch.org/docs/mocked-test-branch",
                    "loadingData": "https://opensearch.org/docs/mocked-test-branch",
                  },
                  "ingest": Object {
                    "appendProcessor": "https://opensearch.org/docs/mocked-test-branch",
                    "bytesProcessor": "https://opensearch.org/docs/mocked-test-branch",
                    "convertProcessor": "https://opensearch.org/docs/mocked-test-branch/data-prepper/pipelines/configuration/processors/string-converter/",
                    "csvProcessor": "https://opensearch.org/docs/mocked-test-branch/data-prepper/pipelines/configuration/processors/csv/",
                    "dataIndexNamProcessor": "https://opensearch.org/docs/mocked-test-branch/data-prepper/pipelines/configuration/processors/date/",
                    "dataProcessor": "https://opensearch.org/docs/mocked-test-branch/data-prepper/pipelines/configuration/processors/date/",
                    "deletePipeline": "https://opensearch.org/docs/mocked-test-branch/api-reference/ingest-apis/delete-ingest/",
                    "dissectProcessor": "https://opensearch.org/docs/mocked-test-branch",
                    "dotExpandProcessor": "https://opensearch.org/docs/mocked-test-branch",
                    "dropProcessor": "https://opensearch.org/docs/mocked-test-branch/data-prepper/pipelines/configuration/processors/drop-events/",
                    "failProcessor": "https://opensearch.org/docs/mocked-test-branch",
                    "foreachProcessor": "https://opensearch.org/docs/mocked-test-branch",
                    "geoIPProcessor": "https://opensearch.org/docs/mocked-test-branch",
                    "getPipeline": "https://opensearch.org/docs/mocked-test-branch/api-reference/ingest-apis/get-ingest/",
                    "grokProcessor": "https://opensearch.org/docs/mocked-test-branch/data-prepper/pipelines/configuration/processors/grok/",
                    "gusbProcessor": "https://opensearch.org/docs/mocked-test-branch",
                    "htmlstripProcessor": "https://opensearch.org/docs/mocked-test-branch",
                    "inferenceProcessor": "https://opensearch.org/docs/mocked-test-branch",
                    "ingestCircleProcessor": "https://opensearch.org/docs/mocked-test-branch",
                    "joinProcessor": "https://opensearch.org/docs/mocked-test-branch",
                    "jsonProcessor": "https://opensearch.org/docs/mocked-test-branch/data-prepper/pipelines/configuration/processors/parse-json/",
                    "kvProcessor": "https://opensearch.org/docs/mocked-test-branch/data-prepper/pipelines/configuration/processors/key-value/",
                    "lowecaseProcessor": "https://opensearch.org/docs/mocked-test-branch/data-prepper/pipelines/configuration/processors/lowercase-string/",
                    "pipelineProcessor": "https://opensearch.org/docs/mocked-test-branch",
                    "putPipeline": "https://opensearch.org/docs/mocked-test-branch/api-reference/ingest-apis/create-update-ingest/",
                    "removeProcessor": "https://opensearch.org/docs/mocked-test-branch",
                    "renameProcessor": "https://opensearch.org/docs/mocked-test-branch/data-prepper/pipelines/configuration/processors/rename-keys/",
                    "scriptProcessor": "https://opensearch.org/docs/mocked-test-branch",
                    "securityUserProcessor": "https://opensearch.org/docs/mocked-test-branch",
                    "setProcessor": "https://opensearch.org/docs/mocked-test-branch",
                    "simulatePipeline": "https://opensearch.org/docs/mocked-test-branch/api-reference/ingest-apis/simulate-ingest/",
                    "sortProcessor": "https://opensearch.org/docs/mocked-test-branch",
                    "splitProcessor": "https://opensearch.org/docs/mocked-test-branch/data-prepper/pipelines/configuration/processors/split-string/",
                    "trimProcessor": "https://opensearch.org/docs/mocked-test-branch/data-prepper/pipelines/configuration/processors/trim-string/",
                    "uppercaseProcessor": "https://opensearch.org/docs/mocked-test-branch/data-prepper/pipelines/configuration/processors/uppercase-string/",
                    "urldecodeProcessor": "https://opensearch.org/docs/mocked-test-branch",
                    "userAgentProcessor": "https://opensearch.org/docs/mocked-test-branch",
                  },
                  "logstash": "https://opensearch.org/docs/mocked-test-branch",
                  "management": Object {
                    "dashboardSettings": "https://opensearch.org/docs/mocked-test-branch",
                    "opensearchDashboardsGeneralSettings": "https://opensearch.org/docs/mocked-test-branch",
                    "opensearchDashboardsSearchSettings": "https://opensearch.org/docs/mocked-test-branch",
                  },
                  "mappingTypes": "https://opensearch.org/docs/mocked-test-branch/field-types/mappings/",
                  "metricbeat": "https://opensearch.org/docs/mocked-test-branchtools/index/#downloads",
                  "moduleScripting": "https://opensearch.org/docs/mocked-test-branch",
                  "nodes": Object {
                    "hotThreads": "https://opensearch.org/docs/mocked-test-branch/api-reference/nodes-apis/nodes-hot-threads/",
                    "info": "https://opensearch.org/docs/mocked-test-branch/api-reference/nodes-apis/nodes-info/",
                    "nodeStats": "https://opensearch.org/docs/mocked-test-branch/api-reference/nodes-apis/nodes-stats/",
                    "reloadSecuritySetting": "https://opensearch.org/docs/mocked-test-branch/api-reference/nodes-apis/nodes-reload-secure/",
                    "usage": "https://opensearch.org/docs/mocked-test-branch/api-reference/nodes-apis/nodes-usage/",
                  },
                  "painless_execute": "https://opensearch.org/docs/mocked-test-branch/api-reference/script-apis/exec-script/",
                  "reIndex": Object {
                    "rethrottle": "https://opensearch.org/docs/mocked-test-branch",
                  },
                  "savedObject": Object {
                    "manageSavedObject": "https://opensearch.org/docs/mocked-test-branch/security/multi-tenancy/mt-agg-view/",
                  },
                  "scriptedFields": Object {
                    "luceneExpressions": "https://opensearch.org/docs/mocked-test-branch",
                    "painless": "https://opensearch.org/docs/mocked-test-branch",
                    "painlessApi": "https://opensearch.org/docs/mocked-test-branch",
                    "painlessSyntax": "https://opensearch.org/docs/mocked-test-branch",
                    "scriptAggs": "https://opensearch.org/docs/mocked-test-branch",
                    "scriptFields": "https://opensearch.org/docs/mocked-test-branch",
                  },
                  "scroll": Object {
                    "clear_scroll": "https://opensearch.org/docs/mocked-test-branch/api-reference/scroll/",
                  },
                  "search": Object {
                    "search": "https://opensearch.org/docs/mocked-test-branch/api-reference/search/",
                    "searchFieldCap": "https://opensearch.org/docs/mocked-test-branch",
                    "searchRankEval": "https://opensearch.org/docs/mocked-test-branch",
                    "searchShards": "https://opensearch.org/docs/mocked-test-branch",
                  },
                  "siem": "https://opensearch.org/docs/mocked-test-branch",
                  "snapshot": Object {
                    "cleanup": "https://opensearch.org/docs/mocked-test-branch",
                    "deleteRepository": "https://opensearch.org/docs/mocked-test-branch/api-reference/snapshots/delete-snapshot-repository/",
                    "deleteSnapshot": "https://opensearch.org/docs/mocked-test-branch/api-reference/snapshots/delete-snapshot/",
                    "veirfyRepository": "https://opensearch.org/docs/mocked-test-branch/api-reference/snapshots/verify-snapshot-repository/",
                  },
                  "tutorial": Object {
                    "loadDataTutorial": "https://opensearch.org/docs/mocked-test-branch",
                    "visualizeTutorial": "https://opensearch.org/docs/mocked-test-branch",
                  },
                  "vega": "https://opensearch.org/docs/mocked-test-branch/dashboards/",
                  "winlogbeat": "https://opensearch.org/docs/mocked-test-branch",
                },
                "opensearch": Object {
                  "aggregations": Object {
                    "base": "https://opensearch.org/docs/mocked-test-branch/opensearch/aggregations/",
                    "bucket": Object {
                      "adjacency_matrix": "https://opensearch.org/docs/mocked-test-branch/opensearch/bucket-agg/#adjacency_matrix",
                      "base": "https://opensearch.org/docs/mocked-test-branch/opensearch/bucket-agg/",
                      "filter": "https://opensearch.org/docs/mocked-test-branch/opensearch/bucket-agg/#filter-filters",
                      "geo": "https://opensearch.org/docs/mocked-test-branch/opensearch/bucket-agg/#geo_distance-geohash_grid",
                      "global": "https://opensearch.org/docs/mocked-test-branch/opensearch/bucket-agg/#global",
                      "histogram": "https://opensearch.org/docs/mocked-test-branch/opensearch/bucket-agg/#histogram-date_histogram",
                      "missing": "https://opensearch.org/docs/mocked-test-branch/opensearch/bucket-agg/#missing",
                      "nested": "https://opensearch.org/docs/mocked-test-branch/opensearch/bucket-agg/#nested-reverse_nested",
                      "range": "https://opensearch.org/docs/mocked-test-branch/opensearch/bucket-agg/#range-date_range-ip_range",
                      "significant_terms": "https://opensearch.org/docs/mocked-test-branch/opensearch/bucket-agg/#significant_terms-significant_text",
                      "smapler": "https://opensearch.org/docs/mocked-test-branch/opensearch/bucket-agg/#sampler-diversified_sampler",
                      "terms": "https://opensearch.org/docs/mocked-test-branch/opensearch/bucket-agg/#terms",
                    },
                    "metric": Object {
                      "base": "https://opensearch.org/docs/mocked-test-branch/opensearch/metric-agg/",
                      "cardinality": "https://opensearch.org/docs/mocked-test-branch/opensearch/metric-agg/#cardinality",
                      "geo_bound": "https://opensearch.org/docs/mocked-test-branch/opensearch/metric-agg/#geo_bound",
                      "percentile": "https://opensearch.org/docs/mocked-test-branch/opensearch/metric-agg/#percentile-percentile_ranks",
                      "scripted_metric": "https://opensearch.org/docs/mocked-test-branch/opensearch/metric-agg/#scripted_metric",
                      "stats": "https://opensearch.org/docs/mocked-test-branch/opensearch/metric-agg/#stats-extended_stats-matrix_stats",
                      "sum": "https://opensearch.org/docs/mocked-test-branch/opensearch/metric-agg/#sum-min-max-avg",
                      "top_hits": "https://opensearch.org/docs/mocked-test-branch/opensearch/metric-agg/#top_hits",
                      "types": "https://opensearch.org/docs/mocked-test-branch/opensearch/metric-agg/#types-of-metric-aggregations",
                      "value_count": "https://opensearch.org/docs/mocked-test-branch/opensearch/metric-agg/#value_count",
                    },
                    "pipeline": Object {
                      "avg_bucket": "https://opensearch.org/docs/mocked-test-branch/opensearch/pipeline-agg/#avg_bucket-sum_bucket-min_bucket-max_bucket",
                      "base": "https://opensearch.org/docs/mocked-test-branch/opensearch/pipeline-agg/",
                      "bucket_script": "https://opensearch.org/docs/mocked-test-branch/opensearch/pipeline-agg/#bucket_script-bucket_selector",
                      "bucket_sort": "https://opensearch.org/docs/mocked-test-branch/opensearch/pipeline-agg/#bucket_sort",
                      "cumulative_sum": "https://opensearch.org/docs/mocked-test-branch/opensearch/pipeline-agg/#cumulative_sum",
                      "derivative": "https://opensearch.org/docs/mocked-test-branch/opensearch/pipeline-agg/#derivative",
                      "moving_avg": "https://opensearch.org/docs/mocked-test-branch/opensearch/pipeline-agg/#moving_avg",
                      "serial_diff": "https://opensearch.org/docs/mocked-test-branch/opensearch/pipeline-agg/#serial_diff",
                      "stats_bucket": "https://opensearch.org/docs/mocked-test-branch/opensearch/pipeline-agg/#stats_bucket-extended_stats_bucket",
                      "syntax": "https://opensearch.org/docs/mocked-test-branch/opensearch/pipeline-agg/#pipeline-aggregation-syntax",
                      "types": "https://opensearch.org/docs/mocked-test-branch/opensearch/pipeline-agg/#types-of-pipeline-aggregations",
                    },
                  },
                  "cluster": Object {
                    "base": "https://opensearch.org/docs/mocked-test-branch/opensearch/cluster/",
                    "build_cluster": "https://opensearch.org/docs/mocked-test-branch/opensearch/cluster/#step-3-bind-a-cluster-to-specific-ip-addresses",
                    "config_host": "https://opensearch.org/docs/mocked-test-branch/opensearch/cluster/cluster/#step-4-configure-discovery-hosts-for-a-cluster",
                    "config_shard": "https://opensearch.org/docs/mocked-test-branch/opensearch/cluster/#advanced-step-6-configure-shard-allocation-awareness-or-forced-awareness",
                    "naming": "https://opensearch.org/docs/mocked-test-branch/opensearch/cluster/#step-1-name-a-cluster",
                    "set_attribute": "https://opensearch.org/docs/mocked-test-branch/opensearch/cluster/#step-2-set-node-attributes-for-each-node-in-a-cluster",
                    "setup_hot_arch": "https://opensearch.org/docs/mocked-test-branch/opensearch/cluster/#advanced-step-7-set-up-a-hot-warm-architecture",
                    "start": "https://opensearch.org/docs/mocked-test-branch/opensearch/cluster/#step-5-start-the-cluster",
                  },
                  "commonParameters": "https://opensearch.org/docs/mocked-test-branch/opensearch/common-parameters",
                  "configuration": "https://opensearch.org/docs/mocked-test-branch/opensearch/configuration/",
                  "dataStreams": "https://opensearch.org/docs/mocked-test-branch/opensearch/data-streams/",
                  "dateMath": "https://opensearch.org/docs/mocked-test-branch/opensearch/supported-field-types/date/#date-math",
                  "indexAlias": Object {
                    "add_remove_index": "https://opensearch.org/docs/mocked-test-branch/opensearch/index-alias/#add-or-remove-indices",
                    "alias_option": "https://opensearch.org/docs/mocked-test-branch/opensearch/index-alias/#index-alias-options",
                    "base": "https://opensearch.org/docs/mocked-test-branch/opensearch/index-alias/",
                    "create_alias": "https://opensearch.org/docs/mocked-test-branch/opensearch/index-alias/#create-aliases",
                    "filtered_alias": "https://opensearch.org/docs/mocked-test-branch/opensearch/index-alias/#create-filtered-aliases",
                    "manage_alias": "https://opensearch.org/docs/mocked-test-branch/opensearch/index-alias/#manage-aliases",
                  },
                  "indexData": Object {
                    "base": "https://opensearch.org/docs/mocked-test-branch/opensearch/index-data/",
                    "delete_data": "https://opensearch.org/docs/mocked-test-branch/opensearch/index-data/#delete-data",
                    "naming": "https://opensearch.org/docs/mocked-test-branch/opensearch/index-data/#naming-restrictions-for-indices",
                    "read_data": "https://opensearch.org/docs/mocked-test-branch/opensearch/index-data/#read-data",
                    "update_data": "https://opensearch.org/docs/mocked-test-branch/opensearch/index-data/#update-data",
                  },
                  "indexTemplates": Object {
                    "base": "https://opensearch.org/docs/mocked-test-branch/opensearch/index-templates",
                    "composable": "https://opensearch.org/docs/mocked-test-branch/opensearch/index-templates/#composable-index-templates",
                    "options": "https://opensearch.org/docs/mocked-test-branch/opensearch/index-templates/#index-template-options",
                  },
                  "installation": Object {
                    "ansible": "https://opensearch.org/docs/mocked-test-branch/opensearch/install/ansible/",
                    "base": "https://opensearch.org/docs/mocked-test-branch/opensearch/install/index/",
                    "compatibility": "https://opensearch.org/docs/mocked-test-branch/opensearch/install/compatibility/",
                    "docker": "https://opensearch.org/docs/mocked-test-branch/opensearch/install/docker",
                    "dockerSecurity": "https://opensearch.org/docs/mocked-test-branch/opensearch/install/docker-security",
                    "helm": "https://opensearch.org/docs/mocked-test-branch/opensearch/install/helm/",
                    "plugins": "https://opensearch.org/docs/mocked-test-branch/opensearch/install/plugins/",
                    "settings": "https://opensearch.org/docs/mocked-test-branch/opensearch/install/important-settings/",
                    "tar": "https://opensearch.org/docs/mocked-test-branch/opensearch/install/tar/",
                  },
                  "introduction": "https://opensearch.org/docs/mocked-test-branch/opensearch/index/",
                  "logs": Object {
                    "application_log": "https://opensearch.org/docs/mocked-test-branch/opensearch/logs/#application-logs",
                    "base": "https://opensearch.org/docs/mocked-test-branch/opensearch/logs",
                    "deprecation_log": "https://opensearch.org/docs/mocked-test-branch/opensearch/logs/#deprecation-logs",
                    "slow_log": "https://opensearch.org/docs/mocked-test-branch/opensearch/logs/#slow-logs",
                  },
                  "openSearchForum": "https://forum.opensearch.org/t/feedback-experimental-feature-connect-to-external-data-sources/11144",
                  "popularAPI": "https://opensearch.org/docs/mocked-test-branch/opensearch/popular-api",
                  "queryDSL": Object {
                    "base": "https://opensearch.org/docs/mocked-test-branch/opensearch/query-dsl/index/",
                    "boolQuery": "https://opensearch.org/docs/mocked-test-branch/opensearch/query-dsl/bool/",
                    "fullText": Object {
                      "base": "https://opensearch.org/docs/mocked-test-branch/opensearch/query-dsl/full-text/",
                      "common_terms": "https://opensearch.org/docs/mocked-test-branch/opensearch/query-dsl/full-text/#common-terms",
                      "match": "https://opensearch.org/docs/mocked-test-branch/opensearch/query-dsl/full-text/#match",
                      "match_phrase": "https://opensearch.org/docs/mocked-test-branch/opensearch/query-dsl/full-text/#match-phrase",
                      "multi_match": "https://opensearch.org/docs/mocked-test-branch/opensearch/query-dsl/full-text/#multi-match",
                      "options": "https://opensearch.org/docs/mocked-test-branch/opensearch/query-dsl/full-text/#options",
                      "query_string": "https://opensearch.org/docs/mocked-test-branch/opensearch/query-dsl/full-text/#query-string",
                    },
                    "term": Object {
                      "base": "https://opensearch.org/docs/mocked-test-branch/opensearch/query-dsl/term/",
                      "exists": "https://opensearch.org/docs/mocked-test-branch/opensearch/query-dsl/term/#exists",
                      "ids": "https://opensearch.org/docs/mocked-test-branch/opensearch/query-dsl/term/#ids",
                      "prefix": "https://opensearch.org/docs/mocked-test-branch/opensearch/query-dsl/term/#prefix",
                      "range": "https://opensearch.org/docs/mocked-test-branch/opensearch/query-dsl/term/#range",
                      "regex": "https://opensearch.org/docs/mocked-test-branch/opensearch/query-dsl/term/#regex",
                      "terms": "https://opensearch.org/docs/mocked-test-branch/opensearch/query-dsl/term/#terms",
                      "wildcards": "https://opensearch.org/docs/mocked-test-branch/opensearch/query-dsl/term/#wildcards",
                    },
                  },
                  "reindexData": Object {
                    "all": "https://opensearch.org/docs/mocked-test-branch/opensearch/reindex-data/#reindex-all-documents",
                    "base": "https://opensearch.org/docs/mocked-test-branch/opensearch/reindex-data/",
                    "combine": "https://opensearch.org/docs/mocked-test-branch/opensearch/reindex-data/#combine-one-or-more-indices",
                    "destination": "https://opensearch.org/docs/mocked-test-branch/opensearch/reindex-data/#destination-index-options",
                    "remote": "https://opensearch.org/docs/mocked-test-branch/opensearch/reindex-data/#reindex-from-a-remote-cluster",
                    "source": "https://opensearch.org/docs/mocked-test-branch/opensearch/reindex-data/#source-index-options",
                    "subset": "https://opensearch.org/docs/mocked-test-branch/opensearch/reindex-data/#reindex-a-subset-of-documents",
                    "transform": "https://opensearch.org/docs/mocked-test-branch/opensearch/reindex-data/#transform-documents-during-reindexing",
                    "unique": "https://opensearch.org/docs/mocked-test-branch/opensearch/reindex-data/#reindex-only-unique-documents",
                    "update": "https://opensearch.org/docs/mocked-test-branch/opensearch/reindex-data/#update-documents-in-the-current-index",
                  },
                  "restAPI": Object {
                    "base": "https://opensearch.org/docs/mocked-test-branch/opensearch/rest-api/index/",
                    "indexAPI": Object {
                      "base": "https://opensearch.org/docs/mocked-test-branch/opensearch/rest-api/index-apis/index/",
                      "close": "https://opensearch.org/docs/mocked-test-branch/opensearch/rest-api/index-apis/close-index/",
                      "create": "https://opensearch.org/docs/mocked-test-branch/opensearch/rest-api/index-apis/create-index/",
                      "delete": "https://opensearch.org/docs/mocked-test-branch/opensearch/rest-api/index-apis/delete-index/",
                      "exists": "https://opensearch.org/docs/mocked-test-branch/opensearch/rest-api/index-apis/exists/",
                      "get": "https://opensearch.org/docs/mocked-test-branch/opensearch/rest-api/index-apis/get-index/",
                    },
                  },
                  "searchExperience": Object {
                    "autocomplete": "https://opensearch.org/docs/mocked-test-branch/opensearch/ux/#autocomplete-queries",
                    "base": "https://opensearch.org/docs/mocked-test-branch/opensearch/ux",
                    "highlight_match": "https://opensearch.org/docs/mocked-test-branch/opensearch/ux/#highlight-query-matches",
                    "paginate": "https://opensearch.org/docs/mocked-test-branch/opensearch/ux/#paginate-results",
                    "scroll": "https://opensearch.org/docs/mocked-test-branch/opensearch/ux/#scroll-search",
                    "sort": "https://opensearch.org/docs/mocked-test-branch/opensearch/ux/#sort-results",
                  },
                  "searchTemplate": Object {
                    "advanced_operation": "https://opensearch.org/docs/mocked-test-branch/opensearch/search-template/#advanced-parameter-conversion-with-search-templates",
                    "base": "https://opensearch.org/docs/mocked-test-branch/opensearch/search-template",
                    "create": "https://opensearch.org/docs/mocked-test-branch/opensearch/search-template/#create-search-templates",
                    "execute": "https://opensearch.org/docs/mocked-test-branch/opensearch/search-template/#save-and-execute-search-templates",
                    "manage": "https://opensearch.org/docs/mocked-test-branch/opensearch/search-template/#manage-search-templates",
                    "multiple_search": "https://opensearch.org/docs/mocked-test-branch/opensearch/search-template/#multiple-search-templates",
                  },
                  "snapshotRestore": Object {
                    "base": "https://opensearch.org/docs/mocked-test-branch/opensearch/snapshot-restore",
                    "register": "https://opensearch.org/docs/mocked-test-branch/opensearch/snapshot-restore/#register-repository",
                    "restore_snapshot": "https://opensearch.org/docs/mocked-test-branch/opensearch/snapshot-restore/#restore-snapshots",
                    "security_plugin": "https://opensearch.org/docs/mocked-test-branch/opensearch/snapshot-restore/#security-plugin-considerations",
                    "take_snapshot": "https://opensearch.org/docs/mocked-test-branch/opensearch/snapshot-restore/#take-snapshots",
                  },
                  "supportedUnits": "https://opensearch.org/docs/mocked-test-branch/opensearch/units",
                },
                "opensearchDashboards": Object {
                  "browser": "https://opensearch.org/docs/mocked-test-branch/dashboards/browser-compatibility",
                  "dataSource": Object {
                    "guide": "https://opensearch.org/docs/mocked-test-branch/dashboards/discover/multi-data-sources/",
                  },
                  "devTools": "https://opensearch.org/docs/mocked-test-branch/dashboards/dev-tools/index-dev/",
                  "dql": Object {
                    "base": "https://opensearch.org/docs/mocked-test-branch/dashboards/dql",
                    "boolean_query": "https://opensearch.org/docs/mocked-test-branch/dashboards/dql/#boolean-query",
                    "date_query": "https://opensearch.org/docs/mocked-test-branch/dashboards/dql/#date-and-range-queries",
                    "nested_query": "https://opensearch.org/docs/mocked-test-branch/dashboards/dql/#nested-field-query",
                    "terms_query": "https://opensearch.org/docs/mocked-test-branch/dashboards/dql/#terms-query",
                  },
                  "ganttCharts": "https://opensearch.org/docs/mocked-test-branch/dashboards/gantt",
                  "installation": Object {
                    "base": "https://opensearch.org/docs/mocked-test-branch/dashboards/install/index/",
                    "docker": "https://opensearch.org/docs/mocked-test-branch/dashboards/install/docker/",
                    "helm": "https://opensearch.org/docs/mocked-test-branch/dashboards/install/helm/",
                    "plugins": "https://opensearch.org/docs/mocked-test-branch/dashboards/install/plugins/",
                    "tar": "https://opensearch.org/docs/mocked-test-branch/dashboards/install/tar/",
                    "tls": "https://opensearch.org/docs/mocked-test-branch/dashboards/install/tls/",
                  },
                  "introduction": "https://opensearch.org/docs/mocked-test-branch/dashboards/index/",
                  "management": Object {
                    "advancedSettings": "https://opensearch.org/docs/mocked-test-branch/dashboards/management/advanced-settings/",
                  },
                  "mapTiles": "https://opensearch.org/docs/mocked-test-branch/dashboards/maptiles",
                  "notebooks": Object {
                    "base": "https://opensearch.org/docs/mocked-test-branch/dashboards/notebooks",
                    "create_report": "https://opensearch.org/docs/mocked-test-branch/dashboards/notebooks/#create-a-report",
                    "notebook_tutorial": "https://opensearch.org/docs/mocked-test-branch/dashboards/notebooks/#get-started-with-notebooks",
                    "paragraph_tutorial": "https://opensearch.org/docs/mocked-test-branch/dashboards/notebooks/#paragraph-actions",
                    "sample_notebook": "https://opensearch.org/docs/mocked-test-branch/dashboards/notebooks/#sample-notebooks",
                  },
                  "reporting": "https://opensearch.org/docs/mocked-test-branch/dashboards/reporting",
                  "visualize": Object {
                    "guide": "https://opensearch.org/docs/mocked-test-branchvisualize/viz-index/",
                  },
                },
              },
            },
            "embeddable": Object {
              "EmbeddablePanel": [MockFunction],
              "extract": [MockFunction],
              "getEmbeddableFactories": [MockFunction],
              "getEmbeddableFactory": [MockFunction],
              "getEmbeddablePanel": [MockFunction],
              "getStateTransfer": [MockFunction],
              "inject": [MockFunction],
              "telemetry": [MockFunction],
            },
            "fatalErrors": Object {
              "add": [MockFunction],
              "get$": [MockFunction],
            },
            "history": Object {
              "location": Object {
                "pathname": "",
              },
              "replace": [MockFunction],
            },
            "http": Object {
              "addLoadingCountSource": [MockFunction],
              "anonymousPaths": Object {
                "isAnonymous": [MockFunction],
                "register": [MockFunction],
              },
              "basePath": BasePath {
                "basePath": "",
                "clientBasePath": "",
                "get": [Function],
                "getBasePath": [Function],
                "prepend": [Function],
                "remove": [Function],
                "serverBasePath": "",
              },
              "delete": [MockFunction],
              "fetch": [MockFunction],
              "get": [MockFunction],
              "getLoadingCount$": [MockFunction],
              "head": [MockFunction],
              "intercept": [MockFunction],
              "options": [MockFunction],
              "patch": [MockFunction],
              "post": [MockFunction],
              "put": [MockFunction],
            },
            "i18n": Object {
              "Context": [MockFunction],
            },
            "injectedMetadata": Object {
              "getBranding": [MockFunction],
              "getInjectedVar": [MockFunction],
            },
            "notifications": Object {
              "toasts": Object {
                "add": [MockFunction],
                "addDanger": [MockFunction],
                "addError": [MockFunction],
                "addInfo": [MockFunction],
                "addSuccess": [MockFunction],
                "addWarning": [MockFunction],
                "get$": [MockFunction],
                "remove": [MockFunction],
              },
            },
            "opensearchDashboardsVersion": "3.0.0",
            "osdUrlStateStorage": Object {
              "flush": [MockFunction],
              "get": [MockFunction] {
                "calls": Array [
                  Array [
                    "_g",
                  ],
                ],
                "results": Array [
                  Object {
                    "type": "return",
                    "value": Object {
                      "linked": false,
                    },
                  },
                ],
              },
              "set": [MockFunction],
            },
            "overlays": Object {
              "banners": Object {
                "add": [MockFunction],
                "get$": [MockFunction],
                "getComponent": [MockFunction],
                "remove": [MockFunction],
                "replace": [MockFunction],
              },
              "openConfirm": [MockFunction],
              "openFlyout": [MockFunction],
              "openModal": [MockFunction],
              "sidecar": Object {
                "getSidecarConfig$": [MockFunction],
                "hide": [MockFunction],
                "open": [MockFunction],
                "setSidecarConfig": [MockFunction],
                "show": [MockFunction],
              },
            },
            "savedObjects": Object {
              "client": Object {
                "bulkCreate": [MockFunction],
                "bulkGet": [MockFunction],
                "bulkUpdate": [MockFunction],
                "create": [MockFunction],
                "delete": [MockFunction],
                "find": [MockFunction],
                "get": [MockFunction],
                "setCurrentWorkspace": [MockFunction],
                "update": [MockFunction],
              },
            },
            "savedObjectsClient": Object {
              "find": [Function],
            },
            "savedObjectsPublic": Object {
              "settings": Object {
                "getListingLimit": [Function],
                "getPerPage": [Function],
              },
            },
            "toastNotifications": Object {
              "add": [MockFunction],
              "addDanger": [MockFunction],
              "addError": [MockFunction],
              "addInfo": [MockFunction],
              "addSuccess": [MockFunction],
              "addWarning": [MockFunction],
              "get$": [MockFunction],
              "remove": [MockFunction],
            },
            "uiSettings": Object {
              "get": [MockFunction] {
                "calls": Array [
                  Array [
                    "dateFormat",
                  ],
                ],
                "results": Array [
                  Object {
                    "type": "return",
                    "value": undefined,
                  },
                ],
              },
              "get$": [MockFunction],
              "getAll": [MockFunction],
              "getSaved$": [MockFunction],
              "getUpdate$": [MockFunction],
              "getUpdateErrors$": [MockFunction],
              "isCustom": [MockFunction],
              "isDeclared": [MockFunction],
              "isDefault": [MockFunction],
              "isOverridden": [MockFunction],
              "overrideLocalDefault": [MockFunction],
              "remove": [MockFunction],
              "set": [MockFunction],
            },
            "usageCollection": Object {
              "METRIC_TYPE": Object {
                "APPLICATION_USAGE": "application_usage",
                "CLICK": "click",
                "COUNT": "count",
                "LOADED": "loaded",
                "USER_AGENT": "user_agent",
              },
              "__LEGACY": Object {
                "appChanged": [MockFunction],
              },
              "allowTrackUserAgent": [MockFunction],
              "reportUiStats": [MockFunction],
            },
            "workspaces": Object {
              "currentWorkspace$": BehaviorSubject {
                "_isScalar": false,
                "_value": null,
                "closed": false,
                "hasError": false,
                "isStopped": false,
                "observers": Array [],
                "thrownError": null,
              },
              "currentWorkspaceId$": BehaviorSubject {
                "_isScalar": false,
                "_value": "",
                "closed": false,
                "hasError": false,
                "isStopped": false,
                "observers": Array [],
                "thrownError": null,
              },
              "initialized$": BehaviorSubject {
                "_isScalar": false,
                "_value": false,
                "closed": false,
                "hasError": false,
                "isStopped": false,
                "observers": Array [],
                "thrownError": null,
              },
              "workspaceList$": BehaviorSubject {
                "_isScalar": false,
                "_value": Array [],
                "closed": false,
                "hasError": false,
                "isStopped": false,
                "observers": Array [],
                "thrownError": null,
              },
            },
          }
        }
      >
        <DashboardListing>
          <TableListView
            entityName="dashboard"
            entityNamePlural="dashboards"
            findItems={[Function]}
            headingId="dashboardListingHeading"
            initialFilter=""
            initialPageSize={10}
            listingLimit={100}
            noItemsFragment={
              <EuiEmptyPrompt
                iconType="dashboardApp"
                title={
                  <h1
                    id="dashboardListingHeading"
                  >
                    <FormattedMessage
                      defaultMessage="Looks like you don't have any dashboards."
                      id="dashboard.listing.noItemsMessage"
                      values={Object {}}
                    />
                  </h1>
                }
              />
            }
            tableColumns={
              Array [
                Object {
                  "field": "title",
                  "name": "Title",
                  "render": [Function],
                  "sortable": true,
                },
                Object {
                  "dataType": "string",
                  "field": "type",
                  "name": "Type",
                  "sortable": true,
                },
                Object {
                  "dataType": "string",
                  "field": "description",
                  "name": "Description",
                  "sortable": true,
                },
                Object {
                  "data-test-subj": "updated-at",
                  "dataType": "date",
                  "description": "Last update of the saved object",
                  "field": "updated_at",
                  "name": "Last updated",
                  "render": [Function],
                  "sortable": true,
                },
              ]
            }
            tableListTitle="Dashboards"
            toastNotifications={
              Object {
                "add": [MockFunction],
                "addDanger": [MockFunction],
                "addError": [MockFunction],
                "addInfo": [MockFunction],
                "addSuccess": [MockFunction],
                "addWarning": [MockFunction],
                "get$": [MockFunction],
                "remove": [MockFunction],
              }
            }
          >
            <EuiPage
              className="itemListing__page"
              data-test-subj="dashboardLandingPage"
              restrictWidth={true}
            >
              <div
                className="euiPage euiPage--paddingMedium euiPage--grow euiPage--restrictWidth-default itemListing__page"
                data-test-subj="dashboardLandingPage"
              >
                <EuiPageBody
                  aria-labelledby="dashboardListingHeading"
                  component="main"
                >
                  <main
                    aria-labelledby="dashboardListingHeading"
                    className="euiPageBody euiPageBody--borderRadiusNone"
                  >
                    <EuiPageContent
                      horizontalPosition="center"
                    >
                      <EuiPanel
                        className="euiPageContent euiPageContent--horizontalCenter"
                        paddingSize="l"
                        role="main"
                      >
                        <div
                          className="euiPanel euiPanel--paddingLarge euiPanel--borderRadiusMedium euiPanel--plain euiPanel--hasShadow euiPageContent euiPageContent--horizontalCenter"
                          role="main"
                        >
                          <div>
                            <EuiFlexGroup
                              alignItems="flexEnd"
                              data-test-subj="top-nav"
                              justifyContent="spaceBetween"
                            >
                              <div
                                className="euiFlexGroup euiFlexGroup--gutterLarge euiFlexGroup--alignItemsFlexEnd euiFlexGroup--justifyContentSpaceBetween euiFlexGroup--directionRow euiFlexGroup--responsive"
                                data-test-subj="top-nav"
                              >
                                <EuiFlexItem
                                  grow={false}
                                >
                                  <div
                                    className="euiFlexItem euiFlexItem--flexGrowZero"
                                  >
                                    <EuiTitle
                                      size="l"
                                    >
                                      <h1
                                        className="euiTitle euiTitle--large"
                                        id="dashboardListingHeading"
                                      >
                                        Dashboards
                                      </h1>
                                    </EuiTitle>
                                  </div>
                                </EuiFlexItem>
                              </div>
                            </EuiFlexGroup>
                            <EuiSpacer
                              size="m"
                            >
                              <div
                                className="euiSpacer euiSpacer--m"
                              />
                            </EuiSpacer>
                            <EuiInMemoryTable
                              columns={
                                Array [
                                  Object {
                                    "field": "title",
                                    "name": "Title",
                                    "render": [Function],
                                    "sortable": true,
                                  },
                                  Object {
                                    "dataType": "string",
                                    "field": "type",
                                    "name": "Type",
                                    "sortable": true,
                                  },
                                  Object {
                                    "dataType": "string",
                                    "field": "description",
                                    "name": "Description",
                                    "sortable": true,
                                  },
                                  Object {
                                    "data-test-subj": "updated-at",
                                    "dataType": "date",
                                    "description": "Last update of the saved object",
                                    "field": "updated_at",
                                    "name": "Last updated",
                                    "render": [Function],
                                    "sortable": true,
                                  },
                                ]
                              }
                              data-test-subj="itemsInMemTable"
                              itemId="id"
                              items={
                                Array [
                                  Object {
                                    "appId": "1",
                                    "description": "dashboard0 desc",
                                    "editUrl": undefined,
                                    "id": "dashboard0",
                                    "title": "dashboard0",
                                    "type": "dashboardSavedObjects",
                                    "updated_at": undefined,
                                    "viewUrl": undefined,
                                  },
                                  Object {
                                    "appId": "1",
                                    "description": "dashboard1 desc",
                                    "editUrl": undefined,
                                    "id": "dashboard1",
                                    "title": "dashboard1",
                                    "type": "dashboardSavedObjects",
                                    "updated_at": undefined,
                                    "viewUrl": undefined,
                                  },
                                ]
                              }
                              loading={false}
                              message={
                                <FormattedMessage
                                  defaultMessage="No {entityNamePlural} matched your search."
                                  id="opensearch-dashboards-react.tableListView.listing.noMatchedItemsMessage"
                                  values={
                                    Object {
                                      "entityNamePlural": "dashboards",
                                    }
                                  }
                                />
                              }
                              pagination={
                                Object {
                                  "initialPageIndex": 0,
                                  "initialPageSize": 10,
                                  "pageSizeOptions": Array [
                                    10,
                                    20,
                                    50,
                                  ],
                                }
                              }
                              responsive={true}
                              search={
                                Object {
                                  "box": Object {
                                    "incremental": true,
                                  },
                                  "defaultQuery": "",
                                  "onChange": [Function],
                                  "toolsLeft": undefined,
                                }
                              }
                              sorting={true}
                              tableLayout="fixed"
                            >
                              <div>
                                <EuiSearchBar
                                  box={
                                    Object {
                                      "incremental": true,
                                    }
                                  }
                                  defaultQuery=""
                                  onChange={[Function]}
                                >
                                  <EuiFlexGroup
                                    alignItems="center"
                                    gutterSize="m"
                                    wrap={true}
                                  >
                                    <div
                                      className="euiFlexGroup euiFlexGroup--gutterMedium euiFlexGroup--alignItemsCenter euiFlexGroup--directionRow euiFlexGroup--responsive euiFlexGroup--wrap"
                                    >
                                      <EuiFlexItem
                                        className="euiSearchBar__searchHolder"
                                        grow={true}
                                      >
                                        <div
                                          className="euiFlexItem euiSearchBar__searchHolder"
                                        >
                                          <EuiSearchBox
                                            incremental={true}
                                            isInvalid={false}
                                            onSearch={[Function]}
                                            placeholder="Search..."
                                            query=""
                                          >
                                            <EuiFieldSearch
                                              aria-label="This is a search bar. As you type, the results lower in the page will automatically filter."
                                              compressed={false}
                                              defaultValue=""
                                              fullWidth={true}
                                              incremental={true}
                                              inputRef={[Function]}
                                              isClearable={true}
                                              isInvalid={false}
                                              isLoading={false}
                                              onSearch={[Function]}
                                              placeholder="Search..."
                                            >
                                              <EuiFormControlLayout
                                                compressed={false}
                                                fullWidth={true}
                                                icon="search"
                                                isLoading={false}
                                              >
                                                <div
                                                  className="euiFormControlLayout euiFormControlLayout--fullWidth"
                                                >
                                                  <div
                                                    className="euiFormControlLayout__childrenWrapper"
                                                  >
                                                    <EuiValidatableControl
                                                      isInvalid={false}
                                                    >
                                                      <input
                                                        aria-label="This is a search bar. As you type, the results lower in the page will automatically filter."
                                                        className="euiFieldSearch euiFieldSearch--fullWidth"
                                                        defaultValue=""
                                                        onKeyUp={[Function]}
                                                        placeholder="Search..."
                                                        type="search"
                                                      />
                                                    </EuiValidatableControl>
                                                    <EuiFormControlLayoutIcons
                                                      compressed={false}
                                                      icon="search"
                                                      isLoading={false}
                                                    >
                                                      <div
                                                        className="euiFormControlLayoutIcons"
                                                      >
                                                        <EuiFormControlLayoutCustomIcon
                                                          size="m"
                                                          type="search"
                                                        >
                                                          <span
                                                            className="euiFormControlLayoutCustomIcon"
                                                          >
                                                            <EuiIcon
                                                              aria-hidden="true"
                                                              className="euiFormControlLayoutCustomIcon__icon"
                                                              size="m"
                                                              type="search"
                                                            >
                                                              <span
                                                                aria-hidden="true"
                                                                className="euiFormControlLayoutCustomIcon__icon"
                                                                data-euiicon-type="search"
                                                                size="m"
                                                              />
                                                            </EuiIcon>
                                                          </span>
                                                        </EuiFormControlLayoutCustomIcon>
                                                      </div>
                                                    </EuiFormControlLayoutIcons>
                                                  </div>
                                                </div>
                                              </EuiFormControlLayout>
                                            </EuiFieldSearch>
                                          </EuiSearchBox>
                                        </div>
                                      </EuiFlexItem>
                                    </div>
                                  </EuiFlexGroup>
                                </EuiSearchBar>
                                <EuiSpacer
                                  size="l"
                                >
                                  <div
                                    className="euiSpacer euiSpacer--l"
                                  />
                                </EuiSpacer>
                                <EuiBasicTable
                                  columns={
                                    Array [
                                      Object {
                                        "field": "title",
                                        "name": "Title",
                                        "render": [Function],
                                        "sortable": true,
                                      },
                                      Object {
                                        "dataType": "string",
                                        "field": "type",
                                        "name": "Type",
                                        "sortable": true,
                                      },
                                      Object {
                                        "dataType": "string",
                                        "field": "description",
                                        "name": "Description",
                                        "sortable": true,
                                      },
                                      Object {
                                        "data-test-subj": "updated-at",
                                        "dataType": "date",
                                        "description": "Last update of the saved object",
                                        "field": "updated_at",
                                        "name": "Last updated",
                                        "render": [Function],
                                        "sortable": true,
                                      },
                                    ]
                                  }
                                  data-test-subj="itemsInMemTable"
                                  itemId="id"
                                  items={
                                    Array [
                                      Object {
                                        "appId": "1",
                                        "description": "dashboard0 desc",
                                        "editUrl": undefined,
                                        "id": "dashboard0",
                                        "title": "dashboard0",
                                        "type": "dashboardSavedObjects",
                                        "updated_at": undefined,
                                        "viewUrl": undefined,
                                      },
                                      Object {
                                        "appId": "1",
                                        "description": "dashboard1 desc",
                                        "editUrl": undefined,
                                        "id": "dashboard1",
                                        "title": "dashboard1",
                                        "type": "dashboardSavedObjects",
                                        "updated_at": undefined,
                                        "viewUrl": undefined,
                                      },
                                    ]
                                  }
                                  loading={false}
                                  noItemsMessage={
                                    <FormattedMessage
                                      defaultMessage="No {entityNamePlural} matched your search."
                                      id="opensearch-dashboards-react.tableListView.listing.noMatchedItemsMessage"
                                      values={
                                        Object {
                                          "entityNamePlural": "dashboards",
                                        }
                                      }
                                    />
                                  }
                                  onChange={[Function]}
                                  pagination={
                                    Object {
                                      "hidePerPageOptions": undefined,
                                      "pageIndex": 0,
                                      "pageSize": 10,
                                      "pageSizeOptions": Array [
                                        10,
                                        20,
                                        50,
                                      ],
                                      "totalItemCount": 2,
                                    }
                                  }
                                  responsive={true}
                                  sorting={
                                    Object {
                                      "allowNeutralSort": true,
                                      "sort": undefined,
                                    }
                                  }
                                  tableLayout="fixed"
                                >
                                  <div
                                    className="euiBasicTable"
                                    data-test-subj="itemsInMemTable"
                                  >
                                    <div>
                                      <EuiTableHeaderMobile>
                                        <div
                                          className="euiTableHeaderMobile"
                                        >
                                          <EuiFlexGroup
                                            alignItems="baseline"
                                            justifyContent="spaceBetween"
                                            responsive={false}
                                          >
                                            <div
                                              className="euiFlexGroup euiFlexGroup--gutterLarge euiFlexGroup--alignItemsBaseline euiFlexGroup--justifyContentSpaceBetween euiFlexGroup--directionRow"
                                            >
                                              <EuiFlexItem
                                                grow={false}
                                              >
                                                <div
                                                  className="euiFlexItem euiFlexItem--flexGrowZero"
                                                />
                                              </EuiFlexItem>
                                              <EuiFlexItem
                                                grow={false}
                                              >
                                                <div
                                                  className="euiFlexItem euiFlexItem--flexGrowZero"
                                                >
                                                  <EuiTableSortMobile
                                                    items={
                                                      Array [
                                                        Object {
                                                          "isSortAscending": undefined,
                                                          "isSorted": false,
                                                          "key": "_data_s_title_0",
                                                          "name": "Title",
                                                          "onSort": [Function],
                                                        },
                                                        Object {
                                                          "isSortAscending": undefined,
                                                          "isSorted": false,
                                                          "key": "_data_s_type_1",
                                                          "name": "Type",
                                                          "onSort": [Function],
                                                        },
                                                        Object {
                                                          "isSortAscending": undefined,
                                                          "isSorted": false,
                                                          "key": "_data_s_description_2",
                                                          "name": "Description",
                                                          "onSort": [Function],
                                                        },
                                                        Object {
                                                          "isSortAscending": undefined,
                                                          "isSorted": false,
                                                          "key": "_data_s_updated_at_3",
                                                          "name": "Last updated",
                                                          "onSort": [Function],
                                                        },
                                                      ]
                                                    }
                                                  >
                                                    <div
                                                      className="euiTableSortMobile"
                                                    >
                                                      <EuiPopover
                                                        anchorPosition="downRight"
                                                        button={
                                                          <EuiButtonEmpty
                                                            flush="right"
                                                            iconSide="right"
                                                            iconType="arrowDown"
                                                            onClick={[Function]}
                                                            size="xs"
                                                          >
                                                            <EuiI18n
                                                              default="Sorting"
                                                              token="euiTableSortMobile.sorting"
                                                            />
                                                          </EuiButtonEmpty>
                                                        }
                                                        closePopover={[Function]}
                                                        display="inlineBlock"
                                                        hasArrow={true}
                                                        isOpen={false}
                                                        ownFocus={true}
                                                        panelPaddingSize="none"
                                                      >
                                                        <div
                                                          className="euiPopover euiPopover--anchorDownRight"
                                                        >
                                                          <div
                                                            className="euiPopover__anchor"
                                                          >
                                                            <EuiButtonEmpty
                                                              flush="right"
                                                              iconSide="right"
                                                              iconType="arrowDown"
                                                              onClick={[Function]}
                                                              size="xs"
                                                            >
                                                              <button
                                                                className="euiButtonEmpty euiButtonEmpty--primary euiButtonEmpty--xSmall euiButtonEmpty--flushRight"
                                                                disabled={false}
                                                                onClick={[Function]}
                                                                type="button"
                                                              >
                                                                <EuiButtonContent
                                                                  className="euiButtonEmpty__content"
                                                                  iconSide="right"
                                                                  iconSize="s"
                                                                  iconType="arrowDown"
                                                                  textProps={
                                                                    Object {
                                                                      "className": "euiButtonEmpty__text",
                                                                    }
                                                                  }
                                                                >
                                                                  <span
                                                                    className="euiButtonContent euiButtonContent--iconRight euiButtonEmpty__content"
                                                                  >
                                                                    <EuiIcon
                                                                      className="euiButtonContent__icon"
                                                                      color="inherit"
                                                                      size="s"
                                                                      type="arrowDown"
                                                                    >
                                                                      <span
                                                                        className="euiButtonContent__icon"
                                                                        color="inherit"
                                                                        data-euiicon-type="arrowDown"
                                                                        size="s"
                                                                      />
                                                                    </EuiIcon>
                                                                    <span
                                                                      className="euiButtonEmpty__text"
                                                                    >
                                                                      <EuiI18n
                                                                        default="Sorting"
                                                                        token="euiTableSortMobile.sorting"
                                                                      >
                                                                        Sorting
                                                                      </EuiI18n>
                                                                    </span>
                                                                  </span>
                                                                </EuiButtonContent>
                                                              </button>
                                                            </EuiButtonEmpty>
                                                          </div>
                                                        </div>
                                                      </EuiPopover>
                                                    </div>
                                                  </EuiTableSortMobile>
                                                </div>
                                              </EuiFlexItem>
                                            </div>
                                          </EuiFlexGroup>
                                        </div>
                                      </EuiTableHeaderMobile>
                                      <EuiTable
                                        id="__table_generated-id"
                                        responsive={true}
                                        tableLayout="fixed"
                                      >
                                        <table
                                          className="euiTable euiTable--responsive"
                                          id="__table_generated-id"
                                          tabIndex={-1}
                                        >
                                          <EuiScreenReaderOnly>
                                            <caption
                                              className="euiScreenReaderOnly euiTableCaption"
                                            >
                                              <EuiDelayRender
                                                delay={500}
                                              />
                                            </caption>
                                          </EuiScreenReaderOnly>
                                          <EuiTableHeader>
                                            <thead>
                                              <tr>
                                                <EuiTableHeaderCell
                                                  align="left"
                                                  data-test-subj="tableHeaderCell_title_0"
                                                  isSorted={false}
                                                  key="_data_h_title_0"
                                                  onSort={[Function]}
                                                >
                                                  <th
                                                    aria-live="polite"
                                                    aria-sort="none"
                                                    className="euiTableHeaderCell"
                                                    data-test-subj="tableHeaderCell_title_0"
                                                    role="columnheader"
                                                    scope="col"
                                                    style={
                                                      Object {
                                                        "width": undefined,
                                                      }
                                                    }
                                                  >
                                                    <button
                                                      className="euiTableHeaderButton"
                                                      data-test-subj="tableHeaderSortButton"
                                                      onClick={[Function]}
                                                      type="button"
                                                    >
                                                      <CellContents
                                                        className="euiTableCellContent"
                                                        isSorted={false}
                                                        showSortMsg={true}
                                                      >
                                                        <span
                                                          className="euiTableCellContent"
                                                        >
                                                          <EuiInnerText>
                                                            <EuiI18n
                                                              default="{innerText}; {description}"
                                                              token="euiTableHeaderCell.titleTextWithDesc"
                                                              values={
                                                                Object {
                                                                  "description": undefined,
                                                                  "innerText": undefined,
                                                                }
                                                              }
                                                            >
                                                              <span
                                                                className="euiTableCellContent__text"
                                                              >
                                                                Title
                                                              </span>
                                                            </EuiI18n>
                                                          </EuiInnerText>
                                                        </span>
                                                      </CellContents>
                                                    </button>
                                                  </th>
                                                </EuiTableHeaderCell>
                                                <EuiTableHeaderCell
                                                  align="left"
                                                  data-test-subj="tableHeaderCell_type_1"
                                                  isSorted={false}
                                                  key="_data_h_type_1"
                                                  onSort={[Function]}
                                                >
                                                  <th
                                                    aria-live="polite"
                                                    aria-sort="none"
                                                    className="euiTableHeaderCell"
                                                    data-test-subj="tableHeaderCell_type_1"
                                                    role="columnheader"
                                                    scope="col"
                                                    style={
                                                      Object {
                                                        "width": undefined,
                                                      }
                                                    }
                                                  >
                                                    <button
                                                      className="euiTableHeaderButton"
                                                      data-test-subj="tableHeaderSortButton"
                                                      onClick={[Function]}
                                                      type="button"
                                                    >
                                                      <CellContents
                                                        className="euiTableCellContent"
                                                        isSorted={false}
                                                        showSortMsg={true}
                                                      >
                                                        <span
                                                          className="euiTableCellContent"
                                                        >
                                                          <EuiInnerText>
                                                            <EuiI18n
                                                              default="{innerText}; {description}"
                                                              token="euiTableHeaderCell.titleTextWithDesc"
                                                              values={
                                                                Object {
                                                                  "description": undefined,
                                                                  "innerText": undefined,
                                                                }
                                                              }
                                                            >
                                                              <span
                                                                className="euiTableCellContent__text"
                                                              >
                                                                Type
                                                              </span>
                                                            </EuiI18n>
                                                          </EuiInnerText>
                                                        </span>
                                                      </CellContents>
                                                    </button>
                                                  </th>
                                                </EuiTableHeaderCell>
                                                <EuiTableHeaderCell
                                                  align="left"
                                                  data-test-subj="tableHeaderCell_description_2"
                                                  isSorted={false}
                                                  key="_data_h_description_2"
                                                  onSort={[Function]}
                                                >
                                                  <th
                                                    aria-live="polite"
                                                    aria-sort="none"
                                                    className="euiTableHeaderCell"
                                                    data-test-subj="tableHeaderCell_description_2"
                                                    role="columnheader"
                                                    scope="col"
                                                    style={
                                                      Object {
                                                        "width": undefined,
                                                      }
                                                    }
                                                  >
                                                    <button
                                                      className="euiTableHeaderButton"
                                                      data-test-subj="tableHeaderSortButton"
                                                      onClick={[Function]}
                                                      type="button"
                                                    >
                                                      <CellContents
                                                        className="euiTableCellContent"
                                                        isSorted={false}
                                                        showSortMsg={true}
                                                      >
                                                        <span
                                                          className="euiTableCellContent"
                                                        >
                                                          <EuiInnerText>
                                                            <EuiI18n
                                                              default="{innerText}; {description}"
                                                              token="euiTableHeaderCell.titleTextWithDesc"
                                                              values={
                                                                Object {
                                                                  "description": undefined,
                                                                  "innerText": undefined,
                                                                }
                                                              }
                                                            >
                                                              <span
                                                                className="euiTableCellContent__text"
                                                              >
                                                                Description
                                                              </span>
                                                            </EuiI18n>
                                                          </EuiInnerText>
                                                        </span>
                                                      </CellContents>
                                                    </button>
                                                  </th>
                                                </EuiTableHeaderCell>
                                                <EuiTableHeaderCell
                                                  align="left"
                                                  data-test-subj="tableHeaderCell_updated_at_3"
                                                  description="Last update of the saved object"
                                                  isSorted={false}
                                                  key="_data_h_updated_at_3"
                                                  onSort={[Function]}
                                                >
                                                  <th
                                                    aria-live="polite"
                                                    aria-sort="none"
                                                    className="euiTableHeaderCell"
                                                    data-test-subj="tableHeaderCell_updated_at_3"
                                                    role="columnheader"
                                                    scope="col"
                                                    style={
                                                      Object {
                                                        "width": undefined,
                                                      }
                                                    }
                                                  >
                                                    <button
                                                      className="euiTableHeaderButton"
                                                      data-test-subj="tableHeaderSortButton"
                                                      onClick={[Function]}
                                                      type="button"
                                                    >
                                                      <CellContents
                                                        className="euiTableCellContent"
                                                        description="Last update of the saved object"
                                                        isSorted={false}
                                                        showSortMsg={true}
                                                      >
                                                        <span
                                                          className="euiTableCellContent"
                                                        >
                                                          <EuiInnerText>
                                                            <EuiI18n
                                                              default="{innerText}; {description}"
                                                              token="euiTableHeaderCell.titleTextWithDesc"
                                                              values={
                                                                Object {
                                                                  "description": "Last update of the saved object",
                                                                  "innerText": undefined,
                                                                }
                                                              }
                                                            >
                                                              <span
                                                                className="euiTableCellContent__text"
                                                                title="; Last update of the saved object"
                                                              >
                                                                Last updated
                                                              </span>
                                                            </EuiI18n>
                                                          </EuiInnerText>
                                                          <EuiScreenReaderOnly>
                                                            <span
                                                              className="euiScreenReaderOnly"
                                                            >
                                                              Last update of the saved object
                                                            </span>
                                                          </EuiScreenReaderOnly>
                                                        </span>
                                                      </CellContents>
                                                    </button>
                                                  </th>
                                                </EuiTableHeaderCell>
                                              </tr>
                                            </thead>
                                          </EuiTableHeader>
                                          <EuiTableBody
                                            bodyRef={[Function]}
                                          >
                                            <tbody>
                                              <EuiTableRow
                                                isSelected={false}
                                              >
                                                <tr
                                                  className="euiTableRow"
                                                >
                                                  <EuiTableRowCell
                                                    align="left"
                                                    key="_data_column_title_dashboard0_0"
                                                    mobileOptions={
                                                      Object {
                                                        "header": "Title",
                                                        "render": undefined,
                                                      }
                                                    }
                                                    setScopeRow={false}
                                                    textOnly={false}
                                                  >
                                                    <td
                                                      className="euiTableRowCell"
                                                      style={
                                                        Object {
                                                          "width": undefined,
                                                        }
                                                      }
                                                    >
                                                      <div
                                                        className="euiTableRowCell__mobileHeader euiTableRowCell--hideForDesktop"
                                                      >
                                                        Title
                                                      </div>
                                                      <div
                                                        className="euiTableCellContent euiTableCellContent--overflowingContent"
                                                      >
                                                        <EuiLink
                                                          className=""
                                                          data-test-subj="dashboardListingTitleLink-dashboard0"
                                                          key=".0"
                                                        >
                                                          <button
                                                            className="euiLink euiLink--primary"
                                                            data-test-subj="dashboardListingTitleLink-dashboard0"
                                                            disabled={false}
                                                            type="button"
                                                          >
                                                            dashboard0
                                                          </button>
                                                        </EuiLink>
                                                      </div>
                                                    </td>
                                                  </EuiTableRowCell>
                                                  <EuiTableRowCell
                                                    align="left"
                                                    key="_data_column_type_dashboard0_1"
                                                    mobileOptions={
                                                      Object {
                                                        "header": "Type",
                                                        "render": undefined,
                                                      }
                                                    }
                                                    setScopeRow={false}
                                                    textOnly={true}
                                                  >
                                                    <td
                                                      className="euiTableRowCell"
                                                      style={
                                                        Object {
                                                          "width": undefined,
                                                        }
                                                      }
                                                    >
                                                      <div
                                                        className="euiTableRowCell__mobileHeader euiTableRowCell--hideForDesktop"
                                                      >
                                                        Type
                                                      </div>
                                                      <div
                                                        className="euiTableCellContent"
                                                      >
                                                        <span
                                                          className="euiTableCellContent__text"
                                                        >
                                                          dashboardSavedObjects
                                                        </span>
                                                      </div>
                                                    </td>
                                                  </EuiTableRowCell>
                                                  <EuiTableRowCell
                                                    align="left"
                                                    key="_data_column_description_dashboard0_2"
                                                    mobileOptions={
                                                      Object {
                                                        "header": "Description",
                                                        "render": undefined,
                                                      }
                                                    }
                                                    setScopeRow={false}
                                                    textOnly={true}
                                                  >
                                                    <td
                                                      className="euiTableRowCell"
                                                      style={
                                                        Object {
                                                          "width": undefined,
                                                        }
                                                      }
                                                    >
                                                      <div
                                                        className="euiTableRowCell__mobileHeader euiTableRowCell--hideForDesktop"
                                                      >
                                                        Description
                                                      </div>
                                                      <div
                                                        className="euiTableCellContent"
                                                      >
                                                        <span
                                                          className="euiTableCellContent__text"
                                                        >
                                                          dashboard0 desc
                                                        </span>
                                                      </div>
                                                    </td>
                                                  </EuiTableRowCell>
                                                  <EuiTableRowCell
                                                    align="left"
                                                    data-test-subj="updated-at"
                                                    key="_data_column_updated_at_dashboard0_3"
                                                    mobileOptions={
                                                      Object {
                                                        "header": "Last updated",
                                                        "render": undefined,
                                                      }
                                                    }
                                                    setScopeRow={false}
                                                    textOnly={false}
                                                  >
                                                    <td
                                                      className="euiTableRowCell"
                                                      data-test-subj="updated-at"
                                                      style={
                                                        Object {
                                                          "width": undefined,
                                                        }
                                                      }
                                                    >
                                                      <div
                                                        className="euiTableRowCell__mobileHeader euiTableRowCell--hideForDesktop"
                                                      >
                                                        Last updated
                                                      </div>
                                                      <div
                                                        className="euiTableCellContent euiTableCellContent--overflowingContent"
                                                      />
                                                    </td>
                                                  </EuiTableRowCell>
                                                </tr>
                                              </EuiTableRow>
                                              <EuiTableRow
                                                isSelected={false}
                                              >
                                                <tr
                                                  className="euiTableRow"
                                                >
                                                  <EuiTableRowCell
                                                    align="left"
                                                    key="_data_column_title_dashboard1_0"
                                                    mobileOptions={
                                                      Object {
                                                        "header": "Title",
                                                        "render": undefined,
                                                      }
                                                    }
                                                    setScopeRow={false}
                                                    textOnly={false}
                                                  >
                                                    <td
                                                      className="euiTableRowCell"
                                                      style={
                                                        Object {
                                                          "width": undefined,
                                                        }
                                                      }
                                                    >
                                                      <div
                                                        className="euiTableRowCell__mobileHeader euiTableRowCell--hideForDesktop"
                                                      >
                                                        Title
                                                      </div>
                                                      <div
                                                        className="euiTableCellContent euiTableCellContent--overflowingContent"
                                                      >
                                                        <EuiLink
                                                          className=""
                                                          data-test-subj="dashboardListingTitleLink-dashboard1"
                                                          key=".0"
                                                        >
                                                          <button
                                                            className="euiLink euiLink--primary"
                                                            data-test-subj="dashboardListingTitleLink-dashboard1"
                                                            disabled={false}
                                                            type="button"
                                                          >
                                                            dashboard1
                                                          </button>
                                                        </EuiLink>
                                                      </div>
                                                    </td>
                                                  </EuiTableRowCell>
                                                  <EuiTableRowCell
                                                    align="left"
                                                    key="_data_column_type_dashboard1_1"
                                                    mobileOptions={
                                                      Object {
                                                        "header": "Type",
                                                        "render": undefined,
                                                      }
                                                    }
                                                    setScopeRow={false}
                                                    textOnly={true}
                                                  >
                                                    <td
                                                      className="euiTableRowCell"
                                                      style={
                                                        Object {
                                                          "width": undefined,
                                                        }
                                                      }
                                                    >
                                                      <div
                                                        className="euiTableRowCell__mobileHeader euiTableRowCell--hideForDesktop"
                                                      >
                                                        Type
                                                      </div>
                                                      <div
                                                        className="euiTableCellContent"
                                                      >
                                                        <span
                                                          className="euiTableCellContent__text"
                                                        >
                                                          dashboardSavedObjects
                                                        </span>
                                                      </div>
                                                    </td>
                                                  </EuiTableRowCell>
                                                  <EuiTableRowCell
                                                    align="left"
                                                    key="_data_column_description_dashboard1_2"
                                                    mobileOptions={
                                                      Object {
                                                        "header": "Description",
                                                        "render": undefined,
                                                      }
                                                    }
                                                    setScopeRow={false}
                                                    textOnly={true}
                                                  >
                                                    <td
                                                      className="euiTableRowCell"
                                                      style={
                                                        Object {
                                                          "width": undefined,
                                                        }
                                                      }
                                                    >
                                                      <div
                                                        className="euiTableRowCell__mobileHeader euiTableRowCell--hideForDesktop"
                                                      >
                                                        Description
                                                      </div>
                                                      <div
                                                        className="euiTableCellContent"
                                                      >
                                                        <span
                                                          className="euiTableCellContent__text"
                                                        >
                                                          dashboard1 desc
                                                        </span>
                                                      </div>
                                                    </td>
                                                  </EuiTableRowCell>
                                                  <EuiTableRowCell
                                                    align="left"
                                                    data-test-subj="updated-at"
                                                    key="_data_column_updated_at_dashboard1_3"
                                                    mobileOptions={
                                                      Object {
                                                        "header": "Last updated",
                                                        "render": undefined,
                                                      }
                                                    }
                                                    setScopeRow={false}
                                                    textOnly={false}
                                                  >
                                                    <td
                                                      className="euiTableRowCell"
                                                      data-test-subj="updated-at"
                                                      style={
                                                        Object {
                                                          "width": undefined,
                                                        }
                                                      }
                                                    >
                                                      <div
                                                        className="euiTableRowCell__mobileHeader euiTableRowCell--hideForDesktop"
                                                      >
                                                        Last updated
                                                      </div>
                                                      <div
                                                        className="euiTableCellContent euiTableCellContent--overflowingContent"
                                                      />
                                                    </td>
                                                  </EuiTableRowCell>
                                                </tr>
                                              </EuiTableRow>
                                            </tbody>
                                          </EuiTableBody>
                                        </table>
                                      </EuiTable>
                                    </div>
                                    <PaginationBar
                                      aria-controls="__table_generated-id"
                                      onPageChange={[Function]}
                                      onPageSizeChange={[Function]}
                                      pagination={
                                        Object {
                                          "hidePerPageOptions": undefined,
                                          "pageIndex": 0,
                                          "pageSize": 10,
                                          "pageSizeOptions": Array [
                                            10,
                                            20,
                                            50,
                                          ],
                                          "totalItemCount": 2,
                                        }
                                      }
                                    >
                                      <div>
                                        <EuiSpacer
                                          size="m"
                                        >
                                          <div
                                            className="euiSpacer euiSpacer--m"
                                          />
                                        </EuiSpacer>
                                        <EuiTablePagination
                                          activePage={0}
                                          aria-controls="__table_generated-id"
                                          itemsPerPage={10}
                                          itemsPerPageOptions={
                                            Array [
                                              10,
                                              20,
                                              50,
                                            ]
                                          }
                                          onChangeItemsPerPage={[Function]}
                                          onChangePage={[Function]}
                                          pageCount={1}
                                        >
                                          <EuiFlexGroup
                                            alignItems="center"
                                            justifyContent="spaceBetween"
                                            responsive={false}
                                          >
                                            <div
                                              className="euiFlexGroup euiFlexGroup--gutterLarge euiFlexGroup--alignItemsCenter euiFlexGroup--justifyContentSpaceBetween euiFlexGroup--directionRow"
                                            >
                                              <EuiFlexItem
                                                grow={false}
                                              >
                                                <div
                                                  className="euiFlexItem euiFlexItem--flexGrowZero"
                                                >
                                                  <EuiPopover
                                                    anchorPosition="upRight"
                                                    button={
                                                      <EuiButtonEmpty
                                                        color="text"
                                                        data-test-subj="tablePaginationPopoverButton"
                                                        iconSide="right"
                                                        iconType="arrowDown"
                                                        onClick={[Function]}
                                                        size="xs"
                                                      >
                                                        <EuiI18n
                                                          default="Rows per page"
                                                          token="euiTablePagination.rowsPerPage"
                                                        />
                                                        : 
                                                        10
                                                      </EuiButtonEmpty>
                                                    }
                                                    closePopover={[Function]}
                                                    display="inlineBlock"
                                                    hasArrow={true}
                                                    isOpen={false}
                                                    ownFocus={true}
                                                    panelPaddingSize="none"
                                                  >
                                                    <div
                                                      className="euiPopover euiPopover--anchorUpRight"
                                                    >
                                                      <div
                                                        className="euiPopover__anchor"
                                                      >
                                                        <EuiButtonEmpty
                                                          color="text"
                                                          data-test-subj="tablePaginationPopoverButton"
                                                          iconSide="right"
                                                          iconType="arrowDown"
                                                          onClick={[Function]}
                                                          size="xs"
                                                        >
                                                          <button
                                                            className="euiButtonEmpty euiButtonEmpty--text euiButtonEmpty--xSmall"
                                                            data-test-subj="tablePaginationPopoverButton"
                                                            disabled={false}
                                                            onClick={[Function]}
                                                            type="button"
                                                          >
                                                            <EuiButtonContent
                                                              className="euiButtonEmpty__content"
                                                              iconSide="right"
                                                              iconSize="s"
                                                              iconType="arrowDown"
                                                              textProps={
                                                                Object {
                                                                  "className": "euiButtonEmpty__text",
                                                                }
                                                              }
                                                            >
                                                              <span
                                                                className="euiButtonContent euiButtonContent--iconRight euiButtonEmpty__content"
                                                              >
                                                                <EuiIcon
                                                                  className="euiButtonContent__icon"
                                                                  color="inherit"
                                                                  size="s"
                                                                  type="arrowDown"
                                                                >
                                                                  <span
                                                                    className="euiButtonContent__icon"
                                                                    color="inherit"
                                                                    data-euiicon-type="arrowDown"
                                                                    size="s"
                                                                  />
                                                                </EuiIcon>
                                                                <span
                                                                  className="euiButtonEmpty__text"
                                                                >
                                                                  <EuiI18n
                                                                    default="Rows per page"
                                                                    token="euiTablePagination.rowsPerPage"
                                                                  >
                                                                    Rows per page
                                                                  </EuiI18n>
                                                                  : 
                                                                  10
                                                                </span>
                                                              </span>
                                                            </EuiButtonContent>
                                                          </button>
                                                        </EuiButtonEmpty>
                                                      </div>
                                                    </div>
                                                  </EuiPopover>
                                                </div>
                                              </EuiFlexItem>
                                              <EuiFlexItem
                                                grow={false}
                                              >
                                                <div
                                                  className="euiFlexItem euiFlexItem--flexGrowZero"
                                                >
                                                  <EuiPagination
                                                    activePage={0}
                                                    aria-controls="__table_generated-id"
                                                    onPageClick={[Function]}
                                                    pageCount={1}
                                                  >
                                                    <nav
                                                      className="euiPagination"
                                                    >
                                                      <EuiI18n
                                                        default="Previous page, {page}"
                                                        token="euiPagination.previousPage"
                                                        values={
                                                          Object {
                                                            "page": 0,
                                                          }
                                                        }
                                                      >
                                                        <EuiI18n
                                                          default="Previous page"
                                                          token="euiPagination.disabledPreviousPage"
                                                        >
                                                          <EuiButtonIcon
                                                            aria-label="Previous page"
                                                            color="text"
                                                            data-test-subj="pagination-button-previous"
                                                            disabled={true}
                                                            iconType="arrowLeft"
                                                            onClick={[Function]}
                                                          >
                                                            <button
                                                              aria-label="Previous page"
                                                              className="euiButtonIcon euiButtonIcon--text euiButtonIcon--empty euiButtonIcon--xSmall"
                                                              data-test-subj="pagination-button-previous"
                                                              disabled={true}
                                                              onClick={[Function]}
                                                              type="button"
                                                            >
                                                              <EuiIcon
                                                                aria-hidden="true"
                                                                className="euiButtonIcon__icon"
                                                                color="inherit"
                                                                size="m"
                                                                type="arrowLeft"
                                                              >
                                                                <span
                                                                  aria-hidden="true"
                                                                  className="euiButtonIcon__icon"
                                                                  color="inherit"
                                                                  data-euiicon-type="arrowLeft"
                                                                  size="m"
                                                                />
                                                              </EuiIcon>
                                                            </button>
                                                          </EuiButtonIcon>
                                                        </EuiI18n>
                                                      </EuiI18n>
                                                      <ul
                                                        className="euiPagination__list"
                                                      >
                                                        <PaginationButton
                                                          key="0"
                                                          pageIndex={0}
                                                        >
                                                          <li
                                                            className="euiPagination__item"
                                                          >
                                                            <EuiPaginationButton
                                                              aria-controls="__table_generated-id"
                                                              hideOnMobile={true}
                                                              isActive={true}
                                                              onClick={[Function]}
                                                              pageIndex={0}
                                                              totalPages={1}
                                                            >
                                                              <EuiI18n
                                                                default="Page {page} of {totalPages}"
                                                                token="euiPaginationButton.longPageString"
                                                                values={
                                                                  Object {
                                                                    "page": 1,
                                                                    "totalPages": 1,
                                                                  }
                                                                }
                                                              >
                                                                <EuiI18n
                                                                  default="Page {page}"
                                                                  token="euiPaginationButton.shortPageString"
                                                                  values={
                                                                    Object {
                                                                      "page": 1,
                                                                    }
                                                                  }
                                                                >
                                                                  <EuiButtonEmpty
                                                                    aria-controls="__table_generated-id"
                                                                    aria-current={true}
                                                                    aria-label="Page 1 of 1"
                                                                    className="euiPaginationButton euiPaginationButton-isActive euiPaginationButton--hideOnMobile"
                                                                    color="text"
                                                                    data-test-subj="pagination-button-0"
                                                                    href="#__table_generated-id"
                                                                    isDisabled={true}
                                                                    onClick={[Function]}
                                                                    size="s"
                                                                  >
                                                                    <button
                                                                      aria-controls="__table_generated-id"
                                                                      aria-current={true}
                                                                      aria-label="Page 1 of 1"
                                                                      className="euiButtonEmpty euiButtonEmpty--text euiButtonEmpty--small euiButtonEmpty-isDisabled euiPaginationButton euiPaginationButton-isActive euiPaginationButton--hideOnMobile"
                                                                      data-test-subj="pagination-button-0"
                                                                      disabled={true}
                                                                      onClick={[Function]}
                                                                      type="button"
                                                                    >
                                                                      <EuiButtonContent
                                                                        className="euiButtonEmpty__content"
                                                                        iconSide="left"
                                                                        iconSize="m"
                                                                        textProps={
                                                                          Object {
                                                                            "className": "euiButtonEmpty__text",
                                                                          }
                                                                        }
                                                                      >
                                                                        <span
                                                                          className="euiButtonContent euiButtonEmpty__content"
                                                                        >
                                                                          <span
                                                                            className="euiButtonEmpty__text"
                                                                          >
                                                                            1
                                                                          </span>
                                                                        </span>
                                                                      </EuiButtonContent>
                                                                    </button>
                                                                  </EuiButtonEmpty>
                                                                </EuiI18n>
                                                              </EuiI18n>
                                                            </EuiPaginationButton>
                                                          </li>
                                                        </PaginationButton>
                                                      </ul>
                                                      <EuiI18n
                                                        default="Next page, {page}"
                                                        token="euiPagination.nextPage"
                                                        values={
                                                          Object {
                                                            "page": 2,
                                                          }
                                                        }
                                                      >
                                                        <EuiI18n
                                                          default="Next page"
                                                          token="euiPagination.disabledNextPage"
                                                        >
                                                          <EuiButtonIcon
                                                            aria-label="Next page"
                                                            color="text"
                                                            data-test-subj="pagination-button-next"
                                                            disabled={true}
                                                            iconType="arrowRight"
                                                            onClick={[Function]}
                                                          >
                                                            <button
                                                              aria-label="Next page"
                                                              className="euiButtonIcon euiButtonIcon--text euiButtonIcon--empty euiButtonIcon--xSmall"
                                                              data-test-subj="pagination-button-next"
                                                              disabled={true}
                                                              onClick={[Function]}
                                                              type="button"
                                                            >
                                                              <EuiIcon
                                                                aria-hidden="true"
                                                                className="euiButtonIcon__icon"
                                                                color="inherit"
                                                                size="m"
                                                                type="arrowRight"
                                                              >
                                                                <span
                                                                  aria-hidden="true"
                                                                  className="euiButtonIcon__icon"
                                                                  color="inherit"
                                                                  data-euiicon-type="arrowRight"
                                                                  size="m"
                                                                />
                                                              </EuiIcon>
                                                            </button>
                                                          </EuiButtonIcon>
                                                        </EuiI18n>
                                                      </EuiI18n>
                                                    </nav>
                                                  </EuiPagination>
                                                </div>
                                              </EuiFlexItem>
                                            </div>
                                          </EuiFlexGroup>
                                        </EuiTablePagination>
                                      </div>
                                    </PaginationBar>
                                  </div>
                                </EuiBasicTable>
                              </div>
                            </EuiInMemoryTable>
                          </div>
                        </div>
                      </EuiPanel>
                    </EuiPageContent>
                  </main>
                </EuiPageBody>
              </div>
            </EuiPage>
          </TableListView>
        </DashboardListing>
      </Provider>
    </PseudoLocaleWrapper>
  </IntlProvider>
</I18nProvider>
`;

exports[`dashboard listing render table listing with initial filters from URL 1`] = `
<I18nProvider>
  <IntlProvider
    defaultLocale="en"
    formats={
      Object {
        "date": Object {
          "full": Object {
            "day": "numeric",
            "month": "long",
            "weekday": "long",
            "year": "numeric",
          },
          "long": Object {
            "day": "numeric",
            "month": "long",
            "year": "numeric",
          },
          "medium": Object {
            "day": "numeric",
            "month": "short",
            "year": "numeric",
          },
          "short": Object {
            "day": "numeric",
            "month": "numeric",
            "year": "2-digit",
          },
        },
        "number": Object {
          "currency": Object {
            "style": "currency",
          },
          "percent": Object {
            "style": "percent",
          },
        },
        "relative": Object {
          "days": Object {
            "units": "day",
          },
          "hours": Object {
            "units": "hour",
          },
          "minutes": Object {
            "units": "minute",
          },
          "months": Object {
            "units": "month",
          },
          "seconds": Object {
            "units": "second",
          },
          "years": Object {
            "units": "year",
          },
        },
        "time": Object {
          "full": Object {
            "hour": "numeric",
            "minute": "numeric",
            "second": "numeric",
            "timeZoneName": "short",
          },
          "long": Object {
            "hour": "numeric",
            "minute": "numeric",
            "second": "numeric",
            "timeZoneName": "short",
          },
          "medium": Object {
            "hour": "numeric",
            "minute": "numeric",
            "second": "numeric",
          },
          "short": Object {
            "hour": "numeric",
            "minute": "numeric",
          },
        },
      }
    }
    locale="en"
    messages={Object {}}
    textComponent={Symbol(react.fragment)}
  >
    <PseudoLocaleWrapper>
      <Provider
        services={
          Object {
            "application": Object {
              "applications$": BehaviorSubject {
                "_isScalar": false,
                "_value": Map {},
                "closed": false,
                "hasError": false,
                "isStopped": false,
                "observers": Array [],
                "thrownError": null,
              },
              "capabilities": Object {
                "catalogue": Object {},
                "management": Object {},
                "navLinks": Object {},
                "workspaces": Object {},
              },
              "currentAppId$": Observable {
                "_isScalar": false,
                "source": Subject {
                  "_isScalar": false,
                  "closed": false,
                  "hasError": false,
                  "isStopped": false,
                  "observers": Array [],
                  "thrownError": null,
                },
              },
              "getUrlForApp": [MockFunction],
              "navigateToApp": [MockFunction],
              "navigateToUrl": [MockFunction],
              "registerMountContext": [MockFunction],
            },
            "chrome": Object {
              "addApplicationClass": [MockFunction],
              "docTitle": Object {
                "change": [MockFunction] {
                  "calls": Array [
                    Array [
                      "Dashboards",
                    ],
                  ],
                  "results": Array [
                    Object {
                      "type": "return",
                      "value": undefined,
                    },
                  ],
                },
                "reset": [MockFunction],
              },
              "getApplicationClasses$": [MockFunction],
              "getBadge$": [MockFunction],
              "getBreadcrumbs$": [MockFunction],
              "getCustomNavLink$": [MockFunction],
              "getHeaderComponent": [MockFunction],
              "getHelpExtension$": [MockFunction],
              "getIsNavDrawerLocked$": [MockFunction],
              "getIsVisible$": [MockFunction],
              "logos": Object {
                "AnimatedMark": Object {
                  "dark": Object {
                    "type": "default",
                    "url": "/ui/logos/opensearch_spinner_on_dark.svg",
                  },
                  "light": Object {
                    "type": "default",
                    "url": "/ui/logos/opensearch_spinner_on_light.svg",
                  },
                  "type": "default",
                  "url": "/ui/logos/opensearch_spinner_on_light.svg",
                },
                "Application": Object {
                  "dark": Object {
                    "type": "default",
                    "url": "/ui/logos/opensearch_dashboards_on_dark.svg",
                  },
                  "light": Object {
                    "type": "default",
                    "url": "/ui/logos/opensearch_dashboards_on_light.svg",
                  },
                  "type": "default",
                  "url": "/ui/logos/opensearch_dashboards_on_light.svg",
                },
                "CenterMark": Object {
                  "dark": Object {
                    "type": "default",
                    "url": "/ui/logos/opensearch_center_mark_on_dark.svg",
                  },
                  "light": Object {
                    "type": "default",
                    "url": "/ui/logos/opensearch_center_mark_on_light.svg",
                  },
                  "type": "default",
                  "url": "/ui/logos/opensearch_center_mark_on_light.svg",
                },
                "Mark": Object {
                  "dark": Object {
                    "type": "default",
                    "url": "/ui/logos/opensearch_mark_on_dark.svg",
                  },
                  "light": Object {
                    "type": "default",
                    "url": "/ui/logos/opensearch_mark_on_light.svg",
                  },
                  "type": "default",
                  "url": "/ui/logos/opensearch_mark_on_light.svg",
                },
                "OpenSearch": Object {
                  "dark": Object {
                    "type": "default",
                    "url": "/ui/logos/opensearch_on_dark.svg",
                  },
                  "light": Object {
                    "type": "default",
                    "url": "/ui/logos/opensearch_on_light.svg",
                  },
                  "type": "default",
                  "url": "/ui/logos/opensearch_on_light.svg",
                },
                "colorScheme": "light",
              },
              "navControls": Object {
                "getCenter$": [MockFunction],
                "getLeft$": [MockFunction],
                "getRight$": [MockFunction],
                "registerCenter": [MockFunction],
                "registerLeft": [MockFunction],
                "registerRight": [MockFunction],
              },
              "navLinks": Object {
                "enableForcedAppSwitcherNavigation": [MockFunction],
                "get": [MockFunction],
                "getAll": [MockFunction],
                "getForceAppSwitcherNavigation$": [MockFunction],
                "getNavLinks$": [MockFunction],
                "has": [MockFunction],
                "showOnly": [MockFunction],
                "update": [MockFunction],
              },
              "recentlyAccessed": Object {
                "add": [MockFunction],
                "get": [MockFunction],
                "get$": [MockFunction],
              },
              "removeApplicationClass": [MockFunction],
              "setAppTitle": [MockFunction],
              "setBadge": [MockFunction],
              "setBreadcrumbs": [MockFunction] {
                "calls": Array [
                  Array [
                    Array [
                      Object {
                        "text": "Dashboards",
                      },
                    ],
                  ],
                ],
                "results": Array [
                  Object {
                    "type": "return",
                    "value": undefined,
                  },
                ],
              },
              "setCustomNavLink": [MockFunction],
              "setHelpExtension": [MockFunction],
              "setHelpSupportUrl": [MockFunction],
              "setIsVisible": [MockFunction],
            },
            "dashboard": Object {
              "getAttributeService": [MockFunction],
            },
            "dashboardConfig": Object {
              "getHideWriteControls": [Function],
            },
            "dashboardProviders": [Function],
            "data": Object {
              "actions": Object {
                "createFiltersFromRangeSelectAction": [MockFunction],
                "createFiltersFromValueClickAction": [MockFunction],
              },
              "autocomplete": Object {
                "getQuerySuggestions": [MockFunction],
                "getValueSuggestions": [MockFunction],
                "hasQuerySuggestions": [MockFunction],
              },
              "fieldFormats": Object {
                "deserialize": [MockFunction],
                "getByFieldType": [MockFunction],
                "getDefaultConfig": [MockFunction],
                "getDefaultInstance": [MockFunction],
                "getDefaultInstanceCacheResolver": [MockFunction],
                "getDefaultInstancePlain": [MockFunction],
                "getDefaultType": [MockFunction],
                "getDefaultTypeName": [MockFunction],
                "getInstance": [MockFunction],
                "getType": [MockFunction],
                "getTypeNameByOpenSearchTypes": [MockFunction],
                "getTypeWithoutMetaParams": [MockFunction],
                "init": [MockFunction],
                "parseDefaultTypeMap": [MockFunction],
                "register": [MockFunction],
              },
              "indexPatterns": Object {
                "clearCache": [MockFunction],
                "createField": [MockFunction],
                "createFieldList": [MockFunction],
                "ensureDefaultIndexPattern": [MockFunction],
                "find": [MockFunction],
                "get": [MockFunction],
                "getDefault": [MockFunction],
                "make": [Function],
              },
              "query": Object {
                "addToQueryLog": [MockFunction],
                "filterManager": Object {
                  "addFilters": [MockFunction],
                  "getAppFilters": [MockFunction],
                  "getFetches$": [MockFunction],
                  "getFilters": [MockFunction],
                  "getGlobalFilters": [MockFunction] {
                    "calls": Array [
                      Array [],
                      Array [],
                      Array [],
                    ],
                    "results": Array [
                      Object {
                        "type": "return",
                        "value": undefined,
                      },
                      Object {
                        "type": "return",
                        "value": undefined,
                      },
                      Object {
                        "type": "return",
                        "value": undefined,
                      },
                    ],
                  },
                  "getPartitionedFilters": [MockFunction],
                  "getUpdates$": [MockFunction],
                  "handleStateUpdate": [MockFunction],
                  "mergeIncomingFilters": [MockFunction],
                  "removeAll": [MockFunction],
                  "removeFilter": [MockFunction],
                  "setAppFilters": [MockFunction],
                  "setFilters": [MockFunction],
                  "setGlobalFilters": [MockFunction] {
                    "calls": Array [
                      Array [
                        Array [],
                      ],
                    ],
                    "results": Array [
                      Object {
                        "type": "return",
                        "value": undefined,
                      },
                    ],
                  },
                },
                "getOpenSearchQuery": [MockFunction],
                "queryString": Object {
                  "clearQuery": [MockFunction],
                  "formatQuery": [MockFunction],
                  "getDefaultQuery": [MockFunction],
                  "getQuery": [MockFunction],
                  "getUpdates$": [MockFunction],
                  "setQuery": [MockFunction],
                },
                "savedQueries": [MockFunction],
                "state$": Observable {
                  "_isScalar": false,
                },
                "timefilter": Object {
                  "history": Object {
                    "add": [MockFunction],
                    "get": [MockFunction],
                  },
                  "timefilter": Object {
                    "calculateBounds": [MockFunction],
                    "createFilter": [MockFunction],
                    "disableAutoRefreshSelector": [MockFunction],
                    "disableTimeRangeSelector": [MockFunction],
                    "enableAutoRefreshSelector": [MockFunction],
                    "enableTimeRangeSelector": [MockFunction],
                    "getActiveBounds": [MockFunction],
                    "getAutoRefreshFetch$": [MockFunction],
                    "getBounds": [MockFunction],
                    "getEnabledUpdated$": [MockFunction],
                    "getFetch$": [MockFunction],
                    "getRefreshInterval": [MockFunction] {
                      "calls": Array [
                        Array [],
                        Array [],
                        Array [],
                      ],
                      "results": Array [
                        Object {
                          "type": "return",
                          "value": undefined,
                        },
                        Object {
                          "type": "return",
                          "value": undefined,
                        },
                        Object {
                          "type": "return",
                          "value": undefined,
                        },
                      ],
                    },
                    "getRefreshIntervalDefaults": [MockFunction] {
                      "calls": Array [
                        Array [],
                      ],
                      "results": Array [
                        Object {
                          "type": "return",
                          "value": undefined,
                        },
                      ],
                    },
                    "getRefreshIntervalUpdate$": [MockFunction],
                    "getTime": [MockFunction] {
                      "calls": Array [
                        Array [],
                        Array [],
                        Array [],
                      ],
                      "results": Array [
                        Object {
                          "type": "return",
                          "value": undefined,
                        },
                        Object {
                          "type": "return",
                          "value": undefined,
                        },
                        Object {
                          "type": "return",
                          "value": undefined,
                        },
                      ],
                    },
                    "getTimeDefaults": [MockFunction] {
                      "calls": Array [
                        Array [],
                      ],
                      "results": Array [
                        Object {
                          "type": "return",
                          "value": undefined,
                        },
                      ],
                    },
                    "getTimeUpdate$": [MockFunction],
                    "isAutoRefreshSelectorEnabled": [MockFunction],
                    "isTimeRangeSelectorEnabled": [MockFunction],
                    "setRefreshInterval": [MockFunction],
                    "setTime": [MockFunction],
                  },
                },
              },
              "search": Object {
                "aggs": Object {
                  "calculateAutoTimeExpression": [Function],
                  "createAggConfigs": [MockFunction],
                  "types": Object {
                    "get": [Function],
                    "getAll": [Function],
                  },
                },
                "search": [MockFunction],
                "searchSource": Object {
                  "create": [MockFunction],
                  "createEmpty": [MockFunction],
                },
                "showError": [MockFunction],
              },
              "ui": Object {
                "IndexPatternSelect": [MockFunction],
                "SearchBar": [MockFunction],
              },
            },
            "docLinks": Object {
              "DOC_LINK_VERSION": "mocked-test-branch",
              "OPENSEARCH_WEBSITE_URL": "https://opensearch.org/",
              "links": Object {
                "noDocumentation": Object {
                  "addData": "https://opensearch.org/docs/mocked-test-branch",
                  "apmServer": "https://opensearch.org/docs/mocked-test-branch",
                  "auditbeat": "https://opensearch.org/docs/mocked-test-branchtools/index/#downloads",
                  "clusterAPI": Object {
                    "clusterPending": "https://opensearch.org/docs/mocked-test-branch",
                    "clusterRoute": "https://opensearch.org/docs/mocked-test-branch/api-reference/cluster-api/cluster-awareness/",
                    "clusterState": "https://opensearch.org/docs/mocked-test-branch",
                    "clusterStats": "https://opensearch.org/docs/mocked-test-branch/api-reference/cluster-api/cluster-stats/",
                  },
                  "documentAPI": Object {
                    "delete_by_query": "https://opensearch.org/docs/mocked-test-branch/api-reference/document-apis/delete-by-query/",
                    "multiTermVector": "https://opensearch.org/docs/mocked-test-branch",
                    "termVector": "https://opensearch.org/docs/mocked-test-branch",
                    "update_by_query_rethrottle": "https://opensearch.org/docs/mocked-test-branch/api-reference/document-apis/update-by-query/",
                  },
                  "filebeat": "https://opensearch.org/docs/mocked-test-branchtools/index/#downloads",
                  "filed_caps": "https://opensearch.org/docs/mocked-test-branch",
                  "functionbeat": "https://opensearch.org/docs/mocked-test-branchtools/index/#downloads",
                  "heartbeat": "https://opensearch.org/docs/mocked-test-branchtools/index/#downloads",
                  "indexAPI": Object {
                    "indexAnalyze": "https://opensearch.org/docs/mocked-test-branch/api-reference/analyze-apis/index/",
                    "indexClearCache": "https://opensearch.org/docs/mocked-test-branch/api-reference/index-apis/clear-index-cache/",
                    "indexClone": "https://opensearch.org/docs/mocked-test-branch/api-reference/index-apis/clone/",
                    "indexFlush": "https://opensearch.org/docs/mocked-test-branch",
                    "indexForceMerge": "https://opensearch.org/docs/mocked-test-branch",
                    "indexGetFieldMapping": "https://opensearch.org/docs/mocked-test-branch",
                    "indexGetMapping": "https://opensearch.org/docs/mocked-test-branch",
                    "indexOpenClose": "https://opensearch.org/docs/mocked-test-branch/api-reference/index-apis/open-index/",
                    "indexPutMapping": "https://opensearch.org/docs/mocked-test-branch/api-reference/index-apis/put-mapping/",
                    "indexRecovery": "https://opensearch.org/docs/mocked-test-branch",
                    "indexRefresh": "https://opensearch.org/docs/mocked-test-branch",
                    "indexRollover": "https://opensearch.org/docs/mocked-test-branch",
                    "indexSearchValidate": "https://opensearch.org/docs/mocked-test-branch",
                    "indexSegment": "https://opensearch.org/docs/mocked-test-branch",
                    "indexSetting": "https://opensearch.org/docs/mocked-test-branch/api-reference/index-apis/get-settings/",
                    "indexShardStore": "https://opensearch.org/docs/mocked-test-branch",
                    "indexShrink": "https://opensearch.org/docs/mocked-test-branch/api-reference/index-apis/shrink-index/",
                    "indexSplit": "https://opensearch.org/docs/mocked-test-branch/api-reference/index-apis/split/",
                    "indexStats": "https://opensearch.org/docs/mocked-test-branch",
                    "indexSynced": "https://opensearch.org/docs/mocked-test-branch",
                    "indexUpdateSetting": "https://opensearch.org/docs/mocked-test-branch/api-reference/index-apis/update-settings/",
                    "indexUpgrade": "https://opensearch.org/docs/mocked-test-branch",
                  },
                  "indexPatterns": Object {
                    "introduction": "https://opensearch.org/docs/mocked-test-branch",
                    "loadingData": "https://opensearch.org/docs/mocked-test-branch",
                  },
                  "ingest": Object {
                    "appendProcessor": "https://opensearch.org/docs/mocked-test-branch",
                    "bytesProcessor": "https://opensearch.org/docs/mocked-test-branch",
                    "convertProcessor": "https://opensearch.org/docs/mocked-test-branch/data-prepper/pipelines/configuration/processors/string-converter/",
                    "csvProcessor": "https://opensearch.org/docs/mocked-test-branch/data-prepper/pipelines/configuration/processors/csv/",
                    "dataIndexNamProcessor": "https://opensearch.org/docs/mocked-test-branch/data-prepper/pipelines/configuration/processors/date/",
                    "dataProcessor": "https://opensearch.org/docs/mocked-test-branch/data-prepper/pipelines/configuration/processors/date/",
                    "deletePipeline": "https://opensearch.org/docs/mocked-test-branch/api-reference/ingest-apis/delete-ingest/",
                    "dissectProcessor": "https://opensearch.org/docs/mocked-test-branch",
                    "dotExpandProcessor": "https://opensearch.org/docs/mocked-test-branch",
                    "dropProcessor": "https://opensearch.org/docs/mocked-test-branch/data-prepper/pipelines/configuration/processors/drop-events/",
                    "failProcessor": "https://opensearch.org/docs/mocked-test-branch",
                    "foreachProcessor": "https://opensearch.org/docs/mocked-test-branch",
                    "geoIPProcessor": "https://opensearch.org/docs/mocked-test-branch",
                    "getPipeline": "https://opensearch.org/docs/mocked-test-branch/api-reference/ingest-apis/get-ingest/",
                    "grokProcessor": "https://opensearch.org/docs/mocked-test-branch/data-prepper/pipelines/configuration/processors/grok/",
                    "gusbProcessor": "https://opensearch.org/docs/mocked-test-branch",
                    "htmlstripProcessor": "https://opensearch.org/docs/mocked-test-branch",
                    "inferenceProcessor": "https://opensearch.org/docs/mocked-test-branch",
                    "ingestCircleProcessor": "https://opensearch.org/docs/mocked-test-branch",
                    "joinProcessor": "https://opensearch.org/docs/mocked-test-branch",
                    "jsonProcessor": "https://opensearch.org/docs/mocked-test-branch/data-prepper/pipelines/configuration/processors/parse-json/",
                    "kvProcessor": "https://opensearch.org/docs/mocked-test-branch/data-prepper/pipelines/configuration/processors/key-value/",
                    "lowecaseProcessor": "https://opensearch.org/docs/mocked-test-branch/data-prepper/pipelines/configuration/processors/lowercase-string/",
                    "pipelineProcessor": "https://opensearch.org/docs/mocked-test-branch",
                    "putPipeline": "https://opensearch.org/docs/mocked-test-branch/api-reference/ingest-apis/create-update-ingest/",
                    "removeProcessor": "https://opensearch.org/docs/mocked-test-branch",
                    "renameProcessor": "https://opensearch.org/docs/mocked-test-branch/data-prepper/pipelines/configuration/processors/rename-keys/",
                    "scriptProcessor": "https://opensearch.org/docs/mocked-test-branch",
                    "securityUserProcessor": "https://opensearch.org/docs/mocked-test-branch",
                    "setProcessor": "https://opensearch.org/docs/mocked-test-branch",
                    "simulatePipeline": "https://opensearch.org/docs/mocked-test-branch/api-reference/ingest-apis/simulate-ingest/",
                    "sortProcessor": "https://opensearch.org/docs/mocked-test-branch",
                    "splitProcessor": "https://opensearch.org/docs/mocked-test-branch/data-prepper/pipelines/configuration/processors/split-string/",
                    "trimProcessor": "https://opensearch.org/docs/mocked-test-branch/data-prepper/pipelines/configuration/processors/trim-string/",
                    "uppercaseProcessor": "https://opensearch.org/docs/mocked-test-branch/data-prepper/pipelines/configuration/processors/uppercase-string/",
                    "urldecodeProcessor": "https://opensearch.org/docs/mocked-test-branch",
                    "userAgentProcessor": "https://opensearch.org/docs/mocked-test-branch",
                  },
                  "logstash": "https://opensearch.org/docs/mocked-test-branch",
                  "management": Object {
                    "dashboardSettings": "https://opensearch.org/docs/mocked-test-branch",
                    "opensearchDashboardsGeneralSettings": "https://opensearch.org/docs/mocked-test-branch",
                    "opensearchDashboardsSearchSettings": "https://opensearch.org/docs/mocked-test-branch",
                  },
                  "mappingTypes": "https://opensearch.org/docs/mocked-test-branch/field-types/mappings/",
                  "metricbeat": "https://opensearch.org/docs/mocked-test-branchtools/index/#downloads",
                  "moduleScripting": "https://opensearch.org/docs/mocked-test-branch",
                  "nodes": Object {
                    "hotThreads": "https://opensearch.org/docs/mocked-test-branch/api-reference/nodes-apis/nodes-hot-threads/",
                    "info": "https://opensearch.org/docs/mocked-test-branch/api-reference/nodes-apis/nodes-info/",
                    "nodeStats": "https://opensearch.org/docs/mocked-test-branch/api-reference/nodes-apis/nodes-stats/",
                    "reloadSecuritySetting": "https://opensearch.org/docs/mocked-test-branch/api-reference/nodes-apis/nodes-reload-secure/",
                    "usage": "https://opensearch.org/docs/mocked-test-branch/api-reference/nodes-apis/nodes-usage/",
                  },
                  "painless_execute": "https://opensearch.org/docs/mocked-test-branch/api-reference/script-apis/exec-script/",
                  "reIndex": Object {
                    "rethrottle": "https://opensearch.org/docs/mocked-test-branch",
                  },
                  "savedObject": Object {
                    "manageSavedObject": "https://opensearch.org/docs/mocked-test-branch/security/multi-tenancy/mt-agg-view/",
                  },
                  "scriptedFields": Object {
                    "luceneExpressions": "https://opensearch.org/docs/mocked-test-branch",
                    "painless": "https://opensearch.org/docs/mocked-test-branch",
                    "painlessApi": "https://opensearch.org/docs/mocked-test-branch",
                    "painlessSyntax": "https://opensearch.org/docs/mocked-test-branch",
                    "scriptAggs": "https://opensearch.org/docs/mocked-test-branch",
                    "scriptFields": "https://opensearch.org/docs/mocked-test-branch",
                  },
                  "scroll": Object {
                    "clear_scroll": "https://opensearch.org/docs/mocked-test-branch/api-reference/scroll/",
                  },
                  "search": Object {
                    "search": "https://opensearch.org/docs/mocked-test-branch/api-reference/search/",
                    "searchFieldCap": "https://opensearch.org/docs/mocked-test-branch",
                    "searchRankEval": "https://opensearch.org/docs/mocked-test-branch",
                    "searchShards": "https://opensearch.org/docs/mocked-test-branch",
                  },
                  "siem": "https://opensearch.org/docs/mocked-test-branch",
                  "snapshot": Object {
                    "cleanup": "https://opensearch.org/docs/mocked-test-branch",
                    "deleteRepository": "https://opensearch.org/docs/mocked-test-branch/api-reference/snapshots/delete-snapshot-repository/",
                    "deleteSnapshot": "https://opensearch.org/docs/mocked-test-branch/api-reference/snapshots/delete-snapshot/",
                    "veirfyRepository": "https://opensearch.org/docs/mocked-test-branch/api-reference/snapshots/verify-snapshot-repository/",
                  },
                  "tutorial": Object {
                    "loadDataTutorial": "https://opensearch.org/docs/mocked-test-branch",
                    "visualizeTutorial": "https://opensearch.org/docs/mocked-test-branch",
                  },
                  "vega": "https://opensearch.org/docs/mocked-test-branch/dashboards/",
                  "winlogbeat": "https://opensearch.org/docs/mocked-test-branch",
                },
                "opensearch": Object {
                  "aggregations": Object {
                    "base": "https://opensearch.org/docs/mocked-test-branch/opensearch/aggregations/",
                    "bucket": Object {
                      "adjacency_matrix": "https://opensearch.org/docs/mocked-test-branch/opensearch/bucket-agg/#adjacency_matrix",
                      "base": "https://opensearch.org/docs/mocked-test-branch/opensearch/bucket-agg/",
                      "filter": "https://opensearch.org/docs/mocked-test-branch/opensearch/bucket-agg/#filter-filters",
                      "geo": "https://opensearch.org/docs/mocked-test-branch/opensearch/bucket-agg/#geo_distance-geohash_grid",
                      "global": "https://opensearch.org/docs/mocked-test-branch/opensearch/bucket-agg/#global",
                      "histogram": "https://opensearch.org/docs/mocked-test-branch/opensearch/bucket-agg/#histogram-date_histogram",
                      "missing": "https://opensearch.org/docs/mocked-test-branch/opensearch/bucket-agg/#missing",
                      "nested": "https://opensearch.org/docs/mocked-test-branch/opensearch/bucket-agg/#nested-reverse_nested",
                      "range": "https://opensearch.org/docs/mocked-test-branch/opensearch/bucket-agg/#range-date_range-ip_range",
                      "significant_terms": "https://opensearch.org/docs/mocked-test-branch/opensearch/bucket-agg/#significant_terms-significant_text",
                      "smapler": "https://opensearch.org/docs/mocked-test-branch/opensearch/bucket-agg/#sampler-diversified_sampler",
                      "terms": "https://opensearch.org/docs/mocked-test-branch/opensearch/bucket-agg/#terms",
                    },
                    "metric": Object {
                      "base": "https://opensearch.org/docs/mocked-test-branch/opensearch/metric-agg/",
                      "cardinality": "https://opensearch.org/docs/mocked-test-branch/opensearch/metric-agg/#cardinality",
                      "geo_bound": "https://opensearch.org/docs/mocked-test-branch/opensearch/metric-agg/#geo_bound",
                      "percentile": "https://opensearch.org/docs/mocked-test-branch/opensearch/metric-agg/#percentile-percentile_ranks",
                      "scripted_metric": "https://opensearch.org/docs/mocked-test-branch/opensearch/metric-agg/#scripted_metric",
                      "stats": "https://opensearch.org/docs/mocked-test-branch/opensearch/metric-agg/#stats-extended_stats-matrix_stats",
                      "sum": "https://opensearch.org/docs/mocked-test-branch/opensearch/metric-agg/#sum-min-max-avg",
                      "top_hits": "https://opensearch.org/docs/mocked-test-branch/opensearch/metric-agg/#top_hits",
                      "types": "https://opensearch.org/docs/mocked-test-branch/opensearch/metric-agg/#types-of-metric-aggregations",
                      "value_count": "https://opensearch.org/docs/mocked-test-branch/opensearch/metric-agg/#value_count",
                    },
                    "pipeline": Object {
                      "avg_bucket": "https://opensearch.org/docs/mocked-test-branch/opensearch/pipeline-agg/#avg_bucket-sum_bucket-min_bucket-max_bucket",
                      "base": "https://opensearch.org/docs/mocked-test-branch/opensearch/pipeline-agg/",
                      "bucket_script": "https://opensearch.org/docs/mocked-test-branch/opensearch/pipeline-agg/#bucket_script-bucket_selector",
                      "bucket_sort": "https://opensearch.org/docs/mocked-test-branch/opensearch/pipeline-agg/#bucket_sort",
                      "cumulative_sum": "https://opensearch.org/docs/mocked-test-branch/opensearch/pipeline-agg/#cumulative_sum",
                      "derivative": "https://opensearch.org/docs/mocked-test-branch/opensearch/pipeline-agg/#derivative",
                      "moving_avg": "https://opensearch.org/docs/mocked-test-branch/opensearch/pipeline-agg/#moving_avg",
                      "serial_diff": "https://opensearch.org/docs/mocked-test-branch/opensearch/pipeline-agg/#serial_diff",
                      "stats_bucket": "https://opensearch.org/docs/mocked-test-branch/opensearch/pipeline-agg/#stats_bucket-extended_stats_bucket",
                      "syntax": "https://opensearch.org/docs/mocked-test-branch/opensearch/pipeline-agg/#pipeline-aggregation-syntax",
                      "types": "https://opensearch.org/docs/mocked-test-branch/opensearch/pipeline-agg/#types-of-pipeline-aggregations",
                    },
                  },
                  "cluster": Object {
                    "base": "https://opensearch.org/docs/mocked-test-branch/opensearch/cluster/",
                    "build_cluster": "https://opensearch.org/docs/mocked-test-branch/opensearch/cluster/#step-3-bind-a-cluster-to-specific-ip-addresses",
                    "config_host": "https://opensearch.org/docs/mocked-test-branch/opensearch/cluster/cluster/#step-4-configure-discovery-hosts-for-a-cluster",
                    "config_shard": "https://opensearch.org/docs/mocked-test-branch/opensearch/cluster/#advanced-step-6-configure-shard-allocation-awareness-or-forced-awareness",
                    "naming": "https://opensearch.org/docs/mocked-test-branch/opensearch/cluster/#step-1-name-a-cluster",
                    "set_attribute": "https://opensearch.org/docs/mocked-test-branch/opensearch/cluster/#step-2-set-node-attributes-for-each-node-in-a-cluster",
                    "setup_hot_arch": "https://opensearch.org/docs/mocked-test-branch/opensearch/cluster/#advanced-step-7-set-up-a-hot-warm-architecture",
                    "start": "https://opensearch.org/docs/mocked-test-branch/opensearch/cluster/#step-5-start-the-cluster",
                  },
                  "commonParameters": "https://opensearch.org/docs/mocked-test-branch/opensearch/common-parameters",
                  "configuration": "https://opensearch.org/docs/mocked-test-branch/opensearch/configuration/",
                  "dataStreams": "https://opensearch.org/docs/mocked-test-branch/opensearch/data-streams/",
                  "dateMath": "https://opensearch.org/docs/mocked-test-branch/opensearch/supported-field-types/date/#date-math",
                  "indexAlias": Object {
                    "add_remove_index": "https://opensearch.org/docs/mocked-test-branch/opensearch/index-alias/#add-or-remove-indices",
                    "alias_option": "https://opensearch.org/docs/mocked-test-branch/opensearch/index-alias/#index-alias-options",
                    "base": "https://opensearch.org/docs/mocked-test-branch/opensearch/index-alias/",
                    "create_alias": "https://opensearch.org/docs/mocked-test-branch/opensearch/index-alias/#create-aliases",
                    "filtered_alias": "https://opensearch.org/docs/mocked-test-branch/opensearch/index-alias/#create-filtered-aliases",
                    "manage_alias": "https://opensearch.org/docs/mocked-test-branch/opensearch/index-alias/#manage-aliases",
                  },
                  "indexData": Object {
                    "base": "https://opensearch.org/docs/mocked-test-branch/opensearch/index-data/",
                    "delete_data": "https://opensearch.org/docs/mocked-test-branch/opensearch/index-data/#delete-data",
                    "naming": "https://opensearch.org/docs/mocked-test-branch/opensearch/index-data/#naming-restrictions-for-indices",
                    "read_data": "https://opensearch.org/docs/mocked-test-branch/opensearch/index-data/#read-data",
                    "update_data": "https://opensearch.org/docs/mocked-test-branch/opensearch/index-data/#update-data",
                  },
                  "indexTemplates": Object {
                    "base": "https://opensearch.org/docs/mocked-test-branch/opensearch/index-templates",
                    "composable": "https://opensearch.org/docs/mocked-test-branch/opensearch/index-templates/#composable-index-templates",
                    "options": "https://opensearch.org/docs/mocked-test-branch/opensearch/index-templates/#index-template-options",
                  },
                  "installation": Object {
                    "ansible": "https://opensearch.org/docs/mocked-test-branch/opensearch/install/ansible/",
                    "base": "https://opensearch.org/docs/mocked-test-branch/opensearch/install/index/",
                    "compatibility": "https://opensearch.org/docs/mocked-test-branch/opensearch/install/compatibility/",
                    "docker": "https://opensearch.org/docs/mocked-test-branch/opensearch/install/docker",
                    "dockerSecurity": "https://opensearch.org/docs/mocked-test-branch/opensearch/install/docker-security",
                    "helm": "https://opensearch.org/docs/mocked-test-branch/opensearch/install/helm/",
                    "plugins": "https://opensearch.org/docs/mocked-test-branch/opensearch/install/plugins/",
                    "settings": "https://opensearch.org/docs/mocked-test-branch/opensearch/install/important-settings/",
                    "tar": "https://opensearch.org/docs/mocked-test-branch/opensearch/install/tar/",
                  },
                  "introduction": "https://opensearch.org/docs/mocked-test-branch/opensearch/index/",
                  "logs": Object {
                    "application_log": "https://opensearch.org/docs/mocked-test-branch/opensearch/logs/#application-logs",
                    "base": "https://opensearch.org/docs/mocked-test-branch/opensearch/logs",
                    "deprecation_log": "https://opensearch.org/docs/mocked-test-branch/opensearch/logs/#deprecation-logs",
                    "slow_log": "https://opensearch.org/docs/mocked-test-branch/opensearch/logs/#slow-logs",
                  },
                  "openSearchForum": "https://forum.opensearch.org/t/feedback-experimental-feature-connect-to-external-data-sources/11144",
                  "popularAPI": "https://opensearch.org/docs/mocked-test-branch/opensearch/popular-api",
                  "queryDSL": Object {
                    "base": "https://opensearch.org/docs/mocked-test-branch/opensearch/query-dsl/index/",
                    "boolQuery": "https://opensearch.org/docs/mocked-test-branch/opensearch/query-dsl/bool/",
                    "fullText": Object {
                      "base": "https://opensearch.org/docs/mocked-test-branch/opensearch/query-dsl/full-text/",
                      "common_terms": "https://opensearch.org/docs/mocked-test-branch/opensearch/query-dsl/full-text/#common-terms",
                      "match": "https://opensearch.org/docs/mocked-test-branch/opensearch/query-dsl/full-text/#match",
                      "match_phrase": "https://opensearch.org/docs/mocked-test-branch/opensearch/query-dsl/full-text/#match-phrase",
                      "multi_match": "https://opensearch.org/docs/mocked-test-branch/opensearch/query-dsl/full-text/#multi-match",
                      "options": "https://opensearch.org/docs/mocked-test-branch/opensearch/query-dsl/full-text/#options",
                      "query_string": "https://opensearch.org/docs/mocked-test-branch/opensearch/query-dsl/full-text/#query-string",
                    },
                    "term": Object {
                      "base": "https://opensearch.org/docs/mocked-test-branch/opensearch/query-dsl/term/",
                      "exists": "https://opensearch.org/docs/mocked-test-branch/opensearch/query-dsl/term/#exists",
                      "ids": "https://opensearch.org/docs/mocked-test-branch/opensearch/query-dsl/term/#ids",
                      "prefix": "https://opensearch.org/docs/mocked-test-branch/opensearch/query-dsl/term/#prefix",
                      "range": "https://opensearch.org/docs/mocked-test-branch/opensearch/query-dsl/term/#range",
                      "regex": "https://opensearch.org/docs/mocked-test-branch/opensearch/query-dsl/term/#regex",
                      "terms": "https://opensearch.org/docs/mocked-test-branch/opensearch/query-dsl/term/#terms",
                      "wildcards": "https://opensearch.org/docs/mocked-test-branch/opensearch/query-dsl/term/#wildcards",
                    },
                  },
                  "reindexData": Object {
                    "all": "https://opensearch.org/docs/mocked-test-branch/opensearch/reindex-data/#reindex-all-documents",
                    "base": "https://opensearch.org/docs/mocked-test-branch/opensearch/reindex-data/",
                    "combine": "https://opensearch.org/docs/mocked-test-branch/opensearch/reindex-data/#combine-one-or-more-indices",
                    "destination": "https://opensearch.org/docs/mocked-test-branch/opensearch/reindex-data/#destination-index-options",
                    "remote": "https://opensearch.org/docs/mocked-test-branch/opensearch/reindex-data/#reindex-from-a-remote-cluster",
                    "source": "https://opensearch.org/docs/mocked-test-branch/opensearch/reindex-data/#source-index-options",
                    "subset": "https://opensearch.org/docs/mocked-test-branch/opensearch/reindex-data/#reindex-a-subset-of-documents",
                    "transform": "https://opensearch.org/docs/mocked-test-branch/opensearch/reindex-data/#transform-documents-during-reindexing",
                    "unique": "https://opensearch.org/docs/mocked-test-branch/opensearch/reindex-data/#reindex-only-unique-documents",
                    "update": "https://opensearch.org/docs/mocked-test-branch/opensearch/reindex-data/#update-documents-in-the-current-index",
                  },
                  "restAPI": Object {
                    "base": "https://opensearch.org/docs/mocked-test-branch/opensearch/rest-api/index/",
                    "indexAPI": Object {
                      "base": "https://opensearch.org/docs/mocked-test-branch/opensearch/rest-api/index-apis/index/",
                      "close": "https://opensearch.org/docs/mocked-test-branch/opensearch/rest-api/index-apis/close-index/",
                      "create": "https://opensearch.org/docs/mocked-test-branch/opensearch/rest-api/index-apis/create-index/",
                      "delete": "https://opensearch.org/docs/mocked-test-branch/opensearch/rest-api/index-apis/delete-index/",
                      "exists": "https://opensearch.org/docs/mocked-test-branch/opensearch/rest-api/index-apis/exists/",
                      "get": "https://opensearch.org/docs/mocked-test-branch/opensearch/rest-api/index-apis/get-index/",
                    },
                  },
                  "searchExperience": Object {
                    "autocomplete": "https://opensearch.org/docs/mocked-test-branch/opensearch/ux/#autocomplete-queries",
                    "base": "https://opensearch.org/docs/mocked-test-branch/opensearch/ux",
                    "highlight_match": "https://opensearch.org/docs/mocked-test-branch/opensearch/ux/#highlight-query-matches",
                    "paginate": "https://opensearch.org/docs/mocked-test-branch/opensearch/ux/#paginate-results",
                    "scroll": "https://opensearch.org/docs/mocked-test-branch/opensearch/ux/#scroll-search",
                    "sort": "https://opensearch.org/docs/mocked-test-branch/opensearch/ux/#sort-results",
                  },
                  "searchTemplate": Object {
                    "advanced_operation": "https://opensearch.org/docs/mocked-test-branch/opensearch/search-template/#advanced-parameter-conversion-with-search-templates",
                    "base": "https://opensearch.org/docs/mocked-test-branch/opensearch/search-template",
                    "create": "https://opensearch.org/docs/mocked-test-branch/opensearch/search-template/#create-search-templates",
                    "execute": "https://opensearch.org/docs/mocked-test-branch/opensearch/search-template/#save-and-execute-search-templates",
                    "manage": "https://opensearch.org/docs/mocked-test-branch/opensearch/search-template/#manage-search-templates",
                    "multiple_search": "https://opensearch.org/docs/mocked-test-branch/opensearch/search-template/#multiple-search-templates",
                  },
                  "snapshotRestore": Object {
                    "base": "https://opensearch.org/docs/mocked-test-branch/opensearch/snapshot-restore",
                    "register": "https://opensearch.org/docs/mocked-test-branch/opensearch/snapshot-restore/#register-repository",
                    "restore_snapshot": "https://opensearch.org/docs/mocked-test-branch/opensearch/snapshot-restore/#restore-snapshots",
                    "security_plugin": "https://opensearch.org/docs/mocked-test-branch/opensearch/snapshot-restore/#security-plugin-considerations",
                    "take_snapshot": "https://opensearch.org/docs/mocked-test-branch/opensearch/snapshot-restore/#take-snapshots",
                  },
                  "supportedUnits": "https://opensearch.org/docs/mocked-test-branch/opensearch/units",
                },
                "opensearchDashboards": Object {
                  "browser": "https://opensearch.org/docs/mocked-test-branch/dashboards/browser-compatibility",
                  "dataSource": Object {
                    "guide": "https://opensearch.org/docs/mocked-test-branch/dashboards/discover/multi-data-sources/",
                  },
                  "devTools": "https://opensearch.org/docs/mocked-test-branch/dashboards/dev-tools/index-dev/",
                  "dql": Object {
                    "base": "https://opensearch.org/docs/mocked-test-branch/dashboards/dql",
                    "boolean_query": "https://opensearch.org/docs/mocked-test-branch/dashboards/dql/#boolean-query",
                    "date_query": "https://opensearch.org/docs/mocked-test-branch/dashboards/dql/#date-and-range-queries",
                    "nested_query": "https://opensearch.org/docs/mocked-test-branch/dashboards/dql/#nested-field-query",
                    "terms_query": "https://opensearch.org/docs/mocked-test-branch/dashboards/dql/#terms-query",
                  },
                  "ganttCharts": "https://opensearch.org/docs/mocked-test-branch/dashboards/gantt",
                  "installation": Object {
                    "base": "https://opensearch.org/docs/mocked-test-branch/dashboards/install/index/",
                    "docker": "https://opensearch.org/docs/mocked-test-branch/dashboards/install/docker/",
                    "helm": "https://opensearch.org/docs/mocked-test-branch/dashboards/install/helm/",
                    "plugins": "https://opensearch.org/docs/mocked-test-branch/dashboards/install/plugins/",
                    "tar": "https://opensearch.org/docs/mocked-test-branch/dashboards/install/tar/",
                    "tls": "https://opensearch.org/docs/mocked-test-branch/dashboards/install/tls/",
                  },
                  "introduction": "https://opensearch.org/docs/mocked-test-branch/dashboards/index/",
                  "management": Object {
                    "advancedSettings": "https://opensearch.org/docs/mocked-test-branch/dashboards/management/advanced-settings/",
                  },
                  "mapTiles": "https://opensearch.org/docs/mocked-test-branch/dashboards/maptiles",
                  "notebooks": Object {
                    "base": "https://opensearch.org/docs/mocked-test-branch/dashboards/notebooks",
                    "create_report": "https://opensearch.org/docs/mocked-test-branch/dashboards/notebooks/#create-a-report",
                    "notebook_tutorial": "https://opensearch.org/docs/mocked-test-branch/dashboards/notebooks/#get-started-with-notebooks",
                    "paragraph_tutorial": "https://opensearch.org/docs/mocked-test-branch/dashboards/notebooks/#paragraph-actions",
                    "sample_notebook": "https://opensearch.org/docs/mocked-test-branch/dashboards/notebooks/#sample-notebooks",
                  },
                  "reporting": "https://opensearch.org/docs/mocked-test-branch/dashboards/reporting",
                  "visualize": Object {
                    "guide": "https://opensearch.org/docs/mocked-test-branchvisualize/viz-index/",
                  },
                },
              },
            },
            "embeddable": Object {
              "EmbeddablePanel": [MockFunction],
              "extract": [MockFunction],
              "getEmbeddableFactories": [MockFunction],
              "getEmbeddableFactory": [MockFunction],
              "getEmbeddablePanel": [MockFunction],
              "getStateTransfer": [MockFunction],
              "inject": [MockFunction],
              "telemetry": [MockFunction],
            },
            "fatalErrors": Object {
              "add": [MockFunction],
              "get$": [MockFunction],
            },
            "history": Object {
              "location": Object {
                "pathname": "",
              },
              "replace": [MockFunction],
            },
            "http": Object {
              "addLoadingCountSource": [MockFunction],
              "anonymousPaths": Object {
                "isAnonymous": [MockFunction],
                "register": [MockFunction],
              },
              "basePath": BasePath {
                "basePath": "",
                "clientBasePath": "",
                "get": [Function],
                "getBasePath": [Function],
                "prepend": [Function],
                "remove": [Function],
                "serverBasePath": "",
              },
              "delete": [MockFunction],
              "fetch": [MockFunction],
              "get": [MockFunction],
              "getLoadingCount$": [MockFunction],
              "head": [MockFunction],
              "intercept": [MockFunction],
              "options": [MockFunction],
              "patch": [MockFunction],
              "post": [MockFunction],
              "put": [MockFunction],
            },
            "i18n": Object {
              "Context": [MockFunction],
            },
            "injectedMetadata": Object {
              "getBranding": [MockFunction],
              "getInjectedVar": [MockFunction],
            },
            "notifications": Object {
              "toasts": Object {
                "add": [MockFunction],
                "addDanger": [MockFunction],
                "addError": [MockFunction],
                "addInfo": [MockFunction],
                "addSuccess": [MockFunction],
                "addWarning": [MockFunction],
                "get$": [MockFunction],
                "remove": [MockFunction],
              },
            },
            "opensearchDashboardsVersion": "3.0.0",
            "osdUrlStateStorage": Object {
              "flush": [MockFunction],
              "get": [MockFunction] {
                "calls": Array [
                  Array [
                    "_g",
                  ],
                ],
                "results": Array [
                  Object {
                    "type": "return",
                    "value": Object {
                      "linked": false,
                    },
                  },
                ],
              },
              "set": [MockFunction],
            },
            "overlays": Object {
              "banners": Object {
                "add": [MockFunction],
                "get$": [MockFunction],
                "getComponent": [MockFunction],
                "remove": [MockFunction],
                "replace": [MockFunction],
              },
              "openConfirm": [MockFunction],
              "openFlyout": [MockFunction],
              "openModal": [MockFunction],
              "sidecar": Object {
                "getSidecarConfig$": [MockFunction],
                "hide": [MockFunction],
                "open": [MockFunction],
                "setSidecarConfig": [MockFunction],
                "show": [MockFunction],
              },
            },
            "savedObjects": Object {
              "client": Object {
                "bulkCreate": [MockFunction],
                "bulkGet": [MockFunction],
                "bulkUpdate": [MockFunction],
                "create": [MockFunction],
                "delete": [MockFunction],
                "find": [MockFunction],
                "get": [MockFunction],
                "setCurrentWorkspace": [MockFunction],
                "update": [MockFunction],
              },
            },
            "savedObjectsClient": Object {
              "find": [Function],
            },
            "savedObjectsPublic": Object {
              "settings": Object {
                "getListingLimit": [Function],
                "getPerPage": [Function],
              },
            },
            "toastNotifications": Object {
              "add": [MockFunction],
              "addDanger": [MockFunction],
              "addError": [MockFunction],
              "addInfo": [MockFunction],
              "addSuccess": [MockFunction],
              "addWarning": [MockFunction],
              "get$": [MockFunction],
              "remove": [MockFunction],
            },
            "uiSettings": Object {
              "get": [MockFunction] {
                "calls": Array [
                  Array [
                    "dateFormat",
                  ],
                ],
                "results": Array [
                  Object {
                    "type": "return",
                    "value": undefined,
                  },
                ],
              },
              "get$": [MockFunction],
              "getAll": [MockFunction],
              "getSaved$": [MockFunction],
              "getUpdate$": [MockFunction],
              "getUpdateErrors$": [MockFunction],
              "isCustom": [MockFunction],
              "isDeclared": [MockFunction],
              "isDefault": [MockFunction],
              "isOverridden": [MockFunction],
              "overrideLocalDefault": [MockFunction],
              "remove": [MockFunction],
              "set": [MockFunction],
            },
            "usageCollection": Object {
              "METRIC_TYPE": Object {
                "APPLICATION_USAGE": "application_usage",
                "CLICK": "click",
                "COUNT": "count",
                "LOADED": "loaded",
                "USER_AGENT": "user_agent",
              },
              "__LEGACY": Object {
                "appChanged": [MockFunction],
              },
              "allowTrackUserAgent": [MockFunction],
              "reportUiStats": [MockFunction],
            },
            "workspaces": Object {
              "currentWorkspace$": BehaviorSubject {
                "_isScalar": false,
                "_value": null,
                "closed": false,
                "hasError": false,
                "isStopped": false,
                "observers": Array [],
                "thrownError": null,
              },
              "currentWorkspaceId$": BehaviorSubject {
                "_isScalar": false,
                "_value": "",
                "closed": false,
                "hasError": false,
                "isStopped": false,
                "observers": Array [],
                "thrownError": null,
              },
              "initialized$": BehaviorSubject {
                "_isScalar": false,
                "_value": false,
                "closed": false,
                "hasError": false,
                "isStopped": false,
                "observers": Array [],
                "thrownError": null,
              },
              "workspaceList$": BehaviorSubject {
                "_isScalar": false,
                "_value": Array [],
                "closed": false,
                "hasError": false,
                "isStopped": false,
                "observers": Array [],
                "thrownError": null,
              },
            },
          }
        }
      >
        <DashboardListing>
          <TableListView
            createButton={
              <CreateButton
                dashboardProviders={
                  Object {
                    "dashboard": Object {
                      "appId": "1",
                      "editUrlPathFn": [MockFunction],
                      "savedObjectsName": "dashboardSavedObjects",
                      "viewUrlPathFn": [MockFunction],
                    },
                  }
                }
              />
            }
            createItem={[Function]}
            deleteItems={[Function]}
            editItem={[Function]}
            entityName="dashboard"
            entityNamePlural="dashboards"
            findItems={[Function]}
            headingId="dashboardListingHeading"
            initialFilter="dashboard"
            initialPageSize={10}
            listingLimit={100}
            noItemsFragment={
              <EuiEmptyPrompt
                actions={
                  <EuiButton
                    data-test-subj="createDashboardPromptButton"
                    fill={true}
                    iconType="plusInCircle"
                    onClick={[Function]}
                  >
                    <FormattedMessage
                      defaultMessage="Create new dashboard"
                      id="dashboard.listing.createNewDashboard.createButtonLabel"
                      values={Object {}}
                    />
                  </EuiButton>
                }
                body={
                  <React.Fragment>
                    <p>
                      <FormattedMessage
                        defaultMessage="You can combine data views from any OpenSearch Dashboards app into one dashboard and see everything in one place."
                        id="dashboard.listing.createNewDashboard.combineDataViewFromOpenSearchDashboardsAppDescription"
                        values={Object {}}
                      />
                    </p>
                    <p>
                      <FormattedMessage
                        defaultMessage="New to OpenSearch Dashboards? {sampleDataInstallLink} to take a test drive."
                        id="dashboard.listing.createNewDashboard.newToOpenSearchDashboardsDescription"
                        values={
                          Object {
                            "sampleDataInstallLink": <EuiLink
                              onClick={[Function]}
                            >
                              <FormattedMessage
                                defaultMessage="Install some sample data"
                                id="dashboard.listing.createNewDashboard.sampleDataInstallLinkText"
                                values={Object {}}
                              />
                            </EuiLink>,
                          }
                        }
                      />
                    </p>
                  </React.Fragment>
                }
                iconType="dashboardApp"
                title={
                  <h1
                    id="dashboardListingHeading"
                  >
                    <FormattedMessage
                      defaultMessage="Create your first dashboard"
                      id="dashboard.listing.createNewDashboard.title"
                      values={Object {}}
                    />
                  </h1>
                }
              />
            }
            tableColumns={
              Array [
                Object {
                  "field": "title",
                  "name": "Title",
                  "render": [Function],
                  "sortable": true,
                },
                Object {
                  "dataType": "string",
                  "field": "type",
                  "name": "Type",
                  "sortable": true,
                },
                Object {
                  "dataType": "string",
                  "field": "description",
                  "name": "Description",
                  "sortable": true,
                },
                Object {
                  "data-test-subj": "updated-at",
                  "dataType": "date",
                  "description": "Last update of the saved object",
                  "field": "updated_at",
                  "name": "Last updated",
                  "render": [Function],
                  "sortable": true,
                },
              ]
            }
            tableListTitle="Dashboards"
            toastNotifications={
              Object {
                "add": [MockFunction],
                "addDanger": [MockFunction],
                "addError": [MockFunction],
                "addInfo": [MockFunction],
                "addSuccess": [MockFunction],
                "addWarning": [MockFunction],
                "get$": [MockFunction],
                "remove": [MockFunction],
              }
            }
          >
            <EuiPage
              className="itemListing__page"
              data-test-subj="dashboardLandingPage"
              restrictWidth={true}
            >
              <div
                className="euiPage euiPage--paddingMedium euiPage--grow euiPage--restrictWidth-default itemListing__page"
                data-test-subj="dashboardLandingPage"
              >
                <EuiPageBody
                  aria-labelledby="dashboardListingHeading"
                  component="main"
                >
                  <main
                    aria-labelledby="dashboardListingHeading"
                    className="euiPageBody euiPageBody--borderRadiusNone"
                  >
                    <EuiPageContent
                      horizontalPosition="center"
                    >
                      <EuiPanel
                        className="euiPageContent euiPageContent--horizontalCenter"
                        paddingSize="l"
                        role="main"
                      >
                        <div
                          className="euiPanel euiPanel--paddingLarge euiPanel--borderRadiusMedium euiPanel--plain euiPanel--hasShadow euiPageContent euiPageContent--horizontalCenter"
                          role="main"
                        >
                          <div>
                            <EuiFlexGroup
                              alignItems="flexEnd"
                              data-test-subj="top-nav"
                              justifyContent="spaceBetween"
                            >
                              <div
                                className="euiFlexGroup euiFlexGroup--gutterLarge euiFlexGroup--alignItemsFlexEnd euiFlexGroup--justifyContentSpaceBetween euiFlexGroup--directionRow euiFlexGroup--responsive"
                                data-test-subj="top-nav"
                              >
                                <EuiFlexItem
                                  grow={false}
                                >
                                  <div
                                    className="euiFlexItem euiFlexItem--flexGrowZero"
                                  >
                                    <EuiTitle
                                      size="l"
                                    >
                                      <h1
                                        className="euiTitle euiTitle--large"
                                        id="dashboardListingHeading"
                                      >
                                        Dashboards
                                      </h1>
                                    </EuiTitle>
                                  </div>
                                </EuiFlexItem>
                                <CreateButton
                                  dashboardProviders={
                                    Object {
                                      "dashboard": Object {
                                        "appId": "1",
                                        "editUrlPathFn": [MockFunction],
                                        "savedObjectsName": "dashboardSavedObjects",
                                        "viewUrlPathFn": [MockFunction],
                                      },
                                    }
                                  }
                                >
                                  <EuiFlexItem
                                    grow={false}
                                  >
                                    <div
                                      className="euiFlexItem euiFlexItem--flexGrowZero"
                                    >
                                      <EuiButton
                                        data-test-subj="newItemButton"
                                        fill={true}
                                        iconType="plusInCircle"
                                      >
                                        <EuiButtonDisplay
                                          baseClassName="euiButton"
                                          data-test-subj="newItemButton"
                                          disabled={false}
                                          element="button"
                                          fill={true}
                                          iconType="plusInCircle"
                                          isDisabled={false}
                                          type="button"
                                        >
                                          <button
                                            className="euiButton euiButton--primary euiButton--fill"
                                            data-test-subj="newItemButton"
                                            disabled={false}
                                            style={
                                              Object {
                                                "minWidth": undefined,
                                              }
                                            }
                                            type="button"
                                          >
                                            <EuiButtonContent
                                              className="euiButton__content"
                                              iconSide="left"
                                              iconType="plusInCircle"
                                              textProps={
                                                Object {
                                                  "className": "euiButton__text",
                                                }
                                              }
                                            >
                                              <span
                                                className="euiButtonContent euiButton__content"
                                              >
                                                <EuiIcon
                                                  className="euiButtonContent__icon"
                                                  color="inherit"
                                                  size="m"
                                                  type="plusInCircle"
                                                >
                                                  <span
                                                    className="euiButtonContent__icon"
                                                    color="inherit"
                                                    data-euiicon-type="plusInCircle"
                                                    size="m"
                                                  />
                                                </EuiIcon>
                                                <span
                                                  className="euiButton__text"
                                                >
                                                  <FormattedMessage
                                                    defaultMessage="Create"
                                                    id="dashboard.listing.createButtonText"
                                                    values={Object {}}
                                                  >
                                                    Create
                                                  </FormattedMessage>
                                                   
                                                </span>
                                              </span>
                                            </EuiButtonContent>
                                          </button>
                                        </EuiButtonDisplay>
                                      </EuiButton>
                                    </div>
                                  </EuiFlexItem>
                                </CreateButton>
                              </div>
                            </EuiFlexGroup>
                            <EuiSpacer
                              size="m"
                            >
                              <div
                                className="euiSpacer euiSpacer--m"
                              />
                            </EuiSpacer>
                            <EuiInMemoryTable
                              columns={
                                Array [
                                  Object {
                                    "field": "title",
                                    "name": "Title",
                                    "render": [Function],
                                    "sortable": true,
                                  },
                                  Object {
                                    "dataType": "string",
                                    "field": "type",
                                    "name": "Type",
                                    "sortable": true,
                                  },
                                  Object {
                                    "dataType": "string",
                                    "field": "description",
                                    "name": "Description",
                                    "sortable": true,
                                  },
                                  Object {
                                    "data-test-subj": "updated-at",
                                    "dataType": "date",
                                    "description": "Last update of the saved object",
                                    "field": "updated_at",
                                    "name": "Last updated",
                                    "render": [Function],
                                    "sortable": true,
                                  },
                                  Object {
                                    "actions": Array [
                                      Object {
                                        "description": "Edit",
                                        "enabled": [Function],
                                        "icon": "pencil",
                                        "name": "Edit",
                                        "onClick": [Function],
                                        "type": "icon",
                                      },
                                    ],
                                    "name": "Actions",
                                    "width": "100px",
                                  },
                                ]
                              }
                              data-test-subj="itemsInMemTable"
                              itemId="id"
                              items={
                                Array [
                                  Object {
                                    "appId": "1",
                                    "description": "dashboard0 desc",
                                    "editUrl": undefined,
                                    "id": "dashboard0",
                                    "title": "dashboard0",
                                    "type": "dashboardSavedObjects",
                                    "updated_at": undefined,
                                    "viewUrl": undefined,
                                  },
                                  Object {
                                    "appId": "1",
                                    "description": "dashboard1 desc",
                                    "editUrl": undefined,
                                    "id": "dashboard1",
                                    "title": "dashboard1",
                                    "type": "dashboardSavedObjects",
                                    "updated_at": undefined,
                                    "viewUrl": undefined,
                                  },
                                ]
                              }
                              loading={false}
                              message={
                                <FormattedMessage
                                  defaultMessage="No {entityNamePlural} matched your search."
                                  id="opensearch-dashboards-react.tableListView.listing.noMatchedItemsMessage"
                                  values={
                                    Object {
                                      "entityNamePlural": "dashboards",
                                    }
                                  }
                                />
                              }
                              pagination={
                                Object {
                                  "initialPageIndex": 0,
                                  "initialPageSize": 10,
                                  "pageSizeOptions": Array [
                                    10,
                                    20,
                                    50,
                                  ],
                                }
                              }
                              responsive={true}
                              search={
                                Object {
                                  "box": Object {
                                    "incremental": true,
                                  },
                                  "defaultQuery": "dashboard",
                                  "onChange": [Function],
                                  "toolsLeft": undefined,
                                }
                              }
                              selection={
                                Object {
                                  "onSelectionChange": [Function],
                                }
                              }
                              sorting={true}
                              tableLayout="fixed"
                            >
                              <div>
                                <EuiSearchBar
                                  box={
                                    Object {
                                      "incremental": true,
                                    }
                                  }
                                  defaultQuery="dashboard"
                                  onChange={[Function]}
                                >
                                  <EuiFlexGroup
                                    alignItems="center"
                                    gutterSize="m"
                                    wrap={true}
                                  >
                                    <div
                                      className="euiFlexGroup euiFlexGroup--gutterMedium euiFlexGroup--alignItemsCenter euiFlexGroup--directionRow euiFlexGroup--responsive euiFlexGroup--wrap"
                                    >
                                      <EuiFlexItem
                                        className="euiSearchBar__searchHolder"
                                        grow={true}
                                      >
                                        <div
                                          className="euiFlexItem euiSearchBar__searchHolder"
                                        >
                                          <EuiSearchBox
                                            incremental={true}
                                            isInvalid={false}
                                            onSearch={[Function]}
                                            placeholder="Search..."
                                            query="dashboard"
                                          >
                                            <EuiFieldSearch
                                              aria-label="This is a search bar. As you type, the results lower in the page will automatically filter."
                                              compressed={false}
                                              defaultValue="dashboard"
                                              fullWidth={true}
                                              incremental={true}
                                              inputRef={[Function]}
                                              isClearable={true}
                                              isInvalid={false}
                                              isLoading={false}
                                              onSearch={[Function]}
                                              placeholder="Search..."
                                            >
                                              <EuiFormControlLayout
                                                clear={
                                                  Object {
                                                    "onClick": [Function],
                                                  }
                                                }
                                                compressed={false}
                                                fullWidth={true}
                                                icon="search"
                                                isLoading={false}
                                              >
                                                <div
                                                  className="euiFormControlLayout euiFormControlLayout--fullWidth"
                                                >
                                                  <div
                                                    className="euiFormControlLayout__childrenWrapper"
                                                  >
                                                    <EuiValidatableControl
                                                      isInvalid={false}
                                                    >
                                                      <input
                                                        aria-label="This is a search bar. As you type, the results lower in the page will automatically filter."
                                                        className="euiFieldSearch euiFieldSearch--fullWidth euiFieldSearch-isClearable"
                                                        defaultValue="dashboard"
                                                        onKeyUp={[Function]}
                                                        placeholder="Search..."
                                                        type="search"
                                                      />
                                                    </EuiValidatableControl>
                                                    <EuiFormControlLayoutIcons
                                                      clear={
                                                        Object {
                                                          "onClick": [Function],
                                                        }
                                                      }
                                                      compressed={false}
                                                      icon="search"
                                                      isLoading={false}
                                                    >
                                                      <div
                                                        className="euiFormControlLayoutIcons"
                                                      >
                                                        <EuiFormControlLayoutCustomIcon
                                                          size="m"
                                                          type="search"
                                                        >
                                                          <span
                                                            className="euiFormControlLayoutCustomIcon"
                                                          >
                                                            <EuiIcon
                                                              aria-hidden="true"
                                                              className="euiFormControlLayoutCustomIcon__icon"
                                                              size="m"
                                                              type="search"
                                                            >
                                                              <span
                                                                aria-hidden="true"
                                                                className="euiFormControlLayoutCustomIcon__icon"
                                                                data-euiicon-type="search"
                                                                size="m"
                                                              />
                                                            </EuiIcon>
                                                          </span>
                                                        </EuiFormControlLayoutCustomIcon>
                                                      </div>
                                                      <div
                                                        className="euiFormControlLayoutIcons euiFormControlLayoutIcons--right"
                                                      >
                                                        <EuiFormControlLayoutClearButton
                                                          onClick={[Function]}
                                                          size="m"
                                                        >
                                                          <EuiI18n
                                                            default="Clear input"
                                                            token="euiFormControlLayoutClearButton.label"
                                                          >
                                                            <button
                                                              aria-label="Clear input"
                                                              className="euiFormControlLayoutClearButton"
                                                              onClick={[Function]}
                                                              type="button"
                                                            >
                                                              <EuiIcon
                                                                className="euiFormControlLayoutClearButton__icon"
                                                                type="cross"
                                                              >
                                                                <span
                                                                  className="euiFormControlLayoutClearButton__icon"
                                                                  data-euiicon-type="cross"
                                                                />
                                                              </EuiIcon>
                                                            </button>
                                                          </EuiI18n>
                                                        </EuiFormControlLayoutClearButton>
                                                      </div>
                                                    </EuiFormControlLayoutIcons>
                                                  </div>
                                                </div>
                                              </EuiFormControlLayout>
                                            </EuiFieldSearch>
                                          </EuiSearchBox>
                                        </div>
                                      </EuiFlexItem>
                                    </div>
                                  </EuiFlexGroup>
                                </EuiSearchBar>
                                <EuiSpacer
                                  size="l"
                                >
                                  <div
                                    className="euiSpacer euiSpacer--l"
                                  />
                                </EuiSpacer>
                                <EuiBasicTable
                                  columns={
                                    Array [
                                      Object {
                                        "field": "title",
                                        "name": "Title",
                                        "render": [Function],
                                        "sortable": true,
                                      },
                                      Object {
                                        "dataType": "string",
                                        "field": "type",
                                        "name": "Type",
                                        "sortable": true,
                                      },
                                      Object {
                                        "dataType": "string",
                                        "field": "description",
                                        "name": "Description",
                                        "sortable": true,
                                      },
                                      Object {
                                        "data-test-subj": "updated-at",
                                        "dataType": "date",
                                        "description": "Last update of the saved object",
                                        "field": "updated_at",
                                        "name": "Last updated",
                                        "render": [Function],
                                        "sortable": true,
                                      },
                                      Object {
                                        "actions": Array [
                                          Object {
                                            "description": "Edit",
                                            "enabled": [Function],
                                            "icon": "pencil",
                                            "name": "Edit",
                                            "onClick": [Function],
                                            "type": "icon",
                                          },
                                        ],
                                        "name": "Actions",
                                        "width": "100px",
                                      },
                                    ]
                                  }
                                  data-test-subj="itemsInMemTable"
                                  itemId="id"
                                  items={
                                    Array [
                                      Object {
                                        "appId": "1",
                                        "description": "dashboard0 desc",
                                        "editUrl": undefined,
                                        "id": "dashboard0",
                                        "title": "dashboard0",
                                        "type": "dashboardSavedObjects",
                                        "updated_at": undefined,
                                        "viewUrl": undefined,
                                      },
                                      Object {
                                        "appId": "1",
                                        "description": "dashboard1 desc",
                                        "editUrl": undefined,
                                        "id": "dashboard1",
                                        "title": "dashboard1",
                                        "type": "dashboardSavedObjects",
                                        "updated_at": undefined,
                                        "viewUrl": undefined,
                                      },
                                    ]
                                  }
                                  loading={false}
                                  noItemsMessage={
                                    <FormattedMessage
                                      defaultMessage="No {entityNamePlural} matched your search."
                                      id="opensearch-dashboards-react.tableListView.listing.noMatchedItemsMessage"
                                      values={
                                        Object {
                                          "entityNamePlural": "dashboards",
                                        }
                                      }
                                    />
                                  }
                                  onChange={[Function]}
                                  pagination={
                                    Object {
                                      "hidePerPageOptions": undefined,
                                      "pageIndex": 0,
                                      "pageSize": 10,
                                      "pageSizeOptions": Array [
                                        10,
                                        20,
                                        50,
                                      ],
                                      "totalItemCount": 2,
                                    }
                                  }
                                  responsive={true}
                                  selection={
                                    Object {
                                      "onSelectionChange": [Function],
                                    }
                                  }
                                  sorting={
                                    Object {
                                      "allowNeutralSort": true,
                                      "sort": undefined,
                                    }
                                  }
                                  tableLayout="fixed"
                                >
                                  <div
                                    className="euiBasicTable"
                                    data-test-subj="itemsInMemTable"
                                  >
                                    <div>
                                      <EuiTableHeaderMobile>
                                        <div
                                          className="euiTableHeaderMobile"
                                        >
                                          <EuiFlexGroup
                                            alignItems="baseline"
                                            justifyContent="spaceBetween"
                                            responsive={false}
                                          >
                                            <div
                                              className="euiFlexGroup euiFlexGroup--gutterLarge euiFlexGroup--alignItemsBaseline euiFlexGroup--justifyContentSpaceBetween euiFlexGroup--directionRow"
                                            >
                                              <EuiFlexItem
                                                grow={false}
                                              >
                                                <div
                                                  className="euiFlexItem euiFlexItem--flexGrowZero"
                                                >
                                                  <EuiI18n
                                                    default="Select all rows"
                                                    token="euiBasicTable.selectAllRows"
                                                  >
                                                    <EuiCheckbox
                                                      aria-label="Select all rows"
                                                      checked={false}
                                                      compressed={false}
                                                      disabled={false}
                                                      id="_selection_column-checkbox_generated-id"
                                                      indeterminate={false}
                                                      label="Select all rows"
                                                      onChange={[Function]}
                                                    >
                                                      <div
                                                        className="euiCheckbox"
                                                      >
                                                        <input
                                                          aria-label="Select all rows"
                                                          checked={false}
                                                          className="euiCheckbox__input"
                                                          disabled={false}
                                                          id="_selection_column-checkbox_generated-id"
                                                          onChange={[Function]}
                                                          type="checkbox"
                                                        />
                                                        <div
                                                          className="euiCheckbox__square"
                                                        />
                                                        <label
                                                          className="euiCheckbox__label"
                                                          htmlFor="_selection_column-checkbox_generated-id"
                                                        >
                                                          Select all rows
                                                        </label>
                                                      </div>
                                                    </EuiCheckbox>
                                                  </EuiI18n>
                                                </div>
                                              </EuiFlexItem>
                                              <EuiFlexItem
                                                grow={false}
                                              >
                                                <div
                                                  className="euiFlexItem euiFlexItem--flexGrowZero"
                                                >
                                                  <EuiTableSortMobile
                                                    items={
                                                      Array [
                                                        Object {
                                                          "isSortAscending": undefined,
                                                          "isSorted": false,
                                                          "key": "_data_s_title_0",
                                                          "name": "Title",
                                                          "onSort": [Function],
                                                        },
                                                        Object {
                                                          "isSortAscending": undefined,
                                                          "isSorted": false,
                                                          "key": "_data_s_type_1",
                                                          "name": "Type",
                                                          "onSort": [Function],
                                                        },
                                                        Object {
                                                          "isSortAscending": undefined,
                                                          "isSorted": false,
                                                          "key": "_data_s_description_2",
                                                          "name": "Description",
                                                          "onSort": [Function],
                                                        },
                                                        Object {
                                                          "isSortAscending": undefined,
                                                          "isSorted": false,
                                                          "key": "_data_s_updated_at_3",
                                                          "name": "Last updated",
                                                          "onSort": [Function],
                                                        },
                                                      ]
                                                    }
                                                  >
                                                    <div
                                                      className="euiTableSortMobile"
                                                    >
                                                      <EuiPopover
                                                        anchorPosition="downRight"
                                                        button={
                                                          <EuiButtonEmpty
                                                            flush="right"
                                                            iconSide="right"
                                                            iconType="arrowDown"
                                                            onClick={[Function]}
                                                            size="xs"
                                                          >
                                                            <EuiI18n
                                                              default="Sorting"
                                                              token="euiTableSortMobile.sorting"
                                                            />
                                                          </EuiButtonEmpty>
                                                        }
                                                        closePopover={[Function]}
                                                        display="inlineBlock"
                                                        hasArrow={true}
                                                        isOpen={false}
                                                        ownFocus={true}
                                                        panelPaddingSize="none"
                                                      >
                                                        <div
                                                          className="euiPopover euiPopover--anchorDownRight"
                                                        >
                                                          <div
                                                            className="euiPopover__anchor"
                                                          >
                                                            <EuiButtonEmpty
                                                              flush="right"
                                                              iconSide="right"
                                                              iconType="arrowDown"
                                                              onClick={[Function]}
                                                              size="xs"
                                                            >
                                                              <button
                                                                className="euiButtonEmpty euiButtonEmpty--primary euiButtonEmpty--xSmall euiButtonEmpty--flushRight"
                                                                disabled={false}
                                                                onClick={[Function]}
                                                                type="button"
                                                              >
                                                                <EuiButtonContent
                                                                  className="euiButtonEmpty__content"
                                                                  iconSide="right"
                                                                  iconSize="s"
                                                                  iconType="arrowDown"
                                                                  textProps={
                                                                    Object {
                                                                      "className": "euiButtonEmpty__text",
                                                                    }
                                                                  }
                                                                >
                                                                  <span
                                                                    className="euiButtonContent euiButtonContent--iconRight euiButtonEmpty__content"
                                                                  >
                                                                    <EuiIcon
                                                                      className="euiButtonContent__icon"
                                                                      color="inherit"
                                                                      size="s"
                                                                      type="arrowDown"
                                                                    >
                                                                      <span
                                                                        className="euiButtonContent__icon"
                                                                        color="inherit"
                                                                        data-euiicon-type="arrowDown"
                                                                        size="s"
                                                                      />
                                                                    </EuiIcon>
                                                                    <span
                                                                      className="euiButtonEmpty__text"
                                                                    >
                                                                      <EuiI18n
                                                                        default="Sorting"
                                                                        token="euiTableSortMobile.sorting"
                                                                      >
                                                                        Sorting
                                                                      </EuiI18n>
                                                                    </span>
                                                                  </span>
                                                                </EuiButtonContent>
                                                              </button>
                                                            </EuiButtonEmpty>
                                                          </div>
                                                        </div>
                                                      </EuiPopover>
                                                    </div>
                                                  </EuiTableSortMobile>
                                                </div>
                                              </EuiFlexItem>
                                            </div>
                                          </EuiFlexGroup>
                                        </div>
                                      </EuiTableHeaderMobile>
                                      <EuiTable
                                        id="__table_generated-id"
                                        responsive={true}
                                        tableLayout="fixed"
                                      >
                                        <table
                                          className="euiTable euiTable--responsive"
                                          id="__table_generated-id"
                                          tabIndex={-1}
                                        >
                                          <EuiScreenReaderOnly>
                                            <caption
                                              className="euiScreenReaderOnly euiTableCaption"
                                            >
                                              <EuiDelayRender
                                                delay={500}
                                              />
                                            </caption>
                                          </EuiScreenReaderOnly>
                                          <EuiTableHeader>
                                            <thead>
                                              <tr>
                                                <EuiTableHeaderCellCheckbox
                                                  key="_selection_column_h"
                                                >
                                                  <th
                                                    className="euiTableHeaderCellCheckbox"
                                                    scope="col"
                                                    style={
                                                      Object {
                                                        "width": undefined,
                                                      }
                                                    }
                                                  >
                                                    <div
                                                      className="euiTableCellContent"
                                                    >
                                                      <EuiI18n
                                                        default="Select all rows"
                                                        token="euiBasicTable.selectAllRows"
                                                      >
                                                        <EuiCheckbox
                                                          aria-label="Select all rows"
                                                          checked={false}
                                                          compressed={false}
                                                          data-test-subj="checkboxSelectAll"
                                                          disabled={false}
                                                          id="_selection_column-checkbox_generated-id"
                                                          indeterminate={false}
                                                          label={null}
                                                          onChange={[Function]}
                                                          type="inList"
                                                        >
                                                          <div
                                                            className="euiCheckbox euiCheckbox--inList euiCheckbox--noLabel"
                                                          >
                                                            <input
                                                              aria-label="Select all rows"
                                                              checked={false}
                                                              className="euiCheckbox__input"
                                                              data-test-subj="checkboxSelectAll"
                                                              disabled={false}
                                                              id="_selection_column-checkbox_generated-id"
                                                              onChange={[Function]}
                                                              type="checkbox"
                                                            />
                                                            <div
                                                              className="euiCheckbox__square"
                                                            />
                                                          </div>
                                                        </EuiCheckbox>
                                                      </EuiI18n>
                                                    </div>
                                                  </th>
                                                </EuiTableHeaderCellCheckbox>
                                                <EuiTableHeaderCell
                                                  align="left"
                                                  data-test-subj="tableHeaderCell_title_0"
                                                  isSorted={false}
                                                  key="_data_h_title_0"
                                                  onSort={[Function]}
                                                >
                                                  <th
                                                    aria-live="polite"
                                                    aria-sort="none"
                                                    className="euiTableHeaderCell"
                                                    data-test-subj="tableHeaderCell_title_0"
                                                    role="columnheader"
                                                    scope="col"
                                                    style={
                                                      Object {
                                                        "width": undefined,
                                                      }
                                                    }
                                                  >
                                                    <button
                                                      className="euiTableHeaderButton"
                                                      data-test-subj="tableHeaderSortButton"
                                                      onClick={[Function]}
                                                      type="button"
                                                    >
                                                      <CellContents
                                                        className="euiTableCellContent"
                                                        isSorted={false}
                                                        showSortMsg={true}
                                                      >
                                                        <span
                                                          className="euiTableCellContent"
                                                        >
                                                          <EuiInnerText>
                                                            <EuiI18n
                                                              default="{innerText}; {description}"
                                                              token="euiTableHeaderCell.titleTextWithDesc"
                                                              values={
                                                                Object {
                                                                  "description": undefined,
                                                                  "innerText": undefined,
                                                                }
                                                              }
                                                            >
                                                              <span
                                                                className="euiTableCellContent__text"
                                                              >
                                                                Title
                                                              </span>
                                                            </EuiI18n>
                                                          </EuiInnerText>
                                                        </span>
                                                      </CellContents>
                                                    </button>
                                                  </th>
                                                </EuiTableHeaderCell>
                                                <EuiTableHeaderCell
                                                  align="left"
                                                  data-test-subj="tableHeaderCell_type_1"
                                                  isSorted={false}
                                                  key="_data_h_type_1"
                                                  onSort={[Function]}
                                                >
                                                  <th
                                                    aria-live="polite"
                                                    aria-sort="none"
                                                    className="euiTableHeaderCell"
                                                    data-test-subj="tableHeaderCell_type_1"
                                                    role="columnheader"
                                                    scope="col"
                                                    style={
                                                      Object {
                                                        "width": undefined,
                                                      }
                                                    }
                                                  >
                                                    <button
                                                      className="euiTableHeaderButton"
                                                      data-test-subj="tableHeaderSortButton"
                                                      onClick={[Function]}
                                                      type="button"
                                                    >
                                                      <CellContents
                                                        className="euiTableCellContent"
                                                        isSorted={false}
                                                        showSortMsg={true}
                                                      >
                                                        <span
                                                          className="euiTableCellContent"
                                                        >
                                                          <EuiInnerText>
                                                            <EuiI18n
                                                              default="{innerText}; {description}"
                                                              token="euiTableHeaderCell.titleTextWithDesc"
                                                              values={
                                                                Object {
                                                                  "description": undefined,
                                                                  "innerText": undefined,
                                                                }
                                                              }
                                                            >
                                                              <span
                                                                className="euiTableCellContent__text"
                                                              >
                                                                Type
                                                              </span>
                                                            </EuiI18n>
                                                          </EuiInnerText>
                                                        </span>
                                                      </CellContents>
                                                    </button>
                                                  </th>
                                                </EuiTableHeaderCell>
                                                <EuiTableHeaderCell
                                                  align="left"
                                                  data-test-subj="tableHeaderCell_description_2"
                                                  isSorted={false}
                                                  key="_data_h_description_2"
                                                  onSort={[Function]}
                                                >
                                                  <th
                                                    aria-live="polite"
                                                    aria-sort="none"
                                                    className="euiTableHeaderCell"
                                                    data-test-subj="tableHeaderCell_description_2"
                                                    role="columnheader"
                                                    scope="col"
                                                    style={
                                                      Object {
                                                        "width": undefined,
                                                      }
                                                    }
                                                  >
                                                    <button
                                                      className="euiTableHeaderButton"
                                                      data-test-subj="tableHeaderSortButton"
                                                      onClick={[Function]}
                                                      type="button"
                                                    >
                                                      <CellContents
                                                        className="euiTableCellContent"
                                                        isSorted={false}
                                                        showSortMsg={true}
                                                      >
                                                        <span
                                                          className="euiTableCellContent"
                                                        >
                                                          <EuiInnerText>
                                                            <EuiI18n
                                                              default="{innerText}; {description}"
                                                              token="euiTableHeaderCell.titleTextWithDesc"
                                                              values={
                                                                Object {
                                                                  "description": undefined,
                                                                  "innerText": undefined,
                                                                }
                                                              }
                                                            >
                                                              <span
                                                                className="euiTableCellContent__text"
                                                              >
                                                                Description
                                                              </span>
                                                            </EuiI18n>
                                                          </EuiInnerText>
                                                        </span>
                                                      </CellContents>
                                                    </button>
                                                  </th>
                                                </EuiTableHeaderCell>
                                                <EuiTableHeaderCell
                                                  align="left"
                                                  data-test-subj="tableHeaderCell_updated_at_3"
                                                  description="Last update of the saved object"
                                                  isSorted={false}
                                                  key="_data_h_updated_at_3"
                                                  onSort={[Function]}
                                                >
                                                  <th
                                                    aria-live="polite"
                                                    aria-sort="none"
                                                    className="euiTableHeaderCell"
                                                    data-test-subj="tableHeaderCell_updated_at_3"
                                                    role="columnheader"
                                                    scope="col"
                                                    style={
                                                      Object {
                                                        "width": undefined,
                                                      }
                                                    }
                                                  >
                                                    <button
                                                      className="euiTableHeaderButton"
                                                      data-test-subj="tableHeaderSortButton"
                                                      onClick={[Function]}
                                                      type="button"
                                                    >
                                                      <CellContents
                                                        className="euiTableCellContent"
                                                        description="Last update of the saved object"
                                                        isSorted={false}
                                                        showSortMsg={true}
                                                      >
                                                        <span
                                                          className="euiTableCellContent"
                                                        >
                                                          <EuiInnerText>
                                                            <EuiI18n
                                                              default="{innerText}; {description}"
                                                              token="euiTableHeaderCell.titleTextWithDesc"
                                                              values={
                                                                Object {
                                                                  "description": "Last update of the saved object",
                                                                  "innerText": undefined,
                                                                }
                                                              }
                                                            >
                                                              <span
                                                                className="euiTableCellContent__text"
                                                                title="; Last update of the saved object"
                                                              >
                                                                Last updated
                                                              </span>
                                                            </EuiI18n>
                                                          </EuiInnerText>
                                                          <EuiScreenReaderOnly>
                                                            <span
                                                              className="euiScreenReaderOnly"
                                                            >
                                                              Last update of the saved object
                                                            </span>
                                                          </EuiScreenReaderOnly>
                                                        </span>
                                                      </CellContents>
                                                    </button>
                                                  </th>
                                                </EuiTableHeaderCell>
                                                <EuiTableHeaderCell
                                                  align="right"
                                                  key="_actions_h_4"
                                                  width="100px"
                                                >
                                                  <th
                                                    className="euiTableHeaderCell"
                                                    role="columnheader"
                                                    scope="col"
                                                    style={
                                                      Object {
                                                        "width": "100px",
                                                      }
                                                    }
                                                  >
                                                    <CellContents
                                                      className="euiTableCellContent euiTableCellContent--alignRight"
                                                      showSortMsg={false}
                                                    >
                                                      <span
                                                        className="euiTableCellContent euiTableCellContent--alignRight"
                                                      >
                                                        <EuiInnerText>
                                                          <EuiI18n
                                                            default="{innerText}; {description}"
                                                            token="euiTableHeaderCell.titleTextWithDesc"
                                                            values={
                                                              Object {
                                                                "description": undefined,
                                                                "innerText": undefined,
                                                              }
                                                            }
                                                          >
                                                            <span
                                                              className="euiTableCellContent__text"
                                                            >
                                                              Actions
                                                            </span>
                                                          </EuiI18n>
                                                        </EuiInnerText>
                                                      </span>
                                                    </CellContents>
                                                  </th>
                                                </EuiTableHeaderCell>
                                              </tr>
                                            </thead>
                                          </EuiTableHeader>
                                          <EuiTableBody
                                            bodyRef={[Function]}
                                          >
                                            <tbody>
                                              <EuiTableRow
                                                hasActions={true}
                                                isSelectable={true}
                                                isSelected={false}
                                              >
                                                <tr
                                                  className="euiTableRow euiTableRow-isSelectable euiTableRow-hasActions"
                                                >
                                                  <EuiTableRowCellCheckbox
                                                    key="_selection_column_dashboard0"
                                                  >
                                                    <td
                                                      className="euiTableRowCellCheckbox"
                                                    >
                                                      <div
                                                        className="euiTableCellContent"
                                                      >
                                                        <EuiI18n
                                                          default="Select this row"
                                                          token="euiBasicTable.selectThisRow"
                                                        >
                                                          <EuiCheckbox
                                                            aria-label="Select this row"
                                                            checked={false}
                                                            compressed={false}
                                                            data-test-subj="checkboxSelectRow-dashboard0"
                                                            disabled={false}
                                                            id="_selection_column_dashboard0-checkbox"
                                                            indeterminate={false}
                                                            onChange={[Function]}
                                                            title="Select this row"
                                                            type="inList"
                                                          >
                                                            <div
                                                              className="euiCheckbox euiCheckbox--inList euiCheckbox--noLabel"
                                                            >
                                                              <input
                                                                aria-label="Select this row"
                                                                checked={false}
                                                                className="euiCheckbox__input"
                                                                data-test-subj="checkboxSelectRow-dashboard0"
                                                                disabled={false}
                                                                id="_selection_column_dashboard0-checkbox"
                                                                onChange={[Function]}
                                                                title="Select this row"
                                                                type="checkbox"
                                                              />
                                                              <div
                                                                className="euiCheckbox__square"
                                                              />
                                                            </div>
                                                          </EuiCheckbox>
                                                        </EuiI18n>
                                                      </div>
                                                    </td>
                                                  </EuiTableRowCellCheckbox>
                                                  <EuiTableRowCell
                                                    align="left"
                                                    key="_data_column_title_dashboard0_0"
                                                    mobileOptions={
                                                      Object {
                                                        "header": "Title",
                                                        "render": undefined,
                                                      }
                                                    }
                                                    setScopeRow={false}
                                                    textOnly={false}
                                                  >
                                                    <td
                                                      className="euiTableRowCell"
                                                      style={
                                                        Object {
                                                          "width": undefined,
                                                        }
                                                      }
                                                    >
                                                      <div
                                                        className="euiTableRowCell__mobileHeader euiTableRowCell--hideForDesktop"
                                                      >
                                                        Title
                                                      </div>
                                                      <div
                                                        className="euiTableCellContent euiTableCellContent--overflowingContent"
                                                      >
                                                        <EuiLink
                                                          className=""
                                                          data-test-subj="dashboardListingTitleLink-dashboard0"
                                                          key=".0"
                                                        >
                                                          <button
                                                            className="euiLink euiLink--primary"
                                                            data-test-subj="dashboardListingTitleLink-dashboard0"
                                                            disabled={false}
                                                            type="button"
                                                          >
                                                            dashboard0
                                                          </button>
                                                        </EuiLink>
                                                      </div>
                                                    </td>
                                                  </EuiTableRowCell>
                                                  <EuiTableRowCell
                                                    align="left"
                                                    key="_data_column_type_dashboard0_1"
                                                    mobileOptions={
                                                      Object {
                                                        "header": "Type",
                                                        "render": undefined,
                                                      }
                                                    }
                                                    setScopeRow={false}
                                                    textOnly={true}
                                                  >
                                                    <td
                                                      className="euiTableRowCell"
                                                      style={
                                                        Object {
                                                          "width": undefined,
                                                        }
                                                      }
                                                    >
                                                      <div
                                                        className="euiTableRowCell__mobileHeader euiTableRowCell--hideForDesktop"
                                                      >
                                                        Type
                                                      </div>
                                                      <div
                                                        className="euiTableCellContent"
                                                      >
                                                        <span
                                                          className="euiTableCellContent__text"
                                                        >
                                                          dashboardSavedObjects
                                                        </span>
                                                      </div>
                                                    </td>
                                                  </EuiTableRowCell>
                                                  <EuiTableRowCell
                                                    align="left"
                                                    key="_data_column_description_dashboard0_2"
                                                    mobileOptions={
                                                      Object {
                                                        "header": "Description",
                                                        "render": undefined,
                                                      }
                                                    }
                                                    setScopeRow={false}
                                                    textOnly={true}
                                                  >
                                                    <td
                                                      className="euiTableRowCell"
                                                      style={
                                                        Object {
                                                          "width": undefined,
                                                        }
                                                      }
                                                    >
                                                      <div
                                                        className="euiTableRowCell__mobileHeader euiTableRowCell--hideForDesktop"
                                                      >
                                                        Description
                                                      </div>
                                                      <div
                                                        className="euiTableCellContent"
                                                      >
                                                        <span
                                                          className="euiTableCellContent__text"
                                                        >
                                                          dashboard0 desc
                                                        </span>
                                                      </div>
                                                    </td>
                                                  </EuiTableRowCell>
                                                  <EuiTableRowCell
                                                    align="left"
                                                    data-test-subj="updated-at"
                                                    key="_data_column_updated_at_dashboard0_3"
                                                    mobileOptions={
                                                      Object {
                                                        "header": "Last updated",
                                                        "render": undefined,
                                                      }
                                                    }
                                                    setScopeRow={false}
                                                    textOnly={false}
                                                  >
                                                    <td
                                                      className="euiTableRowCell"
                                                      data-test-subj="updated-at"
                                                      style={
                                                        Object {
                                                          "width": undefined,
                                                        }
                                                      }
                                                    >
                                                      <div
                                                        className="euiTableRowCell__mobileHeader euiTableRowCell--hideForDesktop"
                                                      >
                                                        Last updated
                                                      </div>
                                                      <div
                                                        className="euiTableCellContent euiTableCellContent--overflowingContent"
                                                      />
                                                    </td>
                                                  </EuiTableRowCell>
                                                  <EuiTableRowCell
                                                    align="right"
                                                    hasActions={true}
                                                    key="record_actions_dashboard0_4"
                                                    showOnHover={true}
                                                    textOnly={false}
                                                  >
                                                    <td
                                                      className="euiTableRowCell euiTableRowCell--hasActions"
                                                      style={
                                                        Object {
                                                          "width": undefined,
                                                        }
                                                      }
                                                    >
                                                      <div
                                                        className="euiTableCellContent euiTableCellContent--alignRight euiTableCellContent--showOnHover euiTableCellContent--overflowingContent"
                                                      >
                                                        <ExpandedItemActions
                                                          actionEnabled={[Function]}
                                                          actions={
                                                            Array [
                                                              Object {
                                                                "description": "Edit",
                                                                "enabled": [Function],
                                                                "icon": "pencil",
                                                                "name": "Edit",
                                                                "onClick": [Function],
                                                                "type": "icon",
                                                              },
                                                            ]
                                                          }
                                                          className="euiTableCellContent__hoverItem"
                                                          item={
                                                            Object {
                                                              "appId": "1",
                                                              "description": "dashboard0 desc",
                                                              "editUrl": undefined,
                                                              "id": "dashboard0",
                                                              "title": "dashboard0",
                                                              "type": "dashboardSavedObjects",
                                                              "updated_at": undefined,
                                                              "viewUrl": undefined,
                                                            }
                                                          }
                                                          itemId="dashboard0"
                                                          key=".0"
                                                        >
                                                          <DefaultItemAction
                                                            action={
                                                              Object {
                                                                "description": "Edit",
                                                                "enabled": [Function],
                                                                "icon": "pencil",
                                                                "name": "Edit",
                                                                "onClick": [Function],
                                                                "type": "icon",
                                                              }
                                                            }
                                                            className="euiTableCellContent__hoverItem"
                                                            enabled={true}
                                                            item={
                                                              Object {
                                                                "appId": "1",
                                                                "description": "dashboard0 desc",
                                                                "editUrl": undefined,
                                                                "id": "dashboard0",
                                                                "title": "dashboard0",
                                                                "type": "dashboardSavedObjects",
                                                                "updated_at": undefined,
                                                                "viewUrl": undefined,
                                                              }
                                                            }
                                                            key="item_action_dashboard0_0"
                                                          >
                                                            <EuiToolTip
                                                              content="Edit"
                                                              delay="long"
                                                              position="top"
                                                            >
                                                              <span
                                                                className="euiToolTipAnchor"
                                                                onKeyUp={[Function]}
                                                                onMouseOut={[Function]}
                                                                onMouseOver={[Function]}
                                                              >
                                                                <EuiButtonIcon
                                                                  aria-labelledby="generated-id"
                                                                  className="euiTableCellContent__hoverItem"
                                                                  color="primary"
                                                                  iconType="pencil"
                                                                  isDisabled={false}
                                                                  onClick={[Function]}
                                                                >
                                                                  <button
                                                                    aria-labelledby="generated-id"
                                                                    className="euiButtonIcon euiButtonIcon--primary euiButtonIcon--empty euiButtonIcon--xSmall euiTableCellContent__hoverItem"
                                                                    disabled={false}
                                                                    onClick={[Function]}
                                                                    type="button"
                                                                  >
                                                                    <EuiIcon
                                                                      aria-hidden="true"
                                                                      className="euiButtonIcon__icon"
                                                                      color="inherit"
                                                                      size="m"
                                                                      type="pencil"
                                                                    >
                                                                      <span
                                                                        aria-hidden="true"
                                                                        className="euiButtonIcon__icon"
                                                                        color="inherit"
                                                                        data-euiicon-type="pencil"
                                                                        size="m"
                                                                      />
                                                                    </EuiIcon>
                                                                  </button>
                                                                </EuiButtonIcon>
                                                                <EuiScreenReaderOnly>
                                                                  <span
                                                                    className="euiScreenReaderOnly"
                                                                    id="generated-id"
                                                                  >
                                                                    Edit
                                                                  </span>
                                                                </EuiScreenReaderOnly>
                                                              </span>
                                                            </EuiToolTip>
                                                          </DefaultItemAction>
                                                        </ExpandedItemActions>
                                                      </div>
                                                    </td>
                                                  </EuiTableRowCell>
                                                </tr>
                                              </EuiTableRow>
                                              <EuiTableRow
                                                hasActions={true}
                                                isSelectable={true}
                                                isSelected={false}
                                              >
                                                <tr
                                                  className="euiTableRow euiTableRow-isSelectable euiTableRow-hasActions"
                                                >
                                                  <EuiTableRowCellCheckbox
                                                    key="_selection_column_dashboard1"
                                                  >
                                                    <td
                                                      className="euiTableRowCellCheckbox"
                                                    >
                                                      <div
                                                        className="euiTableCellContent"
                                                      >
                                                        <EuiI18n
                                                          default="Select this row"
                                                          token="euiBasicTable.selectThisRow"
                                                        >
                                                          <EuiCheckbox
                                                            aria-label="Select this row"
                                                            checked={false}
                                                            compressed={false}
                                                            data-test-subj="checkboxSelectRow-dashboard1"
                                                            disabled={false}
                                                            id="_selection_column_dashboard1-checkbox"
                                                            indeterminate={false}
                                                            onChange={[Function]}
                                                            title="Select this row"
                                                            type="inList"
                                                          >
                                                            <div
                                                              className="euiCheckbox euiCheckbox--inList euiCheckbox--noLabel"
                                                            >
                                                              <input
                                                                aria-label="Select this row"
                                                                checked={false}
                                                                className="euiCheckbox__input"
                                                                data-test-subj="checkboxSelectRow-dashboard1"
                                                                disabled={false}
                                                                id="_selection_column_dashboard1-checkbox"
                                                                onChange={[Function]}
                                                                title="Select this row"
                                                                type="checkbox"
                                                              />
                                                              <div
                                                                className="euiCheckbox__square"
                                                              />
                                                            </div>
                                                          </EuiCheckbox>
                                                        </EuiI18n>
                                                      </div>
                                                    </td>
                                                  </EuiTableRowCellCheckbox>
                                                  <EuiTableRowCell
                                                    align="left"
                                                    key="_data_column_title_dashboard1_0"
                                                    mobileOptions={
                                                      Object {
                                                        "header": "Title",
                                                        "render": undefined,
                                                      }
                                                    }
                                                    setScopeRow={false}
                                                    textOnly={false}
                                                  >
                                                    <td
                                                      className="euiTableRowCell"
                                                      style={
                                                        Object {
                                                          "width": undefined,
                                                        }
                                                      }
                                                    >
                                                      <div
                                                        className="euiTableRowCell__mobileHeader euiTableRowCell--hideForDesktop"
                                                      >
                                                        Title
                                                      </div>
                                                      <div
                                                        className="euiTableCellContent euiTableCellContent--overflowingContent"
                                                      >
                                                        <EuiLink
                                                          className=""
                                                          data-test-subj="dashboardListingTitleLink-dashboard1"
                                                          key=".0"
                                                        >
                                                          <button
                                                            className="euiLink euiLink--primary"
                                                            data-test-subj="dashboardListingTitleLink-dashboard1"
                                                            disabled={false}
                                                            type="button"
                                                          >
                                                            dashboard1
                                                          </button>
                                                        </EuiLink>
                                                      </div>
                                                    </td>
                                                  </EuiTableRowCell>
                                                  <EuiTableRowCell
                                                    align="left"
                                                    key="_data_column_type_dashboard1_1"
                                                    mobileOptions={
                                                      Object {
                                                        "header": "Type",
                                                        "render": undefined,
                                                      }
                                                    }
                                                    setScopeRow={false}
                                                    textOnly={true}
                                                  >
                                                    <td
                                                      className="euiTableRowCell"
                                                      style={
                                                        Object {
                                                          "width": undefined,
                                                        }
                                                      }
                                                    >
                                                      <div
                                                        className="euiTableRowCell__mobileHeader euiTableRowCell--hideForDesktop"
                                                      >
                                                        Type
                                                      </div>
                                                      <div
                                                        className="euiTableCellContent"
                                                      >
                                                        <span
                                                          className="euiTableCellContent__text"
                                                        >
                                                          dashboardSavedObjects
                                                        </span>
                                                      </div>
                                                    </td>
                                                  </EuiTableRowCell>
                                                  <EuiTableRowCell
                                                    align="left"
                                                    key="_data_column_description_dashboard1_2"
                                                    mobileOptions={
                                                      Object {
                                                        "header": "Description",
                                                        "render": undefined,
                                                      }
                                                    }
                                                    setScopeRow={false}
                                                    textOnly={true}
                                                  >
                                                    <td
                                                      className="euiTableRowCell"
                                                      style={
                                                        Object {
                                                          "width": undefined,
                                                        }
                                                      }
                                                    >
                                                      <div
                                                        className="euiTableRowCell__mobileHeader euiTableRowCell--hideForDesktop"
                                                      >
                                                        Description
                                                      </div>
                                                      <div
                                                        className="euiTableCellContent"
                                                      >
                                                        <span
                                                          className="euiTableCellContent__text"
                                                        >
                                                          dashboard1 desc
                                                        </span>
                                                      </div>
                                                    </td>
                                                  </EuiTableRowCell>
                                                  <EuiTableRowCell
                                                    align="left"
                                                    data-test-subj="updated-at"
                                                    key="_data_column_updated_at_dashboard1_3"
                                                    mobileOptions={
                                                      Object {
                                                        "header": "Last updated",
                                                        "render": undefined,
                                                      }
                                                    }
                                                    setScopeRow={false}
                                                    textOnly={false}
                                                  >
                                                    <td
                                                      className="euiTableRowCell"
                                                      data-test-subj="updated-at"
                                                      style={
                                                        Object {
                                                          "width": undefined,
                                                        }
                                                      }
                                                    >
                                                      <div
                                                        className="euiTableRowCell__mobileHeader euiTableRowCell--hideForDesktop"
                                                      >
                                                        Last updated
                                                      </div>
                                                      <div
                                                        className="euiTableCellContent euiTableCellContent--overflowingContent"
                                                      />
                                                    </td>
                                                  </EuiTableRowCell>
                                                  <EuiTableRowCell
                                                    align="right"
                                                    hasActions={true}
                                                    key="record_actions_dashboard1_4"
                                                    showOnHover={true}
                                                    textOnly={false}
                                                  >
                                                    <td
                                                      className="euiTableRowCell euiTableRowCell--hasActions"
                                                      style={
                                                        Object {
                                                          "width": undefined,
                                                        }
                                                      }
                                                    >
                                                      <div
                                                        className="euiTableCellContent euiTableCellContent--alignRight euiTableCellContent--showOnHover euiTableCellContent--overflowingContent"
                                                      >
                                                        <ExpandedItemActions
                                                          actionEnabled={[Function]}
                                                          actions={
                                                            Array [
                                                              Object {
                                                                "description": "Edit",
                                                                "enabled": [Function],
                                                                "icon": "pencil",
                                                                "name": "Edit",
                                                                "onClick": [Function],
                                                                "type": "icon",
                                                              },
                                                            ]
                                                          }
                                                          className="euiTableCellContent__hoverItem"
                                                          item={
                                                            Object {
                                                              "appId": "1",
                                                              "description": "dashboard1 desc",
                                                              "editUrl": undefined,
                                                              "id": "dashboard1",
                                                              "title": "dashboard1",
                                                              "type": "dashboardSavedObjects",
                                                              "updated_at": undefined,
                                                              "viewUrl": undefined,
                                                            }
                                                          }
                                                          itemId="dashboard1"
                                                          key=".0"
                                                        >
                                                          <DefaultItemAction
                                                            action={
                                                              Object {
                                                                "description": "Edit",
                                                                "enabled": [Function],
                                                                "icon": "pencil",
                                                                "name": "Edit",
                                                                "onClick": [Function],
                                                                "type": "icon",
                                                              }
                                                            }
                                                            className="euiTableCellContent__hoverItem"
                                                            enabled={true}
                                                            item={
                                                              Object {
                                                                "appId": "1",
                                                                "description": "dashboard1 desc",
                                                                "editUrl": undefined,
                                                                "id": "dashboard1",
                                                                "title": "dashboard1",
                                                                "type": "dashboardSavedObjects",
                                                                "updated_at": undefined,
                                                                "viewUrl": undefined,
                                                              }
                                                            }
                                                            key="item_action_dashboard1_0"
                                                          >
                                                            <EuiToolTip
                                                              content="Edit"
                                                              delay="long"
                                                              position="top"
                                                            >
                                                              <span
                                                                className="euiToolTipAnchor"
                                                                onKeyUp={[Function]}
                                                                onMouseOut={[Function]}
                                                                onMouseOver={[Function]}
                                                              >
                                                                <EuiButtonIcon
                                                                  aria-labelledby="generated-id"
                                                                  className="euiTableCellContent__hoverItem"
                                                                  color="primary"
                                                                  iconType="pencil"
                                                                  isDisabled={false}
                                                                  onClick={[Function]}
                                                                >
                                                                  <button
                                                                    aria-labelledby="generated-id"
                                                                    className="euiButtonIcon euiButtonIcon--primary euiButtonIcon--empty euiButtonIcon--xSmall euiTableCellContent__hoverItem"
                                                                    disabled={false}
                                                                    onClick={[Function]}
                                                                    type="button"
                                                                  >
                                                                    <EuiIcon
                                                                      aria-hidden="true"
                                                                      className="euiButtonIcon__icon"
                                                                      color="inherit"
                                                                      size="m"
                                                                      type="pencil"
                                                                    >
                                                                      <span
                                                                        aria-hidden="true"
                                                                        className="euiButtonIcon__icon"
                                                                        color="inherit"
                                                                        data-euiicon-type="pencil"
                                                                        size="m"
                                                                      />
                                                                    </EuiIcon>
                                                                  </button>
                                                                </EuiButtonIcon>
                                                                <EuiScreenReaderOnly>
                                                                  <span
                                                                    className="euiScreenReaderOnly"
                                                                    id="generated-id"
                                                                  >
                                                                    Edit
                                                                  </span>
                                                                </EuiScreenReaderOnly>
                                                              </span>
                                                            </EuiToolTip>
                                                          </DefaultItemAction>
                                                        </ExpandedItemActions>
                                                      </div>
                                                    </td>
                                                  </EuiTableRowCell>
                                                </tr>
                                              </EuiTableRow>
                                            </tbody>
                                          </EuiTableBody>
                                        </table>
                                      </EuiTable>
                                    </div>
                                    <PaginationBar
                                      aria-controls="__table_generated-id"
                                      onPageChange={[Function]}
                                      onPageSizeChange={[Function]}
                                      pagination={
                                        Object {
                                          "hidePerPageOptions": undefined,
                                          "pageIndex": 0,
                                          "pageSize": 10,
                                          "pageSizeOptions": Array [
                                            10,
                                            20,
                                            50,
                                          ],
                                          "totalItemCount": 2,
                                        }
                                      }
                                    >
                                      <div>
                                        <EuiSpacer
                                          size="m"
                                        >
                                          <div
                                            className="euiSpacer euiSpacer--m"
                                          />
                                        </EuiSpacer>
                                        <EuiTablePagination
                                          activePage={0}
                                          aria-controls="__table_generated-id"
                                          itemsPerPage={10}
                                          itemsPerPageOptions={
                                            Array [
                                              10,
                                              20,
                                              50,
                                            ]
                                          }
                                          onChangeItemsPerPage={[Function]}
                                          onChangePage={[Function]}
                                          pageCount={1}
                                        >
                                          <EuiFlexGroup
                                            alignItems="center"
                                            justifyContent="spaceBetween"
                                            responsive={false}
                                          >
                                            <div
                                              className="euiFlexGroup euiFlexGroup--gutterLarge euiFlexGroup--alignItemsCenter euiFlexGroup--justifyContentSpaceBetween euiFlexGroup--directionRow"
                                            >
                                              <EuiFlexItem
                                                grow={false}
                                              >
                                                <div
                                                  className="euiFlexItem euiFlexItem--flexGrowZero"
                                                >
                                                  <EuiPopover
                                                    anchorPosition="upRight"
                                                    button={
                                                      <EuiButtonEmpty
                                                        color="text"
                                                        data-test-subj="tablePaginationPopoverButton"
                                                        iconSide="right"
                                                        iconType="arrowDown"
                                                        onClick={[Function]}
                                                        size="xs"
                                                      >
                                                        <EuiI18n
                                                          default="Rows per page"
                                                          token="euiTablePagination.rowsPerPage"
                                                        />
                                                        : 
                                                        10
                                                      </EuiButtonEmpty>
                                                    }
                                                    closePopover={[Function]}
                                                    display="inlineBlock"
                                                    hasArrow={true}
                                                    isOpen={false}
                                                    ownFocus={true}
                                                    panelPaddingSize="none"
                                                  >
                                                    <div
                                                      className="euiPopover euiPopover--anchorUpRight"
                                                    >
                                                      <div
                                                        className="euiPopover__anchor"
                                                      >
                                                        <EuiButtonEmpty
                                                          color="text"
                                                          data-test-subj="tablePaginationPopoverButton"
                                                          iconSide="right"
                                                          iconType="arrowDown"
                                                          onClick={[Function]}
                                                          size="xs"
                                                        >
                                                          <button
                                                            className="euiButtonEmpty euiButtonEmpty--text euiButtonEmpty--xSmall"
                                                            data-test-subj="tablePaginationPopoverButton"
                                                            disabled={false}
                                                            onClick={[Function]}
                                                            type="button"
                                                          >
                                                            <EuiButtonContent
                                                              className="euiButtonEmpty__content"
                                                              iconSide="right"
                                                              iconSize="s"
                                                              iconType="arrowDown"
                                                              textProps={
                                                                Object {
                                                                  "className": "euiButtonEmpty__text",
                                                                }
                                                              }
                                                            >
                                                              <span
                                                                className="euiButtonContent euiButtonContent--iconRight euiButtonEmpty__content"
                                                              >
                                                                <EuiIcon
                                                                  className="euiButtonContent__icon"
                                                                  color="inherit"
                                                                  size="s"
                                                                  type="arrowDown"
                                                                >
                                                                  <span
                                                                    className="euiButtonContent__icon"
                                                                    color="inherit"
                                                                    data-euiicon-type="arrowDown"
                                                                    size="s"
                                                                  />
                                                                </EuiIcon>
                                                                <span
                                                                  className="euiButtonEmpty__text"
                                                                >
                                                                  <EuiI18n
                                                                    default="Rows per page"
                                                                    token="euiTablePagination.rowsPerPage"
                                                                  >
                                                                    Rows per page
                                                                  </EuiI18n>
                                                                  : 
                                                                  10
                                                                </span>
                                                              </span>
                                                            </EuiButtonContent>
                                                          </button>
                                                        </EuiButtonEmpty>
                                                      </div>
                                                    </div>
                                                  </EuiPopover>
                                                </div>
                                              </EuiFlexItem>
                                              <EuiFlexItem
                                                grow={false}
                                              >
                                                <div
                                                  className="euiFlexItem euiFlexItem--flexGrowZero"
                                                >
                                                  <EuiPagination
                                                    activePage={0}
                                                    aria-controls="__table_generated-id"
                                                    onPageClick={[Function]}
                                                    pageCount={1}
                                                  >
                                                    <nav
                                                      className="euiPagination"
                                                    >
                                                      <EuiI18n
                                                        default="Previous page, {page}"
                                                        token="euiPagination.previousPage"
                                                        values={
                                                          Object {
                                                            "page": 0,
                                                          }
                                                        }
                                                      >
                                                        <EuiI18n
                                                          default="Previous page"
                                                          token="euiPagination.disabledPreviousPage"
                                                        >
                                                          <EuiButtonIcon
                                                            aria-label="Previous page"
                                                            color="text"
                                                            data-test-subj="pagination-button-previous"
                                                            disabled={true}
                                                            iconType="arrowLeft"
                                                            onClick={[Function]}
                                                          >
                                                            <button
                                                              aria-label="Previous page"
                                                              className="euiButtonIcon euiButtonIcon--text euiButtonIcon--empty euiButtonIcon--xSmall"
                                                              data-test-subj="pagination-button-previous"
                                                              disabled={true}
                                                              onClick={[Function]}
                                                              type="button"
                                                            >
                                                              <EuiIcon
                                                                aria-hidden="true"
                                                                className="euiButtonIcon__icon"
                                                                color="inherit"
                                                                size="m"
                                                                type="arrowLeft"
                                                              >
                                                                <span
                                                                  aria-hidden="true"
                                                                  className="euiButtonIcon__icon"
                                                                  color="inherit"
                                                                  data-euiicon-type="arrowLeft"
                                                                  size="m"
                                                                />
                                                              </EuiIcon>
                                                            </button>
                                                          </EuiButtonIcon>
                                                        </EuiI18n>
                                                      </EuiI18n>
                                                      <ul
                                                        className="euiPagination__list"
                                                      >
                                                        <PaginationButton
                                                          key="0"
                                                          pageIndex={0}
                                                        >
                                                          <li
                                                            className="euiPagination__item"
                                                          >
                                                            <EuiPaginationButton
                                                              aria-controls="__table_generated-id"
                                                              hideOnMobile={true}
                                                              isActive={true}
                                                              onClick={[Function]}
                                                              pageIndex={0}
                                                              totalPages={1}
                                                            >
                                                              <EuiI18n
                                                                default="Page {page} of {totalPages}"
                                                                token="euiPaginationButton.longPageString"
                                                                values={
                                                                  Object {
                                                                    "page": 1,
                                                                    "totalPages": 1,
                                                                  }
                                                                }
                                                              >
                                                                <EuiI18n
                                                                  default="Page {page}"
                                                                  token="euiPaginationButton.shortPageString"
                                                                  values={
                                                                    Object {
                                                                      "page": 1,
                                                                    }
                                                                  }
                                                                >
                                                                  <EuiButtonEmpty
                                                                    aria-controls="__table_generated-id"
                                                                    aria-current={true}
                                                                    aria-label="Page 1 of 1"
                                                                    className="euiPaginationButton euiPaginationButton-isActive euiPaginationButton--hideOnMobile"
                                                                    color="text"
                                                                    data-test-subj="pagination-button-0"
                                                                    href="#__table_generated-id"
                                                                    isDisabled={true}
                                                                    onClick={[Function]}
                                                                    size="s"
                                                                  >
                                                                    <button
                                                                      aria-controls="__table_generated-id"
                                                                      aria-current={true}
                                                                      aria-label="Page 1 of 1"
                                                                      className="euiButtonEmpty euiButtonEmpty--text euiButtonEmpty--small euiButtonEmpty-isDisabled euiPaginationButton euiPaginationButton-isActive euiPaginationButton--hideOnMobile"
                                                                      data-test-subj="pagination-button-0"
                                                                      disabled={true}
                                                                      onClick={[Function]}
                                                                      type="button"
                                                                    >
                                                                      <EuiButtonContent
                                                                        className="euiButtonEmpty__content"
                                                                        iconSide="left"
                                                                        iconSize="m"
                                                                        textProps={
                                                                          Object {
                                                                            "className": "euiButtonEmpty__text",
                                                                          }
                                                                        }
                                                                      >
                                                                        <span
                                                                          className="euiButtonContent euiButtonEmpty__content"
                                                                        >
                                                                          <span
                                                                            className="euiButtonEmpty__text"
                                                                          >
                                                                            1
                                                                          </span>
                                                                        </span>
                                                                      </EuiButtonContent>
                                                                    </button>
                                                                  </EuiButtonEmpty>
                                                                </EuiI18n>
                                                              </EuiI18n>
                                                            </EuiPaginationButton>
                                                          </li>
                                                        </PaginationButton>
                                                      </ul>
                                                      <EuiI18n
                                                        default="Next page, {page}"
                                                        token="euiPagination.nextPage"
                                                        values={
                                                          Object {
                                                            "page": 2,
                                                          }
                                                        }
                                                      >
                                                        <EuiI18n
                                                          default="Next page"
                                                          token="euiPagination.disabledNextPage"
                                                        >
                                                          <EuiButtonIcon
                                                            aria-label="Next page"
                                                            color="text"
                                                            data-test-subj="pagination-button-next"
                                                            disabled={true}
                                                            iconType="arrowRight"
                                                            onClick={[Function]}
                                                          >
                                                            <button
                                                              aria-label="Next page"
                                                              className="euiButtonIcon euiButtonIcon--text euiButtonIcon--empty euiButtonIcon--xSmall"
                                                              data-test-subj="pagination-button-next"
                                                              disabled={true}
                                                              onClick={[Function]}
                                                              type="button"
                                                            >
                                                              <EuiIcon
                                                                aria-hidden="true"
                                                                className="euiButtonIcon__icon"
                                                                color="inherit"
                                                                size="m"
                                                                type="arrowRight"
                                                              >
                                                                <span
                                                                  aria-hidden="true"
                                                                  className="euiButtonIcon__icon"
                                                                  color="inherit"
                                                                  data-euiicon-type="arrowRight"
                                                                  size="m"
                                                                />
                                                              </EuiIcon>
                                                            </button>
                                                          </EuiButtonIcon>
                                                        </EuiI18n>
                                                      </EuiI18n>
                                                    </nav>
                                                  </EuiPagination>
                                                </div>
                                              </EuiFlexItem>
                                            </div>
                                          </EuiFlexGroup>
                                        </EuiTablePagination>
                                      </div>
                                    </PaginationBar>
                                  </div>
                                </EuiBasicTable>
                              </div>
                            </EuiInMemoryTable>
                          </div>
                        </div>
                      </EuiPanel>
                    </EuiPageContent>
                  </main>
                </EuiPageBody>
              </div>
            </EuiPage>
          </TableListView>
        </DashboardListing>
      </Provider>
    </PseudoLocaleWrapper>
  </IntlProvider>
</I18nProvider>
`;

exports[`dashboard listing renders call to action when no dashboards exist 1`] = `
<I18nProvider>
  <IntlProvider
    defaultLocale="en"
    formats={
      Object {
        "date": Object {
          "full": Object {
            "day": "numeric",
            "month": "long",
            "weekday": "long",
            "year": "numeric",
          },
          "long": Object {
            "day": "numeric",
            "month": "long",
            "year": "numeric",
          },
          "medium": Object {
            "day": "numeric",
            "month": "short",
            "year": "numeric",
          },
          "short": Object {
            "day": "numeric",
            "month": "numeric",
            "year": "2-digit",
          },
        },
        "number": Object {
          "currency": Object {
            "style": "currency",
          },
          "percent": Object {
            "style": "percent",
          },
        },
        "relative": Object {
          "days": Object {
            "units": "day",
          },
          "hours": Object {
            "units": "hour",
          },
          "minutes": Object {
            "units": "minute",
          },
          "months": Object {
            "units": "month",
          },
          "seconds": Object {
            "units": "second",
          },
          "years": Object {
            "units": "year",
          },
        },
        "time": Object {
          "full": Object {
            "hour": "numeric",
            "minute": "numeric",
            "second": "numeric",
            "timeZoneName": "short",
          },
          "long": Object {
            "hour": "numeric",
            "minute": "numeric",
            "second": "numeric",
            "timeZoneName": "short",
          },
          "medium": Object {
            "hour": "numeric",
            "minute": "numeric",
            "second": "numeric",
          },
          "short": Object {
            "hour": "numeric",
            "minute": "numeric",
          },
        },
      }
    }
    locale="en"
    messages={Object {}}
    textComponent={Symbol(react.fragment)}
  >
    <PseudoLocaleWrapper>
      <Provider
        services={
          Object {
            "application": Object {
              "applications$": BehaviorSubject {
                "_isScalar": false,
                "_value": Map {},
                "closed": false,
                "hasError": false,
                "isStopped": false,
                "observers": Array [],
                "thrownError": null,
              },
              "capabilities": Object {
                "catalogue": Object {},
                "management": Object {},
                "navLinks": Object {},
                "workspaces": Object {},
              },
              "currentAppId$": Observable {
                "_isScalar": false,
                "source": Subject {
                  "_isScalar": false,
                  "closed": false,
                  "hasError": false,
                  "isStopped": false,
                  "observers": Array [],
                  "thrownError": null,
                },
              },
              "getUrlForApp": [MockFunction],
              "navigateToApp": [MockFunction],
              "navigateToUrl": [MockFunction],
              "registerMountContext": [MockFunction],
            },
            "chrome": Object {
              "addApplicationClass": [MockFunction],
              "docTitle": Object {
                "change": [MockFunction] {
                  "calls": Array [
                    Array [
                      "Dashboards",
                    ],
                  ],
                  "results": Array [
                    Object {
                      "type": "return",
                      "value": undefined,
                    },
                  ],
                },
                "reset": [MockFunction],
              },
              "getApplicationClasses$": [MockFunction],
              "getBadge$": [MockFunction],
              "getBreadcrumbs$": [MockFunction],
              "getCustomNavLink$": [MockFunction],
              "getHeaderComponent": [MockFunction],
              "getHelpExtension$": [MockFunction],
              "getIsNavDrawerLocked$": [MockFunction],
              "getIsVisible$": [MockFunction],
              "logos": Object {
                "AnimatedMark": Object {
                  "dark": Object {
                    "type": "default",
                    "url": "/ui/logos/opensearch_spinner_on_dark.svg",
                  },
                  "light": Object {
                    "type": "default",
                    "url": "/ui/logos/opensearch_spinner_on_light.svg",
                  },
                  "type": "default",
                  "url": "/ui/logos/opensearch_spinner_on_light.svg",
                },
                "Application": Object {
                  "dark": Object {
                    "type": "default",
                    "url": "/ui/logos/opensearch_dashboards_on_dark.svg",
                  },
                  "light": Object {
                    "type": "default",
                    "url": "/ui/logos/opensearch_dashboards_on_light.svg",
                  },
                  "type": "default",
                  "url": "/ui/logos/opensearch_dashboards_on_light.svg",
                },
                "CenterMark": Object {
                  "dark": Object {
                    "type": "default",
                    "url": "/ui/logos/opensearch_center_mark_on_dark.svg",
                  },
                  "light": Object {
                    "type": "default",
                    "url": "/ui/logos/opensearch_center_mark_on_light.svg",
                  },
                  "type": "default",
                  "url": "/ui/logos/opensearch_center_mark_on_light.svg",
                },
                "Mark": Object {
                  "dark": Object {
                    "type": "default",
                    "url": "/ui/logos/opensearch_mark_on_dark.svg",
                  },
                  "light": Object {
                    "type": "default",
                    "url": "/ui/logos/opensearch_mark_on_light.svg",
                  },
                  "type": "default",
                  "url": "/ui/logos/opensearch_mark_on_light.svg",
                },
                "OpenSearch": Object {
                  "dark": Object {
                    "type": "default",
                    "url": "/ui/logos/opensearch_on_dark.svg",
                  },
                  "light": Object {
                    "type": "default",
                    "url": "/ui/logos/opensearch_on_light.svg",
                  },
                  "type": "default",
                  "url": "/ui/logos/opensearch_on_light.svg",
                },
                "colorScheme": "light",
              },
              "navControls": Object {
                "getCenter$": [MockFunction],
                "getLeft$": [MockFunction],
                "getRight$": [MockFunction],
                "registerCenter": [MockFunction],
                "registerLeft": [MockFunction],
                "registerRight": [MockFunction],
              },
              "navLinks": Object {
                "enableForcedAppSwitcherNavigation": [MockFunction],
                "get": [MockFunction],
                "getAll": [MockFunction],
                "getForceAppSwitcherNavigation$": [MockFunction],
                "getNavLinks$": [MockFunction],
                "has": [MockFunction],
                "showOnly": [MockFunction],
                "update": [MockFunction],
              },
              "recentlyAccessed": Object {
                "add": [MockFunction],
                "get": [MockFunction],
                "get$": [MockFunction],
              },
              "removeApplicationClass": [MockFunction],
              "setAppTitle": [MockFunction],
              "setBadge": [MockFunction],
              "setBreadcrumbs": [MockFunction] {
                "calls": Array [
                  Array [
                    Array [
                      Object {
                        "text": "Dashboards",
                      },
                    ],
                  ],
                ],
                "results": Array [
                  Object {
                    "type": "return",
                    "value": undefined,
                  },
                ],
              },
              "setCustomNavLink": [MockFunction],
              "setHelpExtension": [MockFunction],
              "setHelpSupportUrl": [MockFunction],
              "setIsVisible": [MockFunction],
            },
            "dashboard": Object {
              "getAttributeService": [MockFunction],
            },
            "dashboardConfig": Object {
              "getHideWriteControls": [Function],
            },
            "dashboardProviders": [Function],
            "data": Object {
              "actions": Object {
                "createFiltersFromRangeSelectAction": [MockFunction],
                "createFiltersFromValueClickAction": [MockFunction],
              },
              "autocomplete": Object {
                "getQuerySuggestions": [MockFunction],
                "getValueSuggestions": [MockFunction],
                "hasQuerySuggestions": [MockFunction],
              },
              "fieldFormats": Object {
                "deserialize": [MockFunction],
                "getByFieldType": [MockFunction],
                "getDefaultConfig": [MockFunction],
                "getDefaultInstance": [MockFunction],
                "getDefaultInstanceCacheResolver": [MockFunction],
                "getDefaultInstancePlain": [MockFunction],
                "getDefaultType": [MockFunction],
                "getDefaultTypeName": [MockFunction],
                "getInstance": [MockFunction],
                "getType": [MockFunction],
                "getTypeNameByOpenSearchTypes": [MockFunction],
                "getTypeWithoutMetaParams": [MockFunction],
                "init": [MockFunction],
                "parseDefaultTypeMap": [MockFunction],
                "register": [MockFunction],
              },
              "indexPatterns": Object {
                "clearCache": [MockFunction],
                "createField": [MockFunction],
                "createFieldList": [MockFunction],
                "ensureDefaultIndexPattern": [MockFunction],
                "find": [MockFunction],
                "get": [MockFunction],
                "getDefault": [MockFunction],
                "make": [Function],
              },
              "query": Object {
                "addToQueryLog": [MockFunction],
                "filterManager": Object {
                  "addFilters": [MockFunction],
                  "getAppFilters": [MockFunction],
                  "getFetches$": [MockFunction],
                  "getFilters": [MockFunction],
                  "getGlobalFilters": [MockFunction] {
                    "calls": Array [
                      Array [],
                      Array [],
                      Array [],
                    ],
                    "results": Array [
                      Object {
                        "type": "return",
                        "value": undefined,
                      },
                      Object {
                        "type": "return",
                        "value": undefined,
                      },
                      Object {
                        "type": "return",
                        "value": undefined,
                      },
                    ],
                  },
                  "getPartitionedFilters": [MockFunction],
                  "getUpdates$": [MockFunction],
                  "handleStateUpdate": [MockFunction],
                  "mergeIncomingFilters": [MockFunction],
                  "removeAll": [MockFunction],
                  "removeFilter": [MockFunction],
                  "setAppFilters": [MockFunction],
                  "setFilters": [MockFunction],
                  "setGlobalFilters": [MockFunction] {
                    "calls": Array [
                      Array [
                        Array [],
                      ],
                    ],
                    "results": Array [
                      Object {
                        "type": "return",
                        "value": undefined,
                      },
                    ],
                  },
                },
                "getOpenSearchQuery": [MockFunction],
                "queryString": Object {
                  "clearQuery": [MockFunction],
                  "formatQuery": [MockFunction],
                  "getDefaultQuery": [MockFunction],
                  "getQuery": [MockFunction],
                  "getUpdates$": [MockFunction],
                  "setQuery": [MockFunction],
                },
                "savedQueries": [MockFunction],
                "state$": Observable {
                  "_isScalar": false,
                },
                "timefilter": Object {
                  "history": Object {
                    "add": [MockFunction],
                    "get": [MockFunction],
                  },
                  "timefilter": Object {
                    "calculateBounds": [MockFunction],
                    "createFilter": [MockFunction],
                    "disableAutoRefreshSelector": [MockFunction],
                    "disableTimeRangeSelector": [MockFunction],
                    "enableAutoRefreshSelector": [MockFunction],
                    "enableTimeRangeSelector": [MockFunction],
                    "getActiveBounds": [MockFunction],
                    "getAutoRefreshFetch$": [MockFunction],
                    "getBounds": [MockFunction],
                    "getEnabledUpdated$": [MockFunction],
                    "getFetch$": [MockFunction],
                    "getRefreshInterval": [MockFunction] {
                      "calls": Array [
                        Array [],
                        Array [],
                        Array [],
                      ],
                      "results": Array [
                        Object {
                          "type": "return",
                          "value": undefined,
                        },
                        Object {
                          "type": "return",
                          "value": undefined,
                        },
                        Object {
                          "type": "return",
                          "value": undefined,
                        },
                      ],
                    },
                    "getRefreshIntervalDefaults": [MockFunction] {
                      "calls": Array [
                        Array [],
                      ],
                      "results": Array [
                        Object {
                          "type": "return",
                          "value": undefined,
                        },
                      ],
                    },
                    "getRefreshIntervalUpdate$": [MockFunction],
                    "getTime": [MockFunction] {
                      "calls": Array [
                        Array [],
                        Array [],
                        Array [],
                      ],
                      "results": Array [
                        Object {
                          "type": "return",
                          "value": undefined,
                        },
                        Object {
                          "type": "return",
                          "value": undefined,
                        },
                        Object {
                          "type": "return",
                          "value": undefined,
                        },
                      ],
                    },
                    "getTimeDefaults": [MockFunction] {
                      "calls": Array [
                        Array [],
                      ],
                      "results": Array [
                        Object {
                          "type": "return",
                          "value": undefined,
                        },
                      ],
                    },
                    "getTimeUpdate$": [MockFunction],
                    "isAutoRefreshSelectorEnabled": [MockFunction],
                    "isTimeRangeSelectorEnabled": [MockFunction],
                    "setRefreshInterval": [MockFunction],
                    "setTime": [MockFunction],
                  },
                },
              },
              "search": Object {
                "aggs": Object {
                  "calculateAutoTimeExpression": [Function],
                  "createAggConfigs": [MockFunction],
                  "types": Object {
                    "get": [Function],
                    "getAll": [Function],
                  },
                },
                "search": [MockFunction],
                "searchSource": Object {
                  "create": [MockFunction],
                  "createEmpty": [MockFunction],
                },
                "showError": [MockFunction],
              },
              "ui": Object {
                "IndexPatternSelect": [MockFunction],
                "SearchBar": [MockFunction],
              },
            },
            "docLinks": Object {
              "DOC_LINK_VERSION": "mocked-test-branch",
              "OPENSEARCH_WEBSITE_URL": "https://opensearch.org/",
              "links": Object {
                "noDocumentation": Object {
                  "addData": "https://opensearch.org/docs/mocked-test-branch",
                  "apmServer": "https://opensearch.org/docs/mocked-test-branch",
                  "auditbeat": "https://opensearch.org/docs/mocked-test-branchtools/index/#downloads",
                  "clusterAPI": Object {
                    "clusterPending": "https://opensearch.org/docs/mocked-test-branch",
                    "clusterRoute": "https://opensearch.org/docs/mocked-test-branch/api-reference/cluster-api/cluster-awareness/",
                    "clusterState": "https://opensearch.org/docs/mocked-test-branch",
                    "clusterStats": "https://opensearch.org/docs/mocked-test-branch/api-reference/cluster-api/cluster-stats/",
                  },
                  "documentAPI": Object {
                    "delete_by_query": "https://opensearch.org/docs/mocked-test-branch/api-reference/document-apis/delete-by-query/",
                    "multiTermVector": "https://opensearch.org/docs/mocked-test-branch",
                    "termVector": "https://opensearch.org/docs/mocked-test-branch",
                    "update_by_query_rethrottle": "https://opensearch.org/docs/mocked-test-branch/api-reference/document-apis/update-by-query/",
                  },
                  "filebeat": "https://opensearch.org/docs/mocked-test-branchtools/index/#downloads",
                  "filed_caps": "https://opensearch.org/docs/mocked-test-branch",
                  "functionbeat": "https://opensearch.org/docs/mocked-test-branchtools/index/#downloads",
                  "heartbeat": "https://opensearch.org/docs/mocked-test-branchtools/index/#downloads",
                  "indexAPI": Object {
                    "indexAnalyze": "https://opensearch.org/docs/mocked-test-branch/api-reference/analyze-apis/index/",
                    "indexClearCache": "https://opensearch.org/docs/mocked-test-branch/api-reference/index-apis/clear-index-cache/",
                    "indexClone": "https://opensearch.org/docs/mocked-test-branch/api-reference/index-apis/clone/",
                    "indexFlush": "https://opensearch.org/docs/mocked-test-branch",
                    "indexForceMerge": "https://opensearch.org/docs/mocked-test-branch",
                    "indexGetFieldMapping": "https://opensearch.org/docs/mocked-test-branch",
                    "indexGetMapping": "https://opensearch.org/docs/mocked-test-branch",
                    "indexOpenClose": "https://opensearch.org/docs/mocked-test-branch/api-reference/index-apis/open-index/",
                    "indexPutMapping": "https://opensearch.org/docs/mocked-test-branch/api-reference/index-apis/put-mapping/",
                    "indexRecovery": "https://opensearch.org/docs/mocked-test-branch",
                    "indexRefresh": "https://opensearch.org/docs/mocked-test-branch",
                    "indexRollover": "https://opensearch.org/docs/mocked-test-branch",
                    "indexSearchValidate": "https://opensearch.org/docs/mocked-test-branch",
                    "indexSegment": "https://opensearch.org/docs/mocked-test-branch",
                    "indexSetting": "https://opensearch.org/docs/mocked-test-branch/api-reference/index-apis/get-settings/",
                    "indexShardStore": "https://opensearch.org/docs/mocked-test-branch",
                    "indexShrink": "https://opensearch.org/docs/mocked-test-branch/api-reference/index-apis/shrink-index/",
                    "indexSplit": "https://opensearch.org/docs/mocked-test-branch/api-reference/index-apis/split/",
                    "indexStats": "https://opensearch.org/docs/mocked-test-branch",
                    "indexSynced": "https://opensearch.org/docs/mocked-test-branch",
                    "indexUpdateSetting": "https://opensearch.org/docs/mocked-test-branch/api-reference/index-apis/update-settings/",
                    "indexUpgrade": "https://opensearch.org/docs/mocked-test-branch",
                  },
                  "indexPatterns": Object {
                    "introduction": "https://opensearch.org/docs/mocked-test-branch",
                    "loadingData": "https://opensearch.org/docs/mocked-test-branch",
                  },
                  "ingest": Object {
                    "appendProcessor": "https://opensearch.org/docs/mocked-test-branch",
                    "bytesProcessor": "https://opensearch.org/docs/mocked-test-branch",
                    "convertProcessor": "https://opensearch.org/docs/mocked-test-branch/data-prepper/pipelines/configuration/processors/string-converter/",
                    "csvProcessor": "https://opensearch.org/docs/mocked-test-branch/data-prepper/pipelines/configuration/processors/csv/",
                    "dataIndexNamProcessor": "https://opensearch.org/docs/mocked-test-branch/data-prepper/pipelines/configuration/processors/date/",
                    "dataProcessor": "https://opensearch.org/docs/mocked-test-branch/data-prepper/pipelines/configuration/processors/date/",
                    "deletePipeline": "https://opensearch.org/docs/mocked-test-branch/api-reference/ingest-apis/delete-ingest/",
                    "dissectProcessor": "https://opensearch.org/docs/mocked-test-branch",
                    "dotExpandProcessor": "https://opensearch.org/docs/mocked-test-branch",
                    "dropProcessor": "https://opensearch.org/docs/mocked-test-branch/data-prepper/pipelines/configuration/processors/drop-events/",
                    "failProcessor": "https://opensearch.org/docs/mocked-test-branch",
                    "foreachProcessor": "https://opensearch.org/docs/mocked-test-branch",
                    "geoIPProcessor": "https://opensearch.org/docs/mocked-test-branch",
                    "getPipeline": "https://opensearch.org/docs/mocked-test-branch/api-reference/ingest-apis/get-ingest/",
                    "grokProcessor": "https://opensearch.org/docs/mocked-test-branch/data-prepper/pipelines/configuration/processors/grok/",
                    "gusbProcessor": "https://opensearch.org/docs/mocked-test-branch",
                    "htmlstripProcessor": "https://opensearch.org/docs/mocked-test-branch",
                    "inferenceProcessor": "https://opensearch.org/docs/mocked-test-branch",
                    "ingestCircleProcessor": "https://opensearch.org/docs/mocked-test-branch",
                    "joinProcessor": "https://opensearch.org/docs/mocked-test-branch",
                    "jsonProcessor": "https://opensearch.org/docs/mocked-test-branch/data-prepper/pipelines/configuration/processors/parse-json/",
                    "kvProcessor": "https://opensearch.org/docs/mocked-test-branch/data-prepper/pipelines/configuration/processors/key-value/",
                    "lowecaseProcessor": "https://opensearch.org/docs/mocked-test-branch/data-prepper/pipelines/configuration/processors/lowercase-string/",
                    "pipelineProcessor": "https://opensearch.org/docs/mocked-test-branch",
                    "putPipeline": "https://opensearch.org/docs/mocked-test-branch/api-reference/ingest-apis/create-update-ingest/",
                    "removeProcessor": "https://opensearch.org/docs/mocked-test-branch",
                    "renameProcessor": "https://opensearch.org/docs/mocked-test-branch/data-prepper/pipelines/configuration/processors/rename-keys/",
                    "scriptProcessor": "https://opensearch.org/docs/mocked-test-branch",
                    "securityUserProcessor": "https://opensearch.org/docs/mocked-test-branch",
                    "setProcessor": "https://opensearch.org/docs/mocked-test-branch",
                    "simulatePipeline": "https://opensearch.org/docs/mocked-test-branch/api-reference/ingest-apis/simulate-ingest/",
                    "sortProcessor": "https://opensearch.org/docs/mocked-test-branch",
                    "splitProcessor": "https://opensearch.org/docs/mocked-test-branch/data-prepper/pipelines/configuration/processors/split-string/",
                    "trimProcessor": "https://opensearch.org/docs/mocked-test-branch/data-prepper/pipelines/configuration/processors/trim-string/",
                    "uppercaseProcessor": "https://opensearch.org/docs/mocked-test-branch/data-prepper/pipelines/configuration/processors/uppercase-string/",
                    "urldecodeProcessor": "https://opensearch.org/docs/mocked-test-branch",
                    "userAgentProcessor": "https://opensearch.org/docs/mocked-test-branch",
                  },
                  "logstash": "https://opensearch.org/docs/mocked-test-branch",
                  "management": Object {
                    "dashboardSettings": "https://opensearch.org/docs/mocked-test-branch",
                    "opensearchDashboardsGeneralSettings": "https://opensearch.org/docs/mocked-test-branch",
                    "opensearchDashboardsSearchSettings": "https://opensearch.org/docs/mocked-test-branch",
                  },
                  "mappingTypes": "https://opensearch.org/docs/mocked-test-branch/field-types/mappings/",
                  "metricbeat": "https://opensearch.org/docs/mocked-test-branchtools/index/#downloads",
                  "moduleScripting": "https://opensearch.org/docs/mocked-test-branch",
                  "nodes": Object {
                    "hotThreads": "https://opensearch.org/docs/mocked-test-branch/api-reference/nodes-apis/nodes-hot-threads/",
                    "info": "https://opensearch.org/docs/mocked-test-branch/api-reference/nodes-apis/nodes-info/",
                    "nodeStats": "https://opensearch.org/docs/mocked-test-branch/api-reference/nodes-apis/nodes-stats/",
                    "reloadSecuritySetting": "https://opensearch.org/docs/mocked-test-branch/api-reference/nodes-apis/nodes-reload-secure/",
                    "usage": "https://opensearch.org/docs/mocked-test-branch/api-reference/nodes-apis/nodes-usage/",
                  },
                  "painless_execute": "https://opensearch.org/docs/mocked-test-branch/api-reference/script-apis/exec-script/",
                  "reIndex": Object {
                    "rethrottle": "https://opensearch.org/docs/mocked-test-branch",
                  },
                  "savedObject": Object {
                    "manageSavedObject": "https://opensearch.org/docs/mocked-test-branch/security/multi-tenancy/mt-agg-view/",
                  },
                  "scriptedFields": Object {
                    "luceneExpressions": "https://opensearch.org/docs/mocked-test-branch",
                    "painless": "https://opensearch.org/docs/mocked-test-branch",
                    "painlessApi": "https://opensearch.org/docs/mocked-test-branch",
                    "painlessSyntax": "https://opensearch.org/docs/mocked-test-branch",
                    "scriptAggs": "https://opensearch.org/docs/mocked-test-branch",
                    "scriptFields": "https://opensearch.org/docs/mocked-test-branch",
                  },
                  "scroll": Object {
                    "clear_scroll": "https://opensearch.org/docs/mocked-test-branch/api-reference/scroll/",
                  },
                  "search": Object {
                    "search": "https://opensearch.org/docs/mocked-test-branch/api-reference/search/",
                    "searchFieldCap": "https://opensearch.org/docs/mocked-test-branch",
                    "searchRankEval": "https://opensearch.org/docs/mocked-test-branch",
                    "searchShards": "https://opensearch.org/docs/mocked-test-branch",
                  },
                  "siem": "https://opensearch.org/docs/mocked-test-branch",
                  "snapshot": Object {
                    "cleanup": "https://opensearch.org/docs/mocked-test-branch",
                    "deleteRepository": "https://opensearch.org/docs/mocked-test-branch/api-reference/snapshots/delete-snapshot-repository/",
                    "deleteSnapshot": "https://opensearch.org/docs/mocked-test-branch/api-reference/snapshots/delete-snapshot/",
                    "veirfyRepository": "https://opensearch.org/docs/mocked-test-branch/api-reference/snapshots/verify-snapshot-repository/",
                  },
                  "tutorial": Object {
                    "loadDataTutorial": "https://opensearch.org/docs/mocked-test-branch",
                    "visualizeTutorial": "https://opensearch.org/docs/mocked-test-branch",
                  },
                  "vega": "https://opensearch.org/docs/mocked-test-branch/dashboards/",
                  "winlogbeat": "https://opensearch.org/docs/mocked-test-branch",
                },
                "opensearch": Object {
                  "aggregations": Object {
                    "base": "https://opensearch.org/docs/mocked-test-branch/opensearch/aggregations/",
                    "bucket": Object {
                      "adjacency_matrix": "https://opensearch.org/docs/mocked-test-branch/opensearch/bucket-agg/#adjacency_matrix",
                      "base": "https://opensearch.org/docs/mocked-test-branch/opensearch/bucket-agg/",
                      "filter": "https://opensearch.org/docs/mocked-test-branch/opensearch/bucket-agg/#filter-filters",
                      "geo": "https://opensearch.org/docs/mocked-test-branch/opensearch/bucket-agg/#geo_distance-geohash_grid",
                      "global": "https://opensearch.org/docs/mocked-test-branch/opensearch/bucket-agg/#global",
                      "histogram": "https://opensearch.org/docs/mocked-test-branch/opensearch/bucket-agg/#histogram-date_histogram",
                      "missing": "https://opensearch.org/docs/mocked-test-branch/opensearch/bucket-agg/#missing",
                      "nested": "https://opensearch.org/docs/mocked-test-branch/opensearch/bucket-agg/#nested-reverse_nested",
                      "range": "https://opensearch.org/docs/mocked-test-branch/opensearch/bucket-agg/#range-date_range-ip_range",
                      "significant_terms": "https://opensearch.org/docs/mocked-test-branch/opensearch/bucket-agg/#significant_terms-significant_text",
                      "smapler": "https://opensearch.org/docs/mocked-test-branch/opensearch/bucket-agg/#sampler-diversified_sampler",
                      "terms": "https://opensearch.org/docs/mocked-test-branch/opensearch/bucket-agg/#terms",
                    },
                    "metric": Object {
                      "base": "https://opensearch.org/docs/mocked-test-branch/opensearch/metric-agg/",
                      "cardinality": "https://opensearch.org/docs/mocked-test-branch/opensearch/metric-agg/#cardinality",
                      "geo_bound": "https://opensearch.org/docs/mocked-test-branch/opensearch/metric-agg/#geo_bound",
                      "percentile": "https://opensearch.org/docs/mocked-test-branch/opensearch/metric-agg/#percentile-percentile_ranks",
                      "scripted_metric": "https://opensearch.org/docs/mocked-test-branch/opensearch/metric-agg/#scripted_metric",
                      "stats": "https://opensearch.org/docs/mocked-test-branch/opensearch/metric-agg/#stats-extended_stats-matrix_stats",
                      "sum": "https://opensearch.org/docs/mocked-test-branch/opensearch/metric-agg/#sum-min-max-avg",
                      "top_hits": "https://opensearch.org/docs/mocked-test-branch/opensearch/metric-agg/#top_hits",
                      "types": "https://opensearch.org/docs/mocked-test-branch/opensearch/metric-agg/#types-of-metric-aggregations",
                      "value_count": "https://opensearch.org/docs/mocked-test-branch/opensearch/metric-agg/#value_count",
                    },
                    "pipeline": Object {
                      "avg_bucket": "https://opensearch.org/docs/mocked-test-branch/opensearch/pipeline-agg/#avg_bucket-sum_bucket-min_bucket-max_bucket",
                      "base": "https://opensearch.org/docs/mocked-test-branch/opensearch/pipeline-agg/",
                      "bucket_script": "https://opensearch.org/docs/mocked-test-branch/opensearch/pipeline-agg/#bucket_script-bucket_selector",
                      "bucket_sort": "https://opensearch.org/docs/mocked-test-branch/opensearch/pipeline-agg/#bucket_sort",
                      "cumulative_sum": "https://opensearch.org/docs/mocked-test-branch/opensearch/pipeline-agg/#cumulative_sum",
                      "derivative": "https://opensearch.org/docs/mocked-test-branch/opensearch/pipeline-agg/#derivative",
                      "moving_avg": "https://opensearch.org/docs/mocked-test-branch/opensearch/pipeline-agg/#moving_avg",
                      "serial_diff": "https://opensearch.org/docs/mocked-test-branch/opensearch/pipeline-agg/#serial_diff",
                      "stats_bucket": "https://opensearch.org/docs/mocked-test-branch/opensearch/pipeline-agg/#stats_bucket-extended_stats_bucket",
                      "syntax": "https://opensearch.org/docs/mocked-test-branch/opensearch/pipeline-agg/#pipeline-aggregation-syntax",
                      "types": "https://opensearch.org/docs/mocked-test-branch/opensearch/pipeline-agg/#types-of-pipeline-aggregations",
                    },
                  },
                  "cluster": Object {
                    "base": "https://opensearch.org/docs/mocked-test-branch/opensearch/cluster/",
                    "build_cluster": "https://opensearch.org/docs/mocked-test-branch/opensearch/cluster/#step-3-bind-a-cluster-to-specific-ip-addresses",
                    "config_host": "https://opensearch.org/docs/mocked-test-branch/opensearch/cluster/cluster/#step-4-configure-discovery-hosts-for-a-cluster",
                    "config_shard": "https://opensearch.org/docs/mocked-test-branch/opensearch/cluster/#advanced-step-6-configure-shard-allocation-awareness-or-forced-awareness",
                    "naming": "https://opensearch.org/docs/mocked-test-branch/opensearch/cluster/#step-1-name-a-cluster",
                    "set_attribute": "https://opensearch.org/docs/mocked-test-branch/opensearch/cluster/#step-2-set-node-attributes-for-each-node-in-a-cluster",
                    "setup_hot_arch": "https://opensearch.org/docs/mocked-test-branch/opensearch/cluster/#advanced-step-7-set-up-a-hot-warm-architecture",
                    "start": "https://opensearch.org/docs/mocked-test-branch/opensearch/cluster/#step-5-start-the-cluster",
                  },
                  "commonParameters": "https://opensearch.org/docs/mocked-test-branch/opensearch/common-parameters",
                  "configuration": "https://opensearch.org/docs/mocked-test-branch/opensearch/configuration/",
                  "dataStreams": "https://opensearch.org/docs/mocked-test-branch/opensearch/data-streams/",
                  "dateMath": "https://opensearch.org/docs/mocked-test-branch/opensearch/supported-field-types/date/#date-math",
                  "indexAlias": Object {
                    "add_remove_index": "https://opensearch.org/docs/mocked-test-branch/opensearch/index-alias/#add-or-remove-indices",
                    "alias_option": "https://opensearch.org/docs/mocked-test-branch/opensearch/index-alias/#index-alias-options",
                    "base": "https://opensearch.org/docs/mocked-test-branch/opensearch/index-alias/",
                    "create_alias": "https://opensearch.org/docs/mocked-test-branch/opensearch/index-alias/#create-aliases",
                    "filtered_alias": "https://opensearch.org/docs/mocked-test-branch/opensearch/index-alias/#create-filtered-aliases",
                    "manage_alias": "https://opensearch.org/docs/mocked-test-branch/opensearch/index-alias/#manage-aliases",
                  },
                  "indexData": Object {
                    "base": "https://opensearch.org/docs/mocked-test-branch/opensearch/index-data/",
                    "delete_data": "https://opensearch.org/docs/mocked-test-branch/opensearch/index-data/#delete-data",
                    "naming": "https://opensearch.org/docs/mocked-test-branch/opensearch/index-data/#naming-restrictions-for-indices",
                    "read_data": "https://opensearch.org/docs/mocked-test-branch/opensearch/index-data/#read-data",
                    "update_data": "https://opensearch.org/docs/mocked-test-branch/opensearch/index-data/#update-data",
                  },
                  "indexTemplates": Object {
                    "base": "https://opensearch.org/docs/mocked-test-branch/opensearch/index-templates",
                    "composable": "https://opensearch.org/docs/mocked-test-branch/opensearch/index-templates/#composable-index-templates",
                    "options": "https://opensearch.org/docs/mocked-test-branch/opensearch/index-templates/#index-template-options",
                  },
                  "installation": Object {
                    "ansible": "https://opensearch.org/docs/mocked-test-branch/opensearch/install/ansible/",
                    "base": "https://opensearch.org/docs/mocked-test-branch/opensearch/install/index/",
                    "compatibility": "https://opensearch.org/docs/mocked-test-branch/opensearch/install/compatibility/",
                    "docker": "https://opensearch.org/docs/mocked-test-branch/opensearch/install/docker",
                    "dockerSecurity": "https://opensearch.org/docs/mocked-test-branch/opensearch/install/docker-security",
                    "helm": "https://opensearch.org/docs/mocked-test-branch/opensearch/install/helm/",
                    "plugins": "https://opensearch.org/docs/mocked-test-branch/opensearch/install/plugins/",
                    "settings": "https://opensearch.org/docs/mocked-test-branch/opensearch/install/important-settings/",
                    "tar": "https://opensearch.org/docs/mocked-test-branch/opensearch/install/tar/",
                  },
                  "introduction": "https://opensearch.org/docs/mocked-test-branch/opensearch/index/",
                  "logs": Object {
                    "application_log": "https://opensearch.org/docs/mocked-test-branch/opensearch/logs/#application-logs",
                    "base": "https://opensearch.org/docs/mocked-test-branch/opensearch/logs",
                    "deprecation_log": "https://opensearch.org/docs/mocked-test-branch/opensearch/logs/#deprecation-logs",
                    "slow_log": "https://opensearch.org/docs/mocked-test-branch/opensearch/logs/#slow-logs",
                  },
                  "openSearchForum": "https://forum.opensearch.org/t/feedback-experimental-feature-connect-to-external-data-sources/11144",
                  "popularAPI": "https://opensearch.org/docs/mocked-test-branch/opensearch/popular-api",
                  "queryDSL": Object {
                    "base": "https://opensearch.org/docs/mocked-test-branch/opensearch/query-dsl/index/",
                    "boolQuery": "https://opensearch.org/docs/mocked-test-branch/opensearch/query-dsl/bool/",
                    "fullText": Object {
                      "base": "https://opensearch.org/docs/mocked-test-branch/opensearch/query-dsl/full-text/",
                      "common_terms": "https://opensearch.org/docs/mocked-test-branch/opensearch/query-dsl/full-text/#common-terms",
                      "match": "https://opensearch.org/docs/mocked-test-branch/opensearch/query-dsl/full-text/#match",
                      "match_phrase": "https://opensearch.org/docs/mocked-test-branch/opensearch/query-dsl/full-text/#match-phrase",
                      "multi_match": "https://opensearch.org/docs/mocked-test-branch/opensearch/query-dsl/full-text/#multi-match",
                      "options": "https://opensearch.org/docs/mocked-test-branch/opensearch/query-dsl/full-text/#options",
                      "query_string": "https://opensearch.org/docs/mocked-test-branch/opensearch/query-dsl/full-text/#query-string",
                    },
                    "term": Object {
                      "base": "https://opensearch.org/docs/mocked-test-branch/opensearch/query-dsl/term/",
                      "exists": "https://opensearch.org/docs/mocked-test-branch/opensearch/query-dsl/term/#exists",
                      "ids": "https://opensearch.org/docs/mocked-test-branch/opensearch/query-dsl/term/#ids",
                      "prefix": "https://opensearch.org/docs/mocked-test-branch/opensearch/query-dsl/term/#prefix",
                      "range": "https://opensearch.org/docs/mocked-test-branch/opensearch/query-dsl/term/#range",
                      "regex": "https://opensearch.org/docs/mocked-test-branch/opensearch/query-dsl/term/#regex",
                      "terms": "https://opensearch.org/docs/mocked-test-branch/opensearch/query-dsl/term/#terms",
                      "wildcards": "https://opensearch.org/docs/mocked-test-branch/opensearch/query-dsl/term/#wildcards",
                    },
                  },
                  "reindexData": Object {
                    "all": "https://opensearch.org/docs/mocked-test-branch/opensearch/reindex-data/#reindex-all-documents",
                    "base": "https://opensearch.org/docs/mocked-test-branch/opensearch/reindex-data/",
                    "combine": "https://opensearch.org/docs/mocked-test-branch/opensearch/reindex-data/#combine-one-or-more-indices",
                    "destination": "https://opensearch.org/docs/mocked-test-branch/opensearch/reindex-data/#destination-index-options",
                    "remote": "https://opensearch.org/docs/mocked-test-branch/opensearch/reindex-data/#reindex-from-a-remote-cluster",
                    "source": "https://opensearch.org/docs/mocked-test-branch/opensearch/reindex-data/#source-index-options",
                    "subset": "https://opensearch.org/docs/mocked-test-branch/opensearch/reindex-data/#reindex-a-subset-of-documents",
                    "transform": "https://opensearch.org/docs/mocked-test-branch/opensearch/reindex-data/#transform-documents-during-reindexing",
                    "unique": "https://opensearch.org/docs/mocked-test-branch/opensearch/reindex-data/#reindex-only-unique-documents",
                    "update": "https://opensearch.org/docs/mocked-test-branch/opensearch/reindex-data/#update-documents-in-the-current-index",
                  },
                  "restAPI": Object {
                    "base": "https://opensearch.org/docs/mocked-test-branch/opensearch/rest-api/index/",
                    "indexAPI": Object {
                      "base": "https://opensearch.org/docs/mocked-test-branch/opensearch/rest-api/index-apis/index/",
                      "close": "https://opensearch.org/docs/mocked-test-branch/opensearch/rest-api/index-apis/close-index/",
                      "create": "https://opensearch.org/docs/mocked-test-branch/opensearch/rest-api/index-apis/create-index/",
                      "delete": "https://opensearch.org/docs/mocked-test-branch/opensearch/rest-api/index-apis/delete-index/",
                      "exists": "https://opensearch.org/docs/mocked-test-branch/opensearch/rest-api/index-apis/exists/",
                      "get": "https://opensearch.org/docs/mocked-test-branch/opensearch/rest-api/index-apis/get-index/",
                    },
                  },
                  "searchExperience": Object {
                    "autocomplete": "https://opensearch.org/docs/mocked-test-branch/opensearch/ux/#autocomplete-queries",
                    "base": "https://opensearch.org/docs/mocked-test-branch/opensearch/ux",
                    "highlight_match": "https://opensearch.org/docs/mocked-test-branch/opensearch/ux/#highlight-query-matches",
                    "paginate": "https://opensearch.org/docs/mocked-test-branch/opensearch/ux/#paginate-results",
                    "scroll": "https://opensearch.org/docs/mocked-test-branch/opensearch/ux/#scroll-search",
                    "sort": "https://opensearch.org/docs/mocked-test-branch/opensearch/ux/#sort-results",
                  },
                  "searchTemplate": Object {
                    "advanced_operation": "https://opensearch.org/docs/mocked-test-branch/opensearch/search-template/#advanced-parameter-conversion-with-search-templates",
                    "base": "https://opensearch.org/docs/mocked-test-branch/opensearch/search-template",
                    "create": "https://opensearch.org/docs/mocked-test-branch/opensearch/search-template/#create-search-templates",
                    "execute": "https://opensearch.org/docs/mocked-test-branch/opensearch/search-template/#save-and-execute-search-templates",
                    "manage": "https://opensearch.org/docs/mocked-test-branch/opensearch/search-template/#manage-search-templates",
                    "multiple_search": "https://opensearch.org/docs/mocked-test-branch/opensearch/search-template/#multiple-search-templates",
                  },
                  "snapshotRestore": Object {
                    "base": "https://opensearch.org/docs/mocked-test-branch/opensearch/snapshot-restore",
                    "register": "https://opensearch.org/docs/mocked-test-branch/opensearch/snapshot-restore/#register-repository",
                    "restore_snapshot": "https://opensearch.org/docs/mocked-test-branch/opensearch/snapshot-restore/#restore-snapshots",
                    "security_plugin": "https://opensearch.org/docs/mocked-test-branch/opensearch/snapshot-restore/#security-plugin-considerations",
                    "take_snapshot": "https://opensearch.org/docs/mocked-test-branch/opensearch/snapshot-restore/#take-snapshots",
                  },
                  "supportedUnits": "https://opensearch.org/docs/mocked-test-branch/opensearch/units",
                },
                "opensearchDashboards": Object {
                  "browser": "https://opensearch.org/docs/mocked-test-branch/dashboards/browser-compatibility",
                  "dataSource": Object {
                    "guide": "https://opensearch.org/docs/mocked-test-branch/dashboards/discover/multi-data-sources/",
                  },
                  "devTools": "https://opensearch.org/docs/mocked-test-branch/dashboards/dev-tools/index-dev/",
                  "dql": Object {
                    "base": "https://opensearch.org/docs/mocked-test-branch/dashboards/dql",
                    "boolean_query": "https://opensearch.org/docs/mocked-test-branch/dashboards/dql/#boolean-query",
                    "date_query": "https://opensearch.org/docs/mocked-test-branch/dashboards/dql/#date-and-range-queries",
                    "nested_query": "https://opensearch.org/docs/mocked-test-branch/dashboards/dql/#nested-field-query",
                    "terms_query": "https://opensearch.org/docs/mocked-test-branch/dashboards/dql/#terms-query",
                  },
                  "ganttCharts": "https://opensearch.org/docs/mocked-test-branch/dashboards/gantt",
                  "installation": Object {
                    "base": "https://opensearch.org/docs/mocked-test-branch/dashboards/install/index/",
                    "docker": "https://opensearch.org/docs/mocked-test-branch/dashboards/install/docker/",
                    "helm": "https://opensearch.org/docs/mocked-test-branch/dashboards/install/helm/",
                    "plugins": "https://opensearch.org/docs/mocked-test-branch/dashboards/install/plugins/",
                    "tar": "https://opensearch.org/docs/mocked-test-branch/dashboards/install/tar/",
                    "tls": "https://opensearch.org/docs/mocked-test-branch/dashboards/install/tls/",
                  },
                  "introduction": "https://opensearch.org/docs/mocked-test-branch/dashboards/index/",
                  "management": Object {
                    "advancedSettings": "https://opensearch.org/docs/mocked-test-branch/dashboards/management/advanced-settings/",
                  },
                  "mapTiles": "https://opensearch.org/docs/mocked-test-branch/dashboards/maptiles",
                  "notebooks": Object {
                    "base": "https://opensearch.org/docs/mocked-test-branch/dashboards/notebooks",
                    "create_report": "https://opensearch.org/docs/mocked-test-branch/dashboards/notebooks/#create-a-report",
                    "notebook_tutorial": "https://opensearch.org/docs/mocked-test-branch/dashboards/notebooks/#get-started-with-notebooks",
                    "paragraph_tutorial": "https://opensearch.org/docs/mocked-test-branch/dashboards/notebooks/#paragraph-actions",
                    "sample_notebook": "https://opensearch.org/docs/mocked-test-branch/dashboards/notebooks/#sample-notebooks",
                  },
                  "reporting": "https://opensearch.org/docs/mocked-test-branch/dashboards/reporting",
                  "visualize": Object {
                    "guide": "https://opensearch.org/docs/mocked-test-branchvisualize/viz-index/",
                  },
                },
              },
            },
            "embeddable": Object {
              "EmbeddablePanel": [MockFunction],
              "extract": [MockFunction],
              "getEmbeddableFactories": [MockFunction],
              "getEmbeddableFactory": [MockFunction],
              "getEmbeddablePanel": [MockFunction],
              "getStateTransfer": [MockFunction],
              "inject": [MockFunction],
              "telemetry": [MockFunction],
            },
            "fatalErrors": Object {
              "add": [MockFunction],
              "get$": [MockFunction],
            },
            "history": Object {
              "location": Object {
                "pathname": "",
              },
              "replace": [MockFunction],
            },
            "http": Object {
              "addLoadingCountSource": [MockFunction],
              "anonymousPaths": Object {
                "isAnonymous": [MockFunction],
                "register": [MockFunction],
              },
              "basePath": BasePath {
                "basePath": "",
                "clientBasePath": "",
                "get": [Function],
                "getBasePath": [Function],
                "prepend": [Function],
                "remove": [Function],
                "serverBasePath": "",
              },
              "delete": [MockFunction],
              "fetch": [MockFunction],
              "get": [MockFunction],
              "getLoadingCount$": [MockFunction],
              "head": [MockFunction],
              "intercept": [MockFunction],
              "options": [MockFunction],
              "patch": [MockFunction],
              "post": [MockFunction],
              "put": [MockFunction],
            },
            "i18n": Object {
              "Context": [MockFunction],
            },
            "injectedMetadata": Object {
              "getBranding": [MockFunction],
              "getInjectedVar": [MockFunction],
            },
            "notifications": Object {
              "toasts": Object {
                "add": [MockFunction],
                "addDanger": [MockFunction],
                "addError": [MockFunction],
                "addInfo": [MockFunction],
                "addSuccess": [MockFunction],
                "addWarning": [MockFunction],
                "get$": [MockFunction],
                "remove": [MockFunction],
              },
            },
            "opensearchDashboardsVersion": "3.0.0",
            "osdUrlStateStorage": Object {
              "flush": [MockFunction],
              "get": [MockFunction] {
                "calls": Array [
                  Array [
                    "_g",
                  ],
                ],
                "results": Array [
                  Object {
                    "type": "return",
                    "value": Object {
                      "linked": false,
                    },
                  },
                ],
              },
              "set": [MockFunction],
            },
            "overlays": Object {
              "banners": Object {
                "add": [MockFunction],
                "get$": [MockFunction],
                "getComponent": [MockFunction],
                "remove": [MockFunction],
                "replace": [MockFunction],
              },
              "openConfirm": [MockFunction],
              "openFlyout": [MockFunction],
              "openModal": [MockFunction],
              "sidecar": Object {
                "getSidecarConfig$": [MockFunction],
                "hide": [MockFunction],
                "open": [MockFunction],
                "setSidecarConfig": [MockFunction],
                "show": [MockFunction],
              },
            },
            "savedObjects": Object {
              "client": Object {
                "bulkCreate": [MockFunction],
                "bulkGet": [MockFunction],
                "bulkUpdate": [MockFunction],
                "create": [MockFunction],
                "delete": [MockFunction],
                "find": [MockFunction],
                "get": [MockFunction],
                "setCurrentWorkspace": [MockFunction],
                "update": [MockFunction],
              },
            },
            "savedObjectsClient": Object {
              "find": [Function],
            },
            "savedObjectsPublic": Object {
              "settings": Object {
                "getListingLimit": [Function],
                "getPerPage": [Function],
              },
            },
            "toastNotifications": Object {
              "add": [MockFunction],
              "addDanger": [MockFunction],
              "addError": [MockFunction],
              "addInfo": [MockFunction],
              "addSuccess": [MockFunction],
              "addWarning": [MockFunction],
              "get$": [MockFunction],
              "remove": [MockFunction],
            },
            "uiSettings": Object {
              "get": [MockFunction] {
                "calls": Array [
                  Array [
                    "dateFormat",
                  ],
                ],
                "results": Array [
                  Object {
                    "type": "return",
                    "value": undefined,
                  },
                ],
              },
              "get$": [MockFunction],
              "getAll": [MockFunction],
              "getSaved$": [MockFunction],
              "getUpdate$": [MockFunction],
              "getUpdateErrors$": [MockFunction],
              "isCustom": [MockFunction],
              "isDeclared": [MockFunction],
              "isDefault": [MockFunction],
              "isOverridden": [MockFunction],
              "overrideLocalDefault": [MockFunction],
              "remove": [MockFunction],
              "set": [MockFunction],
            },
            "usageCollection": Object {
              "METRIC_TYPE": Object {
                "APPLICATION_USAGE": "application_usage",
                "CLICK": "click",
                "COUNT": "count",
                "LOADED": "loaded",
                "USER_AGENT": "user_agent",
              },
              "__LEGACY": Object {
                "appChanged": [MockFunction],
              },
              "allowTrackUserAgent": [MockFunction],
              "reportUiStats": [MockFunction],
            },
            "workspaces": Object {
              "currentWorkspace$": BehaviorSubject {
                "_isScalar": false,
                "_value": null,
                "closed": false,
                "hasError": false,
                "isStopped": false,
                "observers": Array [],
                "thrownError": null,
              },
              "currentWorkspaceId$": BehaviorSubject {
                "_isScalar": false,
                "_value": "",
                "closed": false,
                "hasError": false,
                "isStopped": false,
                "observers": Array [],
                "thrownError": null,
              },
              "initialized$": BehaviorSubject {
                "_isScalar": false,
                "_value": false,
                "closed": false,
                "hasError": false,
                "isStopped": false,
                "observers": Array [],
                "thrownError": null,
              },
              "workspaceList$": BehaviorSubject {
                "_isScalar": false,
                "_value": Array [],
                "closed": false,
                "hasError": false,
                "isStopped": false,
                "observers": Array [],
                "thrownError": null,
              },
            },
          }
        }
      >
        <DashboardListing>
          <TableListView
            createButton={
              <CreateButton
                dashboardProviders={
                  Object {
                    "dashboard": Object {
                      "appId": "1",
                      "editUrlPathFn": [MockFunction],
                      "savedObjectsName": "dashboardSavedObjects",
                      "viewUrlPathFn": [MockFunction],
                    },
                  }
                }
              />
            }
            createItem={[Function]}
            deleteItems={[Function]}
            editItem={[Function]}
            entityName="dashboard"
            entityNamePlural="dashboards"
            findItems={[Function]}
            headingId="dashboardListingHeading"
            initialFilter=""
            initialPageSize={10}
            listingLimit={100}
            noItemsFragment={
              <EuiEmptyPrompt
                actions={
                  <EuiButton
                    data-test-subj="createDashboardPromptButton"
                    fill={true}
                    iconType="plusInCircle"
                    onClick={[Function]}
                  >
                    <FormattedMessage
                      defaultMessage="Create new dashboard"
                      id="dashboard.listing.createNewDashboard.createButtonLabel"
                      values={Object {}}
                    />
                  </EuiButton>
                }
                body={
                  <React.Fragment>
                    <p>
                      <FormattedMessage
                        defaultMessage="You can combine data views from any OpenSearch Dashboards app into one dashboard and see everything in one place."
                        id="dashboard.listing.createNewDashboard.combineDataViewFromOpenSearchDashboardsAppDescription"
                        values={Object {}}
                      />
                    </p>
                    <p>
                      <FormattedMessage
                        defaultMessage="New to OpenSearch Dashboards? {sampleDataInstallLink} to take a test drive."
                        id="dashboard.listing.createNewDashboard.newToOpenSearchDashboardsDescription"
                        values={
                          Object {
                            "sampleDataInstallLink": <EuiLink
                              onClick={[Function]}
                            >
                              <FormattedMessage
                                defaultMessage="Install some sample data"
                                id="dashboard.listing.createNewDashboard.sampleDataInstallLinkText"
                                values={Object {}}
                              />
                            </EuiLink>,
                          }
                        }
                      />
                    </p>
                  </React.Fragment>
                }
                iconType="dashboardApp"
                title={
                  <h1
                    id="dashboardListingHeading"
                  >
                    <FormattedMessage
                      defaultMessage="Create your first dashboard"
                      id="dashboard.listing.createNewDashboard.title"
                      values={Object {}}
                    />
                  </h1>
                }
              />
            }
            tableColumns={
              Array [
                Object {
                  "field": "title",
                  "name": "Title",
                  "render": [Function],
                  "sortable": true,
                },
                Object {
                  "dataType": "string",
                  "field": "type",
                  "name": "Type",
                  "sortable": true,
                },
                Object {
                  "dataType": "string",
                  "field": "description",
                  "name": "Description",
                  "sortable": true,
                },
                Object {
                  "data-test-subj": "updated-at",
                  "dataType": "date",
                  "description": "Last update of the saved object",
                  "field": "updated_at",
                  "name": "Last updated",
                  "render": [Function],
                  "sortable": true,
                },
              ]
            }
            tableListTitle="Dashboards"
            toastNotifications={
              Object {
                "add": [MockFunction],
                "addDanger": [MockFunction],
                "addError": [MockFunction],
                "addInfo": [MockFunction],
                "addSuccess": [MockFunction],
                "addWarning": [MockFunction],
                "get$": [MockFunction],
                "remove": [MockFunction],
              }
            }
          >
            <EuiPage
              className="itemListing__page"
              data-test-subj="dashboardLandingPage"
              restrictWidth={true}
            >
              <div
                className="euiPage euiPage--paddingMedium euiPage--grow euiPage--restrictWidth-default itemListing__page"
                data-test-subj="dashboardLandingPage"
              >
                <EuiPageBody
                  aria-labelledby="dashboardListingHeading"
                  component="main"
                >
                  <main
                    aria-labelledby="dashboardListingHeading"
                    className="euiPageBody euiPageBody--borderRadiusNone"
                  >
                    <EuiPageContent
                      horizontalPosition="center"
                    >
                      <EuiPanel
                        className="euiPageContent euiPageContent--horizontalCenter"
                        paddingSize="l"
                        role="main"
                      >
                        <div
                          className="euiPanel euiPanel--paddingLarge euiPanel--borderRadiusMedium euiPanel--plain euiPanel--hasShadow euiPageContent euiPageContent--horizontalCenter"
                          role="main"
                        >
                          <EuiEmptyPrompt
                            actions={
                              <EuiButton
                                data-test-subj="createDashboardPromptButton"
                                fill={true}
                                iconType="plusInCircle"
                                onClick={[Function]}
                              >
                                <FormattedMessage
                                  defaultMessage="Create new dashboard"
                                  id="dashboard.listing.createNewDashboard.createButtonLabel"
                                  values={Object {}}
                                />
                              </EuiButton>
                            }
                            body={
                              <React.Fragment>
                                <p>
                                  <FormattedMessage
                                    defaultMessage="You can combine data views from any OpenSearch Dashboards app into one dashboard and see everything in one place."
                                    id="dashboard.listing.createNewDashboard.combineDataViewFromOpenSearchDashboardsAppDescription"
                                    values={Object {}}
                                  />
                                </p>
                                <p>
                                  <FormattedMessage
                                    defaultMessage="New to OpenSearch Dashboards? {sampleDataInstallLink} to take a test drive."
                                    id="dashboard.listing.createNewDashboard.newToOpenSearchDashboardsDescription"
                                    values={
                                      Object {
                                        "sampleDataInstallLink": <EuiLink
                                          onClick={[Function]}
                                        >
                                          <FormattedMessage
                                            defaultMessage="Install some sample data"
                                            id="dashboard.listing.createNewDashboard.sampleDataInstallLinkText"
                                            values={Object {}}
                                          />
                                        </EuiLink>,
                                      }
                                    }
                                  />
                                </p>
                              </React.Fragment>
                            }
                            iconType="dashboardApp"
                            title={
                              <h1
                                id="dashboardListingHeading"
                              >
                                <FormattedMessage
                                  defaultMessage="Create your first dashboard"
                                  id="dashboard.listing.createNewDashboard.title"
                                  values={Object {}}
                                />
                              </h1>
                            }
                          >
                            <div
                              className="euiEmptyPrompt"
                            >
                              <EuiIcon
                                color="subdued"
                                size="xxl"
                                type="dashboardApp"
                              >
                                <span
                                  color="subdued"
                                  data-euiicon-type="dashboardApp"
                                  size="xxl"
                                />
                              </EuiIcon>
                              <EuiSpacer
                                size="m"
                              >
                                <div
                                  className="euiSpacer euiSpacer--m"
                                />
                              </EuiSpacer>
                              <EuiTitle
                                size="m"
                              >
                                <h1
                                  className="euiTitle euiTitle--medium"
                                  id="dashboardListingHeading"
                                >
                                  <FormattedMessage
                                    defaultMessage="Create your first dashboard"
                                    id="dashboard.listing.createNewDashboard.title"
                                    values={Object {}}
                                  >
                                    Create your first dashboard
                                  </FormattedMessage>
                                </h1>
                              </EuiTitle>
                              <EuiTextColor
                                color="subdued"
                              >
                                <span
                                  className="euiTextColor euiTextColor--subdued"
                                >
                                  <EuiSpacer
                                    size="m"
                                  >
                                    <div
                                      className="euiSpacer euiSpacer--m"
                                    />
                                  </EuiSpacer>
                                  <EuiText>
                                    <div
                                      className="euiText euiText--medium"
                                    >
                                      <p>
                                        <FormattedMessage
                                          defaultMessage="You can combine data views from any OpenSearch Dashboards app into one dashboard and see everything in one place."
                                          id="dashboard.listing.createNewDashboard.combineDataViewFromOpenSearchDashboardsAppDescription"
                                          values={Object {}}
                                        >
                                          You can combine data views from any OpenSearch Dashboards app into one dashboard and see everything in one place.
                                        </FormattedMessage>
                                      </p>
                                      <p>
                                        <FormattedMessage
                                          defaultMessage="New to OpenSearch Dashboards? {sampleDataInstallLink} to take a test drive."
                                          id="dashboard.listing.createNewDashboard.newToOpenSearchDashboardsDescription"
                                          values={
                                            Object {
                                              "sampleDataInstallLink": <EuiLink
                                                onClick={[Function]}
                                              >
                                                <FormattedMessage
                                                  defaultMessage="Install some sample data"
                                                  id="dashboard.listing.createNewDashboard.sampleDataInstallLinkText"
                                                  values={Object {}}
                                                />
                                              </EuiLink>,
                                            }
                                          }
                                        >
                                          New to OpenSearch Dashboards? 
                                          <EuiLink
                                            onClick={[Function]}
                                          >
                                            <button
                                              className="euiLink euiLink--primary"
                                              disabled={false}
                                              onClick={[Function]}
                                              type="button"
                                            >
                                              <FormattedMessage
                                                defaultMessage="Install some sample data"
                                                id="dashboard.listing.createNewDashboard.sampleDataInstallLinkText"
                                                values={Object {}}
                                              >
                                                Install some sample data
                                              </FormattedMessage>
                                            </button>
                                          </EuiLink>
                                           to take a test drive.
                                        </FormattedMessage>
                                      </p>
                                    </div>
                                  </EuiText>
                                </span>
                              </EuiTextColor>
                              <EuiSpacer
                                size="l"
                              >
                                <div
                                  className="euiSpacer euiSpacer--l"
                                />
                              </EuiSpacer>
                              <EuiButton
                                data-test-subj="createDashboardPromptButton"
                                fill={true}
                                iconType="plusInCircle"
                                onClick={[Function]}
                              >
                                <EuiButtonDisplay
                                  baseClassName="euiButton"
                                  data-test-subj="createDashboardPromptButton"
                                  disabled={false}
                                  element="button"
                                  fill={true}
                                  iconType="plusInCircle"
                                  isDisabled={false}
                                  onClick={[Function]}
                                  type="button"
                                >
                                  <button
                                    className="euiButton euiButton--primary euiButton--fill"
                                    data-test-subj="createDashboardPromptButton"
                                    disabled={false}
                                    onClick={[Function]}
                                    style={
                                      Object {
                                        "minWidth": undefined,
                                      }
                                    }
                                    type="button"
                                  >
                                    <EuiButtonContent
                                      className="euiButton__content"
                                      iconSide="left"
                                      iconType="plusInCircle"
                                      textProps={
                                        Object {
                                          "className": "euiButton__text",
                                        }
                                      }
                                    >
                                      <span
                                        className="euiButtonContent euiButton__content"
                                      >
                                        <EuiIcon
                                          className="euiButtonContent__icon"
                                          color="inherit"
                                          size="m"
                                          type="plusInCircle"
                                        >
                                          <span
                                            className="euiButtonContent__icon"
                                            color="inherit"
                                            data-euiicon-type="plusInCircle"
                                            size="m"
                                          />
                                        </EuiIcon>
                                        <span
                                          className="euiButton__text"
                                        >
                                          <FormattedMessage
                                            defaultMessage="Create new dashboard"
                                            id="dashboard.listing.createNewDashboard.createButtonLabel"
                                            values={Object {}}
                                          >
                                            Create new dashboard
                                          </FormattedMessage>
                                        </span>
                                      </span>
                                    </EuiButtonContent>
                                  </button>
                                </EuiButtonDisplay>
                              </EuiButton>
                            </div>
                          </EuiEmptyPrompt>
                        </div>
                      </EuiPanel>
                    </EuiPageContent>
                  </main>
                </EuiPageBody>
              </div>
            </EuiPage>
          </TableListView>
        </DashboardListing>
      </Provider>
    </PseudoLocaleWrapper>
  </IntlProvider>
</I18nProvider>
`;

exports[`dashboard listing renders table rows 1`] = `
<I18nProvider>
  <IntlProvider
    defaultLocale="en"
    formats={
      Object {
        "date": Object {
          "full": Object {
            "day": "numeric",
            "month": "long",
            "weekday": "long",
            "year": "numeric",
          },
          "long": Object {
            "day": "numeric",
            "month": "long",
            "year": "numeric",
          },
          "medium": Object {
            "day": "numeric",
            "month": "short",
            "year": "numeric",
          },
          "short": Object {
            "day": "numeric",
            "month": "numeric",
            "year": "2-digit",
          },
        },
        "number": Object {
          "currency": Object {
            "style": "currency",
          },
          "percent": Object {
            "style": "percent",
          },
        },
        "relative": Object {
          "days": Object {
            "units": "day",
          },
          "hours": Object {
            "units": "hour",
          },
          "minutes": Object {
            "units": "minute",
          },
          "months": Object {
            "units": "month",
          },
          "seconds": Object {
            "units": "second",
          },
          "years": Object {
            "units": "year",
          },
        },
        "time": Object {
          "full": Object {
            "hour": "numeric",
            "minute": "numeric",
            "second": "numeric",
            "timeZoneName": "short",
          },
          "long": Object {
            "hour": "numeric",
            "minute": "numeric",
            "second": "numeric",
            "timeZoneName": "short",
          },
          "medium": Object {
            "hour": "numeric",
            "minute": "numeric",
            "second": "numeric",
          },
          "short": Object {
            "hour": "numeric",
            "minute": "numeric",
          },
        },
      }
    }
    locale="en"
    messages={Object {}}
    textComponent={Symbol(react.fragment)}
  >
    <PseudoLocaleWrapper>
      <Provider
        services={
          Object {
            "application": Object {
              "applications$": BehaviorSubject {
                "_isScalar": false,
                "_value": Map {},
                "closed": false,
                "hasError": false,
                "isStopped": false,
                "observers": Array [],
                "thrownError": null,
              },
              "capabilities": Object {
                "catalogue": Object {},
                "management": Object {},
                "navLinks": Object {},
                "workspaces": Object {},
              },
              "currentAppId$": Observable {
                "_isScalar": false,
                "source": Subject {
                  "_isScalar": false,
                  "closed": false,
                  "hasError": false,
                  "isStopped": false,
                  "observers": Array [],
                  "thrownError": null,
                },
              },
              "getUrlForApp": [MockFunction],
              "navigateToApp": [MockFunction],
              "navigateToUrl": [MockFunction],
              "registerMountContext": [MockFunction],
            },
            "chrome": Object {
              "addApplicationClass": [MockFunction],
              "docTitle": Object {
                "change": [MockFunction] {
                  "calls": Array [
                    Array [
                      "Dashboards",
                    ],
                  ],
                  "results": Array [
                    Object {
                      "type": "return",
                      "value": undefined,
                    },
                  ],
                },
                "reset": [MockFunction],
              },
              "getApplicationClasses$": [MockFunction],
              "getBadge$": [MockFunction],
              "getBreadcrumbs$": [MockFunction],
              "getCustomNavLink$": [MockFunction],
              "getHeaderComponent": [MockFunction],
              "getHelpExtension$": [MockFunction],
              "getIsNavDrawerLocked$": [MockFunction],
              "getIsVisible$": [MockFunction],
              "logos": Object {
                "AnimatedMark": Object {
                  "dark": Object {
                    "type": "default",
                    "url": "/ui/logos/opensearch_spinner_on_dark.svg",
                  },
                  "light": Object {
                    "type": "default",
                    "url": "/ui/logos/opensearch_spinner_on_light.svg",
                  },
                  "type": "default",
                  "url": "/ui/logos/opensearch_spinner_on_light.svg",
                },
                "Application": Object {
                  "dark": Object {
                    "type": "default",
                    "url": "/ui/logos/opensearch_dashboards_on_dark.svg",
                  },
                  "light": Object {
                    "type": "default",
                    "url": "/ui/logos/opensearch_dashboards_on_light.svg",
                  },
                  "type": "default",
                  "url": "/ui/logos/opensearch_dashboards_on_light.svg",
                },
                "CenterMark": Object {
                  "dark": Object {
                    "type": "default",
                    "url": "/ui/logos/opensearch_center_mark_on_dark.svg",
                  },
                  "light": Object {
                    "type": "default",
                    "url": "/ui/logos/opensearch_center_mark_on_light.svg",
                  },
                  "type": "default",
                  "url": "/ui/logos/opensearch_center_mark_on_light.svg",
                },
                "Mark": Object {
                  "dark": Object {
                    "type": "default",
                    "url": "/ui/logos/opensearch_mark_on_dark.svg",
                  },
                  "light": Object {
                    "type": "default",
                    "url": "/ui/logos/opensearch_mark_on_light.svg",
                  },
                  "type": "default",
                  "url": "/ui/logos/opensearch_mark_on_light.svg",
                },
                "OpenSearch": Object {
                  "dark": Object {
                    "type": "default",
                    "url": "/ui/logos/opensearch_on_dark.svg",
                  },
                  "light": Object {
                    "type": "default",
                    "url": "/ui/logos/opensearch_on_light.svg",
                  },
                  "type": "default",
                  "url": "/ui/logos/opensearch_on_light.svg",
                },
                "colorScheme": "light",
              },
              "navControls": Object {
                "getCenter$": [MockFunction],
                "getLeft$": [MockFunction],
                "getRight$": [MockFunction],
                "registerCenter": [MockFunction],
                "registerLeft": [MockFunction],
                "registerRight": [MockFunction],
              },
              "navLinks": Object {
                "enableForcedAppSwitcherNavigation": [MockFunction],
                "get": [MockFunction],
                "getAll": [MockFunction],
                "getForceAppSwitcherNavigation$": [MockFunction],
                "getNavLinks$": [MockFunction],
                "has": [MockFunction],
                "showOnly": [MockFunction],
                "update": [MockFunction],
              },
              "recentlyAccessed": Object {
                "add": [MockFunction],
                "get": [MockFunction],
                "get$": [MockFunction],
              },
              "removeApplicationClass": [MockFunction],
              "setAppTitle": [MockFunction],
              "setBadge": [MockFunction],
              "setBreadcrumbs": [MockFunction] {
                "calls": Array [
                  Array [
                    Array [
                      Object {
                        "text": "Dashboards",
                      },
                    ],
                  ],
                ],
                "results": Array [
                  Object {
                    "type": "return",
                    "value": undefined,
                  },
                ],
              },
              "setCustomNavLink": [MockFunction],
              "setHelpExtension": [MockFunction],
              "setHelpSupportUrl": [MockFunction],
              "setIsVisible": [MockFunction],
            },
            "dashboard": Object {
              "getAttributeService": [MockFunction],
            },
            "dashboardConfig": Object {
              "getHideWriteControls": [Function],
            },
            "dashboardProviders": [Function],
            "data": Object {
              "actions": Object {
                "createFiltersFromRangeSelectAction": [MockFunction],
                "createFiltersFromValueClickAction": [MockFunction],
              },
              "autocomplete": Object {
                "getQuerySuggestions": [MockFunction],
                "getValueSuggestions": [MockFunction],
                "hasQuerySuggestions": [MockFunction],
              },
              "fieldFormats": Object {
                "deserialize": [MockFunction],
                "getByFieldType": [MockFunction],
                "getDefaultConfig": [MockFunction],
                "getDefaultInstance": [MockFunction],
                "getDefaultInstanceCacheResolver": [MockFunction],
                "getDefaultInstancePlain": [MockFunction],
                "getDefaultType": [MockFunction],
                "getDefaultTypeName": [MockFunction],
                "getInstance": [MockFunction],
                "getType": [MockFunction],
                "getTypeNameByOpenSearchTypes": [MockFunction],
                "getTypeWithoutMetaParams": [MockFunction],
                "init": [MockFunction],
                "parseDefaultTypeMap": [MockFunction],
                "register": [MockFunction],
              },
              "indexPatterns": Object {
                "clearCache": [MockFunction],
                "createField": [MockFunction],
                "createFieldList": [MockFunction],
                "ensureDefaultIndexPattern": [MockFunction],
                "find": [MockFunction],
                "get": [MockFunction],
                "getDefault": [MockFunction],
                "make": [Function],
              },
              "query": Object {
                "addToQueryLog": [MockFunction],
                "filterManager": Object {
                  "addFilters": [MockFunction],
                  "getAppFilters": [MockFunction],
                  "getFetches$": [MockFunction],
                  "getFilters": [MockFunction],
                  "getGlobalFilters": [MockFunction] {
                    "calls": Array [
                      Array [],
                      Array [],
                      Array [],
                    ],
                    "results": Array [
                      Object {
                        "type": "return",
                        "value": undefined,
                      },
                      Object {
                        "type": "return",
                        "value": undefined,
                      },
                      Object {
                        "type": "return",
                        "value": undefined,
                      },
                    ],
                  },
                  "getPartitionedFilters": [MockFunction],
                  "getUpdates$": [MockFunction],
                  "handleStateUpdate": [MockFunction],
                  "mergeIncomingFilters": [MockFunction],
                  "removeAll": [MockFunction],
                  "removeFilter": [MockFunction],
                  "setAppFilters": [MockFunction],
                  "setFilters": [MockFunction],
                  "setGlobalFilters": [MockFunction] {
                    "calls": Array [
                      Array [
                        Array [],
                      ],
                    ],
                    "results": Array [
                      Object {
                        "type": "return",
                        "value": undefined,
                      },
                    ],
                  },
                },
                "getOpenSearchQuery": [MockFunction],
                "queryString": Object {
                  "clearQuery": [MockFunction],
                  "formatQuery": [MockFunction],
                  "getDefaultQuery": [MockFunction],
                  "getQuery": [MockFunction],
                  "getUpdates$": [MockFunction],
                  "setQuery": [MockFunction],
                },
                "savedQueries": [MockFunction],
                "state$": Observable {
                  "_isScalar": false,
                },
                "timefilter": Object {
                  "history": Object {
                    "add": [MockFunction],
                    "get": [MockFunction],
                  },
                  "timefilter": Object {
                    "calculateBounds": [MockFunction],
                    "createFilter": [MockFunction],
                    "disableAutoRefreshSelector": [MockFunction],
                    "disableTimeRangeSelector": [MockFunction],
                    "enableAutoRefreshSelector": [MockFunction],
                    "enableTimeRangeSelector": [MockFunction],
                    "getActiveBounds": [MockFunction],
                    "getAutoRefreshFetch$": [MockFunction],
                    "getBounds": [MockFunction],
                    "getEnabledUpdated$": [MockFunction],
                    "getFetch$": [MockFunction],
                    "getRefreshInterval": [MockFunction] {
                      "calls": Array [
                        Array [],
                        Array [],
                        Array [],
                      ],
                      "results": Array [
                        Object {
                          "type": "return",
                          "value": undefined,
                        },
                        Object {
                          "type": "return",
                          "value": undefined,
                        },
                        Object {
                          "type": "return",
                          "value": undefined,
                        },
                      ],
                    },
                    "getRefreshIntervalDefaults": [MockFunction] {
                      "calls": Array [
                        Array [],
                      ],
                      "results": Array [
                        Object {
                          "type": "return",
                          "value": undefined,
                        },
                      ],
                    },
                    "getRefreshIntervalUpdate$": [MockFunction],
                    "getTime": [MockFunction] {
                      "calls": Array [
                        Array [],
                        Array [],
                        Array [],
                      ],
                      "results": Array [
                        Object {
                          "type": "return",
                          "value": undefined,
                        },
                        Object {
                          "type": "return",
                          "value": undefined,
                        },
                        Object {
                          "type": "return",
                          "value": undefined,
                        },
                      ],
                    },
                    "getTimeDefaults": [MockFunction] {
                      "calls": Array [
                        Array [],
                      ],
                      "results": Array [
                        Object {
                          "type": "return",
                          "value": undefined,
                        },
                      ],
                    },
                    "getTimeUpdate$": [MockFunction],
                    "isAutoRefreshSelectorEnabled": [MockFunction],
                    "isTimeRangeSelectorEnabled": [MockFunction],
                    "setRefreshInterval": [MockFunction],
                    "setTime": [MockFunction],
                  },
                },
              },
              "search": Object {
                "aggs": Object {
                  "calculateAutoTimeExpression": [Function],
                  "createAggConfigs": [MockFunction],
                  "types": Object {
                    "get": [Function],
                    "getAll": [Function],
                  },
                },
                "search": [MockFunction],
                "searchSource": Object {
                  "create": [MockFunction],
                  "createEmpty": [MockFunction],
                },
                "showError": [MockFunction],
              },
              "ui": Object {
                "IndexPatternSelect": [MockFunction],
                "SearchBar": [MockFunction],
              },
            },
            "docLinks": Object {
              "DOC_LINK_VERSION": "mocked-test-branch",
              "OPENSEARCH_WEBSITE_URL": "https://opensearch.org/",
              "links": Object {
                "noDocumentation": Object {
                  "addData": "https://opensearch.org/docs/mocked-test-branch",
                  "apmServer": "https://opensearch.org/docs/mocked-test-branch",
                  "auditbeat": "https://opensearch.org/docs/mocked-test-branchtools/index/#downloads",
                  "clusterAPI": Object {
                    "clusterPending": "https://opensearch.org/docs/mocked-test-branch",
                    "clusterRoute": "https://opensearch.org/docs/mocked-test-branch/api-reference/cluster-api/cluster-awareness/",
                    "clusterState": "https://opensearch.org/docs/mocked-test-branch",
                    "clusterStats": "https://opensearch.org/docs/mocked-test-branch/api-reference/cluster-api/cluster-stats/",
                  },
                  "documentAPI": Object {
                    "delete_by_query": "https://opensearch.org/docs/mocked-test-branch/api-reference/document-apis/delete-by-query/",
                    "multiTermVector": "https://opensearch.org/docs/mocked-test-branch",
                    "termVector": "https://opensearch.org/docs/mocked-test-branch",
                    "update_by_query_rethrottle": "https://opensearch.org/docs/mocked-test-branch/api-reference/document-apis/update-by-query/",
                  },
                  "filebeat": "https://opensearch.org/docs/mocked-test-branchtools/index/#downloads",
                  "filed_caps": "https://opensearch.org/docs/mocked-test-branch",
                  "functionbeat": "https://opensearch.org/docs/mocked-test-branchtools/index/#downloads",
                  "heartbeat": "https://opensearch.org/docs/mocked-test-branchtools/index/#downloads",
                  "indexAPI": Object {
                    "indexAnalyze": "https://opensearch.org/docs/mocked-test-branch/api-reference/analyze-apis/index/",
                    "indexClearCache": "https://opensearch.org/docs/mocked-test-branch/api-reference/index-apis/clear-index-cache/",
                    "indexClone": "https://opensearch.org/docs/mocked-test-branch/api-reference/index-apis/clone/",
                    "indexFlush": "https://opensearch.org/docs/mocked-test-branch",
                    "indexForceMerge": "https://opensearch.org/docs/mocked-test-branch",
                    "indexGetFieldMapping": "https://opensearch.org/docs/mocked-test-branch",
                    "indexGetMapping": "https://opensearch.org/docs/mocked-test-branch",
                    "indexOpenClose": "https://opensearch.org/docs/mocked-test-branch/api-reference/index-apis/open-index/",
                    "indexPutMapping": "https://opensearch.org/docs/mocked-test-branch/api-reference/index-apis/put-mapping/",
                    "indexRecovery": "https://opensearch.org/docs/mocked-test-branch",
                    "indexRefresh": "https://opensearch.org/docs/mocked-test-branch",
                    "indexRollover": "https://opensearch.org/docs/mocked-test-branch",
                    "indexSearchValidate": "https://opensearch.org/docs/mocked-test-branch",
                    "indexSegment": "https://opensearch.org/docs/mocked-test-branch",
                    "indexSetting": "https://opensearch.org/docs/mocked-test-branch/api-reference/index-apis/get-settings/",
                    "indexShardStore": "https://opensearch.org/docs/mocked-test-branch",
                    "indexShrink": "https://opensearch.org/docs/mocked-test-branch/api-reference/index-apis/shrink-index/",
                    "indexSplit": "https://opensearch.org/docs/mocked-test-branch/api-reference/index-apis/split/",
                    "indexStats": "https://opensearch.org/docs/mocked-test-branch",
                    "indexSynced": "https://opensearch.org/docs/mocked-test-branch",
                    "indexUpdateSetting": "https://opensearch.org/docs/mocked-test-branch/api-reference/index-apis/update-settings/",
                    "indexUpgrade": "https://opensearch.org/docs/mocked-test-branch",
                  },
                  "indexPatterns": Object {
                    "introduction": "https://opensearch.org/docs/mocked-test-branch",
                    "loadingData": "https://opensearch.org/docs/mocked-test-branch",
                  },
                  "ingest": Object {
                    "appendProcessor": "https://opensearch.org/docs/mocked-test-branch",
                    "bytesProcessor": "https://opensearch.org/docs/mocked-test-branch",
                    "convertProcessor": "https://opensearch.org/docs/mocked-test-branch/data-prepper/pipelines/configuration/processors/string-converter/",
                    "csvProcessor": "https://opensearch.org/docs/mocked-test-branch/data-prepper/pipelines/configuration/processors/csv/",
                    "dataIndexNamProcessor": "https://opensearch.org/docs/mocked-test-branch/data-prepper/pipelines/configuration/processors/date/",
                    "dataProcessor": "https://opensearch.org/docs/mocked-test-branch/data-prepper/pipelines/configuration/processors/date/",
                    "deletePipeline": "https://opensearch.org/docs/mocked-test-branch/api-reference/ingest-apis/delete-ingest/",
                    "dissectProcessor": "https://opensearch.org/docs/mocked-test-branch",
                    "dotExpandProcessor": "https://opensearch.org/docs/mocked-test-branch",
                    "dropProcessor": "https://opensearch.org/docs/mocked-test-branch/data-prepper/pipelines/configuration/processors/drop-events/",
                    "failProcessor": "https://opensearch.org/docs/mocked-test-branch",
                    "foreachProcessor": "https://opensearch.org/docs/mocked-test-branch",
                    "geoIPProcessor": "https://opensearch.org/docs/mocked-test-branch",
                    "getPipeline": "https://opensearch.org/docs/mocked-test-branch/api-reference/ingest-apis/get-ingest/",
                    "grokProcessor": "https://opensearch.org/docs/mocked-test-branch/data-prepper/pipelines/configuration/processors/grok/",
                    "gusbProcessor": "https://opensearch.org/docs/mocked-test-branch",
                    "htmlstripProcessor": "https://opensearch.org/docs/mocked-test-branch",
                    "inferenceProcessor": "https://opensearch.org/docs/mocked-test-branch",
                    "ingestCircleProcessor": "https://opensearch.org/docs/mocked-test-branch",
                    "joinProcessor": "https://opensearch.org/docs/mocked-test-branch",
                    "jsonProcessor": "https://opensearch.org/docs/mocked-test-branch/data-prepper/pipelines/configuration/processors/parse-json/",
                    "kvProcessor": "https://opensearch.org/docs/mocked-test-branch/data-prepper/pipelines/configuration/processors/key-value/",
                    "lowecaseProcessor": "https://opensearch.org/docs/mocked-test-branch/data-prepper/pipelines/configuration/processors/lowercase-string/",
                    "pipelineProcessor": "https://opensearch.org/docs/mocked-test-branch",
                    "putPipeline": "https://opensearch.org/docs/mocked-test-branch/api-reference/ingest-apis/create-update-ingest/",
                    "removeProcessor": "https://opensearch.org/docs/mocked-test-branch",
                    "renameProcessor": "https://opensearch.org/docs/mocked-test-branch/data-prepper/pipelines/configuration/processors/rename-keys/",
                    "scriptProcessor": "https://opensearch.org/docs/mocked-test-branch",
                    "securityUserProcessor": "https://opensearch.org/docs/mocked-test-branch",
                    "setProcessor": "https://opensearch.org/docs/mocked-test-branch",
                    "simulatePipeline": "https://opensearch.org/docs/mocked-test-branch/api-reference/ingest-apis/simulate-ingest/",
                    "sortProcessor": "https://opensearch.org/docs/mocked-test-branch",
                    "splitProcessor": "https://opensearch.org/docs/mocked-test-branch/data-prepper/pipelines/configuration/processors/split-string/",
                    "trimProcessor": "https://opensearch.org/docs/mocked-test-branch/data-prepper/pipelines/configuration/processors/trim-string/",
                    "uppercaseProcessor": "https://opensearch.org/docs/mocked-test-branch/data-prepper/pipelines/configuration/processors/uppercase-string/",
                    "urldecodeProcessor": "https://opensearch.org/docs/mocked-test-branch",
                    "userAgentProcessor": "https://opensearch.org/docs/mocked-test-branch",
                  },
                  "logstash": "https://opensearch.org/docs/mocked-test-branch",
                  "management": Object {
                    "dashboardSettings": "https://opensearch.org/docs/mocked-test-branch",
                    "opensearchDashboardsGeneralSettings": "https://opensearch.org/docs/mocked-test-branch",
                    "opensearchDashboardsSearchSettings": "https://opensearch.org/docs/mocked-test-branch",
                  },
                  "mappingTypes": "https://opensearch.org/docs/mocked-test-branch/field-types/mappings/",
                  "metricbeat": "https://opensearch.org/docs/mocked-test-branchtools/index/#downloads",
                  "moduleScripting": "https://opensearch.org/docs/mocked-test-branch",
                  "nodes": Object {
                    "hotThreads": "https://opensearch.org/docs/mocked-test-branch/api-reference/nodes-apis/nodes-hot-threads/",
                    "info": "https://opensearch.org/docs/mocked-test-branch/api-reference/nodes-apis/nodes-info/",
                    "nodeStats": "https://opensearch.org/docs/mocked-test-branch/api-reference/nodes-apis/nodes-stats/",
                    "reloadSecuritySetting": "https://opensearch.org/docs/mocked-test-branch/api-reference/nodes-apis/nodes-reload-secure/",
                    "usage": "https://opensearch.org/docs/mocked-test-branch/api-reference/nodes-apis/nodes-usage/",
                  },
                  "painless_execute": "https://opensearch.org/docs/mocked-test-branch/api-reference/script-apis/exec-script/",
                  "reIndex": Object {
                    "rethrottle": "https://opensearch.org/docs/mocked-test-branch",
                  },
                  "savedObject": Object {
                    "manageSavedObject": "https://opensearch.org/docs/mocked-test-branch/security/multi-tenancy/mt-agg-view/",
                  },
                  "scriptedFields": Object {
                    "luceneExpressions": "https://opensearch.org/docs/mocked-test-branch",
                    "painless": "https://opensearch.org/docs/mocked-test-branch",
                    "painlessApi": "https://opensearch.org/docs/mocked-test-branch",
                    "painlessSyntax": "https://opensearch.org/docs/mocked-test-branch",
                    "scriptAggs": "https://opensearch.org/docs/mocked-test-branch",
                    "scriptFields": "https://opensearch.org/docs/mocked-test-branch",
                  },
                  "scroll": Object {
                    "clear_scroll": "https://opensearch.org/docs/mocked-test-branch/api-reference/scroll/",
                  },
                  "search": Object {
                    "search": "https://opensearch.org/docs/mocked-test-branch/api-reference/search/",
                    "searchFieldCap": "https://opensearch.org/docs/mocked-test-branch",
                    "searchRankEval": "https://opensearch.org/docs/mocked-test-branch",
                    "searchShards": "https://opensearch.org/docs/mocked-test-branch",
                  },
                  "siem": "https://opensearch.org/docs/mocked-test-branch",
                  "snapshot": Object {
                    "cleanup": "https://opensearch.org/docs/mocked-test-branch",
                    "deleteRepository": "https://opensearch.org/docs/mocked-test-branch/api-reference/snapshots/delete-snapshot-repository/",
                    "deleteSnapshot": "https://opensearch.org/docs/mocked-test-branch/api-reference/snapshots/delete-snapshot/",
                    "veirfyRepository": "https://opensearch.org/docs/mocked-test-branch/api-reference/snapshots/verify-snapshot-repository/",
                  },
                  "tutorial": Object {
                    "loadDataTutorial": "https://opensearch.org/docs/mocked-test-branch",
                    "visualizeTutorial": "https://opensearch.org/docs/mocked-test-branch",
                  },
                  "vega": "https://opensearch.org/docs/mocked-test-branch/dashboards/",
                  "winlogbeat": "https://opensearch.org/docs/mocked-test-branch",
                },
                "opensearch": Object {
                  "aggregations": Object {
                    "base": "https://opensearch.org/docs/mocked-test-branch/opensearch/aggregations/",
                    "bucket": Object {
                      "adjacency_matrix": "https://opensearch.org/docs/mocked-test-branch/opensearch/bucket-agg/#adjacency_matrix",
                      "base": "https://opensearch.org/docs/mocked-test-branch/opensearch/bucket-agg/",
                      "filter": "https://opensearch.org/docs/mocked-test-branch/opensearch/bucket-agg/#filter-filters",
                      "geo": "https://opensearch.org/docs/mocked-test-branch/opensearch/bucket-agg/#geo_distance-geohash_grid",
                      "global": "https://opensearch.org/docs/mocked-test-branch/opensearch/bucket-agg/#global",
                      "histogram": "https://opensearch.org/docs/mocked-test-branch/opensearch/bucket-agg/#histogram-date_histogram",
                      "missing": "https://opensearch.org/docs/mocked-test-branch/opensearch/bucket-agg/#missing",
                      "nested": "https://opensearch.org/docs/mocked-test-branch/opensearch/bucket-agg/#nested-reverse_nested",
                      "range": "https://opensearch.org/docs/mocked-test-branch/opensearch/bucket-agg/#range-date_range-ip_range",
                      "significant_terms": "https://opensearch.org/docs/mocked-test-branch/opensearch/bucket-agg/#significant_terms-significant_text",
                      "smapler": "https://opensearch.org/docs/mocked-test-branch/opensearch/bucket-agg/#sampler-diversified_sampler",
                      "terms": "https://opensearch.org/docs/mocked-test-branch/opensearch/bucket-agg/#terms",
                    },
                    "metric": Object {
                      "base": "https://opensearch.org/docs/mocked-test-branch/opensearch/metric-agg/",
                      "cardinality": "https://opensearch.org/docs/mocked-test-branch/opensearch/metric-agg/#cardinality",
                      "geo_bound": "https://opensearch.org/docs/mocked-test-branch/opensearch/metric-agg/#geo_bound",
                      "percentile": "https://opensearch.org/docs/mocked-test-branch/opensearch/metric-agg/#percentile-percentile_ranks",
                      "scripted_metric": "https://opensearch.org/docs/mocked-test-branch/opensearch/metric-agg/#scripted_metric",
                      "stats": "https://opensearch.org/docs/mocked-test-branch/opensearch/metric-agg/#stats-extended_stats-matrix_stats",
                      "sum": "https://opensearch.org/docs/mocked-test-branch/opensearch/metric-agg/#sum-min-max-avg",
                      "top_hits": "https://opensearch.org/docs/mocked-test-branch/opensearch/metric-agg/#top_hits",
                      "types": "https://opensearch.org/docs/mocked-test-branch/opensearch/metric-agg/#types-of-metric-aggregations",
                      "value_count": "https://opensearch.org/docs/mocked-test-branch/opensearch/metric-agg/#value_count",
                    },
                    "pipeline": Object {
                      "avg_bucket": "https://opensearch.org/docs/mocked-test-branch/opensearch/pipeline-agg/#avg_bucket-sum_bucket-min_bucket-max_bucket",
                      "base": "https://opensearch.org/docs/mocked-test-branch/opensearch/pipeline-agg/",
                      "bucket_script": "https://opensearch.org/docs/mocked-test-branch/opensearch/pipeline-agg/#bucket_script-bucket_selector",
                      "bucket_sort": "https://opensearch.org/docs/mocked-test-branch/opensearch/pipeline-agg/#bucket_sort",
                      "cumulative_sum": "https://opensearch.org/docs/mocked-test-branch/opensearch/pipeline-agg/#cumulative_sum",
                      "derivative": "https://opensearch.org/docs/mocked-test-branch/opensearch/pipeline-agg/#derivative",
                      "moving_avg": "https://opensearch.org/docs/mocked-test-branch/opensearch/pipeline-agg/#moving_avg",
                      "serial_diff": "https://opensearch.org/docs/mocked-test-branch/opensearch/pipeline-agg/#serial_diff",
                      "stats_bucket": "https://opensearch.org/docs/mocked-test-branch/opensearch/pipeline-agg/#stats_bucket-extended_stats_bucket",
                      "syntax": "https://opensearch.org/docs/mocked-test-branch/opensearch/pipeline-agg/#pipeline-aggregation-syntax",
                      "types": "https://opensearch.org/docs/mocked-test-branch/opensearch/pipeline-agg/#types-of-pipeline-aggregations",
                    },
                  },
                  "cluster": Object {
                    "base": "https://opensearch.org/docs/mocked-test-branch/opensearch/cluster/",
                    "build_cluster": "https://opensearch.org/docs/mocked-test-branch/opensearch/cluster/#step-3-bind-a-cluster-to-specific-ip-addresses",
                    "config_host": "https://opensearch.org/docs/mocked-test-branch/opensearch/cluster/cluster/#step-4-configure-discovery-hosts-for-a-cluster",
                    "config_shard": "https://opensearch.org/docs/mocked-test-branch/opensearch/cluster/#advanced-step-6-configure-shard-allocation-awareness-or-forced-awareness",
                    "naming": "https://opensearch.org/docs/mocked-test-branch/opensearch/cluster/#step-1-name-a-cluster",
                    "set_attribute": "https://opensearch.org/docs/mocked-test-branch/opensearch/cluster/#step-2-set-node-attributes-for-each-node-in-a-cluster",
                    "setup_hot_arch": "https://opensearch.org/docs/mocked-test-branch/opensearch/cluster/#advanced-step-7-set-up-a-hot-warm-architecture",
                    "start": "https://opensearch.org/docs/mocked-test-branch/opensearch/cluster/#step-5-start-the-cluster",
                  },
                  "commonParameters": "https://opensearch.org/docs/mocked-test-branch/opensearch/common-parameters",
                  "configuration": "https://opensearch.org/docs/mocked-test-branch/opensearch/configuration/",
                  "dataStreams": "https://opensearch.org/docs/mocked-test-branch/opensearch/data-streams/",
                  "dateMath": "https://opensearch.org/docs/mocked-test-branch/opensearch/supported-field-types/date/#date-math",
                  "indexAlias": Object {
                    "add_remove_index": "https://opensearch.org/docs/mocked-test-branch/opensearch/index-alias/#add-or-remove-indices",
                    "alias_option": "https://opensearch.org/docs/mocked-test-branch/opensearch/index-alias/#index-alias-options",
                    "base": "https://opensearch.org/docs/mocked-test-branch/opensearch/index-alias/",
                    "create_alias": "https://opensearch.org/docs/mocked-test-branch/opensearch/index-alias/#create-aliases",
                    "filtered_alias": "https://opensearch.org/docs/mocked-test-branch/opensearch/index-alias/#create-filtered-aliases",
                    "manage_alias": "https://opensearch.org/docs/mocked-test-branch/opensearch/index-alias/#manage-aliases",
                  },
                  "indexData": Object {
                    "base": "https://opensearch.org/docs/mocked-test-branch/opensearch/index-data/",
                    "delete_data": "https://opensearch.org/docs/mocked-test-branch/opensearch/index-data/#delete-data",
                    "naming": "https://opensearch.org/docs/mocked-test-branch/opensearch/index-data/#naming-restrictions-for-indices",
                    "read_data": "https://opensearch.org/docs/mocked-test-branch/opensearch/index-data/#read-data",
                    "update_data": "https://opensearch.org/docs/mocked-test-branch/opensearch/index-data/#update-data",
                  },
                  "indexTemplates": Object {
                    "base": "https://opensearch.org/docs/mocked-test-branch/opensearch/index-templates",
                    "composable": "https://opensearch.org/docs/mocked-test-branch/opensearch/index-templates/#composable-index-templates",
                    "options": "https://opensearch.org/docs/mocked-test-branch/opensearch/index-templates/#index-template-options",
                  },
                  "installation": Object {
                    "ansible": "https://opensearch.org/docs/mocked-test-branch/opensearch/install/ansible/",
                    "base": "https://opensearch.org/docs/mocked-test-branch/opensearch/install/index/",
                    "compatibility": "https://opensearch.org/docs/mocked-test-branch/opensearch/install/compatibility/",
                    "docker": "https://opensearch.org/docs/mocked-test-branch/opensearch/install/docker",
                    "dockerSecurity": "https://opensearch.org/docs/mocked-test-branch/opensearch/install/docker-security",
                    "helm": "https://opensearch.org/docs/mocked-test-branch/opensearch/install/helm/",
                    "plugins": "https://opensearch.org/docs/mocked-test-branch/opensearch/install/plugins/",
                    "settings": "https://opensearch.org/docs/mocked-test-branch/opensearch/install/important-settings/",
                    "tar": "https://opensearch.org/docs/mocked-test-branch/opensearch/install/tar/",
                  },
                  "introduction": "https://opensearch.org/docs/mocked-test-branch/opensearch/index/",
                  "logs": Object {
                    "application_log": "https://opensearch.org/docs/mocked-test-branch/opensearch/logs/#application-logs",
                    "base": "https://opensearch.org/docs/mocked-test-branch/opensearch/logs",
                    "deprecation_log": "https://opensearch.org/docs/mocked-test-branch/opensearch/logs/#deprecation-logs",
                    "slow_log": "https://opensearch.org/docs/mocked-test-branch/opensearch/logs/#slow-logs",
                  },
                  "openSearchForum": "https://forum.opensearch.org/t/feedback-experimental-feature-connect-to-external-data-sources/11144",
                  "popularAPI": "https://opensearch.org/docs/mocked-test-branch/opensearch/popular-api",
                  "queryDSL": Object {
                    "base": "https://opensearch.org/docs/mocked-test-branch/opensearch/query-dsl/index/",
                    "boolQuery": "https://opensearch.org/docs/mocked-test-branch/opensearch/query-dsl/bool/",
                    "fullText": Object {
                      "base": "https://opensearch.org/docs/mocked-test-branch/opensearch/query-dsl/full-text/",
                      "common_terms": "https://opensearch.org/docs/mocked-test-branch/opensearch/query-dsl/full-text/#common-terms",
                      "match": "https://opensearch.org/docs/mocked-test-branch/opensearch/query-dsl/full-text/#match",
                      "match_phrase": "https://opensearch.org/docs/mocked-test-branch/opensearch/query-dsl/full-text/#match-phrase",
                      "multi_match": "https://opensearch.org/docs/mocked-test-branch/opensearch/query-dsl/full-text/#multi-match",
                      "options": "https://opensearch.org/docs/mocked-test-branch/opensearch/query-dsl/full-text/#options",
                      "query_string": "https://opensearch.org/docs/mocked-test-branch/opensearch/query-dsl/full-text/#query-string",
                    },
                    "term": Object {
                      "base": "https://opensearch.org/docs/mocked-test-branch/opensearch/query-dsl/term/",
                      "exists": "https://opensearch.org/docs/mocked-test-branch/opensearch/query-dsl/term/#exists",
                      "ids": "https://opensearch.org/docs/mocked-test-branch/opensearch/query-dsl/term/#ids",
                      "prefix": "https://opensearch.org/docs/mocked-test-branch/opensearch/query-dsl/term/#prefix",
                      "range": "https://opensearch.org/docs/mocked-test-branch/opensearch/query-dsl/term/#range",
                      "regex": "https://opensearch.org/docs/mocked-test-branch/opensearch/query-dsl/term/#regex",
                      "terms": "https://opensearch.org/docs/mocked-test-branch/opensearch/query-dsl/term/#terms",
                      "wildcards": "https://opensearch.org/docs/mocked-test-branch/opensearch/query-dsl/term/#wildcards",
                    },
                  },
                  "reindexData": Object {
                    "all": "https://opensearch.org/docs/mocked-test-branch/opensearch/reindex-data/#reindex-all-documents",
                    "base": "https://opensearch.org/docs/mocked-test-branch/opensearch/reindex-data/",
                    "combine": "https://opensearch.org/docs/mocked-test-branch/opensearch/reindex-data/#combine-one-or-more-indices",
                    "destination": "https://opensearch.org/docs/mocked-test-branch/opensearch/reindex-data/#destination-index-options",
                    "remote": "https://opensearch.org/docs/mocked-test-branch/opensearch/reindex-data/#reindex-from-a-remote-cluster",
                    "source": "https://opensearch.org/docs/mocked-test-branch/opensearch/reindex-data/#source-index-options",
                    "subset": "https://opensearch.org/docs/mocked-test-branch/opensearch/reindex-data/#reindex-a-subset-of-documents",
                    "transform": "https://opensearch.org/docs/mocked-test-branch/opensearch/reindex-data/#transform-documents-during-reindexing",
                    "unique": "https://opensearch.org/docs/mocked-test-branch/opensearch/reindex-data/#reindex-only-unique-documents",
                    "update": "https://opensearch.org/docs/mocked-test-branch/opensearch/reindex-data/#update-documents-in-the-current-index",
                  },
                  "restAPI": Object {
                    "base": "https://opensearch.org/docs/mocked-test-branch/opensearch/rest-api/index/",
                    "indexAPI": Object {
                      "base": "https://opensearch.org/docs/mocked-test-branch/opensearch/rest-api/index-apis/index/",
                      "close": "https://opensearch.org/docs/mocked-test-branch/opensearch/rest-api/index-apis/close-index/",
                      "create": "https://opensearch.org/docs/mocked-test-branch/opensearch/rest-api/index-apis/create-index/",
                      "delete": "https://opensearch.org/docs/mocked-test-branch/opensearch/rest-api/index-apis/delete-index/",
                      "exists": "https://opensearch.org/docs/mocked-test-branch/opensearch/rest-api/index-apis/exists/",
                      "get": "https://opensearch.org/docs/mocked-test-branch/opensearch/rest-api/index-apis/get-index/",
                    },
                  },
                  "searchExperience": Object {
                    "autocomplete": "https://opensearch.org/docs/mocked-test-branch/opensearch/ux/#autocomplete-queries",
                    "base": "https://opensearch.org/docs/mocked-test-branch/opensearch/ux",
                    "highlight_match": "https://opensearch.org/docs/mocked-test-branch/opensearch/ux/#highlight-query-matches",
                    "paginate": "https://opensearch.org/docs/mocked-test-branch/opensearch/ux/#paginate-results",
                    "scroll": "https://opensearch.org/docs/mocked-test-branch/opensearch/ux/#scroll-search",
                    "sort": "https://opensearch.org/docs/mocked-test-branch/opensearch/ux/#sort-results",
                  },
                  "searchTemplate": Object {
                    "advanced_operation": "https://opensearch.org/docs/mocked-test-branch/opensearch/search-template/#advanced-parameter-conversion-with-search-templates",
                    "base": "https://opensearch.org/docs/mocked-test-branch/opensearch/search-template",
                    "create": "https://opensearch.org/docs/mocked-test-branch/opensearch/search-template/#create-search-templates",
                    "execute": "https://opensearch.org/docs/mocked-test-branch/opensearch/search-template/#save-and-execute-search-templates",
                    "manage": "https://opensearch.org/docs/mocked-test-branch/opensearch/search-template/#manage-search-templates",
                    "multiple_search": "https://opensearch.org/docs/mocked-test-branch/opensearch/search-template/#multiple-search-templates",
                  },
                  "snapshotRestore": Object {
                    "base": "https://opensearch.org/docs/mocked-test-branch/opensearch/snapshot-restore",
                    "register": "https://opensearch.org/docs/mocked-test-branch/opensearch/snapshot-restore/#register-repository",
                    "restore_snapshot": "https://opensearch.org/docs/mocked-test-branch/opensearch/snapshot-restore/#restore-snapshots",
                    "security_plugin": "https://opensearch.org/docs/mocked-test-branch/opensearch/snapshot-restore/#security-plugin-considerations",
                    "take_snapshot": "https://opensearch.org/docs/mocked-test-branch/opensearch/snapshot-restore/#take-snapshots",
                  },
                  "supportedUnits": "https://opensearch.org/docs/mocked-test-branch/opensearch/units",
                },
                "opensearchDashboards": Object {
                  "browser": "https://opensearch.org/docs/mocked-test-branch/dashboards/browser-compatibility",
                  "dataSource": Object {
                    "guide": "https://opensearch.org/docs/mocked-test-branch/dashboards/discover/multi-data-sources/",
                  },
                  "devTools": "https://opensearch.org/docs/mocked-test-branch/dashboards/dev-tools/index-dev/",
                  "dql": Object {
                    "base": "https://opensearch.org/docs/mocked-test-branch/dashboards/dql",
                    "boolean_query": "https://opensearch.org/docs/mocked-test-branch/dashboards/dql/#boolean-query",
                    "date_query": "https://opensearch.org/docs/mocked-test-branch/dashboards/dql/#date-and-range-queries",
                    "nested_query": "https://opensearch.org/docs/mocked-test-branch/dashboards/dql/#nested-field-query",
                    "terms_query": "https://opensearch.org/docs/mocked-test-branch/dashboards/dql/#terms-query",
                  },
                  "ganttCharts": "https://opensearch.org/docs/mocked-test-branch/dashboards/gantt",
                  "installation": Object {
                    "base": "https://opensearch.org/docs/mocked-test-branch/dashboards/install/index/",
                    "docker": "https://opensearch.org/docs/mocked-test-branch/dashboards/install/docker/",
                    "helm": "https://opensearch.org/docs/mocked-test-branch/dashboards/install/helm/",
                    "plugins": "https://opensearch.org/docs/mocked-test-branch/dashboards/install/plugins/",
                    "tar": "https://opensearch.org/docs/mocked-test-branch/dashboards/install/tar/",
                    "tls": "https://opensearch.org/docs/mocked-test-branch/dashboards/install/tls/",
                  },
                  "introduction": "https://opensearch.org/docs/mocked-test-branch/dashboards/index/",
                  "management": Object {
                    "advancedSettings": "https://opensearch.org/docs/mocked-test-branch/dashboards/management/advanced-settings/",
                  },
                  "mapTiles": "https://opensearch.org/docs/mocked-test-branch/dashboards/maptiles",
                  "notebooks": Object {
                    "base": "https://opensearch.org/docs/mocked-test-branch/dashboards/notebooks",
                    "create_report": "https://opensearch.org/docs/mocked-test-branch/dashboards/notebooks/#create-a-report",
                    "notebook_tutorial": "https://opensearch.org/docs/mocked-test-branch/dashboards/notebooks/#get-started-with-notebooks",
                    "paragraph_tutorial": "https://opensearch.org/docs/mocked-test-branch/dashboards/notebooks/#paragraph-actions",
                    "sample_notebook": "https://opensearch.org/docs/mocked-test-branch/dashboards/notebooks/#sample-notebooks",
                  },
                  "reporting": "https://opensearch.org/docs/mocked-test-branch/dashboards/reporting",
                  "visualize": Object {
                    "guide": "https://opensearch.org/docs/mocked-test-branchvisualize/viz-index/",
                  },
                },
              },
            },
            "embeddable": Object {
              "EmbeddablePanel": [MockFunction],
              "extract": [MockFunction],
              "getEmbeddableFactories": [MockFunction],
              "getEmbeddableFactory": [MockFunction],
              "getEmbeddablePanel": [MockFunction],
              "getStateTransfer": [MockFunction],
              "inject": [MockFunction],
              "telemetry": [MockFunction],
            },
            "fatalErrors": Object {
              "add": [MockFunction],
              "get$": [MockFunction],
            },
            "history": Object {
              "location": Object {
                "pathname": "",
              },
              "replace": [MockFunction],
            },
            "http": Object {
              "addLoadingCountSource": [MockFunction],
              "anonymousPaths": Object {
                "isAnonymous": [MockFunction],
                "register": [MockFunction],
              },
              "basePath": BasePath {
                "basePath": "",
                "clientBasePath": "",
                "get": [Function],
                "getBasePath": [Function],
                "prepend": [Function],
                "remove": [Function],
                "serverBasePath": "",
              },
              "delete": [MockFunction],
              "fetch": [MockFunction],
              "get": [MockFunction],
              "getLoadingCount$": [MockFunction],
              "head": [MockFunction],
              "intercept": [MockFunction],
              "options": [MockFunction],
              "patch": [MockFunction],
              "post": [MockFunction],
              "put": [MockFunction],
            },
            "i18n": Object {
              "Context": [MockFunction],
            },
            "injectedMetadata": Object {
              "getBranding": [MockFunction],
              "getInjectedVar": [MockFunction],
            },
            "notifications": Object {
              "toasts": Object {
                "add": [MockFunction],
                "addDanger": [MockFunction],
                "addError": [MockFunction],
                "addInfo": [MockFunction],
                "addSuccess": [MockFunction],
                "addWarning": [MockFunction],
                "get$": [MockFunction],
                "remove": [MockFunction],
              },
            },
            "opensearchDashboardsVersion": "3.0.0",
            "osdUrlStateStorage": Object {
              "flush": [MockFunction],
              "get": [MockFunction] {
                "calls": Array [
                  Array [
                    "_g",
                  ],
                ],
                "results": Array [
                  Object {
                    "type": "return",
                    "value": Object {
                      "linked": false,
                    },
                  },
                ],
              },
              "set": [MockFunction],
            },
            "overlays": Object {
              "banners": Object {
                "add": [MockFunction],
                "get$": [MockFunction],
                "getComponent": [MockFunction],
                "remove": [MockFunction],
                "replace": [MockFunction],
              },
              "openConfirm": [MockFunction],
              "openFlyout": [MockFunction],
              "openModal": [MockFunction],
              "sidecar": Object {
                "getSidecarConfig$": [MockFunction],
                "hide": [MockFunction],
                "open": [MockFunction],
                "setSidecarConfig": [MockFunction],
                "show": [MockFunction],
              },
            },
            "savedObjects": Object {
              "client": Object {
                "bulkCreate": [MockFunction],
                "bulkGet": [MockFunction],
                "bulkUpdate": [MockFunction],
                "create": [MockFunction],
                "delete": [MockFunction],
                "find": [MockFunction],
                "get": [MockFunction],
                "setCurrentWorkspace": [MockFunction],
                "update": [MockFunction],
              },
            },
            "savedObjectsClient": Object {
              "find": [Function],
            },
            "savedObjectsPublic": Object {
              "settings": Object {
                "getListingLimit": [Function],
                "getPerPage": [Function],
              },
            },
            "toastNotifications": Object {
              "add": [MockFunction],
              "addDanger": [MockFunction],
              "addError": [MockFunction],
              "addInfo": [MockFunction],
              "addSuccess": [MockFunction],
              "addWarning": [MockFunction],
              "get$": [MockFunction],
              "remove": [MockFunction],
            },
            "uiSettings": Object {
              "get": [MockFunction] {
                "calls": Array [
                  Array [
                    "dateFormat",
                  ],
                ],
                "results": Array [
                  Object {
                    "type": "return",
                    "value": undefined,
                  },
                ],
              },
              "get$": [MockFunction],
              "getAll": [MockFunction],
              "getSaved$": [MockFunction],
              "getUpdate$": [MockFunction],
              "getUpdateErrors$": [MockFunction],
              "isCustom": [MockFunction],
              "isDeclared": [MockFunction],
              "isDefault": [MockFunction],
              "isOverridden": [MockFunction],
              "overrideLocalDefault": [MockFunction],
              "remove": [MockFunction],
              "set": [MockFunction],
            },
            "usageCollection": Object {
              "METRIC_TYPE": Object {
                "APPLICATION_USAGE": "application_usage",
                "CLICK": "click",
                "COUNT": "count",
                "LOADED": "loaded",
                "USER_AGENT": "user_agent",
              },
              "__LEGACY": Object {
                "appChanged": [MockFunction],
              },
              "allowTrackUserAgent": [MockFunction],
              "reportUiStats": [MockFunction],
            },
            "workspaces": Object {
              "currentWorkspace$": BehaviorSubject {
                "_isScalar": false,
                "_value": null,
                "closed": false,
                "hasError": false,
                "isStopped": false,
                "observers": Array [],
                "thrownError": null,
              },
              "currentWorkspaceId$": BehaviorSubject {
                "_isScalar": false,
                "_value": "",
                "closed": false,
                "hasError": false,
                "isStopped": false,
                "observers": Array [],
                "thrownError": null,
              },
              "initialized$": BehaviorSubject {
                "_isScalar": false,
                "_value": false,
                "closed": false,
                "hasError": false,
                "isStopped": false,
                "observers": Array [],
                "thrownError": null,
              },
              "workspaceList$": BehaviorSubject {
                "_isScalar": false,
                "_value": Array [],
                "closed": false,
                "hasError": false,
                "isStopped": false,
                "observers": Array [],
                "thrownError": null,
              },
            },
          }
        }
      >
        <DashboardListing>
          <TableListView
            createButton={
              <CreateButton
                dashboardProviders={
                  Object {
                    "dashboard": Object {
                      "appId": "1",
                      "editUrlPathFn": [MockFunction],
                      "savedObjectsName": "dashboardSavedObjects",
                      "viewUrlPathFn": [MockFunction],
                    },
                  }
                }
              />
            }
            createItem={[Function]}
            deleteItems={[Function]}
            editItem={[Function]}
            entityName="dashboard"
            entityNamePlural="dashboards"
            findItems={[Function]}
            headingId="dashboardListingHeading"
            initialFilter=""
            initialPageSize={10}
            listingLimit={100}
            noItemsFragment={
              <EuiEmptyPrompt
                actions={
                  <EuiButton
                    data-test-subj="createDashboardPromptButton"
                    fill={true}
                    iconType="plusInCircle"
                    onClick={[Function]}
                  >
                    <FormattedMessage
                      defaultMessage="Create new dashboard"
                      id="dashboard.listing.createNewDashboard.createButtonLabel"
                      values={Object {}}
                    />
                  </EuiButton>
                }
                body={
                  <React.Fragment>
                    <p>
                      <FormattedMessage
                        defaultMessage="You can combine data views from any OpenSearch Dashboards app into one dashboard and see everything in one place."
                        id="dashboard.listing.createNewDashboard.combineDataViewFromOpenSearchDashboardsAppDescription"
                        values={Object {}}
                      />
                    </p>
                    <p>
                      <FormattedMessage
                        defaultMessage="New to OpenSearch Dashboards? {sampleDataInstallLink} to take a test drive."
                        id="dashboard.listing.createNewDashboard.newToOpenSearchDashboardsDescription"
                        values={
                          Object {
                            "sampleDataInstallLink": <EuiLink
                              onClick={[Function]}
                            >
                              <FormattedMessage
                                defaultMessage="Install some sample data"
                                id="dashboard.listing.createNewDashboard.sampleDataInstallLinkText"
                                values={Object {}}
                              />
                            </EuiLink>,
                          }
                        }
                      />
                    </p>
                  </React.Fragment>
                }
                iconType="dashboardApp"
                title={
                  <h1
                    id="dashboardListingHeading"
                  >
                    <FormattedMessage
                      defaultMessage="Create your first dashboard"
                      id="dashboard.listing.createNewDashboard.title"
                      values={Object {}}
                    />
                  </h1>
                }
              />
            }
            tableColumns={
              Array [
                Object {
                  "field": "title",
                  "name": "Title",
                  "render": [Function],
                  "sortable": true,
                },
                Object {
                  "dataType": "string",
                  "field": "type",
                  "name": "Type",
                  "sortable": true,
                },
                Object {
                  "dataType": "string",
                  "field": "description",
                  "name": "Description",
                  "sortable": true,
                },
                Object {
                  "data-test-subj": "updated-at",
                  "dataType": "date",
                  "description": "Last update of the saved object",
                  "field": "updated_at",
                  "name": "Last updated",
                  "render": [Function],
                  "sortable": true,
                },
              ]
            }
            tableListTitle="Dashboards"
            toastNotifications={
              Object {
                "add": [MockFunction],
                "addDanger": [MockFunction],
                "addError": [MockFunction],
                "addInfo": [MockFunction],
                "addSuccess": [MockFunction],
                "addWarning": [MockFunction],
                "get$": [MockFunction],
                "remove": [MockFunction],
              }
            }
          >
            <EuiPage
              className="itemListing__page"
              data-test-subj="dashboardLandingPage"
              restrictWidth={true}
            >
              <div
                className="euiPage euiPage--paddingMedium euiPage--grow euiPage--restrictWidth-default itemListing__page"
                data-test-subj="dashboardLandingPage"
              >
                <EuiPageBody
                  aria-labelledby="dashboardListingHeading"
                  component="main"
                >
                  <main
                    aria-labelledby="dashboardListingHeading"
                    className="euiPageBody euiPageBody--borderRadiusNone"
                  >
                    <EuiPageContent
                      horizontalPosition="center"
                    >
                      <EuiPanel
                        className="euiPageContent euiPageContent--horizontalCenter"
                        paddingSize="l"
                        role="main"
                      >
                        <div
                          className="euiPanel euiPanel--paddingLarge euiPanel--borderRadiusMedium euiPanel--plain euiPanel--hasShadow euiPageContent euiPageContent--horizontalCenter"
                          role="main"
                        >
                          <div>
                            <EuiFlexGroup
                              alignItems="flexEnd"
                              data-test-subj="top-nav"
                              justifyContent="spaceBetween"
                            >
                              <div
                                className="euiFlexGroup euiFlexGroup--gutterLarge euiFlexGroup--alignItemsFlexEnd euiFlexGroup--justifyContentSpaceBetween euiFlexGroup--directionRow euiFlexGroup--responsive"
                                data-test-subj="top-nav"
                              >
                                <EuiFlexItem
                                  grow={false}
                                >
                                  <div
                                    className="euiFlexItem euiFlexItem--flexGrowZero"
                                  >
                                    <EuiTitle
                                      size="l"
                                    >
                                      <h1
                                        className="euiTitle euiTitle--large"
                                        id="dashboardListingHeading"
                                      >
                                        Dashboards
                                      </h1>
                                    </EuiTitle>
                                  </div>
                                </EuiFlexItem>
                                <CreateButton
                                  dashboardProviders={
                                    Object {
                                      "dashboard": Object {
                                        "appId": "1",
                                        "editUrlPathFn": [MockFunction],
                                        "savedObjectsName": "dashboardSavedObjects",
                                        "viewUrlPathFn": [MockFunction],
                                      },
                                    }
                                  }
                                >
                                  <EuiFlexItem
                                    grow={false}
                                  >
                                    <div
                                      className="euiFlexItem euiFlexItem--flexGrowZero"
                                    >
                                      <EuiButton
                                        data-test-subj="newItemButton"
                                        fill={true}
                                        iconType="plusInCircle"
                                      >
                                        <EuiButtonDisplay
                                          baseClassName="euiButton"
                                          data-test-subj="newItemButton"
                                          disabled={false}
                                          element="button"
                                          fill={true}
                                          iconType="plusInCircle"
                                          isDisabled={false}
                                          type="button"
                                        >
                                          <button
                                            className="euiButton euiButton--primary euiButton--fill"
                                            data-test-subj="newItemButton"
                                            disabled={false}
                                            style={
                                              Object {
                                                "minWidth": undefined,
                                              }
                                            }
                                            type="button"
                                          >
                                            <EuiButtonContent
                                              className="euiButton__content"
                                              iconSide="left"
                                              iconType="plusInCircle"
                                              textProps={
                                                Object {
                                                  "className": "euiButton__text",
                                                }
                                              }
                                            >
                                              <span
                                                className="euiButtonContent euiButton__content"
                                              >
                                                <EuiIcon
                                                  className="euiButtonContent__icon"
                                                  color="inherit"
                                                  size="m"
                                                  type="plusInCircle"
                                                >
                                                  <span
                                                    className="euiButtonContent__icon"
                                                    color="inherit"
                                                    data-euiicon-type="plusInCircle"
                                                    size="m"
                                                  />
                                                </EuiIcon>
                                                <span
                                                  className="euiButton__text"
                                                >
                                                  <FormattedMessage
                                                    defaultMessage="Create"
                                                    id="dashboard.listing.createButtonText"
                                                    values={Object {}}
                                                  >
                                                    Create
                                                  </FormattedMessage>
                                                   
                                                </span>
                                              </span>
                                            </EuiButtonContent>
                                          </button>
                                        </EuiButtonDisplay>
                                      </EuiButton>
                                    </div>
                                  </EuiFlexItem>
                                </CreateButton>
                              </div>
                            </EuiFlexGroup>
                            <EuiSpacer
                              size="m"
                            >
                              <div
                                className="euiSpacer euiSpacer--m"
                              />
                            </EuiSpacer>
                            <EuiInMemoryTable
                              columns={
                                Array [
                                  Object {
                                    "field": "title",
                                    "name": "Title",
                                    "render": [Function],
                                    "sortable": true,
                                  },
                                  Object {
                                    "dataType": "string",
                                    "field": "type",
                                    "name": "Type",
                                    "sortable": true,
                                  },
                                  Object {
                                    "dataType": "string",
                                    "field": "description",
                                    "name": "Description",
                                    "sortable": true,
                                  },
                                  Object {
                                    "data-test-subj": "updated-at",
                                    "dataType": "date",
                                    "description": "Last update of the saved object",
                                    "field": "updated_at",
                                    "name": "Last updated",
                                    "render": [Function],
                                    "sortable": true,
                                  },
                                  Object {
                                    "actions": Array [
                                      Object {
                                        "description": "Edit",
                                        "enabled": [Function],
                                        "icon": "pencil",
                                        "name": "Edit",
                                        "onClick": [Function],
                                        "type": "icon",
                                      },
                                    ],
                                    "name": "Actions",
                                    "width": "100px",
                                  },
                                ]
                              }
                              data-test-subj="itemsInMemTable"
                              itemId="id"
                              items={
                                Array [
                                  Object {
                                    "appId": "1",
                                    "description": "dashboard0 desc",
                                    "editUrl": undefined,
                                    "id": "dashboard0",
                                    "title": "dashboard0",
                                    "type": "dashboardSavedObjects",
                                    "updated_at": undefined,
                                    "viewUrl": undefined,
                                  },
                                  Object {
                                    "appId": "1",
                                    "description": "dashboard1 desc",
                                    "editUrl": undefined,
                                    "id": "dashboard1",
                                    "title": "dashboard1",
                                    "type": "dashboardSavedObjects",
                                    "updated_at": undefined,
                                    "viewUrl": undefined,
                                  },
                                ]
                              }
                              loading={false}
                              message={
                                <FormattedMessage
                                  defaultMessage="No {entityNamePlural} matched your search."
                                  id="opensearch-dashboards-react.tableListView.listing.noMatchedItemsMessage"
                                  values={
                                    Object {
                                      "entityNamePlural": "dashboards",
                                    }
                                  }
                                />
                              }
                              pagination={
                                Object {
                                  "initialPageIndex": 0,
                                  "initialPageSize": 10,
                                  "pageSizeOptions": Array [
                                    10,
                                    20,
                                    50,
                                  ],
                                }
                              }
                              responsive={true}
                              search={
                                Object {
                                  "box": Object {
                                    "incremental": true,
                                  },
                                  "defaultQuery": "",
                                  "onChange": [Function],
                                  "toolsLeft": undefined,
                                }
                              }
                              selection={
                                Object {
                                  "onSelectionChange": [Function],
                                }
                              }
                              sorting={true}
                              tableLayout="fixed"
                            >
                              <div>
                                <EuiSearchBar
                                  box={
                                    Object {
                                      "incremental": true,
                                    }
                                  }
                                  defaultQuery=""
                                  onChange={[Function]}
                                >
                                  <EuiFlexGroup
                                    alignItems="center"
                                    gutterSize="m"
                                    wrap={true}
                                  >
                                    <div
                                      className="euiFlexGroup euiFlexGroup--gutterMedium euiFlexGroup--alignItemsCenter euiFlexGroup--directionRow euiFlexGroup--responsive euiFlexGroup--wrap"
                                    >
                                      <EuiFlexItem
                                        className="euiSearchBar__searchHolder"
                                        grow={true}
                                      >
                                        <div
                                          className="euiFlexItem euiSearchBar__searchHolder"
                                        >
                                          <EuiSearchBox
                                            incremental={true}
                                            isInvalid={false}
                                            onSearch={[Function]}
                                            placeholder="Search..."
                                            query=""
                                          >
                                            <EuiFieldSearch
                                              aria-label="This is a search bar. As you type, the results lower in the page will automatically filter."
                                              compressed={false}
                                              defaultValue=""
                                              fullWidth={true}
                                              incremental={true}
                                              inputRef={[Function]}
                                              isClearable={true}
                                              isInvalid={false}
                                              isLoading={false}
                                              onSearch={[Function]}
                                              placeholder="Search..."
                                            >
                                              <EuiFormControlLayout
                                                compressed={false}
                                                fullWidth={true}
                                                icon="search"
                                                isLoading={false}
                                              >
                                                <div
                                                  className="euiFormControlLayout euiFormControlLayout--fullWidth"
                                                >
                                                  <div
                                                    className="euiFormControlLayout__childrenWrapper"
                                                  >
                                                    <EuiValidatableControl
                                                      isInvalid={false}
                                                    >
                                                      <input
                                                        aria-label="This is a search bar. As you type, the results lower in the page will automatically filter."
                                                        className="euiFieldSearch euiFieldSearch--fullWidth"
                                                        defaultValue=""
                                                        onKeyUp={[Function]}
                                                        placeholder="Search..."
                                                        type="search"
                                                      />
                                                    </EuiValidatableControl>
                                                    <EuiFormControlLayoutIcons
                                                      compressed={false}
                                                      icon="search"
                                                      isLoading={false}
                                                    >
                                                      <div
                                                        className="euiFormControlLayoutIcons"
                                                      >
                                                        <EuiFormControlLayoutCustomIcon
                                                          size="m"
                                                          type="search"
                                                        >
                                                          <span
                                                            className="euiFormControlLayoutCustomIcon"
                                                          >
                                                            <EuiIcon
                                                              aria-hidden="true"
                                                              className="euiFormControlLayoutCustomIcon__icon"
                                                              size="m"
                                                              type="search"
                                                            >
                                                              <span
                                                                aria-hidden="true"
                                                                className="euiFormControlLayoutCustomIcon__icon"
                                                                data-euiicon-type="search"
                                                                size="m"
                                                              />
                                                            </EuiIcon>
                                                          </span>
                                                        </EuiFormControlLayoutCustomIcon>
                                                      </div>
                                                    </EuiFormControlLayoutIcons>
                                                  </div>
                                                </div>
                                              </EuiFormControlLayout>
                                            </EuiFieldSearch>
                                          </EuiSearchBox>
                                        </div>
                                      </EuiFlexItem>
                                    </div>
                                  </EuiFlexGroup>
                                </EuiSearchBar>
                                <EuiSpacer
                                  size="l"
                                >
                                  <div
                                    className="euiSpacer euiSpacer--l"
                                  />
                                </EuiSpacer>
                                <EuiBasicTable
                                  columns={
                                    Array [
                                      Object {
                                        "field": "title",
                                        "name": "Title",
                                        "render": [Function],
                                        "sortable": true,
                                      },
                                      Object {
                                        "dataType": "string",
                                        "field": "type",
                                        "name": "Type",
                                        "sortable": true,
                                      },
                                      Object {
                                        "dataType": "string",
                                        "field": "description",
                                        "name": "Description",
                                        "sortable": true,
                                      },
                                      Object {
                                        "data-test-subj": "updated-at",
                                        "dataType": "date",
                                        "description": "Last update of the saved object",
                                        "field": "updated_at",
                                        "name": "Last updated",
                                        "render": [Function],
                                        "sortable": true,
                                      },
                                      Object {
                                        "actions": Array [
                                          Object {
                                            "description": "Edit",
                                            "enabled": [Function],
                                            "icon": "pencil",
                                            "name": "Edit",
                                            "onClick": [Function],
                                            "type": "icon",
                                          },
                                        ],
                                        "name": "Actions",
                                        "width": "100px",
                                      },
                                    ]
                                  }
                                  data-test-subj="itemsInMemTable"
                                  itemId="id"
                                  items={
                                    Array [
                                      Object {
                                        "appId": "1",
                                        "description": "dashboard0 desc",
                                        "editUrl": undefined,
                                        "id": "dashboard0",
                                        "title": "dashboard0",
                                        "type": "dashboardSavedObjects",
                                        "updated_at": undefined,
                                        "viewUrl": undefined,
                                      },
                                      Object {
                                        "appId": "1",
                                        "description": "dashboard1 desc",
                                        "editUrl": undefined,
                                        "id": "dashboard1",
                                        "title": "dashboard1",
                                        "type": "dashboardSavedObjects",
                                        "updated_at": undefined,
                                        "viewUrl": undefined,
                                      },
                                    ]
                                  }
                                  loading={false}
                                  noItemsMessage={
                                    <FormattedMessage
                                      defaultMessage="No {entityNamePlural} matched your search."
                                      id="opensearch-dashboards-react.tableListView.listing.noMatchedItemsMessage"
                                      values={
                                        Object {
                                          "entityNamePlural": "dashboards",
                                        }
                                      }
                                    />
                                  }
                                  onChange={[Function]}
                                  pagination={
                                    Object {
                                      "hidePerPageOptions": undefined,
                                      "pageIndex": 0,
                                      "pageSize": 10,
                                      "pageSizeOptions": Array [
                                        10,
                                        20,
                                        50,
                                      ],
                                      "totalItemCount": 2,
                                    }
                                  }
                                  responsive={true}
                                  selection={
                                    Object {
                                      "onSelectionChange": [Function],
                                    }
                                  }
                                  sorting={
                                    Object {
                                      "allowNeutralSort": true,
                                      "sort": undefined,
                                    }
                                  }
                                  tableLayout="fixed"
                                >
                                  <div
                                    className="euiBasicTable"
                                    data-test-subj="itemsInMemTable"
                                  >
                                    <div>
                                      <EuiTableHeaderMobile>
                                        <div
                                          className="euiTableHeaderMobile"
                                        >
                                          <EuiFlexGroup
                                            alignItems="baseline"
                                            justifyContent="spaceBetween"
                                            responsive={false}
                                          >
                                            <div
                                              className="euiFlexGroup euiFlexGroup--gutterLarge euiFlexGroup--alignItemsBaseline euiFlexGroup--justifyContentSpaceBetween euiFlexGroup--directionRow"
                                            >
                                              <EuiFlexItem
                                                grow={false}
                                              >
                                                <div
                                                  className="euiFlexItem euiFlexItem--flexGrowZero"
                                                >
                                                  <EuiI18n
                                                    default="Select all rows"
                                                    token="euiBasicTable.selectAllRows"
                                                  >
                                                    <EuiCheckbox
                                                      aria-label="Select all rows"
                                                      checked={false}
                                                      compressed={false}
                                                      disabled={false}
                                                      id="_selection_column-checkbox_generated-id"
                                                      indeterminate={false}
                                                      label="Select all rows"
                                                      onChange={[Function]}
                                                    >
                                                      <div
                                                        className="euiCheckbox"
                                                      >
                                                        <input
                                                          aria-label="Select all rows"
                                                          checked={false}
                                                          className="euiCheckbox__input"
                                                          disabled={false}
                                                          id="_selection_column-checkbox_generated-id"
                                                          onChange={[Function]}
                                                          type="checkbox"
                                                        />
                                                        <div
                                                          className="euiCheckbox__square"
                                                        />
                                                        <label
                                                          className="euiCheckbox__label"
                                                          htmlFor="_selection_column-checkbox_generated-id"
                                                        >
                                                          Select all rows
                                                        </label>
                                                      </div>
                                                    </EuiCheckbox>
                                                  </EuiI18n>
                                                </div>
                                              </EuiFlexItem>
                                              <EuiFlexItem
                                                grow={false}
                                              >
                                                <div
                                                  className="euiFlexItem euiFlexItem--flexGrowZero"
                                                >
                                                  <EuiTableSortMobile
                                                    items={
                                                      Array [
                                                        Object {
                                                          "isSortAscending": undefined,
                                                          "isSorted": false,
                                                          "key": "_data_s_title_0",
                                                          "name": "Title",
                                                          "onSort": [Function],
                                                        },
                                                        Object {
                                                          "isSortAscending": undefined,
                                                          "isSorted": false,
                                                          "key": "_data_s_type_1",
                                                          "name": "Type",
                                                          "onSort": [Function],
                                                        },
                                                        Object {
                                                          "isSortAscending": undefined,
                                                          "isSorted": false,
                                                          "key": "_data_s_description_2",
                                                          "name": "Description",
                                                          "onSort": [Function],
                                                        },
                                                        Object {
                                                          "isSortAscending": undefined,
                                                          "isSorted": false,
                                                          "key": "_data_s_updated_at_3",
                                                          "name": "Last updated",
                                                          "onSort": [Function],
                                                        },
                                                      ]
                                                    }
                                                  >
                                                    <div
                                                      className="euiTableSortMobile"
                                                    >
                                                      <EuiPopover
                                                        anchorPosition="downRight"
                                                        button={
                                                          <EuiButtonEmpty
                                                            flush="right"
                                                            iconSide="right"
                                                            iconType="arrowDown"
                                                            onClick={[Function]}
                                                            size="xs"
                                                          >
                                                            <EuiI18n
                                                              default="Sorting"
                                                              token="euiTableSortMobile.sorting"
                                                            />
                                                          </EuiButtonEmpty>
                                                        }
                                                        closePopover={[Function]}
                                                        display="inlineBlock"
                                                        hasArrow={true}
                                                        isOpen={false}
                                                        ownFocus={true}
                                                        panelPaddingSize="none"
                                                      >
                                                        <div
                                                          className="euiPopover euiPopover--anchorDownRight"
                                                        >
                                                          <div
                                                            className="euiPopover__anchor"
                                                          >
                                                            <EuiButtonEmpty
                                                              flush="right"
                                                              iconSide="right"
                                                              iconType="arrowDown"
                                                              onClick={[Function]}
                                                              size="xs"
                                                            >
                                                              <button
                                                                className="euiButtonEmpty euiButtonEmpty--primary euiButtonEmpty--xSmall euiButtonEmpty--flushRight"
                                                                disabled={false}
                                                                onClick={[Function]}
                                                                type="button"
                                                              >
                                                                <EuiButtonContent
                                                                  className="euiButtonEmpty__content"
                                                                  iconSide="right"
                                                                  iconSize="s"
                                                                  iconType="arrowDown"
                                                                  textProps={
                                                                    Object {
                                                                      "className": "euiButtonEmpty__text",
                                                                    }
                                                                  }
                                                                >
                                                                  <span
                                                                    className="euiButtonContent euiButtonContent--iconRight euiButtonEmpty__content"
                                                                  >
                                                                    <EuiIcon
                                                                      className="euiButtonContent__icon"
                                                                      color="inherit"
                                                                      size="s"
                                                                      type="arrowDown"
                                                                    >
                                                                      <span
                                                                        className="euiButtonContent__icon"
                                                                        color="inherit"
                                                                        data-euiicon-type="arrowDown"
                                                                        size="s"
                                                                      />
                                                                    </EuiIcon>
                                                                    <span
                                                                      className="euiButtonEmpty__text"
                                                                    >
                                                                      <EuiI18n
                                                                        default="Sorting"
                                                                        token="euiTableSortMobile.sorting"
                                                                      >
                                                                        Sorting
                                                                      </EuiI18n>
                                                                    </span>
                                                                  </span>
                                                                </EuiButtonContent>
                                                              </button>
                                                            </EuiButtonEmpty>
                                                          </div>
                                                        </div>
                                                      </EuiPopover>
                                                    </div>
                                                  </EuiTableSortMobile>
                                                </div>
                                              </EuiFlexItem>
                                            </div>
                                          </EuiFlexGroup>
                                        </div>
                                      </EuiTableHeaderMobile>
                                      <EuiTable
                                        id="__table_generated-id"
                                        responsive={true}
                                        tableLayout="fixed"
                                      >
                                        <table
                                          className="euiTable euiTable--responsive"
                                          id="__table_generated-id"
                                          tabIndex={-1}
                                        >
                                          <EuiScreenReaderOnly>
                                            <caption
                                              className="euiScreenReaderOnly euiTableCaption"
                                            >
                                              <EuiDelayRender
                                                delay={500}
                                              />
                                            </caption>
                                          </EuiScreenReaderOnly>
                                          <EuiTableHeader>
                                            <thead>
                                              <tr>
                                                <EuiTableHeaderCellCheckbox
                                                  key="_selection_column_h"
                                                >
                                                  <th
                                                    className="euiTableHeaderCellCheckbox"
                                                    scope="col"
                                                    style={
                                                      Object {
                                                        "width": undefined,
                                                      }
                                                    }
                                                  >
                                                    <div
                                                      className="euiTableCellContent"
                                                    >
                                                      <EuiI18n
                                                        default="Select all rows"
                                                        token="euiBasicTable.selectAllRows"
                                                      >
                                                        <EuiCheckbox
                                                          aria-label="Select all rows"
                                                          checked={false}
                                                          compressed={false}
                                                          data-test-subj="checkboxSelectAll"
                                                          disabled={false}
                                                          id="_selection_column-checkbox_generated-id"
                                                          indeterminate={false}
                                                          label={null}
                                                          onChange={[Function]}
                                                          type="inList"
                                                        >
                                                          <div
                                                            className="euiCheckbox euiCheckbox--inList euiCheckbox--noLabel"
                                                          >
                                                            <input
                                                              aria-label="Select all rows"
                                                              checked={false}
                                                              className="euiCheckbox__input"
                                                              data-test-subj="checkboxSelectAll"
                                                              disabled={false}
                                                              id="_selection_column-checkbox_generated-id"
                                                              onChange={[Function]}
                                                              type="checkbox"
                                                            />
                                                            <div
                                                              className="euiCheckbox__square"
                                                            />
                                                          </div>
                                                        </EuiCheckbox>
                                                      </EuiI18n>
                                                    </div>
                                                  </th>
                                                </EuiTableHeaderCellCheckbox>
                                                <EuiTableHeaderCell
                                                  align="left"
                                                  data-test-subj="tableHeaderCell_title_0"
                                                  isSorted={false}
                                                  key="_data_h_title_0"
                                                  onSort={[Function]}
                                                >
                                                  <th
                                                    aria-live="polite"
                                                    aria-sort="none"
                                                    className="euiTableHeaderCell"
                                                    data-test-subj="tableHeaderCell_title_0"
                                                    role="columnheader"
                                                    scope="col"
                                                    style={
                                                      Object {
                                                        "width": undefined,
                                                      }
                                                    }
                                                  >
                                                    <button
                                                      className="euiTableHeaderButton"
                                                      data-test-subj="tableHeaderSortButton"
                                                      onClick={[Function]}
                                                      type="button"
                                                    >
                                                      <CellContents
                                                        className="euiTableCellContent"
                                                        isSorted={false}
                                                        showSortMsg={true}
                                                      >
                                                        <span
                                                          className="euiTableCellContent"
                                                        >
                                                          <EuiInnerText>
                                                            <EuiI18n
                                                              default="{innerText}; {description}"
                                                              token="euiTableHeaderCell.titleTextWithDesc"
                                                              values={
                                                                Object {
                                                                  "description": undefined,
                                                                  "innerText": undefined,
                                                                }
                                                              }
                                                            >
                                                              <span
                                                                className="euiTableCellContent__text"
                                                              >
                                                                Title
                                                              </span>
                                                            </EuiI18n>
                                                          </EuiInnerText>
                                                        </span>
                                                      </CellContents>
                                                    </button>
                                                  </th>
                                                </EuiTableHeaderCell>
                                                <EuiTableHeaderCell
                                                  align="left"
                                                  data-test-subj="tableHeaderCell_type_1"
                                                  isSorted={false}
                                                  key="_data_h_type_1"
                                                  onSort={[Function]}
                                                >
                                                  <th
                                                    aria-live="polite"
                                                    aria-sort="none"
                                                    className="euiTableHeaderCell"
                                                    data-test-subj="tableHeaderCell_type_1"
                                                    role="columnheader"
                                                    scope="col"
                                                    style={
                                                      Object {
                                                        "width": undefined,
                                                      }
                                                    }
                                                  >
                                                    <button
                                                      className="euiTableHeaderButton"
                                                      data-test-subj="tableHeaderSortButton"
                                                      onClick={[Function]}
                                                      type="button"
                                                    >
                                                      <CellContents
                                                        className="euiTableCellContent"
                                                        isSorted={false}
                                                        showSortMsg={true}
                                                      >
                                                        <span
                                                          className="euiTableCellContent"
                                                        >
                                                          <EuiInnerText>
                                                            <EuiI18n
                                                              default="{innerText}; {description}"
                                                              token="euiTableHeaderCell.titleTextWithDesc"
                                                              values={
                                                                Object {
                                                                  "description": undefined,
                                                                  "innerText": undefined,
                                                                }
                                                              }
                                                            >
                                                              <span
                                                                className="euiTableCellContent__text"
                                                              >
                                                                Type
                                                              </span>
                                                            </EuiI18n>
                                                          </EuiInnerText>
                                                        </span>
                                                      </CellContents>
                                                    </button>
                                                  </th>
                                                </EuiTableHeaderCell>
                                                <EuiTableHeaderCell
                                                  align="left"
                                                  data-test-subj="tableHeaderCell_description_2"
                                                  isSorted={false}
                                                  key="_data_h_description_2"
                                                  onSort={[Function]}
                                                >
                                                  <th
                                                    aria-live="polite"
                                                    aria-sort="none"
                                                    className="euiTableHeaderCell"
                                                    data-test-subj="tableHeaderCell_description_2"
                                                    role="columnheader"
                                                    scope="col"
                                                    style={
                                                      Object {
                                                        "width": undefined,
                                                      }
                                                    }
                                                  >
                                                    <button
                                                      className="euiTableHeaderButton"
                                                      data-test-subj="tableHeaderSortButton"
                                                      onClick={[Function]}
                                                      type="button"
                                                    >
                                                      <CellContents
                                                        className="euiTableCellContent"
                                                        isSorted={false}
                                                        showSortMsg={true}
                                                      >
                                                        <span
                                                          className="euiTableCellContent"
                                                        >
                                                          <EuiInnerText>
                                                            <EuiI18n
                                                              default="{innerText}; {description}"
                                                              token="euiTableHeaderCell.titleTextWithDesc"
                                                              values={
                                                                Object {
                                                                  "description": undefined,
                                                                  "innerText": undefined,
                                                                }
                                                              }
                                                            >
                                                              <span
                                                                className="euiTableCellContent__text"
                                                              >
                                                                Description
                                                              </span>
                                                            </EuiI18n>
                                                          </EuiInnerText>
                                                        </span>
                                                      </CellContents>
                                                    </button>
                                                  </th>
                                                </EuiTableHeaderCell>
                                                <EuiTableHeaderCell
                                                  align="left"
                                                  data-test-subj="tableHeaderCell_updated_at_3"
                                                  description="Last update of the saved object"
                                                  isSorted={false}
                                                  key="_data_h_updated_at_3"
                                                  onSort={[Function]}
                                                >
                                                  <th
                                                    aria-live="polite"
                                                    aria-sort="none"
                                                    className="euiTableHeaderCell"
                                                    data-test-subj="tableHeaderCell_updated_at_3"
                                                    role="columnheader"
                                                    scope="col"
                                                    style={
                                                      Object {
                                                        "width": undefined,
                                                      }
                                                    }
                                                  >
                                                    <button
                                                      className="euiTableHeaderButton"
                                                      data-test-subj="tableHeaderSortButton"
                                                      onClick={[Function]}
                                                      type="button"
                                                    >
                                                      <CellContents
                                                        className="euiTableCellContent"
                                                        description="Last update of the saved object"
                                                        isSorted={false}
                                                        showSortMsg={true}
                                                      >
                                                        <span
                                                          className="euiTableCellContent"
                                                        >
                                                          <EuiInnerText>
                                                            <EuiI18n
                                                              default="{innerText}; {description}"
                                                              token="euiTableHeaderCell.titleTextWithDesc"
                                                              values={
                                                                Object {
                                                                  "description": "Last update of the saved object",
                                                                  "innerText": undefined,
                                                                }
                                                              }
                                                            >
                                                              <span
                                                                className="euiTableCellContent__text"
                                                                title="; Last update of the saved object"
                                                              >
                                                                Last updated
                                                              </span>
                                                            </EuiI18n>
                                                          </EuiInnerText>
                                                          <EuiScreenReaderOnly>
                                                            <span
                                                              className="euiScreenReaderOnly"
                                                            >
                                                              Last update of the saved object
                                                            </span>
                                                          </EuiScreenReaderOnly>
                                                        </span>
                                                      </CellContents>
                                                    </button>
                                                  </th>
                                                </EuiTableHeaderCell>
                                                <EuiTableHeaderCell
                                                  align="right"
                                                  key="_actions_h_4"
                                                  width="100px"
                                                >
                                                  <th
                                                    className="euiTableHeaderCell"
                                                    role="columnheader"
                                                    scope="col"
                                                    style={
                                                      Object {
                                                        "width": "100px",
                                                      }
                                                    }
                                                  >
                                                    <CellContents
                                                      className="euiTableCellContent euiTableCellContent--alignRight"
                                                      showSortMsg={false}
                                                    >
                                                      <span
                                                        className="euiTableCellContent euiTableCellContent--alignRight"
                                                      >
                                                        <EuiInnerText>
                                                          <EuiI18n
                                                            default="{innerText}; {description}"
                                                            token="euiTableHeaderCell.titleTextWithDesc"
                                                            values={
                                                              Object {
                                                                "description": undefined,
                                                                "innerText": undefined,
                                                              }
                                                            }
                                                          >
                                                            <span
                                                              className="euiTableCellContent__text"
                                                            >
                                                              Actions
                                                            </span>
                                                          </EuiI18n>
                                                        </EuiInnerText>
                                                      </span>
                                                    </CellContents>
                                                  </th>
                                                </EuiTableHeaderCell>
                                              </tr>
                                            </thead>
                                          </EuiTableHeader>
                                          <EuiTableBody
                                            bodyRef={[Function]}
                                          >
                                            <tbody>
                                              <EuiTableRow
                                                hasActions={true}
                                                isSelectable={true}
                                                isSelected={false}
                                              >
                                                <tr
                                                  className="euiTableRow euiTableRow-isSelectable euiTableRow-hasActions"
                                                >
                                                  <EuiTableRowCellCheckbox
                                                    key="_selection_column_dashboard0"
                                                  >
                                                    <td
                                                      className="euiTableRowCellCheckbox"
                                                    >
                                                      <div
                                                        className="euiTableCellContent"
                                                      >
                                                        <EuiI18n
                                                          default="Select this row"
                                                          token="euiBasicTable.selectThisRow"
                                                        >
                                                          <EuiCheckbox
                                                            aria-label="Select this row"
                                                            checked={false}
                                                            compressed={false}
                                                            data-test-subj="checkboxSelectRow-dashboard0"
                                                            disabled={false}
                                                            id="_selection_column_dashboard0-checkbox"
                                                            indeterminate={false}
                                                            onChange={[Function]}
                                                            title="Select this row"
                                                            type="inList"
                                                          >
                                                            <div
                                                              className="euiCheckbox euiCheckbox--inList euiCheckbox--noLabel"
                                                            >
                                                              <input
                                                                aria-label="Select this row"
                                                                checked={false}
                                                                className="euiCheckbox__input"
                                                                data-test-subj="checkboxSelectRow-dashboard0"
                                                                disabled={false}
                                                                id="_selection_column_dashboard0-checkbox"
                                                                onChange={[Function]}
                                                                title="Select this row"
                                                                type="checkbox"
                                                              />
                                                              <div
                                                                className="euiCheckbox__square"
                                                              />
                                                            </div>
                                                          </EuiCheckbox>
                                                        </EuiI18n>
                                                      </div>
                                                    </td>
                                                  </EuiTableRowCellCheckbox>
                                                  <EuiTableRowCell
                                                    align="left"
                                                    key="_data_column_title_dashboard0_0"
                                                    mobileOptions={
                                                      Object {
                                                        "header": "Title",
                                                        "render": undefined,
                                                      }
                                                    }
                                                    setScopeRow={false}
                                                    textOnly={false}
                                                  >
                                                    <td
                                                      className="euiTableRowCell"
                                                      style={
                                                        Object {
                                                          "width": undefined,
                                                        }
                                                      }
                                                    >
                                                      <div
                                                        className="euiTableRowCell__mobileHeader euiTableRowCell--hideForDesktop"
                                                      >
                                                        Title
                                                      </div>
                                                      <div
                                                        className="euiTableCellContent euiTableCellContent--overflowingContent"
                                                      >
                                                        <EuiLink
                                                          className=""
                                                          data-test-subj="dashboardListingTitleLink-dashboard0"
                                                          key=".0"
                                                        >
                                                          <button
                                                            className="euiLink euiLink--primary"
                                                            data-test-subj="dashboardListingTitleLink-dashboard0"
                                                            disabled={false}
                                                            type="button"
                                                          >
                                                            dashboard0
                                                          </button>
                                                        </EuiLink>
                                                      </div>
                                                    </td>
                                                  </EuiTableRowCell>
                                                  <EuiTableRowCell
                                                    align="left"
                                                    key="_data_column_type_dashboard0_1"
                                                    mobileOptions={
                                                      Object {
                                                        "header": "Type",
                                                        "render": undefined,
                                                      }
                                                    }
                                                    setScopeRow={false}
                                                    textOnly={true}
                                                  >
                                                    <td
                                                      className="euiTableRowCell"
                                                      style={
                                                        Object {
                                                          "width": undefined,
                                                        }
                                                      }
                                                    >
                                                      <div
                                                        className="euiTableRowCell__mobileHeader euiTableRowCell--hideForDesktop"
                                                      >
                                                        Type
                                                      </div>
                                                      <div
                                                        className="euiTableCellContent"
                                                      >
                                                        <span
                                                          className="euiTableCellContent__text"
                                                        >
                                                          dashboardSavedObjects
                                                        </span>
                                                      </div>
                                                    </td>
                                                  </EuiTableRowCell>
                                                  <EuiTableRowCell
                                                    align="left"
                                                    key="_data_column_description_dashboard0_2"
                                                    mobileOptions={
                                                      Object {
                                                        "header": "Description",
                                                        "render": undefined,
                                                      }
                                                    }
                                                    setScopeRow={false}
                                                    textOnly={true}
                                                  >
                                                    <td
                                                      className="euiTableRowCell"
                                                      style={
                                                        Object {
                                                          "width": undefined,
                                                        }
                                                      }
                                                    >
                                                      <div
                                                        className="euiTableRowCell__mobileHeader euiTableRowCell--hideForDesktop"
                                                      >
                                                        Description
                                                      </div>
                                                      <div
                                                        className="euiTableCellContent"
                                                      >
                                                        <span
                                                          className="euiTableCellContent__text"
                                                        >
                                                          dashboard0 desc
                                                        </span>
                                                      </div>
                                                    </td>
                                                  </EuiTableRowCell>
                                                  <EuiTableRowCell
                                                    align="left"
                                                    data-test-subj="updated-at"
                                                    key="_data_column_updated_at_dashboard0_3"
                                                    mobileOptions={
                                                      Object {
                                                        "header": "Last updated",
                                                        "render": undefined,
                                                      }
                                                    }
                                                    setScopeRow={false}
                                                    textOnly={false}
                                                  >
                                                    <td
                                                      className="euiTableRowCell"
                                                      data-test-subj="updated-at"
                                                      style={
                                                        Object {
                                                          "width": undefined,
                                                        }
                                                      }
                                                    >
                                                      <div
                                                        className="euiTableRowCell__mobileHeader euiTableRowCell--hideForDesktop"
                                                      >
                                                        Last updated
                                                      </div>
                                                      <div
                                                        className="euiTableCellContent euiTableCellContent--overflowingContent"
                                                      />
                                                    </td>
                                                  </EuiTableRowCell>
                                                  <EuiTableRowCell
                                                    align="right"
                                                    hasActions={true}
                                                    key="record_actions_dashboard0_4"
                                                    showOnHover={true}
                                                    textOnly={false}
                                                  >
                                                    <td
                                                      className="euiTableRowCell euiTableRowCell--hasActions"
                                                      style={
                                                        Object {
                                                          "width": undefined,
                                                        }
                                                      }
                                                    >
                                                      <div
                                                        className="euiTableCellContent euiTableCellContent--alignRight euiTableCellContent--showOnHover euiTableCellContent--overflowingContent"
                                                      >
                                                        <ExpandedItemActions
                                                          actionEnabled={[Function]}
                                                          actions={
                                                            Array [
                                                              Object {
                                                                "description": "Edit",
                                                                "enabled": [Function],
                                                                "icon": "pencil",
                                                                "name": "Edit",
                                                                "onClick": [Function],
                                                                "type": "icon",
                                                              },
                                                            ]
                                                          }
                                                          className="euiTableCellContent__hoverItem"
                                                          item={
                                                            Object {
                                                              "appId": "1",
                                                              "description": "dashboard0 desc",
                                                              "editUrl": undefined,
                                                              "id": "dashboard0",
                                                              "title": "dashboard0",
                                                              "type": "dashboardSavedObjects",
                                                              "updated_at": undefined,
                                                              "viewUrl": undefined,
                                                            }
                                                          }
                                                          itemId="dashboard0"
                                                          key=".0"
                                                        >
                                                          <DefaultItemAction
                                                            action={
                                                              Object {
                                                                "description": "Edit",
                                                                "enabled": [Function],
                                                                "icon": "pencil",
                                                                "name": "Edit",
                                                                "onClick": [Function],
                                                                "type": "icon",
                                                              }
                                                            }
                                                            className="euiTableCellContent__hoverItem"
                                                            enabled={true}
                                                            item={
                                                              Object {
                                                                "appId": "1",
                                                                "description": "dashboard0 desc",
                                                                "editUrl": undefined,
                                                                "id": "dashboard0",
                                                                "title": "dashboard0",
                                                                "type": "dashboardSavedObjects",
                                                                "updated_at": undefined,
                                                                "viewUrl": undefined,
                                                              }
                                                            }
                                                            key="item_action_dashboard0_0"
                                                          >
                                                            <EuiToolTip
                                                              content="Edit"
                                                              delay="long"
                                                              position="top"
                                                            >
                                                              <span
                                                                className="euiToolTipAnchor"
                                                                onKeyUp={[Function]}
                                                                onMouseOut={[Function]}
                                                                onMouseOver={[Function]}
                                                              >
                                                                <EuiButtonIcon
                                                                  aria-labelledby="generated-id"
                                                                  className="euiTableCellContent__hoverItem"
                                                                  color="primary"
                                                                  iconType="pencil"
                                                                  isDisabled={false}
                                                                  onClick={[Function]}
                                                                >
                                                                  <button
                                                                    aria-labelledby="generated-id"
                                                                    className="euiButtonIcon euiButtonIcon--primary euiButtonIcon--empty euiButtonIcon--xSmall euiTableCellContent__hoverItem"
                                                                    disabled={false}
                                                                    onClick={[Function]}
                                                                    type="button"
                                                                  >
                                                                    <EuiIcon
                                                                      aria-hidden="true"
                                                                      className="euiButtonIcon__icon"
                                                                      color="inherit"
                                                                      size="m"
                                                                      type="pencil"
                                                                    >
                                                                      <span
                                                                        aria-hidden="true"
                                                                        className="euiButtonIcon__icon"
                                                                        color="inherit"
                                                                        data-euiicon-type="pencil"
                                                                        size="m"
                                                                      />
                                                                    </EuiIcon>
                                                                  </button>
                                                                </EuiButtonIcon>
                                                                <EuiScreenReaderOnly>
                                                                  <span
                                                                    className="euiScreenReaderOnly"
                                                                    id="generated-id"
                                                                  >
                                                                    Edit
                                                                  </span>
                                                                </EuiScreenReaderOnly>
                                                              </span>
                                                            </EuiToolTip>
                                                          </DefaultItemAction>
                                                        </ExpandedItemActions>
                                                      </div>
                                                    </td>
                                                  </EuiTableRowCell>
                                                </tr>
                                              </EuiTableRow>
                                              <EuiTableRow
                                                hasActions={true}
                                                isSelectable={true}
                                                isSelected={false}
                                              >
                                                <tr
                                                  className="euiTableRow euiTableRow-isSelectable euiTableRow-hasActions"
                                                >
                                                  <EuiTableRowCellCheckbox
                                                    key="_selection_column_dashboard1"
                                                  >
                                                    <td
                                                      className="euiTableRowCellCheckbox"
                                                    >
                                                      <div
                                                        className="euiTableCellContent"
                                                      >
                                                        <EuiI18n
                                                          default="Select this row"
                                                          token="euiBasicTable.selectThisRow"
                                                        >
                                                          <EuiCheckbox
                                                            aria-label="Select this row"
                                                            checked={false}
                                                            compressed={false}
                                                            data-test-subj="checkboxSelectRow-dashboard1"
                                                            disabled={false}
                                                            id="_selection_column_dashboard1-checkbox"
                                                            indeterminate={false}
                                                            onChange={[Function]}
                                                            title="Select this row"
                                                            type="inList"
                                                          >
                                                            <div
                                                              className="euiCheckbox euiCheckbox--inList euiCheckbox--noLabel"
                                                            >
                                                              <input
                                                                aria-label="Select this row"
                                                                checked={false}
                                                                className="euiCheckbox__input"
                                                                data-test-subj="checkboxSelectRow-dashboard1"
                                                                disabled={false}
                                                                id="_selection_column_dashboard1-checkbox"
                                                                onChange={[Function]}
                                                                title="Select this row"
                                                                type="checkbox"
                                                              />
                                                              <div
                                                                className="euiCheckbox__square"
                                                              />
                                                            </div>
                                                          </EuiCheckbox>
                                                        </EuiI18n>
                                                      </div>
                                                    </td>
                                                  </EuiTableRowCellCheckbox>
                                                  <EuiTableRowCell
                                                    align="left"
                                                    key="_data_column_title_dashboard1_0"
                                                    mobileOptions={
                                                      Object {
                                                        "header": "Title",
                                                        "render": undefined,
                                                      }
                                                    }
                                                    setScopeRow={false}
                                                    textOnly={false}
                                                  >
                                                    <td
                                                      className="euiTableRowCell"
                                                      style={
                                                        Object {
                                                          "width": undefined,
                                                        }
                                                      }
                                                    >
                                                      <div
                                                        className="euiTableRowCell__mobileHeader euiTableRowCell--hideForDesktop"
                                                      >
                                                        Title
                                                      </div>
                                                      <div
                                                        className="euiTableCellContent euiTableCellContent--overflowingContent"
                                                      >
                                                        <EuiLink
                                                          className=""
                                                          data-test-subj="dashboardListingTitleLink-dashboard1"
                                                          key=".0"
                                                        >
                                                          <button
                                                            className="euiLink euiLink--primary"
                                                            data-test-subj="dashboardListingTitleLink-dashboard1"
                                                            disabled={false}
                                                            type="button"
                                                          >
                                                            dashboard1
                                                          </button>
                                                        </EuiLink>
                                                      </div>
                                                    </td>
                                                  </EuiTableRowCell>
                                                  <EuiTableRowCell
                                                    align="left"
                                                    key="_data_column_type_dashboard1_1"
                                                    mobileOptions={
                                                      Object {
                                                        "header": "Type",
                                                        "render": undefined,
                                                      }
                                                    }
                                                    setScopeRow={false}
                                                    textOnly={true}
                                                  >
                                                    <td
                                                      className="euiTableRowCell"
                                                      style={
                                                        Object {
                                                          "width": undefined,
                                                        }
                                                      }
                                                    >
                                                      <div
                                                        className="euiTableRowCell__mobileHeader euiTableRowCell--hideForDesktop"
                                                      >
                                                        Type
                                                      </div>
                                                      <div
                                                        className="euiTableCellContent"
                                                      >
                                                        <span
                                                          className="euiTableCellContent__text"
                                                        >
                                                          dashboardSavedObjects
                                                        </span>
                                                      </div>
                                                    </td>
                                                  </EuiTableRowCell>
                                                  <EuiTableRowCell
                                                    align="left"
                                                    key="_data_column_description_dashboard1_2"
                                                    mobileOptions={
                                                      Object {
                                                        "header": "Description",
                                                        "render": undefined,
                                                      }
                                                    }
                                                    setScopeRow={false}
                                                    textOnly={true}
                                                  >
                                                    <td
                                                      className="euiTableRowCell"
                                                      style={
                                                        Object {
                                                          "width": undefined,
                                                        }
                                                      }
                                                    >
                                                      <div
                                                        className="euiTableRowCell__mobileHeader euiTableRowCell--hideForDesktop"
                                                      >
                                                        Description
                                                      </div>
                                                      <div
                                                        className="euiTableCellContent"
                                                      >
                                                        <span
                                                          className="euiTableCellContent__text"
                                                        >
                                                          dashboard1 desc
                                                        </span>
                                                      </div>
                                                    </td>
                                                  </EuiTableRowCell>
                                                  <EuiTableRowCell
                                                    align="left"
                                                    data-test-subj="updated-at"
                                                    key="_data_column_updated_at_dashboard1_3"
                                                    mobileOptions={
                                                      Object {
                                                        "header": "Last updated",
                                                        "render": undefined,
                                                      }
                                                    }
                                                    setScopeRow={false}
                                                    textOnly={false}
                                                  >
                                                    <td
                                                      className="euiTableRowCell"
                                                      data-test-subj="updated-at"
                                                      style={
                                                        Object {
                                                          "width": undefined,
                                                        }
                                                      }
                                                    >
                                                      <div
                                                        className="euiTableRowCell__mobileHeader euiTableRowCell--hideForDesktop"
                                                      >
                                                        Last updated
                                                      </div>
                                                      <div
                                                        className="euiTableCellContent euiTableCellContent--overflowingContent"
                                                      />
                                                    </td>
                                                  </EuiTableRowCell>
                                                  <EuiTableRowCell
                                                    align="right"
                                                    hasActions={true}
                                                    key="record_actions_dashboard1_4"
                                                    showOnHover={true}
                                                    textOnly={false}
                                                  >
                                                    <td
                                                      className="euiTableRowCell euiTableRowCell--hasActions"
                                                      style={
                                                        Object {
                                                          "width": undefined,
                                                        }
                                                      }
                                                    >
                                                      <div
                                                        className="euiTableCellContent euiTableCellContent--alignRight euiTableCellContent--showOnHover euiTableCellContent--overflowingContent"
                                                      >
                                                        <ExpandedItemActions
                                                          actionEnabled={[Function]}
                                                          actions={
                                                            Array [
                                                              Object {
                                                                "description": "Edit",
                                                                "enabled": [Function],
                                                                "icon": "pencil",
                                                                "name": "Edit",
                                                                "onClick": [Function],
                                                                "type": "icon",
                                                              },
                                                            ]
                                                          }
                                                          className="euiTableCellContent__hoverItem"
                                                          item={
                                                            Object {
                                                              "appId": "1",
                                                              "description": "dashboard1 desc",
                                                              "editUrl": undefined,
                                                              "id": "dashboard1",
                                                              "title": "dashboard1",
                                                              "type": "dashboardSavedObjects",
                                                              "updated_at": undefined,
                                                              "viewUrl": undefined,
                                                            }
                                                          }
                                                          itemId="dashboard1"
                                                          key=".0"
                                                        >
                                                          <DefaultItemAction
                                                            action={
                                                              Object {
                                                                "description": "Edit",
                                                                "enabled": [Function],
                                                                "icon": "pencil",
                                                                "name": "Edit",
                                                                "onClick": [Function],
                                                                "type": "icon",
                                                              }
                                                            }
                                                            className="euiTableCellContent__hoverItem"
                                                            enabled={true}
                                                            item={
                                                              Object {
                                                                "appId": "1",
                                                                "description": "dashboard1 desc",
                                                                "editUrl": undefined,
                                                                "id": "dashboard1",
                                                                "title": "dashboard1",
                                                                "type": "dashboardSavedObjects",
                                                                "updated_at": undefined,
                                                                "viewUrl": undefined,
                                                              }
                                                            }
                                                            key="item_action_dashboard1_0"
                                                          >
                                                            <EuiToolTip
                                                              content="Edit"
                                                              delay="long"
                                                              position="top"
                                                            >
                                                              <span
                                                                className="euiToolTipAnchor"
                                                                onKeyUp={[Function]}
                                                                onMouseOut={[Function]}
                                                                onMouseOver={[Function]}
                                                              >
                                                                <EuiButtonIcon
                                                                  aria-labelledby="generated-id"
                                                                  className="euiTableCellContent__hoverItem"
                                                                  color="primary"
                                                                  iconType="pencil"
                                                                  isDisabled={false}
                                                                  onClick={[Function]}
                                                                >
                                                                  <button
                                                                    aria-labelledby="generated-id"
                                                                    className="euiButtonIcon euiButtonIcon--primary euiButtonIcon--empty euiButtonIcon--xSmall euiTableCellContent__hoverItem"
                                                                    disabled={false}
                                                                    onClick={[Function]}
                                                                    type="button"
                                                                  >
                                                                    <EuiIcon
                                                                      aria-hidden="true"
                                                                      className="euiButtonIcon__icon"
                                                                      color="inherit"
                                                                      size="m"
                                                                      type="pencil"
                                                                    >
                                                                      <span
                                                                        aria-hidden="true"
                                                                        className="euiButtonIcon__icon"
                                                                        color="inherit"
                                                                        data-euiicon-type="pencil"
                                                                        size="m"
                                                                      />
                                                                    </EuiIcon>
                                                                  </button>
                                                                </EuiButtonIcon>
                                                                <EuiScreenReaderOnly>
                                                                  <span
                                                                    className="euiScreenReaderOnly"
                                                                    id="generated-id"
                                                                  >
                                                                    Edit
                                                                  </span>
                                                                </EuiScreenReaderOnly>
                                                              </span>
                                                            </EuiToolTip>
                                                          </DefaultItemAction>
                                                        </ExpandedItemActions>
                                                      </div>
                                                    </td>
                                                  </EuiTableRowCell>
                                                </tr>
                                              </EuiTableRow>
                                            </tbody>
                                          </EuiTableBody>
                                        </table>
                                      </EuiTable>
                                    </div>
                                    <PaginationBar
                                      aria-controls="__table_generated-id"
                                      onPageChange={[Function]}
                                      onPageSizeChange={[Function]}
                                      pagination={
                                        Object {
                                          "hidePerPageOptions": undefined,
                                          "pageIndex": 0,
                                          "pageSize": 10,
                                          "pageSizeOptions": Array [
                                            10,
                                            20,
                                            50,
                                          ],
                                          "totalItemCount": 2,
                                        }
                                      }
                                    >
                                      <div>
                                        <EuiSpacer
                                          size="m"
                                        >
                                          <div
                                            className="euiSpacer euiSpacer--m"
                                          />
                                        </EuiSpacer>
                                        <EuiTablePagination
                                          activePage={0}
                                          aria-controls="__table_generated-id"
                                          itemsPerPage={10}
                                          itemsPerPageOptions={
                                            Array [
                                              10,
                                              20,
                                              50,
                                            ]
                                          }
                                          onChangeItemsPerPage={[Function]}
                                          onChangePage={[Function]}
                                          pageCount={1}
                                        >
                                          <EuiFlexGroup
                                            alignItems="center"
                                            justifyContent="spaceBetween"
                                            responsive={false}
                                          >
                                            <div
                                              className="euiFlexGroup euiFlexGroup--gutterLarge euiFlexGroup--alignItemsCenter euiFlexGroup--justifyContentSpaceBetween euiFlexGroup--directionRow"
                                            >
                                              <EuiFlexItem
                                                grow={false}
                                              >
                                                <div
                                                  className="euiFlexItem euiFlexItem--flexGrowZero"
                                                >
                                                  <EuiPopover
                                                    anchorPosition="upRight"
                                                    button={
                                                      <EuiButtonEmpty
                                                        color="text"
                                                        data-test-subj="tablePaginationPopoverButton"
                                                        iconSide="right"
                                                        iconType="arrowDown"
                                                        onClick={[Function]}
                                                        size="xs"
                                                      >
                                                        <EuiI18n
                                                          default="Rows per page"
                                                          token="euiTablePagination.rowsPerPage"
                                                        />
                                                        : 
                                                        10
                                                      </EuiButtonEmpty>
                                                    }
                                                    closePopover={[Function]}
                                                    display="inlineBlock"
                                                    hasArrow={true}
                                                    isOpen={false}
                                                    ownFocus={true}
                                                    panelPaddingSize="none"
                                                  >
                                                    <div
                                                      className="euiPopover euiPopover--anchorUpRight"
                                                    >
                                                      <div
                                                        className="euiPopover__anchor"
                                                      >
                                                        <EuiButtonEmpty
                                                          color="text"
                                                          data-test-subj="tablePaginationPopoverButton"
                                                          iconSide="right"
                                                          iconType="arrowDown"
                                                          onClick={[Function]}
                                                          size="xs"
                                                        >
                                                          <button
                                                            className="euiButtonEmpty euiButtonEmpty--text euiButtonEmpty--xSmall"
                                                            data-test-subj="tablePaginationPopoverButton"
                                                            disabled={false}
                                                            onClick={[Function]}
                                                            type="button"
                                                          >
                                                            <EuiButtonContent
                                                              className="euiButtonEmpty__content"
                                                              iconSide="right"
                                                              iconSize="s"
                                                              iconType="arrowDown"
                                                              textProps={
                                                                Object {
                                                                  "className": "euiButtonEmpty__text",
                                                                }
                                                              }
                                                            >
                                                              <span
                                                                className="euiButtonContent euiButtonContent--iconRight euiButtonEmpty__content"
                                                              >
                                                                <EuiIcon
                                                                  className="euiButtonContent__icon"
                                                                  color="inherit"
                                                                  size="s"
                                                                  type="arrowDown"
                                                                >
                                                                  <span
                                                                    className="euiButtonContent__icon"
                                                                    color="inherit"
                                                                    data-euiicon-type="arrowDown"
                                                                    size="s"
                                                                  />
                                                                </EuiIcon>
                                                                <span
                                                                  className="euiButtonEmpty__text"
                                                                >
                                                                  <EuiI18n
                                                                    default="Rows per page"
                                                                    token="euiTablePagination.rowsPerPage"
                                                                  >
                                                                    Rows per page
                                                                  </EuiI18n>
                                                                  : 
                                                                  10
                                                                </span>
                                                              </span>
                                                            </EuiButtonContent>
                                                          </button>
                                                        </EuiButtonEmpty>
                                                      </div>
                                                    </div>
                                                  </EuiPopover>
                                                </div>
                                              </EuiFlexItem>
                                              <EuiFlexItem
                                                grow={false}
                                              >
                                                <div
                                                  className="euiFlexItem euiFlexItem--flexGrowZero"
                                                >
                                                  <EuiPagination
                                                    activePage={0}
                                                    aria-controls="__table_generated-id"
                                                    onPageClick={[Function]}
                                                    pageCount={1}
                                                  >
                                                    <nav
                                                      className="euiPagination"
                                                    >
                                                      <EuiI18n
                                                        default="Previous page, {page}"
                                                        token="euiPagination.previousPage"
                                                        values={
                                                          Object {
                                                            "page": 0,
                                                          }
                                                        }
                                                      >
                                                        <EuiI18n
                                                          default="Previous page"
                                                          token="euiPagination.disabledPreviousPage"
                                                        >
                                                          <EuiButtonIcon
                                                            aria-label="Previous page"
                                                            color="text"
                                                            data-test-subj="pagination-button-previous"
                                                            disabled={true}
                                                            iconType="arrowLeft"
                                                            onClick={[Function]}
                                                          >
                                                            <button
                                                              aria-label="Previous page"
                                                              className="euiButtonIcon euiButtonIcon--text euiButtonIcon--empty euiButtonIcon--xSmall"
                                                              data-test-subj="pagination-button-previous"
                                                              disabled={true}
                                                              onClick={[Function]}
                                                              type="button"
                                                            >
                                                              <EuiIcon
                                                                aria-hidden="true"
                                                                className="euiButtonIcon__icon"
                                                                color="inherit"
                                                                size="m"
                                                                type="arrowLeft"
                                                              >
                                                                <span
                                                                  aria-hidden="true"
                                                                  className="euiButtonIcon__icon"
                                                                  color="inherit"
                                                                  data-euiicon-type="arrowLeft"
                                                                  size="m"
                                                                />
                                                              </EuiIcon>
                                                            </button>
                                                          </EuiButtonIcon>
                                                        </EuiI18n>
                                                      </EuiI18n>
                                                      <ul
                                                        className="euiPagination__list"
                                                      >
                                                        <PaginationButton
                                                          key="0"
                                                          pageIndex={0}
                                                        >
                                                          <li
                                                            className="euiPagination__item"
                                                          >
                                                            <EuiPaginationButton
                                                              aria-controls="__table_generated-id"
                                                              hideOnMobile={true}
                                                              isActive={true}
                                                              onClick={[Function]}
                                                              pageIndex={0}
                                                              totalPages={1}
                                                            >
                                                              <EuiI18n
                                                                default="Page {page} of {totalPages}"
                                                                token="euiPaginationButton.longPageString"
                                                                values={
                                                                  Object {
                                                                    "page": 1,
                                                                    "totalPages": 1,
                                                                  }
                                                                }
                                                              >
                                                                <EuiI18n
                                                                  default="Page {page}"
                                                                  token="euiPaginationButton.shortPageString"
                                                                  values={
                                                                    Object {
                                                                      "page": 1,
                                                                    }
                                                                  }
                                                                >
                                                                  <EuiButtonEmpty
                                                                    aria-controls="__table_generated-id"
                                                                    aria-current={true}
                                                                    aria-label="Page 1 of 1"
                                                                    className="euiPaginationButton euiPaginationButton-isActive euiPaginationButton--hideOnMobile"
                                                                    color="text"
                                                                    data-test-subj="pagination-button-0"
                                                                    href="#__table_generated-id"
                                                                    isDisabled={true}
                                                                    onClick={[Function]}
                                                                    size="s"
                                                                  >
                                                                    <button
                                                                      aria-controls="__table_generated-id"
                                                                      aria-current={true}
                                                                      aria-label="Page 1 of 1"
                                                                      className="euiButtonEmpty euiButtonEmpty--text euiButtonEmpty--small euiButtonEmpty-isDisabled euiPaginationButton euiPaginationButton-isActive euiPaginationButton--hideOnMobile"
                                                                      data-test-subj="pagination-button-0"
                                                                      disabled={true}
                                                                      onClick={[Function]}
                                                                      type="button"
                                                                    >
                                                                      <EuiButtonContent
                                                                        className="euiButtonEmpty__content"
                                                                        iconSide="left"
                                                                        iconSize="m"
                                                                        textProps={
                                                                          Object {
                                                                            "className": "euiButtonEmpty__text",
                                                                          }
                                                                        }
                                                                      >
                                                                        <span
                                                                          className="euiButtonContent euiButtonEmpty__content"
                                                                        >
                                                                          <span
                                                                            className="euiButtonEmpty__text"
                                                                          >
                                                                            1
                                                                          </span>
                                                                        </span>
                                                                      </EuiButtonContent>
                                                                    </button>
                                                                  </EuiButtonEmpty>
                                                                </EuiI18n>
                                                              </EuiI18n>
                                                            </EuiPaginationButton>
                                                          </li>
                                                        </PaginationButton>
                                                      </ul>
                                                      <EuiI18n
                                                        default="Next page, {page}"
                                                        token="euiPagination.nextPage"
                                                        values={
                                                          Object {
                                                            "page": 2,
                                                          }
                                                        }
                                                      >
                                                        <EuiI18n
                                                          default="Next page"
                                                          token="euiPagination.disabledNextPage"
                                                        >
                                                          <EuiButtonIcon
                                                            aria-label="Next page"
                                                            color="text"
                                                            data-test-subj="pagination-button-next"
                                                            disabled={true}
                                                            iconType="arrowRight"
                                                            onClick={[Function]}
                                                          >
                                                            <button
                                                              aria-label="Next page"
                                                              className="euiButtonIcon euiButtonIcon--text euiButtonIcon--empty euiButtonIcon--xSmall"
                                                              data-test-subj="pagination-button-next"
                                                              disabled={true}
                                                              onClick={[Function]}
                                                              type="button"
                                                            >
                                                              <EuiIcon
                                                                aria-hidden="true"
                                                                className="euiButtonIcon__icon"
                                                                color="inherit"
                                                                size="m"
                                                                type="arrowRight"
                                                              >
                                                                <span
                                                                  aria-hidden="true"
                                                                  className="euiButtonIcon__icon"
                                                                  color="inherit"
                                                                  data-euiicon-type="arrowRight"
                                                                  size="m"
                                                                />
                                                              </EuiIcon>
                                                            </button>
                                                          </EuiButtonIcon>
                                                        </EuiI18n>
                                                      </EuiI18n>
                                                    </nav>
                                                  </EuiPagination>
                                                </div>
                                              </EuiFlexItem>
                                            </div>
                                          </EuiFlexGroup>
                                        </EuiTablePagination>
                                      </div>
                                    </PaginationBar>
                                  </div>
                                </EuiBasicTable>
                              </div>
                            </EuiInMemoryTable>
                          </div>
                        </div>
                      </EuiPanel>
                    </EuiPageContent>
                  </main>
                </EuiPageBody>
              </div>
            </EuiPage>
          </TableListView>
        </DashboardListing>
      </Provider>
    </PseudoLocaleWrapper>
  </IntlProvider>
</I18nProvider>
`;

exports[`dashboard listing renders warning when listingLimit is exceeded 1`] = `
<I18nProvider>
  <IntlProvider
    defaultLocale="en"
    formats={
      Object {
        "date": Object {
          "full": Object {
            "day": "numeric",
            "month": "long",
            "weekday": "long",
            "year": "numeric",
          },
          "long": Object {
            "day": "numeric",
            "month": "long",
            "year": "numeric",
          },
          "medium": Object {
            "day": "numeric",
            "month": "short",
            "year": "numeric",
          },
          "short": Object {
            "day": "numeric",
            "month": "numeric",
            "year": "2-digit",
          },
        },
        "number": Object {
          "currency": Object {
            "style": "currency",
          },
          "percent": Object {
            "style": "percent",
          },
        },
        "relative": Object {
          "days": Object {
            "units": "day",
          },
          "hours": Object {
            "units": "hour",
          },
          "minutes": Object {
            "units": "minute",
          },
          "months": Object {
            "units": "month",
          },
          "seconds": Object {
            "units": "second",
          },
          "years": Object {
            "units": "year",
          },
        },
        "time": Object {
          "full": Object {
            "hour": "numeric",
            "minute": "numeric",
            "second": "numeric",
            "timeZoneName": "short",
          },
          "long": Object {
            "hour": "numeric",
            "minute": "numeric",
            "second": "numeric",
            "timeZoneName": "short",
          },
          "medium": Object {
            "hour": "numeric",
            "minute": "numeric",
            "second": "numeric",
          },
          "short": Object {
            "hour": "numeric",
            "minute": "numeric",
          },
        },
      }
    }
    locale="en"
    messages={Object {}}
    textComponent={Symbol(react.fragment)}
  >
    <PseudoLocaleWrapper>
      <Provider
        services={
          Object {
            "application": Object {
              "applications$": BehaviorSubject {
                "_isScalar": false,
                "_value": Map {},
                "closed": false,
                "hasError": false,
                "isStopped": false,
                "observers": Array [],
                "thrownError": null,
              },
              "capabilities": Object {
                "catalogue": Object {},
                "management": Object {},
                "navLinks": Object {},
                "workspaces": Object {},
              },
              "currentAppId$": Observable {
                "_isScalar": false,
                "source": Subject {
                  "_isScalar": false,
                  "closed": false,
                  "hasError": false,
                  "isStopped": false,
                  "observers": Array [],
                  "thrownError": null,
                },
              },
              "getUrlForApp": [MockFunction],
              "navigateToApp": [MockFunction],
              "navigateToUrl": [MockFunction],
              "registerMountContext": [MockFunction],
            },
            "chrome": Object {
              "addApplicationClass": [MockFunction],
              "docTitle": Object {
                "change": [MockFunction] {
                  "calls": Array [
                    Array [
                      "Dashboards",
                    ],
                  ],
                  "results": Array [
                    Object {
                      "type": "return",
                      "value": undefined,
                    },
                  ],
                },
                "reset": [MockFunction],
              },
              "getApplicationClasses$": [MockFunction],
              "getBadge$": [MockFunction],
              "getBreadcrumbs$": [MockFunction],
              "getCustomNavLink$": [MockFunction],
              "getHeaderComponent": [MockFunction],
              "getHelpExtension$": [MockFunction],
              "getIsNavDrawerLocked$": [MockFunction],
              "getIsVisible$": [MockFunction],
              "logos": Object {
                "AnimatedMark": Object {
                  "dark": Object {
                    "type": "default",
                    "url": "/ui/logos/opensearch_spinner_on_dark.svg",
                  },
                  "light": Object {
                    "type": "default",
                    "url": "/ui/logos/opensearch_spinner_on_light.svg",
                  },
                  "type": "default",
                  "url": "/ui/logos/opensearch_spinner_on_light.svg",
                },
                "Application": Object {
                  "dark": Object {
                    "type": "default",
                    "url": "/ui/logos/opensearch_dashboards_on_dark.svg",
                  },
                  "light": Object {
                    "type": "default",
                    "url": "/ui/logos/opensearch_dashboards_on_light.svg",
                  },
                  "type": "default",
                  "url": "/ui/logos/opensearch_dashboards_on_light.svg",
                },
                "CenterMark": Object {
                  "dark": Object {
                    "type": "default",
                    "url": "/ui/logos/opensearch_center_mark_on_dark.svg",
                  },
                  "light": Object {
                    "type": "default",
                    "url": "/ui/logos/opensearch_center_mark_on_light.svg",
                  },
                  "type": "default",
                  "url": "/ui/logos/opensearch_center_mark_on_light.svg",
                },
                "Mark": Object {
                  "dark": Object {
                    "type": "default",
                    "url": "/ui/logos/opensearch_mark_on_dark.svg",
                  },
                  "light": Object {
                    "type": "default",
                    "url": "/ui/logos/opensearch_mark_on_light.svg",
                  },
                  "type": "default",
                  "url": "/ui/logos/opensearch_mark_on_light.svg",
                },
                "OpenSearch": Object {
                  "dark": Object {
                    "type": "default",
                    "url": "/ui/logos/opensearch_on_dark.svg",
                  },
                  "light": Object {
                    "type": "default",
                    "url": "/ui/logos/opensearch_on_light.svg",
                  },
                  "type": "default",
                  "url": "/ui/logos/opensearch_on_light.svg",
                },
                "colorScheme": "light",
              },
              "navControls": Object {
                "getCenter$": [MockFunction],
                "getLeft$": [MockFunction],
                "getRight$": [MockFunction],
                "registerCenter": [MockFunction],
                "registerLeft": [MockFunction],
                "registerRight": [MockFunction],
              },
              "navLinks": Object {
                "enableForcedAppSwitcherNavigation": [MockFunction],
                "get": [MockFunction],
                "getAll": [MockFunction],
                "getForceAppSwitcherNavigation$": [MockFunction],
                "getNavLinks$": [MockFunction],
                "has": [MockFunction],
                "showOnly": [MockFunction],
                "update": [MockFunction],
              },
              "recentlyAccessed": Object {
                "add": [MockFunction],
                "get": [MockFunction],
                "get$": [MockFunction],
              },
              "removeApplicationClass": [MockFunction],
              "setAppTitle": [MockFunction],
              "setBadge": [MockFunction],
              "setBreadcrumbs": [MockFunction] {
                "calls": Array [
                  Array [
                    Array [
                      Object {
                        "text": "Dashboards",
                      },
                    ],
                  ],
                ],
                "results": Array [
                  Object {
                    "type": "return",
                    "value": undefined,
                  },
                ],
              },
              "setCustomNavLink": [MockFunction],
              "setHelpExtension": [MockFunction],
              "setHelpSupportUrl": [MockFunction],
              "setIsVisible": [MockFunction],
            },
            "dashboard": Object {
              "getAttributeService": [MockFunction],
            },
            "dashboardConfig": Object {
              "getHideWriteControls": [Function],
            },
            "dashboardProviders": [Function],
            "data": Object {
              "actions": Object {
                "createFiltersFromRangeSelectAction": [MockFunction],
                "createFiltersFromValueClickAction": [MockFunction],
              },
              "autocomplete": Object {
                "getQuerySuggestions": [MockFunction],
                "getValueSuggestions": [MockFunction],
                "hasQuerySuggestions": [MockFunction],
              },
              "fieldFormats": Object {
                "deserialize": [MockFunction],
                "getByFieldType": [MockFunction],
                "getDefaultConfig": [MockFunction],
                "getDefaultInstance": [MockFunction],
                "getDefaultInstanceCacheResolver": [MockFunction],
                "getDefaultInstancePlain": [MockFunction],
                "getDefaultType": [MockFunction],
                "getDefaultTypeName": [MockFunction],
                "getInstance": [MockFunction],
                "getType": [MockFunction],
                "getTypeNameByOpenSearchTypes": [MockFunction],
                "getTypeWithoutMetaParams": [MockFunction],
                "init": [MockFunction],
                "parseDefaultTypeMap": [MockFunction],
                "register": [MockFunction],
              },
              "indexPatterns": Object {
                "clearCache": [MockFunction],
                "createField": [MockFunction],
                "createFieldList": [MockFunction],
                "ensureDefaultIndexPattern": [MockFunction],
                "find": [MockFunction],
                "get": [MockFunction],
                "getDefault": [MockFunction],
                "make": [Function],
              },
              "query": Object {
                "addToQueryLog": [MockFunction],
                "filterManager": Object {
                  "addFilters": [MockFunction],
                  "getAppFilters": [MockFunction],
                  "getFetches$": [MockFunction],
                  "getFilters": [MockFunction],
                  "getGlobalFilters": [MockFunction] {
                    "calls": Array [
                      Array [],
                      Array [],
                      Array [],
                    ],
                    "results": Array [
                      Object {
                        "type": "return",
                        "value": undefined,
                      },
                      Object {
                        "type": "return",
                        "value": undefined,
                      },
                      Object {
                        "type": "return",
                        "value": undefined,
                      },
                    ],
                  },
                  "getPartitionedFilters": [MockFunction],
                  "getUpdates$": [MockFunction],
                  "handleStateUpdate": [MockFunction],
                  "mergeIncomingFilters": [MockFunction],
                  "removeAll": [MockFunction],
                  "removeFilter": [MockFunction],
                  "setAppFilters": [MockFunction],
                  "setFilters": [MockFunction],
                  "setGlobalFilters": [MockFunction] {
                    "calls": Array [
                      Array [
                        Array [],
                      ],
                    ],
                    "results": Array [
                      Object {
                        "type": "return",
                        "value": undefined,
                      },
                    ],
                  },
                },
                "getOpenSearchQuery": [MockFunction],
                "queryString": Object {
                  "clearQuery": [MockFunction],
                  "formatQuery": [MockFunction],
                  "getDefaultQuery": [MockFunction],
                  "getQuery": [MockFunction],
                  "getUpdates$": [MockFunction],
                  "setQuery": [MockFunction],
                },
                "savedQueries": [MockFunction],
                "state$": Observable {
                  "_isScalar": false,
                },
                "timefilter": Object {
                  "history": Object {
                    "add": [MockFunction],
                    "get": [MockFunction],
                  },
                  "timefilter": Object {
                    "calculateBounds": [MockFunction],
                    "createFilter": [MockFunction],
                    "disableAutoRefreshSelector": [MockFunction],
                    "disableTimeRangeSelector": [MockFunction],
                    "enableAutoRefreshSelector": [MockFunction],
                    "enableTimeRangeSelector": [MockFunction],
                    "getActiveBounds": [MockFunction],
                    "getAutoRefreshFetch$": [MockFunction],
                    "getBounds": [MockFunction],
                    "getEnabledUpdated$": [MockFunction],
                    "getFetch$": [MockFunction],
                    "getRefreshInterval": [MockFunction] {
                      "calls": Array [
                        Array [],
                        Array [],
                        Array [],
                      ],
                      "results": Array [
                        Object {
                          "type": "return",
                          "value": undefined,
                        },
                        Object {
                          "type": "return",
                          "value": undefined,
                        },
                        Object {
                          "type": "return",
                          "value": undefined,
                        },
                      ],
                    },
                    "getRefreshIntervalDefaults": [MockFunction] {
                      "calls": Array [
                        Array [],
                      ],
                      "results": Array [
                        Object {
                          "type": "return",
                          "value": undefined,
                        },
                      ],
                    },
                    "getRefreshIntervalUpdate$": [MockFunction],
                    "getTime": [MockFunction] {
                      "calls": Array [
                        Array [],
                        Array [],
                        Array [],
                      ],
                      "results": Array [
                        Object {
                          "type": "return",
                          "value": undefined,
                        },
                        Object {
                          "type": "return",
                          "value": undefined,
                        },
                        Object {
                          "type": "return",
                          "value": undefined,
                        },
                      ],
                    },
                    "getTimeDefaults": [MockFunction] {
                      "calls": Array [
                        Array [],
                      ],
                      "results": Array [
                        Object {
                          "type": "return",
                          "value": undefined,
                        },
                      ],
                    },
                    "getTimeUpdate$": [MockFunction],
                    "isAutoRefreshSelectorEnabled": [MockFunction],
                    "isTimeRangeSelectorEnabled": [MockFunction],
                    "setRefreshInterval": [MockFunction],
                    "setTime": [MockFunction],
                  },
                },
              },
              "search": Object {
                "aggs": Object {
                  "calculateAutoTimeExpression": [Function],
                  "createAggConfigs": [MockFunction],
                  "types": Object {
                    "get": [Function],
                    "getAll": [Function],
                  },
                },
                "search": [MockFunction],
                "searchSource": Object {
                  "create": [MockFunction],
                  "createEmpty": [MockFunction],
                },
                "showError": [MockFunction],
              },
              "ui": Object {
                "IndexPatternSelect": [MockFunction],
                "SearchBar": [MockFunction],
              },
            },
            "docLinks": Object {
              "DOC_LINK_VERSION": "mocked-test-branch",
              "OPENSEARCH_WEBSITE_URL": "https://opensearch.org/",
              "links": Object {
                "noDocumentation": Object {
                  "addData": "https://opensearch.org/docs/mocked-test-branch",
                  "apmServer": "https://opensearch.org/docs/mocked-test-branch",
                  "auditbeat": "https://opensearch.org/docs/mocked-test-branchtools/index/#downloads",
                  "clusterAPI": Object {
                    "clusterPending": "https://opensearch.org/docs/mocked-test-branch",
                    "clusterRoute": "https://opensearch.org/docs/mocked-test-branch/api-reference/cluster-api/cluster-awareness/",
                    "clusterState": "https://opensearch.org/docs/mocked-test-branch",
                    "clusterStats": "https://opensearch.org/docs/mocked-test-branch/api-reference/cluster-api/cluster-stats/",
                  },
                  "documentAPI": Object {
                    "delete_by_query": "https://opensearch.org/docs/mocked-test-branch/api-reference/document-apis/delete-by-query/",
                    "multiTermVector": "https://opensearch.org/docs/mocked-test-branch",
                    "termVector": "https://opensearch.org/docs/mocked-test-branch",
                    "update_by_query_rethrottle": "https://opensearch.org/docs/mocked-test-branch/api-reference/document-apis/update-by-query/",
                  },
                  "filebeat": "https://opensearch.org/docs/mocked-test-branchtools/index/#downloads",
                  "filed_caps": "https://opensearch.org/docs/mocked-test-branch",
                  "functionbeat": "https://opensearch.org/docs/mocked-test-branchtools/index/#downloads",
                  "heartbeat": "https://opensearch.org/docs/mocked-test-branchtools/index/#downloads",
                  "indexAPI": Object {
                    "indexAnalyze": "https://opensearch.org/docs/mocked-test-branch/api-reference/analyze-apis/index/",
                    "indexClearCache": "https://opensearch.org/docs/mocked-test-branch/api-reference/index-apis/clear-index-cache/",
                    "indexClone": "https://opensearch.org/docs/mocked-test-branch/api-reference/index-apis/clone/",
                    "indexFlush": "https://opensearch.org/docs/mocked-test-branch",
                    "indexForceMerge": "https://opensearch.org/docs/mocked-test-branch",
                    "indexGetFieldMapping": "https://opensearch.org/docs/mocked-test-branch",
                    "indexGetMapping": "https://opensearch.org/docs/mocked-test-branch",
                    "indexOpenClose": "https://opensearch.org/docs/mocked-test-branch/api-reference/index-apis/open-index/",
                    "indexPutMapping": "https://opensearch.org/docs/mocked-test-branch/api-reference/index-apis/put-mapping/",
                    "indexRecovery": "https://opensearch.org/docs/mocked-test-branch",
                    "indexRefresh": "https://opensearch.org/docs/mocked-test-branch",
                    "indexRollover": "https://opensearch.org/docs/mocked-test-branch",
                    "indexSearchValidate": "https://opensearch.org/docs/mocked-test-branch",
                    "indexSegment": "https://opensearch.org/docs/mocked-test-branch",
                    "indexSetting": "https://opensearch.org/docs/mocked-test-branch/api-reference/index-apis/get-settings/",
                    "indexShardStore": "https://opensearch.org/docs/mocked-test-branch",
                    "indexShrink": "https://opensearch.org/docs/mocked-test-branch/api-reference/index-apis/shrink-index/",
                    "indexSplit": "https://opensearch.org/docs/mocked-test-branch/api-reference/index-apis/split/",
                    "indexStats": "https://opensearch.org/docs/mocked-test-branch",
                    "indexSynced": "https://opensearch.org/docs/mocked-test-branch",
                    "indexUpdateSetting": "https://opensearch.org/docs/mocked-test-branch/api-reference/index-apis/update-settings/",
                    "indexUpgrade": "https://opensearch.org/docs/mocked-test-branch",
                  },
                  "indexPatterns": Object {
                    "introduction": "https://opensearch.org/docs/mocked-test-branch",
                    "loadingData": "https://opensearch.org/docs/mocked-test-branch",
                  },
                  "ingest": Object {
                    "appendProcessor": "https://opensearch.org/docs/mocked-test-branch",
                    "bytesProcessor": "https://opensearch.org/docs/mocked-test-branch",
                    "convertProcessor": "https://opensearch.org/docs/mocked-test-branch/data-prepper/pipelines/configuration/processors/string-converter/",
                    "csvProcessor": "https://opensearch.org/docs/mocked-test-branch/data-prepper/pipelines/configuration/processors/csv/",
                    "dataIndexNamProcessor": "https://opensearch.org/docs/mocked-test-branch/data-prepper/pipelines/configuration/processors/date/",
                    "dataProcessor": "https://opensearch.org/docs/mocked-test-branch/data-prepper/pipelines/configuration/processors/date/",
                    "deletePipeline": "https://opensearch.org/docs/mocked-test-branch/api-reference/ingest-apis/delete-ingest/",
                    "dissectProcessor": "https://opensearch.org/docs/mocked-test-branch",
                    "dotExpandProcessor": "https://opensearch.org/docs/mocked-test-branch",
                    "dropProcessor": "https://opensearch.org/docs/mocked-test-branch/data-prepper/pipelines/configuration/processors/drop-events/",
                    "failProcessor": "https://opensearch.org/docs/mocked-test-branch",
                    "foreachProcessor": "https://opensearch.org/docs/mocked-test-branch",
                    "geoIPProcessor": "https://opensearch.org/docs/mocked-test-branch",
                    "getPipeline": "https://opensearch.org/docs/mocked-test-branch/api-reference/ingest-apis/get-ingest/",
                    "grokProcessor": "https://opensearch.org/docs/mocked-test-branch/data-prepper/pipelines/configuration/processors/grok/",
                    "gusbProcessor": "https://opensearch.org/docs/mocked-test-branch",
                    "htmlstripProcessor": "https://opensearch.org/docs/mocked-test-branch",
                    "inferenceProcessor": "https://opensearch.org/docs/mocked-test-branch",
                    "ingestCircleProcessor": "https://opensearch.org/docs/mocked-test-branch",
                    "joinProcessor": "https://opensearch.org/docs/mocked-test-branch",
                    "jsonProcessor": "https://opensearch.org/docs/mocked-test-branch/data-prepper/pipelines/configuration/processors/parse-json/",
                    "kvProcessor": "https://opensearch.org/docs/mocked-test-branch/data-prepper/pipelines/configuration/processors/key-value/",
                    "lowecaseProcessor": "https://opensearch.org/docs/mocked-test-branch/data-prepper/pipelines/configuration/processors/lowercase-string/",
                    "pipelineProcessor": "https://opensearch.org/docs/mocked-test-branch",
                    "putPipeline": "https://opensearch.org/docs/mocked-test-branch/api-reference/ingest-apis/create-update-ingest/",
                    "removeProcessor": "https://opensearch.org/docs/mocked-test-branch",
                    "renameProcessor": "https://opensearch.org/docs/mocked-test-branch/data-prepper/pipelines/configuration/processors/rename-keys/",
                    "scriptProcessor": "https://opensearch.org/docs/mocked-test-branch",
                    "securityUserProcessor": "https://opensearch.org/docs/mocked-test-branch",
                    "setProcessor": "https://opensearch.org/docs/mocked-test-branch",
                    "simulatePipeline": "https://opensearch.org/docs/mocked-test-branch/api-reference/ingest-apis/simulate-ingest/",
                    "sortProcessor": "https://opensearch.org/docs/mocked-test-branch",
                    "splitProcessor": "https://opensearch.org/docs/mocked-test-branch/data-prepper/pipelines/configuration/processors/split-string/",
                    "trimProcessor": "https://opensearch.org/docs/mocked-test-branch/data-prepper/pipelines/configuration/processors/trim-string/",
                    "uppercaseProcessor": "https://opensearch.org/docs/mocked-test-branch/data-prepper/pipelines/configuration/processors/uppercase-string/",
                    "urldecodeProcessor": "https://opensearch.org/docs/mocked-test-branch",
                    "userAgentProcessor": "https://opensearch.org/docs/mocked-test-branch",
                  },
                  "logstash": "https://opensearch.org/docs/mocked-test-branch",
                  "management": Object {
                    "dashboardSettings": "https://opensearch.org/docs/mocked-test-branch",
                    "opensearchDashboardsGeneralSettings": "https://opensearch.org/docs/mocked-test-branch",
                    "opensearchDashboardsSearchSettings": "https://opensearch.org/docs/mocked-test-branch",
                  },
                  "mappingTypes": "https://opensearch.org/docs/mocked-test-branch/field-types/mappings/",
                  "metricbeat": "https://opensearch.org/docs/mocked-test-branchtools/index/#downloads",
                  "moduleScripting": "https://opensearch.org/docs/mocked-test-branch",
                  "nodes": Object {
                    "hotThreads": "https://opensearch.org/docs/mocked-test-branch/api-reference/nodes-apis/nodes-hot-threads/",
                    "info": "https://opensearch.org/docs/mocked-test-branch/api-reference/nodes-apis/nodes-info/",
                    "nodeStats": "https://opensearch.org/docs/mocked-test-branch/api-reference/nodes-apis/nodes-stats/",
                    "reloadSecuritySetting": "https://opensearch.org/docs/mocked-test-branch/api-reference/nodes-apis/nodes-reload-secure/",
                    "usage": "https://opensearch.org/docs/mocked-test-branch/api-reference/nodes-apis/nodes-usage/",
                  },
                  "painless_execute": "https://opensearch.org/docs/mocked-test-branch/api-reference/script-apis/exec-script/",
                  "reIndex": Object {
                    "rethrottle": "https://opensearch.org/docs/mocked-test-branch",
                  },
                  "savedObject": Object {
                    "manageSavedObject": "https://opensearch.org/docs/mocked-test-branch/security/multi-tenancy/mt-agg-view/",
                  },
                  "scriptedFields": Object {
                    "luceneExpressions": "https://opensearch.org/docs/mocked-test-branch",
                    "painless": "https://opensearch.org/docs/mocked-test-branch",
                    "painlessApi": "https://opensearch.org/docs/mocked-test-branch",
                    "painlessSyntax": "https://opensearch.org/docs/mocked-test-branch",
                    "scriptAggs": "https://opensearch.org/docs/mocked-test-branch",
                    "scriptFields": "https://opensearch.org/docs/mocked-test-branch",
                  },
                  "scroll": Object {
                    "clear_scroll": "https://opensearch.org/docs/mocked-test-branch/api-reference/scroll/",
                  },
                  "search": Object {
                    "search": "https://opensearch.org/docs/mocked-test-branch/api-reference/search/",
                    "searchFieldCap": "https://opensearch.org/docs/mocked-test-branch",
                    "searchRankEval": "https://opensearch.org/docs/mocked-test-branch",
                    "searchShards": "https://opensearch.org/docs/mocked-test-branch",
                  },
                  "siem": "https://opensearch.org/docs/mocked-test-branch",
                  "snapshot": Object {
                    "cleanup": "https://opensearch.org/docs/mocked-test-branch",
                    "deleteRepository": "https://opensearch.org/docs/mocked-test-branch/api-reference/snapshots/delete-snapshot-repository/",
                    "deleteSnapshot": "https://opensearch.org/docs/mocked-test-branch/api-reference/snapshots/delete-snapshot/",
                    "veirfyRepository": "https://opensearch.org/docs/mocked-test-branch/api-reference/snapshots/verify-snapshot-repository/",
                  },
                  "tutorial": Object {
                    "loadDataTutorial": "https://opensearch.org/docs/mocked-test-branch",
                    "visualizeTutorial": "https://opensearch.org/docs/mocked-test-branch",
                  },
                  "vega": "https://opensearch.org/docs/mocked-test-branch/dashboards/",
                  "winlogbeat": "https://opensearch.org/docs/mocked-test-branch",
                },
                "opensearch": Object {
                  "aggregations": Object {
                    "base": "https://opensearch.org/docs/mocked-test-branch/opensearch/aggregations/",
                    "bucket": Object {
                      "adjacency_matrix": "https://opensearch.org/docs/mocked-test-branch/opensearch/bucket-agg/#adjacency_matrix",
                      "base": "https://opensearch.org/docs/mocked-test-branch/opensearch/bucket-agg/",
                      "filter": "https://opensearch.org/docs/mocked-test-branch/opensearch/bucket-agg/#filter-filters",
                      "geo": "https://opensearch.org/docs/mocked-test-branch/opensearch/bucket-agg/#geo_distance-geohash_grid",
                      "global": "https://opensearch.org/docs/mocked-test-branch/opensearch/bucket-agg/#global",
                      "histogram": "https://opensearch.org/docs/mocked-test-branch/opensearch/bucket-agg/#histogram-date_histogram",
                      "missing": "https://opensearch.org/docs/mocked-test-branch/opensearch/bucket-agg/#missing",
                      "nested": "https://opensearch.org/docs/mocked-test-branch/opensearch/bucket-agg/#nested-reverse_nested",
                      "range": "https://opensearch.org/docs/mocked-test-branch/opensearch/bucket-agg/#range-date_range-ip_range",
                      "significant_terms": "https://opensearch.org/docs/mocked-test-branch/opensearch/bucket-agg/#significant_terms-significant_text",
                      "smapler": "https://opensearch.org/docs/mocked-test-branch/opensearch/bucket-agg/#sampler-diversified_sampler",
                      "terms": "https://opensearch.org/docs/mocked-test-branch/opensearch/bucket-agg/#terms",
                    },
                    "metric": Object {
                      "base": "https://opensearch.org/docs/mocked-test-branch/opensearch/metric-agg/",
                      "cardinality": "https://opensearch.org/docs/mocked-test-branch/opensearch/metric-agg/#cardinality",
                      "geo_bound": "https://opensearch.org/docs/mocked-test-branch/opensearch/metric-agg/#geo_bound",
                      "percentile": "https://opensearch.org/docs/mocked-test-branch/opensearch/metric-agg/#percentile-percentile_ranks",
                      "scripted_metric": "https://opensearch.org/docs/mocked-test-branch/opensearch/metric-agg/#scripted_metric",
                      "stats": "https://opensearch.org/docs/mocked-test-branch/opensearch/metric-agg/#stats-extended_stats-matrix_stats",
                      "sum": "https://opensearch.org/docs/mocked-test-branch/opensearch/metric-agg/#sum-min-max-avg",
                      "top_hits": "https://opensearch.org/docs/mocked-test-branch/opensearch/metric-agg/#top_hits",
                      "types": "https://opensearch.org/docs/mocked-test-branch/opensearch/metric-agg/#types-of-metric-aggregations",
                      "value_count": "https://opensearch.org/docs/mocked-test-branch/opensearch/metric-agg/#value_count",
                    },
                    "pipeline": Object {
                      "avg_bucket": "https://opensearch.org/docs/mocked-test-branch/opensearch/pipeline-agg/#avg_bucket-sum_bucket-min_bucket-max_bucket",
                      "base": "https://opensearch.org/docs/mocked-test-branch/opensearch/pipeline-agg/",
                      "bucket_script": "https://opensearch.org/docs/mocked-test-branch/opensearch/pipeline-agg/#bucket_script-bucket_selector",
                      "bucket_sort": "https://opensearch.org/docs/mocked-test-branch/opensearch/pipeline-agg/#bucket_sort",
                      "cumulative_sum": "https://opensearch.org/docs/mocked-test-branch/opensearch/pipeline-agg/#cumulative_sum",
                      "derivative": "https://opensearch.org/docs/mocked-test-branch/opensearch/pipeline-agg/#derivative",
                      "moving_avg": "https://opensearch.org/docs/mocked-test-branch/opensearch/pipeline-agg/#moving_avg",
                      "serial_diff": "https://opensearch.org/docs/mocked-test-branch/opensearch/pipeline-agg/#serial_diff",
                      "stats_bucket": "https://opensearch.org/docs/mocked-test-branch/opensearch/pipeline-agg/#stats_bucket-extended_stats_bucket",
                      "syntax": "https://opensearch.org/docs/mocked-test-branch/opensearch/pipeline-agg/#pipeline-aggregation-syntax",
                      "types": "https://opensearch.org/docs/mocked-test-branch/opensearch/pipeline-agg/#types-of-pipeline-aggregations",
                    },
                  },
                  "cluster": Object {
                    "base": "https://opensearch.org/docs/mocked-test-branch/opensearch/cluster/",
                    "build_cluster": "https://opensearch.org/docs/mocked-test-branch/opensearch/cluster/#step-3-bind-a-cluster-to-specific-ip-addresses",
                    "config_host": "https://opensearch.org/docs/mocked-test-branch/opensearch/cluster/cluster/#step-4-configure-discovery-hosts-for-a-cluster",
                    "config_shard": "https://opensearch.org/docs/mocked-test-branch/opensearch/cluster/#advanced-step-6-configure-shard-allocation-awareness-or-forced-awareness",
                    "naming": "https://opensearch.org/docs/mocked-test-branch/opensearch/cluster/#step-1-name-a-cluster",
                    "set_attribute": "https://opensearch.org/docs/mocked-test-branch/opensearch/cluster/#step-2-set-node-attributes-for-each-node-in-a-cluster",
                    "setup_hot_arch": "https://opensearch.org/docs/mocked-test-branch/opensearch/cluster/#advanced-step-7-set-up-a-hot-warm-architecture",
                    "start": "https://opensearch.org/docs/mocked-test-branch/opensearch/cluster/#step-5-start-the-cluster",
                  },
                  "commonParameters": "https://opensearch.org/docs/mocked-test-branch/opensearch/common-parameters",
                  "configuration": "https://opensearch.org/docs/mocked-test-branch/opensearch/configuration/",
                  "dataStreams": "https://opensearch.org/docs/mocked-test-branch/opensearch/data-streams/",
                  "dateMath": "https://opensearch.org/docs/mocked-test-branch/opensearch/supported-field-types/date/#date-math",
                  "indexAlias": Object {
                    "add_remove_index": "https://opensearch.org/docs/mocked-test-branch/opensearch/index-alias/#add-or-remove-indices",
                    "alias_option": "https://opensearch.org/docs/mocked-test-branch/opensearch/index-alias/#index-alias-options",
                    "base": "https://opensearch.org/docs/mocked-test-branch/opensearch/index-alias/",
                    "create_alias": "https://opensearch.org/docs/mocked-test-branch/opensearch/index-alias/#create-aliases",
                    "filtered_alias": "https://opensearch.org/docs/mocked-test-branch/opensearch/index-alias/#create-filtered-aliases",
                    "manage_alias": "https://opensearch.org/docs/mocked-test-branch/opensearch/index-alias/#manage-aliases",
                  },
                  "indexData": Object {
                    "base": "https://opensearch.org/docs/mocked-test-branch/opensearch/index-data/",
                    "delete_data": "https://opensearch.org/docs/mocked-test-branch/opensearch/index-data/#delete-data",
                    "naming": "https://opensearch.org/docs/mocked-test-branch/opensearch/index-data/#naming-restrictions-for-indices",
                    "read_data": "https://opensearch.org/docs/mocked-test-branch/opensearch/index-data/#read-data",
                    "update_data": "https://opensearch.org/docs/mocked-test-branch/opensearch/index-data/#update-data",
                  },
                  "indexTemplates": Object {
                    "base": "https://opensearch.org/docs/mocked-test-branch/opensearch/index-templates",
                    "composable": "https://opensearch.org/docs/mocked-test-branch/opensearch/index-templates/#composable-index-templates",
                    "options": "https://opensearch.org/docs/mocked-test-branch/opensearch/index-templates/#index-template-options",
                  },
                  "installation": Object {
                    "ansible": "https://opensearch.org/docs/mocked-test-branch/opensearch/install/ansible/",
                    "base": "https://opensearch.org/docs/mocked-test-branch/opensearch/install/index/",
                    "compatibility": "https://opensearch.org/docs/mocked-test-branch/opensearch/install/compatibility/",
                    "docker": "https://opensearch.org/docs/mocked-test-branch/opensearch/install/docker",
                    "dockerSecurity": "https://opensearch.org/docs/mocked-test-branch/opensearch/install/docker-security",
                    "helm": "https://opensearch.org/docs/mocked-test-branch/opensearch/install/helm/",
                    "plugins": "https://opensearch.org/docs/mocked-test-branch/opensearch/install/plugins/",
                    "settings": "https://opensearch.org/docs/mocked-test-branch/opensearch/install/important-settings/",
                    "tar": "https://opensearch.org/docs/mocked-test-branch/opensearch/install/tar/",
                  },
                  "introduction": "https://opensearch.org/docs/mocked-test-branch/opensearch/index/",
                  "logs": Object {
                    "application_log": "https://opensearch.org/docs/mocked-test-branch/opensearch/logs/#application-logs",
                    "base": "https://opensearch.org/docs/mocked-test-branch/opensearch/logs",
                    "deprecation_log": "https://opensearch.org/docs/mocked-test-branch/opensearch/logs/#deprecation-logs",
                    "slow_log": "https://opensearch.org/docs/mocked-test-branch/opensearch/logs/#slow-logs",
                  },
                  "openSearchForum": "https://forum.opensearch.org/t/feedback-experimental-feature-connect-to-external-data-sources/11144",
                  "popularAPI": "https://opensearch.org/docs/mocked-test-branch/opensearch/popular-api",
                  "queryDSL": Object {
                    "base": "https://opensearch.org/docs/mocked-test-branch/opensearch/query-dsl/index/",
                    "boolQuery": "https://opensearch.org/docs/mocked-test-branch/opensearch/query-dsl/bool/",
                    "fullText": Object {
                      "base": "https://opensearch.org/docs/mocked-test-branch/opensearch/query-dsl/full-text/",
                      "common_terms": "https://opensearch.org/docs/mocked-test-branch/opensearch/query-dsl/full-text/#common-terms",
                      "match": "https://opensearch.org/docs/mocked-test-branch/opensearch/query-dsl/full-text/#match",
                      "match_phrase": "https://opensearch.org/docs/mocked-test-branch/opensearch/query-dsl/full-text/#match-phrase",
                      "multi_match": "https://opensearch.org/docs/mocked-test-branch/opensearch/query-dsl/full-text/#multi-match",
                      "options": "https://opensearch.org/docs/mocked-test-branch/opensearch/query-dsl/full-text/#options",
                      "query_string": "https://opensearch.org/docs/mocked-test-branch/opensearch/query-dsl/full-text/#query-string",
                    },
                    "term": Object {
                      "base": "https://opensearch.org/docs/mocked-test-branch/opensearch/query-dsl/term/",
                      "exists": "https://opensearch.org/docs/mocked-test-branch/opensearch/query-dsl/term/#exists",
                      "ids": "https://opensearch.org/docs/mocked-test-branch/opensearch/query-dsl/term/#ids",
                      "prefix": "https://opensearch.org/docs/mocked-test-branch/opensearch/query-dsl/term/#prefix",
                      "range": "https://opensearch.org/docs/mocked-test-branch/opensearch/query-dsl/term/#range",
                      "regex": "https://opensearch.org/docs/mocked-test-branch/opensearch/query-dsl/term/#regex",
                      "terms": "https://opensearch.org/docs/mocked-test-branch/opensearch/query-dsl/term/#terms",
                      "wildcards": "https://opensearch.org/docs/mocked-test-branch/opensearch/query-dsl/term/#wildcards",
                    },
                  },
                  "reindexData": Object {
                    "all": "https://opensearch.org/docs/mocked-test-branch/opensearch/reindex-data/#reindex-all-documents",
                    "base": "https://opensearch.org/docs/mocked-test-branch/opensearch/reindex-data/",
                    "combine": "https://opensearch.org/docs/mocked-test-branch/opensearch/reindex-data/#combine-one-or-more-indices",
                    "destination": "https://opensearch.org/docs/mocked-test-branch/opensearch/reindex-data/#destination-index-options",
                    "remote": "https://opensearch.org/docs/mocked-test-branch/opensearch/reindex-data/#reindex-from-a-remote-cluster",
                    "source": "https://opensearch.org/docs/mocked-test-branch/opensearch/reindex-data/#source-index-options",
                    "subset": "https://opensearch.org/docs/mocked-test-branch/opensearch/reindex-data/#reindex-a-subset-of-documents",
                    "transform": "https://opensearch.org/docs/mocked-test-branch/opensearch/reindex-data/#transform-documents-during-reindexing",
                    "unique": "https://opensearch.org/docs/mocked-test-branch/opensearch/reindex-data/#reindex-only-unique-documents",
                    "update": "https://opensearch.org/docs/mocked-test-branch/opensearch/reindex-data/#update-documents-in-the-current-index",
                  },
                  "restAPI": Object {
                    "base": "https://opensearch.org/docs/mocked-test-branch/opensearch/rest-api/index/",
                    "indexAPI": Object {
                      "base": "https://opensearch.org/docs/mocked-test-branch/opensearch/rest-api/index-apis/index/",
                      "close": "https://opensearch.org/docs/mocked-test-branch/opensearch/rest-api/index-apis/close-index/",
                      "create": "https://opensearch.org/docs/mocked-test-branch/opensearch/rest-api/index-apis/create-index/",
                      "delete": "https://opensearch.org/docs/mocked-test-branch/opensearch/rest-api/index-apis/delete-index/",
                      "exists": "https://opensearch.org/docs/mocked-test-branch/opensearch/rest-api/index-apis/exists/",
                      "get": "https://opensearch.org/docs/mocked-test-branch/opensearch/rest-api/index-apis/get-index/",
                    },
                  },
                  "searchExperience": Object {
                    "autocomplete": "https://opensearch.org/docs/mocked-test-branch/opensearch/ux/#autocomplete-queries",
                    "base": "https://opensearch.org/docs/mocked-test-branch/opensearch/ux",
                    "highlight_match": "https://opensearch.org/docs/mocked-test-branch/opensearch/ux/#highlight-query-matches",
                    "paginate": "https://opensearch.org/docs/mocked-test-branch/opensearch/ux/#paginate-results",
                    "scroll": "https://opensearch.org/docs/mocked-test-branch/opensearch/ux/#scroll-search",
                    "sort": "https://opensearch.org/docs/mocked-test-branch/opensearch/ux/#sort-results",
                  },
                  "searchTemplate": Object {
                    "advanced_operation": "https://opensearch.org/docs/mocked-test-branch/opensearch/search-template/#advanced-parameter-conversion-with-search-templates",
                    "base": "https://opensearch.org/docs/mocked-test-branch/opensearch/search-template",
                    "create": "https://opensearch.org/docs/mocked-test-branch/opensearch/search-template/#create-search-templates",
                    "execute": "https://opensearch.org/docs/mocked-test-branch/opensearch/search-template/#save-and-execute-search-templates",
                    "manage": "https://opensearch.org/docs/mocked-test-branch/opensearch/search-template/#manage-search-templates",
                    "multiple_search": "https://opensearch.org/docs/mocked-test-branch/opensearch/search-template/#multiple-search-templates",
                  },
                  "snapshotRestore": Object {
                    "base": "https://opensearch.org/docs/mocked-test-branch/opensearch/snapshot-restore",
                    "register": "https://opensearch.org/docs/mocked-test-branch/opensearch/snapshot-restore/#register-repository",
                    "restore_snapshot": "https://opensearch.org/docs/mocked-test-branch/opensearch/snapshot-restore/#restore-snapshots",
                    "security_plugin": "https://opensearch.org/docs/mocked-test-branch/opensearch/snapshot-restore/#security-plugin-considerations",
                    "take_snapshot": "https://opensearch.org/docs/mocked-test-branch/opensearch/snapshot-restore/#take-snapshots",
                  },
                  "supportedUnits": "https://opensearch.org/docs/mocked-test-branch/opensearch/units",
                },
                "opensearchDashboards": Object {
                  "browser": "https://opensearch.org/docs/mocked-test-branch/dashboards/browser-compatibility",
                  "dataSource": Object {
                    "guide": "https://opensearch.org/docs/mocked-test-branch/dashboards/discover/multi-data-sources/",
                  },
                  "devTools": "https://opensearch.org/docs/mocked-test-branch/dashboards/dev-tools/index-dev/",
                  "dql": Object {
                    "base": "https://opensearch.org/docs/mocked-test-branch/dashboards/dql",
                    "boolean_query": "https://opensearch.org/docs/mocked-test-branch/dashboards/dql/#boolean-query",
                    "date_query": "https://opensearch.org/docs/mocked-test-branch/dashboards/dql/#date-and-range-queries",
                    "nested_query": "https://opensearch.org/docs/mocked-test-branch/dashboards/dql/#nested-field-query",
                    "terms_query": "https://opensearch.org/docs/mocked-test-branch/dashboards/dql/#terms-query",
                  },
                  "ganttCharts": "https://opensearch.org/docs/mocked-test-branch/dashboards/gantt",
                  "installation": Object {
                    "base": "https://opensearch.org/docs/mocked-test-branch/dashboards/install/index/",
                    "docker": "https://opensearch.org/docs/mocked-test-branch/dashboards/install/docker/",
                    "helm": "https://opensearch.org/docs/mocked-test-branch/dashboards/install/helm/",
                    "plugins": "https://opensearch.org/docs/mocked-test-branch/dashboards/install/plugins/",
                    "tar": "https://opensearch.org/docs/mocked-test-branch/dashboards/install/tar/",
                    "tls": "https://opensearch.org/docs/mocked-test-branch/dashboards/install/tls/",
                  },
                  "introduction": "https://opensearch.org/docs/mocked-test-branch/dashboards/index/",
                  "management": Object {
                    "advancedSettings": "https://opensearch.org/docs/mocked-test-branch/dashboards/management/advanced-settings/",
                  },
                  "mapTiles": "https://opensearch.org/docs/mocked-test-branch/dashboards/maptiles",
                  "notebooks": Object {
                    "base": "https://opensearch.org/docs/mocked-test-branch/dashboards/notebooks",
                    "create_report": "https://opensearch.org/docs/mocked-test-branch/dashboards/notebooks/#create-a-report",
                    "notebook_tutorial": "https://opensearch.org/docs/mocked-test-branch/dashboards/notebooks/#get-started-with-notebooks",
                    "paragraph_tutorial": "https://opensearch.org/docs/mocked-test-branch/dashboards/notebooks/#paragraph-actions",
                    "sample_notebook": "https://opensearch.org/docs/mocked-test-branch/dashboards/notebooks/#sample-notebooks",
                  },
                  "reporting": "https://opensearch.org/docs/mocked-test-branch/dashboards/reporting",
                  "visualize": Object {
                    "guide": "https://opensearch.org/docs/mocked-test-branchvisualize/viz-index/",
                  },
                },
              },
            },
            "embeddable": Object {
              "EmbeddablePanel": [MockFunction],
              "extract": [MockFunction],
              "getEmbeddableFactories": [MockFunction],
              "getEmbeddableFactory": [MockFunction],
              "getEmbeddablePanel": [MockFunction],
              "getStateTransfer": [MockFunction],
              "inject": [MockFunction],
              "telemetry": [MockFunction],
            },
            "fatalErrors": Object {
              "add": [MockFunction],
              "get$": [MockFunction],
            },
            "history": Object {
              "location": Object {
                "pathname": "",
              },
              "replace": [MockFunction],
            },
            "http": Object {
              "addLoadingCountSource": [MockFunction],
              "anonymousPaths": Object {
                "isAnonymous": [MockFunction],
                "register": [MockFunction],
              },
              "basePath": BasePath {
                "basePath": "",
                "clientBasePath": "",
                "get": [Function],
                "getBasePath": [Function],
                "prepend": [Function],
                "remove": [Function],
                "serverBasePath": "",
              },
              "delete": [MockFunction],
              "fetch": [MockFunction],
              "get": [MockFunction],
              "getLoadingCount$": [MockFunction],
              "head": [MockFunction],
              "intercept": [MockFunction],
              "options": [MockFunction],
              "patch": [MockFunction],
              "post": [MockFunction],
              "put": [MockFunction],
            },
            "i18n": Object {
              "Context": [MockFunction],
            },
            "injectedMetadata": Object {
              "getBranding": [MockFunction],
              "getInjectedVar": [MockFunction],
            },
            "notifications": Object {
              "toasts": Object {
                "add": [MockFunction],
                "addDanger": [MockFunction],
                "addError": [MockFunction],
                "addInfo": [MockFunction],
                "addSuccess": [MockFunction],
                "addWarning": [MockFunction],
                "get$": [MockFunction],
                "remove": [MockFunction],
              },
            },
            "opensearchDashboardsVersion": "3.0.0",
            "osdUrlStateStorage": Object {
              "flush": [MockFunction],
              "get": [MockFunction] {
                "calls": Array [
                  Array [
                    "_g",
                  ],
                ],
                "results": Array [
                  Object {
                    "type": "return",
                    "value": Object {
                      "linked": false,
                    },
                  },
                ],
              },
              "set": [MockFunction],
            },
            "overlays": Object {
              "banners": Object {
                "add": [MockFunction],
                "get$": [MockFunction],
                "getComponent": [MockFunction],
                "remove": [MockFunction],
                "replace": [MockFunction],
              },
              "openConfirm": [MockFunction],
              "openFlyout": [MockFunction],
              "openModal": [MockFunction],
              "sidecar": Object {
                "getSidecarConfig$": [MockFunction],
                "hide": [MockFunction],
                "open": [MockFunction],
                "setSidecarConfig": [MockFunction],
                "show": [MockFunction],
              },
            },
            "savedObjects": Object {
              "client": Object {
                "bulkCreate": [MockFunction],
                "bulkGet": [MockFunction],
                "bulkUpdate": [MockFunction],
                "create": [MockFunction],
                "delete": [MockFunction],
                "find": [MockFunction],
                "get": [MockFunction],
                "setCurrentWorkspace": [MockFunction],
                "update": [MockFunction],
              },
            },
            "savedObjectsClient": Object {
              "find": [Function],
            },
            "savedObjectsPublic": Object {
              "settings": Object {
                "getListingLimit": [Function],
                "getPerPage": [Function],
              },
            },
            "toastNotifications": Object {
              "add": [MockFunction],
              "addDanger": [MockFunction],
              "addError": [MockFunction],
              "addInfo": [MockFunction],
              "addSuccess": [MockFunction],
              "addWarning": [MockFunction],
              "get$": [MockFunction],
              "remove": [MockFunction],
            },
            "uiSettings": Object {
              "get": [MockFunction] {
                "calls": Array [
                  Array [
                    "dateFormat",
                  ],
                ],
                "results": Array [
                  Object {
                    "type": "return",
                    "value": undefined,
                  },
                ],
              },
              "get$": [MockFunction],
              "getAll": [MockFunction],
              "getSaved$": [MockFunction],
              "getUpdate$": [MockFunction],
              "getUpdateErrors$": [MockFunction],
              "isCustom": [MockFunction],
              "isDeclared": [MockFunction],
              "isDefault": [MockFunction],
              "isOverridden": [MockFunction],
              "overrideLocalDefault": [MockFunction],
              "remove": [MockFunction],
              "set": [MockFunction],
            },
            "usageCollection": Object {
              "METRIC_TYPE": Object {
                "APPLICATION_USAGE": "application_usage",
                "CLICK": "click",
                "COUNT": "count",
                "LOADED": "loaded",
                "USER_AGENT": "user_agent",
              },
              "__LEGACY": Object {
                "appChanged": [MockFunction],
              },
              "allowTrackUserAgent": [MockFunction],
              "reportUiStats": [MockFunction],
            },
            "workspaces": Object {
              "currentWorkspace$": BehaviorSubject {
                "_isScalar": false,
                "_value": null,
                "closed": false,
                "hasError": false,
                "isStopped": false,
                "observers": Array [],
                "thrownError": null,
              },
              "currentWorkspaceId$": BehaviorSubject {
                "_isScalar": false,
                "_value": "",
                "closed": false,
                "hasError": false,
                "isStopped": false,
                "observers": Array [],
                "thrownError": null,
              },
              "initialized$": BehaviorSubject {
                "_isScalar": false,
                "_value": false,
                "closed": false,
                "hasError": false,
                "isStopped": false,
                "observers": Array [],
                "thrownError": null,
              },
              "workspaceList$": BehaviorSubject {
                "_isScalar": false,
                "_value": Array [],
                "closed": false,
                "hasError": false,
                "isStopped": false,
                "observers": Array [],
                "thrownError": null,
              },
            },
          }
        }
      >
        <DashboardListing>
          <TableListView
            createButton={
              <CreateButton
                dashboardProviders={
                  Object {
                    "dashboard": Object {
                      "appId": "1",
                      "editUrlPathFn": [MockFunction],
                      "savedObjectsName": "dashboardSavedObjects",
                      "viewUrlPathFn": [MockFunction],
                    },
                  }
                }
              />
            }
            createItem={[Function]}
            deleteItems={[Function]}
            editItem={[Function]}
            entityName="dashboard"
            entityNamePlural="dashboards"
            findItems={[Function]}
            headingId="dashboardListingHeading"
            initialFilter=""
            initialPageSize={10}
            listingLimit={1}
            noItemsFragment={
              <EuiEmptyPrompt
                actions={
                  <EuiButton
                    data-test-subj="createDashboardPromptButton"
                    fill={true}
                    iconType="plusInCircle"
                    onClick={[Function]}
                  >
                    <FormattedMessage
                      defaultMessage="Create new dashboard"
                      id="dashboard.listing.createNewDashboard.createButtonLabel"
                      values={Object {}}
                    />
                  </EuiButton>
                }
                body={
                  <React.Fragment>
                    <p>
                      <FormattedMessage
                        defaultMessage="You can combine data views from any OpenSearch Dashboards app into one dashboard and see everything in one place."
                        id="dashboard.listing.createNewDashboard.combineDataViewFromOpenSearchDashboardsAppDescription"
                        values={Object {}}
                      />
                    </p>
                    <p>
                      <FormattedMessage
                        defaultMessage="New to OpenSearch Dashboards? {sampleDataInstallLink} to take a test drive."
                        id="dashboard.listing.createNewDashboard.newToOpenSearchDashboardsDescription"
                        values={
                          Object {
                            "sampleDataInstallLink": <EuiLink
                              onClick={[Function]}
                            >
                              <FormattedMessage
                                defaultMessage="Install some sample data"
                                id="dashboard.listing.createNewDashboard.sampleDataInstallLinkText"
                                values={Object {}}
                              />
                            </EuiLink>,
                          }
                        }
                      />
                    </p>
                  </React.Fragment>
                }
                iconType="dashboardApp"
                title={
                  <h1
                    id="dashboardListingHeading"
                  >
                    <FormattedMessage
                      defaultMessage="Create your first dashboard"
                      id="dashboard.listing.createNewDashboard.title"
                      values={Object {}}
                    />
                  </h1>
                }
              />
            }
            tableColumns={
              Array [
                Object {
                  "field": "title",
                  "name": "Title",
                  "render": [Function],
                  "sortable": true,
                },
                Object {
                  "dataType": "string",
                  "field": "type",
                  "name": "Type",
                  "sortable": true,
                },
                Object {
                  "dataType": "string",
                  "field": "description",
                  "name": "Description",
                  "sortable": true,
                },
                Object {
                  "data-test-subj": "updated-at",
                  "dataType": "date",
                  "description": "Last update of the saved object",
                  "field": "updated_at",
                  "name": "Last updated",
                  "render": [Function],
                  "sortable": true,
                },
              ]
            }
            tableListTitle="Dashboards"
            toastNotifications={
              Object {
                "add": [MockFunction],
                "addDanger": [MockFunction],
                "addError": [MockFunction],
                "addInfo": [MockFunction],
                "addSuccess": [MockFunction],
                "addWarning": [MockFunction],
                "get$": [MockFunction],
                "remove": [MockFunction],
              }
            }
          >
            <EuiPage
              className="itemListing__page"
              data-test-subj="dashboardLandingPage"
              restrictWidth={true}
            >
              <div
                className="euiPage euiPage--paddingMedium euiPage--grow euiPage--restrictWidth-default itemListing__page"
                data-test-subj="dashboardLandingPage"
              >
                <EuiPageBody
                  aria-labelledby="dashboardListingHeading"
                  component="main"
                >
                  <main
                    aria-labelledby="dashboardListingHeading"
                    className="euiPageBody euiPageBody--borderRadiusNone"
                  >
                    <EuiPageContent
                      horizontalPosition="center"
                    >
                      <EuiPanel
                        className="euiPageContent euiPageContent--horizontalCenter"
                        paddingSize="l"
                        role="main"
                      >
                        <div
                          className="euiPanel euiPanel--paddingLarge euiPanel--borderRadiusMedium euiPanel--plain euiPanel--hasShadow euiPageContent euiPageContent--horizontalCenter"
                          role="main"
                        >
                          <div>
                            <EuiFlexGroup
                              alignItems="flexEnd"
                              data-test-subj="top-nav"
                              justifyContent="spaceBetween"
                            >
                              <div
                                className="euiFlexGroup euiFlexGroup--gutterLarge euiFlexGroup--alignItemsFlexEnd euiFlexGroup--justifyContentSpaceBetween euiFlexGroup--directionRow euiFlexGroup--responsive"
                                data-test-subj="top-nav"
                              >
                                <EuiFlexItem
                                  grow={false}
                                >
                                  <div
                                    className="euiFlexItem euiFlexItem--flexGrowZero"
                                  >
                                    <EuiTitle
                                      size="l"
                                    >
                                      <h1
                                        className="euiTitle euiTitle--large"
                                        id="dashboardListingHeading"
                                      >
                                        Dashboards
                                      </h1>
                                    </EuiTitle>
                                  </div>
                                </EuiFlexItem>
                                <CreateButton
                                  dashboardProviders={
                                    Object {
                                      "dashboard": Object {
                                        "appId": "1",
                                        "editUrlPathFn": [MockFunction],
                                        "savedObjectsName": "dashboardSavedObjects",
                                        "viewUrlPathFn": [MockFunction],
                                      },
                                    }
                                  }
                                >
                                  <EuiFlexItem
                                    grow={false}
                                  >
                                    <div
                                      className="euiFlexItem euiFlexItem--flexGrowZero"
                                    >
                                      <EuiButton
                                        data-test-subj="newItemButton"
                                        fill={true}
                                        iconType="plusInCircle"
                                      >
                                        <EuiButtonDisplay
                                          baseClassName="euiButton"
                                          data-test-subj="newItemButton"
                                          disabled={false}
                                          element="button"
                                          fill={true}
                                          iconType="plusInCircle"
                                          isDisabled={false}
                                          type="button"
                                        >
                                          <button
                                            className="euiButton euiButton--primary euiButton--fill"
                                            data-test-subj="newItemButton"
                                            disabled={false}
                                            style={
                                              Object {
                                                "minWidth": undefined,
                                              }
                                            }
                                            type="button"
                                          >
                                            <EuiButtonContent
                                              className="euiButton__content"
                                              iconSide="left"
                                              iconType="plusInCircle"
                                              textProps={
                                                Object {
                                                  "className": "euiButton__text",
                                                }
                                              }
                                            >
                                              <span
                                                className="euiButtonContent euiButton__content"
                                              >
                                                <EuiIcon
                                                  className="euiButtonContent__icon"
                                                  color="inherit"
                                                  size="m"
                                                  type="plusInCircle"
                                                >
                                                  <span
                                                    className="euiButtonContent__icon"
                                                    color="inherit"
                                                    data-euiicon-type="plusInCircle"
                                                    size="m"
                                                  />
                                                </EuiIcon>
                                                <span
                                                  className="euiButton__text"
                                                >
                                                  <FormattedMessage
                                                    defaultMessage="Create"
                                                    id="dashboard.listing.createButtonText"
                                                    values={Object {}}
                                                  >
                                                    Create
                                                  </FormattedMessage>
                                                   
                                                </span>
                                              </span>
                                            </EuiButtonContent>
                                          </button>
                                        </EuiButtonDisplay>
                                      </EuiButton>
                                    </div>
                                  </EuiFlexItem>
                                </CreateButton>
                              </div>
                            </EuiFlexGroup>
                            <EuiSpacer
                              size="m"
                            >
                              <div
                                className="euiSpacer euiSpacer--m"
                              />
                            </EuiSpacer>
                            <EuiCallOut
                              color="warning"
                              iconType="help"
                              title={
                                <FormattedMessage
                                  defaultMessage="Listing limit exceeded"
                                  id="opensearch-dashboards-react.tableListView.listing.listingLimitExceededTitle"
                                  values={Object {}}
                                />
                              }
                            >
                              <div
                                className="euiCallOut euiCallOut--warning"
                              >
                                <div
                                  className="euiCallOutHeader"
                                >
                                  <EuiIcon
                                    aria-hidden="true"
                                    className="euiCallOutHeader__icon"
                                    color="inherit"
                                    size="m"
                                    type="help"
                                  >
                                    <span
                                      aria-hidden="true"
                                      className="euiCallOutHeader__icon"
                                      color="inherit"
                                      data-euiicon-type="help"
                                      size="m"
                                    />
                                  </EuiIcon>
                                  <span
                                    className="euiCallOutHeader__title"
                                  >
                                    <FormattedMessage
                                      defaultMessage="Listing limit exceeded"
                                      id="opensearch-dashboards-react.tableListView.listing.listingLimitExceededTitle"
                                      values={Object {}}
                                    >
                                      Listing limit exceeded
                                    </FormattedMessage>
                                  </span>
                                </div>
                                <EuiText
                                  color="default"
                                  size="s"
                                >
                                  <div
                                    className="euiText euiText--small"
                                  >
                                    <EuiTextColor
                                      color="default"
                                      component="div"
                                    >
                                      <div
                                        className="euiTextColor euiTextColor--default"
                                      >
                                        <p>
                                          <FormattedMessage
                                            defaultMessage="You have {totalItems} {entityNamePlural}, but your {listingLimitText} setting prevents the table below from displaying more than {listingLimitValue}. You can change this setting under {advancedSettingsLink}."
                                            id="opensearch-dashboards-react.tableListView.listing.listingLimitExceededDescription"
                                            values={
                                              Object {
                                                "advancedSettingsLink": <EuiLink
                                                  href="#/management/opensearch-dashboards/settings"
                                                >
                                                  <FormattedMessage
                                                    defaultMessage="Advanced Settings"
                                                    id="opensearch-dashboards-react.tableListView.listing.listingLimitExceeded.advancedSettingsLinkText"
                                                    values={Object {}}
                                                  />
                                                </EuiLink>,
                                                "entityNamePlural": "dashboards",
                                                "listingLimitText": <strong>
                                                  listingLimit
                                                </strong>,
                                                "listingLimitValue": 1,
                                                "totalItems": 2,
                                              }
                                            }
                                          >
                                            You have 2 dashboards, but your 
                                            <strong>
                                              listingLimit
                                            </strong>
                                             setting prevents the table below from displaying more than 1. You can change this setting under 
                                            <EuiLink
                                              href="#/management/opensearch-dashboards/settings"
                                            >
                                              <a
                                                className="euiLink euiLink--primary"
                                                href="#/management/opensearch-dashboards/settings"
                                                rel="noreferrer"
                                              >
                                                <FormattedMessage
                                                  defaultMessage="Advanced Settings"
                                                  id="opensearch-dashboards-react.tableListView.listing.listingLimitExceeded.advancedSettingsLinkText"
                                                  values={Object {}}
                                                >
                                                  Advanced Settings
                                                </FormattedMessage>
                                              </a>
                                            </EuiLink>
                                            .
                                          </FormattedMessage>
                                        </p>
                                      </div>
                                    </EuiTextColor>
                                  </div>
                                </EuiText>
                              </div>
                            </EuiCallOut>
                            <EuiSpacer
                              size="m"
                            >
                              <div
                                className="euiSpacer euiSpacer--m"
                              />
                            </EuiSpacer>
                            <EuiInMemoryTable
                              columns={
                                Array [
                                  Object {
                                    "field": "title",
                                    "name": "Title",
                                    "render": [Function],
                                    "sortable": true,
                                  },
                                  Object {
                                    "dataType": "string",
                                    "field": "type",
                                    "name": "Type",
                                    "sortable": true,
                                  },
                                  Object {
                                    "dataType": "string",
                                    "field": "description",
                                    "name": "Description",
                                    "sortable": true,
                                  },
                                  Object {
                                    "data-test-subj": "updated-at",
                                    "dataType": "date",
                                    "description": "Last update of the saved object",
                                    "field": "updated_at",
                                    "name": "Last updated",
                                    "render": [Function],
                                    "sortable": true,
                                  },
                                  Object {
                                    "actions": Array [
                                      Object {
                                        "description": "Edit",
                                        "enabled": [Function],
                                        "icon": "pencil",
                                        "name": "Edit",
                                        "onClick": [Function],
                                        "type": "icon",
                                      },
                                    ],
                                    "name": "Actions",
                                    "width": "100px",
                                  },
                                ]
                              }
                              data-test-subj="itemsInMemTable"
                              itemId="id"
                              items={
                                Array [
                                  Object {
                                    "appId": "1",
                                    "description": "dashboard0 desc",
                                    "editUrl": undefined,
                                    "id": "dashboard0",
                                    "title": "dashboard0",
                                    "type": "dashboardSavedObjects",
                                    "updated_at": undefined,
                                    "viewUrl": undefined,
                                  },
                                  Object {
                                    "appId": "1",
                                    "description": "dashboard1 desc",
                                    "editUrl": undefined,
                                    "id": "dashboard1",
                                    "title": "dashboard1",
                                    "type": "dashboardSavedObjects",
                                    "updated_at": undefined,
                                    "viewUrl": undefined,
                                  },
                                ]
                              }
                              loading={false}
                              message={
                                <FormattedMessage
                                  defaultMessage="No {entityNamePlural} matched your search."
                                  id="opensearch-dashboards-react.tableListView.listing.noMatchedItemsMessage"
                                  values={
                                    Object {
                                      "entityNamePlural": "dashboards",
                                    }
                                  }
                                />
                              }
                              pagination={
                                Object {
                                  "initialPageIndex": 0,
                                  "initialPageSize": 10,
                                  "pageSizeOptions": Array [
                                    10,
                                    20,
                                    50,
                                  ],
                                }
                              }
                              responsive={true}
                              search={
                                Object {
                                  "box": Object {
                                    "incremental": true,
                                  },
                                  "defaultQuery": "",
                                  "onChange": [Function],
                                  "toolsLeft": undefined,
                                }
                              }
                              selection={
                                Object {
                                  "onSelectionChange": [Function],
                                }
                              }
                              sorting={true}
                              tableLayout="fixed"
                            >
                              <div>
                                <EuiSearchBar
                                  box={
                                    Object {
                                      "incremental": true,
                                    }
                                  }
                                  defaultQuery=""
                                  onChange={[Function]}
                                >
                                  <EuiFlexGroup
                                    alignItems="center"
                                    gutterSize="m"
                                    wrap={true}
                                  >
                                    <div
                                      className="euiFlexGroup euiFlexGroup--gutterMedium euiFlexGroup--alignItemsCenter euiFlexGroup--directionRow euiFlexGroup--responsive euiFlexGroup--wrap"
                                    >
                                      <EuiFlexItem
                                        className="euiSearchBar__searchHolder"
                                        grow={true}
                                      >
                                        <div
                                          className="euiFlexItem euiSearchBar__searchHolder"
                                        >
                                          <EuiSearchBox
                                            incremental={true}
                                            isInvalid={false}
                                            onSearch={[Function]}
                                            placeholder="Search..."
                                            query=""
                                          >
                                            <EuiFieldSearch
                                              aria-label="This is a search bar. As you type, the results lower in the page will automatically filter."
                                              compressed={false}
                                              defaultValue=""
                                              fullWidth={true}
                                              incremental={true}
                                              inputRef={[Function]}
                                              isClearable={true}
                                              isInvalid={false}
                                              isLoading={false}
                                              onSearch={[Function]}
                                              placeholder="Search..."
                                            >
                                              <EuiFormControlLayout
                                                compressed={false}
                                                fullWidth={true}
                                                icon="search"
                                                isLoading={false}
                                              >
                                                <div
                                                  className="euiFormControlLayout euiFormControlLayout--fullWidth"
                                                >
                                                  <div
                                                    className="euiFormControlLayout__childrenWrapper"
                                                  >
                                                    <EuiValidatableControl
                                                      isInvalid={false}
                                                    >
                                                      <input
                                                        aria-label="This is a search bar. As you type, the results lower in the page will automatically filter."
                                                        className="euiFieldSearch euiFieldSearch--fullWidth"
                                                        defaultValue=""
                                                        onKeyUp={[Function]}
                                                        placeholder="Search..."
                                                        type="search"
                                                      />
                                                    </EuiValidatableControl>
                                                    <EuiFormControlLayoutIcons
                                                      compressed={false}
                                                      icon="search"
                                                      isLoading={false}
                                                    >
                                                      <div
                                                        className="euiFormControlLayoutIcons"
                                                      >
                                                        <EuiFormControlLayoutCustomIcon
                                                          size="m"
                                                          type="search"
                                                        >
                                                          <span
                                                            className="euiFormControlLayoutCustomIcon"
                                                          >
                                                            <EuiIcon
                                                              aria-hidden="true"
                                                              className="euiFormControlLayoutCustomIcon__icon"
                                                              size="m"
                                                              type="search"
                                                            >
                                                              <span
                                                                aria-hidden="true"
                                                                className="euiFormControlLayoutCustomIcon__icon"
                                                                data-euiicon-type="search"
                                                                size="m"
                                                              />
                                                            </EuiIcon>
                                                          </span>
                                                        </EuiFormControlLayoutCustomIcon>
                                                      </div>
                                                    </EuiFormControlLayoutIcons>
                                                  </div>
                                                </div>
                                              </EuiFormControlLayout>
                                            </EuiFieldSearch>
                                          </EuiSearchBox>
                                        </div>
                                      </EuiFlexItem>
                                    </div>
                                  </EuiFlexGroup>
                                </EuiSearchBar>
                                <EuiSpacer
                                  size="l"
                                >
                                  <div
                                    className="euiSpacer euiSpacer--l"
                                  />
                                </EuiSpacer>
                                <EuiBasicTable
                                  columns={
                                    Array [
                                      Object {
                                        "field": "title",
                                        "name": "Title",
                                        "render": [Function],
                                        "sortable": true,
                                      },
                                      Object {
                                        "dataType": "string",
                                        "field": "type",
                                        "name": "Type",
                                        "sortable": true,
                                      },
                                      Object {
                                        "dataType": "string",
                                        "field": "description",
                                        "name": "Description",
                                        "sortable": true,
                                      },
                                      Object {
                                        "data-test-subj": "updated-at",
                                        "dataType": "date",
                                        "description": "Last update of the saved object",
                                        "field": "updated_at",
                                        "name": "Last updated",
                                        "render": [Function],
                                        "sortable": true,
                                      },
                                      Object {
                                        "actions": Array [
                                          Object {
                                            "description": "Edit",
                                            "enabled": [Function],
                                            "icon": "pencil",
                                            "name": "Edit",
                                            "onClick": [Function],
                                            "type": "icon",
                                          },
                                        ],
                                        "name": "Actions",
                                        "width": "100px",
                                      },
                                    ]
                                  }
                                  data-test-subj="itemsInMemTable"
                                  itemId="id"
                                  items={
                                    Array [
                                      Object {
                                        "appId": "1",
                                        "description": "dashboard0 desc",
                                        "editUrl": undefined,
                                        "id": "dashboard0",
                                        "title": "dashboard0",
                                        "type": "dashboardSavedObjects",
                                        "updated_at": undefined,
                                        "viewUrl": undefined,
                                      },
                                      Object {
                                        "appId": "1",
                                        "description": "dashboard1 desc",
                                        "editUrl": undefined,
                                        "id": "dashboard1",
                                        "title": "dashboard1",
                                        "type": "dashboardSavedObjects",
                                        "updated_at": undefined,
                                        "viewUrl": undefined,
                                      },
                                    ]
                                  }
                                  loading={false}
                                  noItemsMessage={
                                    <FormattedMessage
                                      defaultMessage="No {entityNamePlural} matched your search."
                                      id="opensearch-dashboards-react.tableListView.listing.noMatchedItemsMessage"
                                      values={
                                        Object {
                                          "entityNamePlural": "dashboards",
                                        }
                                      }
                                    />
                                  }
                                  onChange={[Function]}
                                  pagination={
                                    Object {
                                      "hidePerPageOptions": undefined,
                                      "pageIndex": 0,
                                      "pageSize": 10,
                                      "pageSizeOptions": Array [
                                        10,
                                        20,
                                        50,
                                      ],
                                      "totalItemCount": 2,
                                    }
                                  }
                                  responsive={true}
                                  selection={
                                    Object {
                                      "onSelectionChange": [Function],
                                    }
                                  }
                                  sorting={
                                    Object {
                                      "allowNeutralSort": true,
                                      "sort": undefined,
                                    }
                                  }
                                  tableLayout="fixed"
                                >
                                  <div
                                    className="euiBasicTable"
                                    data-test-subj="itemsInMemTable"
                                  >
                                    <div>
                                      <EuiTableHeaderMobile>
                                        <div
                                          className="euiTableHeaderMobile"
                                        >
                                          <EuiFlexGroup
                                            alignItems="baseline"
                                            justifyContent="spaceBetween"
                                            responsive={false}
                                          >
                                            <div
                                              className="euiFlexGroup euiFlexGroup--gutterLarge euiFlexGroup--alignItemsBaseline euiFlexGroup--justifyContentSpaceBetween euiFlexGroup--directionRow"
                                            >
                                              <EuiFlexItem
                                                grow={false}
                                              >
                                                <div
                                                  className="euiFlexItem euiFlexItem--flexGrowZero"
                                                >
                                                  <EuiI18n
                                                    default="Select all rows"
                                                    token="euiBasicTable.selectAllRows"
                                                  >
                                                    <EuiCheckbox
                                                      aria-label="Select all rows"
                                                      checked={false}
                                                      compressed={false}
                                                      disabled={false}
                                                      id="_selection_column-checkbox_generated-id"
                                                      indeterminate={false}
                                                      label="Select all rows"
                                                      onChange={[Function]}
                                                    >
                                                      <div
                                                        className="euiCheckbox"
                                                      >
                                                        <input
                                                          aria-label="Select all rows"
                                                          checked={false}
                                                          className="euiCheckbox__input"
                                                          disabled={false}
                                                          id="_selection_column-checkbox_generated-id"
                                                          onChange={[Function]}
                                                          type="checkbox"
                                                        />
                                                        <div
                                                          className="euiCheckbox__square"
                                                        />
                                                        <label
                                                          className="euiCheckbox__label"
                                                          htmlFor="_selection_column-checkbox_generated-id"
                                                        >
                                                          Select all rows
                                                        </label>
                                                      </div>
                                                    </EuiCheckbox>
                                                  </EuiI18n>
                                                </div>
                                              </EuiFlexItem>
                                              <EuiFlexItem
                                                grow={false}
                                              >
                                                <div
                                                  className="euiFlexItem euiFlexItem--flexGrowZero"
                                                >
                                                  <EuiTableSortMobile
                                                    items={
                                                      Array [
                                                        Object {
                                                          "isSortAscending": undefined,
                                                          "isSorted": false,
                                                          "key": "_data_s_title_0",
                                                          "name": "Title",
                                                          "onSort": [Function],
                                                        },
                                                        Object {
                                                          "isSortAscending": undefined,
                                                          "isSorted": false,
                                                          "key": "_data_s_type_1",
                                                          "name": "Type",
                                                          "onSort": [Function],
                                                        },
                                                        Object {
                                                          "isSortAscending": undefined,
                                                          "isSorted": false,
                                                          "key": "_data_s_description_2",
                                                          "name": "Description",
                                                          "onSort": [Function],
                                                        },
                                                        Object {
                                                          "isSortAscending": undefined,
                                                          "isSorted": false,
                                                          "key": "_data_s_updated_at_3",
                                                          "name": "Last updated",
                                                          "onSort": [Function],
                                                        },
                                                      ]
                                                    }
                                                  >
                                                    <div
                                                      className="euiTableSortMobile"
                                                    >
                                                      <EuiPopover
                                                        anchorPosition="downRight"
                                                        button={
                                                          <EuiButtonEmpty
                                                            flush="right"
                                                            iconSide="right"
                                                            iconType="arrowDown"
                                                            onClick={[Function]}
                                                            size="xs"
                                                          >
                                                            <EuiI18n
                                                              default="Sorting"
                                                              token="euiTableSortMobile.sorting"
                                                            />
                                                          </EuiButtonEmpty>
                                                        }
                                                        closePopover={[Function]}
                                                        display="inlineBlock"
                                                        hasArrow={true}
                                                        isOpen={false}
                                                        ownFocus={true}
                                                        panelPaddingSize="none"
                                                      >
                                                        <div
                                                          className="euiPopover euiPopover--anchorDownRight"
                                                        >
                                                          <div
                                                            className="euiPopover__anchor"
                                                          >
                                                            <EuiButtonEmpty
                                                              flush="right"
                                                              iconSide="right"
                                                              iconType="arrowDown"
                                                              onClick={[Function]}
                                                              size="xs"
                                                            >
                                                              <button
                                                                className="euiButtonEmpty euiButtonEmpty--primary euiButtonEmpty--xSmall euiButtonEmpty--flushRight"
                                                                disabled={false}
                                                                onClick={[Function]}
                                                                type="button"
                                                              >
                                                                <EuiButtonContent
                                                                  className="euiButtonEmpty__content"
                                                                  iconSide="right"
                                                                  iconSize="s"
                                                                  iconType="arrowDown"
                                                                  textProps={
                                                                    Object {
                                                                      "className": "euiButtonEmpty__text",
                                                                    }
                                                                  }
                                                                >
                                                                  <span
                                                                    className="euiButtonContent euiButtonContent--iconRight euiButtonEmpty__content"
                                                                  >
                                                                    <EuiIcon
                                                                      className="euiButtonContent__icon"
                                                                      color="inherit"
                                                                      size="s"
                                                                      type="arrowDown"
                                                                    >
                                                                      <span
                                                                        className="euiButtonContent__icon"
                                                                        color="inherit"
                                                                        data-euiicon-type="arrowDown"
                                                                        size="s"
                                                                      />
                                                                    </EuiIcon>
                                                                    <span
                                                                      className="euiButtonEmpty__text"
                                                                    >
                                                                      <EuiI18n
                                                                        default="Sorting"
                                                                        token="euiTableSortMobile.sorting"
                                                                      >
                                                                        Sorting
                                                                      </EuiI18n>
                                                                    </span>
                                                                  </span>
                                                                </EuiButtonContent>
                                                              </button>
                                                            </EuiButtonEmpty>
                                                          </div>
                                                        </div>
                                                      </EuiPopover>
                                                    </div>
                                                  </EuiTableSortMobile>
                                                </div>
                                              </EuiFlexItem>
                                            </div>
                                          </EuiFlexGroup>
                                        </div>
                                      </EuiTableHeaderMobile>
                                      <EuiTable
                                        id="__table_generated-id"
                                        responsive={true}
                                        tableLayout="fixed"
                                      >
                                        <table
                                          className="euiTable euiTable--responsive"
                                          id="__table_generated-id"
                                          tabIndex={-1}
                                        >
                                          <EuiScreenReaderOnly>
                                            <caption
                                              className="euiScreenReaderOnly euiTableCaption"
                                            >
                                              <EuiDelayRender
                                                delay={500}
                                              />
                                            </caption>
                                          </EuiScreenReaderOnly>
                                          <EuiTableHeader>
                                            <thead>
                                              <tr>
                                                <EuiTableHeaderCellCheckbox
                                                  key="_selection_column_h"
                                                >
                                                  <th
                                                    className="euiTableHeaderCellCheckbox"
                                                    scope="col"
                                                    style={
                                                      Object {
                                                        "width": undefined,
                                                      }
                                                    }
                                                  >
                                                    <div
                                                      className="euiTableCellContent"
                                                    >
                                                      <EuiI18n
                                                        default="Select all rows"
                                                        token="euiBasicTable.selectAllRows"
                                                      >
                                                        <EuiCheckbox
                                                          aria-label="Select all rows"
                                                          checked={false}
                                                          compressed={false}
                                                          data-test-subj="checkboxSelectAll"
                                                          disabled={false}
                                                          id="_selection_column-checkbox_generated-id"
                                                          indeterminate={false}
                                                          label={null}
                                                          onChange={[Function]}
                                                          type="inList"
                                                        >
                                                          <div
                                                            className="euiCheckbox euiCheckbox--inList euiCheckbox--noLabel"
                                                          >
                                                            <input
                                                              aria-label="Select all rows"
                                                              checked={false}
                                                              className="euiCheckbox__input"
                                                              data-test-subj="checkboxSelectAll"
                                                              disabled={false}
                                                              id="_selection_column-checkbox_generated-id"
                                                              onChange={[Function]}
                                                              type="checkbox"
                                                            />
                                                            <div
                                                              className="euiCheckbox__square"
                                                            />
                                                          </div>
                                                        </EuiCheckbox>
                                                      </EuiI18n>
                                                    </div>
                                                  </th>
                                                </EuiTableHeaderCellCheckbox>
                                                <EuiTableHeaderCell
                                                  align="left"
                                                  data-test-subj="tableHeaderCell_title_0"
                                                  isSorted={false}
                                                  key="_data_h_title_0"
                                                  onSort={[Function]}
                                                >
                                                  <th
                                                    aria-live="polite"
                                                    aria-sort="none"
                                                    className="euiTableHeaderCell"
                                                    data-test-subj="tableHeaderCell_title_0"
                                                    role="columnheader"
                                                    scope="col"
                                                    style={
                                                      Object {
                                                        "width": undefined,
                                                      }
                                                    }
                                                  >
                                                    <button
                                                      className="euiTableHeaderButton"
                                                      data-test-subj="tableHeaderSortButton"
                                                      onClick={[Function]}
                                                      type="button"
                                                    >
                                                      <CellContents
                                                        className="euiTableCellContent"
                                                        isSorted={false}
                                                        showSortMsg={true}
                                                      >
                                                        <span
                                                          className="euiTableCellContent"
                                                        >
                                                          <EuiInnerText>
                                                            <EuiI18n
                                                              default="{innerText}; {description}"
                                                              token="euiTableHeaderCell.titleTextWithDesc"
                                                              values={
                                                                Object {
                                                                  "description": undefined,
                                                                  "innerText": undefined,
                                                                }
                                                              }
                                                            >
                                                              <span
                                                                className="euiTableCellContent__text"
                                                              >
                                                                Title
                                                              </span>
                                                            </EuiI18n>
                                                          </EuiInnerText>
                                                        </span>
                                                      </CellContents>
                                                    </button>
                                                  </th>
                                                </EuiTableHeaderCell>
                                                <EuiTableHeaderCell
                                                  align="left"
                                                  data-test-subj="tableHeaderCell_type_1"
                                                  isSorted={false}
                                                  key="_data_h_type_1"
                                                  onSort={[Function]}
                                                >
                                                  <th
                                                    aria-live="polite"
                                                    aria-sort="none"
                                                    className="euiTableHeaderCell"
                                                    data-test-subj="tableHeaderCell_type_1"
                                                    role="columnheader"
                                                    scope="col"
                                                    style={
                                                      Object {
                                                        "width": undefined,
                                                      }
                                                    }
                                                  >
                                                    <button
                                                      className="euiTableHeaderButton"
                                                      data-test-subj="tableHeaderSortButton"
                                                      onClick={[Function]}
                                                      type="button"
                                                    >
                                                      <CellContents
                                                        className="euiTableCellContent"
                                                        isSorted={false}
                                                        showSortMsg={true}
                                                      >
                                                        <span
                                                          className="euiTableCellContent"
                                                        >
                                                          <EuiInnerText>
                                                            <EuiI18n
                                                              default="{innerText}; {description}"
                                                              token="euiTableHeaderCell.titleTextWithDesc"
                                                              values={
                                                                Object {
                                                                  "description": undefined,
                                                                  "innerText": undefined,
                                                                }
                                                              }
                                                            >
                                                              <span
                                                                className="euiTableCellContent__text"
                                                              >
                                                                Type
                                                              </span>
                                                            </EuiI18n>
                                                          </EuiInnerText>
                                                        </span>
                                                      </CellContents>
                                                    </button>
                                                  </th>
                                                </EuiTableHeaderCell>
                                                <EuiTableHeaderCell
                                                  align="left"
                                                  data-test-subj="tableHeaderCell_description_2"
                                                  isSorted={false}
                                                  key="_data_h_description_2"
                                                  onSort={[Function]}
                                                >
                                                  <th
                                                    aria-live="polite"
                                                    aria-sort="none"
                                                    className="euiTableHeaderCell"
                                                    data-test-subj="tableHeaderCell_description_2"
                                                    role="columnheader"
                                                    scope="col"
                                                    style={
                                                      Object {
                                                        "width": undefined,
                                                      }
                                                    }
                                                  >
                                                    <button
                                                      className="euiTableHeaderButton"
                                                      data-test-subj="tableHeaderSortButton"
                                                      onClick={[Function]}
                                                      type="button"
                                                    >
                                                      <CellContents
                                                        className="euiTableCellContent"
                                                        isSorted={false}
                                                        showSortMsg={true}
                                                      >
                                                        <span
                                                          className="euiTableCellContent"
                                                        >
                                                          <EuiInnerText>
                                                            <EuiI18n
                                                              default="{innerText}; {description}"
                                                              token="euiTableHeaderCell.titleTextWithDesc"
                                                              values={
                                                                Object {
                                                                  "description": undefined,
                                                                  "innerText": undefined,
                                                                }
                                                              }
                                                            >
                                                              <span
                                                                className="euiTableCellContent__text"
                                                              >
                                                                Description
                                                              </span>
                                                            </EuiI18n>
                                                          </EuiInnerText>
                                                        </span>
                                                      </CellContents>
                                                    </button>
                                                  </th>
                                                </EuiTableHeaderCell>
                                                <EuiTableHeaderCell
                                                  align="left"
                                                  data-test-subj="tableHeaderCell_updated_at_3"
                                                  description="Last update of the saved object"
                                                  isSorted={false}
                                                  key="_data_h_updated_at_3"
                                                  onSort={[Function]}
                                                >
                                                  <th
                                                    aria-live="polite"
                                                    aria-sort="none"
                                                    className="euiTableHeaderCell"
                                                    data-test-subj="tableHeaderCell_updated_at_3"
                                                    role="columnheader"
                                                    scope="col"
                                                    style={
                                                      Object {
                                                        "width": undefined,
                                                      }
                                                    }
                                                  >
                                                    <button
                                                      className="euiTableHeaderButton"
                                                      data-test-subj="tableHeaderSortButton"
                                                      onClick={[Function]}
                                                      type="button"
                                                    >
                                                      <CellContents
                                                        className="euiTableCellContent"
                                                        description="Last update of the saved object"
                                                        isSorted={false}
                                                        showSortMsg={true}
                                                      >
                                                        <span
                                                          className="euiTableCellContent"
                                                        >
                                                          <EuiInnerText>
                                                            <EuiI18n
                                                              default="{innerText}; {description}"
                                                              token="euiTableHeaderCell.titleTextWithDesc"
                                                              values={
                                                                Object {
                                                                  "description": "Last update of the saved object",
                                                                  "innerText": undefined,
                                                                }
                                                              }
                                                            >
                                                              <span
                                                                className="euiTableCellContent__text"
                                                                title="; Last update of the saved object"
                                                              >
                                                                Last updated
                                                              </span>
                                                            </EuiI18n>
                                                          </EuiInnerText>
                                                          <EuiScreenReaderOnly>
                                                            <span
                                                              className="euiScreenReaderOnly"
                                                            >
                                                              Last update of the saved object
                                                            </span>
                                                          </EuiScreenReaderOnly>
                                                        </span>
                                                      </CellContents>
                                                    </button>
                                                  </th>
                                                </EuiTableHeaderCell>
                                                <EuiTableHeaderCell
                                                  align="right"
                                                  key="_actions_h_4"
                                                  width="100px"
                                                >
                                                  <th
                                                    className="euiTableHeaderCell"
                                                    role="columnheader"
                                                    scope="col"
                                                    style={
                                                      Object {
                                                        "width": "100px",
                                                      }
                                                    }
                                                  >
                                                    <CellContents
                                                      className="euiTableCellContent euiTableCellContent--alignRight"
                                                      showSortMsg={false}
                                                    >
                                                      <span
                                                        className="euiTableCellContent euiTableCellContent--alignRight"
                                                      >
                                                        <EuiInnerText>
                                                          <EuiI18n
                                                            default="{innerText}; {description}"
                                                            token="euiTableHeaderCell.titleTextWithDesc"
                                                            values={
                                                              Object {
                                                                "description": undefined,
                                                                "innerText": undefined,
                                                              }
                                                            }
                                                          >
                                                            <span
                                                              className="euiTableCellContent__text"
                                                            >
                                                              Actions
                                                            </span>
                                                          </EuiI18n>
                                                        </EuiInnerText>
                                                      </span>
                                                    </CellContents>
                                                  </th>
                                                </EuiTableHeaderCell>
                                              </tr>
                                            </thead>
                                          </EuiTableHeader>
                                          <EuiTableBody
                                            bodyRef={[Function]}
                                          >
                                            <tbody>
                                              <EuiTableRow
                                                hasActions={true}
                                                isSelectable={true}
                                                isSelected={false}
                                              >
                                                <tr
                                                  className="euiTableRow euiTableRow-isSelectable euiTableRow-hasActions"
                                                >
                                                  <EuiTableRowCellCheckbox
                                                    key="_selection_column_dashboard0"
                                                  >
                                                    <td
                                                      className="euiTableRowCellCheckbox"
                                                    >
                                                      <div
                                                        className="euiTableCellContent"
                                                      >
                                                        <EuiI18n
                                                          default="Select this row"
                                                          token="euiBasicTable.selectThisRow"
                                                        >
                                                          <EuiCheckbox
                                                            aria-label="Select this row"
                                                            checked={false}
                                                            compressed={false}
                                                            data-test-subj="checkboxSelectRow-dashboard0"
                                                            disabled={false}
                                                            id="_selection_column_dashboard0-checkbox"
                                                            indeterminate={false}
                                                            onChange={[Function]}
                                                            title="Select this row"
                                                            type="inList"
                                                          >
                                                            <div
                                                              className="euiCheckbox euiCheckbox--inList euiCheckbox--noLabel"
                                                            >
                                                              <input
                                                                aria-label="Select this row"
                                                                checked={false}
                                                                className="euiCheckbox__input"
                                                                data-test-subj="checkboxSelectRow-dashboard0"
                                                                disabled={false}
                                                                id="_selection_column_dashboard0-checkbox"
                                                                onChange={[Function]}
                                                                title="Select this row"
                                                                type="checkbox"
                                                              />
                                                              <div
                                                                className="euiCheckbox__square"
                                                              />
                                                            </div>
                                                          </EuiCheckbox>
                                                        </EuiI18n>
                                                      </div>
                                                    </td>
                                                  </EuiTableRowCellCheckbox>
                                                  <EuiTableRowCell
                                                    align="left"
                                                    key="_data_column_title_dashboard0_0"
                                                    mobileOptions={
                                                      Object {
                                                        "header": "Title",
                                                        "render": undefined,
                                                      }
                                                    }
                                                    setScopeRow={false}
                                                    textOnly={false}
                                                  >
                                                    <td
                                                      className="euiTableRowCell"
                                                      style={
                                                        Object {
                                                          "width": undefined,
                                                        }
                                                      }
                                                    >
                                                      <div
                                                        className="euiTableRowCell__mobileHeader euiTableRowCell--hideForDesktop"
                                                      >
                                                        Title
                                                      </div>
                                                      <div
                                                        className="euiTableCellContent euiTableCellContent--overflowingContent"
                                                      >
                                                        <EuiLink
                                                          className=""
                                                          data-test-subj="dashboardListingTitleLink-dashboard0"
                                                          key=".0"
                                                        >
                                                          <button
                                                            className="euiLink euiLink--primary"
                                                            data-test-subj="dashboardListingTitleLink-dashboard0"
                                                            disabled={false}
                                                            type="button"
                                                          >
                                                            dashboard0
                                                          </button>
                                                        </EuiLink>
                                                      </div>
                                                    </td>
                                                  </EuiTableRowCell>
                                                  <EuiTableRowCell
                                                    align="left"
                                                    key="_data_column_type_dashboard0_1"
                                                    mobileOptions={
                                                      Object {
                                                        "header": "Type",
                                                        "render": undefined,
                                                      }
                                                    }
                                                    setScopeRow={false}
                                                    textOnly={true}
                                                  >
                                                    <td
                                                      className="euiTableRowCell"
                                                      style={
                                                        Object {
                                                          "width": undefined,
                                                        }
                                                      }
                                                    >
                                                      <div
                                                        className="euiTableRowCell__mobileHeader euiTableRowCell--hideForDesktop"
                                                      >
                                                        Type
                                                      </div>
                                                      <div
                                                        className="euiTableCellContent"
                                                      >
                                                        <span
                                                          className="euiTableCellContent__text"
                                                        >
                                                          dashboardSavedObjects
                                                        </span>
                                                      </div>
                                                    </td>
                                                  </EuiTableRowCell>
                                                  <EuiTableRowCell
                                                    align="left"
                                                    key="_data_column_description_dashboard0_2"
                                                    mobileOptions={
                                                      Object {
                                                        "header": "Description",
                                                        "render": undefined,
                                                      }
                                                    }
                                                    setScopeRow={false}
                                                    textOnly={true}
                                                  >
                                                    <td
                                                      className="euiTableRowCell"
                                                      style={
                                                        Object {
                                                          "width": undefined,
                                                        }
                                                      }
                                                    >
                                                      <div
                                                        className="euiTableRowCell__mobileHeader euiTableRowCell--hideForDesktop"
                                                      >
                                                        Description
                                                      </div>
                                                      <div
                                                        className="euiTableCellContent"
                                                      >
                                                        <span
                                                          className="euiTableCellContent__text"
                                                        >
                                                          dashboard0 desc
                                                        </span>
                                                      </div>
                                                    </td>
                                                  </EuiTableRowCell>
                                                  <EuiTableRowCell
                                                    align="left"
                                                    data-test-subj="updated-at"
                                                    key="_data_column_updated_at_dashboard0_3"
                                                    mobileOptions={
                                                      Object {
                                                        "header": "Last updated",
                                                        "render": undefined,
                                                      }
                                                    }
                                                    setScopeRow={false}
                                                    textOnly={false}
                                                  >
                                                    <td
                                                      className="euiTableRowCell"
                                                      data-test-subj="updated-at"
                                                      style={
                                                        Object {
                                                          "width": undefined,
                                                        }
                                                      }
                                                    >
                                                      <div
                                                        className="euiTableRowCell__mobileHeader euiTableRowCell--hideForDesktop"
                                                      >
                                                        Last updated
                                                      </div>
                                                      <div
                                                        className="euiTableCellContent euiTableCellContent--overflowingContent"
                                                      />
                                                    </td>
                                                  </EuiTableRowCell>
                                                  <EuiTableRowCell
                                                    align="right"
                                                    hasActions={true}
                                                    key="record_actions_dashboard0_4"
                                                    showOnHover={true}
                                                    textOnly={false}
                                                  >
                                                    <td
                                                      className="euiTableRowCell euiTableRowCell--hasActions"
                                                      style={
                                                        Object {
                                                          "width": undefined,
                                                        }
                                                      }
                                                    >
                                                      <div
                                                        className="euiTableCellContent euiTableCellContent--alignRight euiTableCellContent--showOnHover euiTableCellContent--overflowingContent"
                                                      >
                                                        <ExpandedItemActions
                                                          actionEnabled={[Function]}
                                                          actions={
                                                            Array [
                                                              Object {
                                                                "description": "Edit",
                                                                "enabled": [Function],
                                                                "icon": "pencil",
                                                                "name": "Edit",
                                                                "onClick": [Function],
                                                                "type": "icon",
                                                              },
                                                            ]
                                                          }
                                                          className="euiTableCellContent__hoverItem"
                                                          item={
                                                            Object {
                                                              "appId": "1",
                                                              "description": "dashboard0 desc",
                                                              "editUrl": undefined,
                                                              "id": "dashboard0",
                                                              "title": "dashboard0",
                                                              "type": "dashboardSavedObjects",
                                                              "updated_at": undefined,
                                                              "viewUrl": undefined,
                                                            }
                                                          }
                                                          itemId="dashboard0"
                                                          key=".0"
                                                        >
                                                          <DefaultItemAction
                                                            action={
                                                              Object {
                                                                "description": "Edit",
                                                                "enabled": [Function],
                                                                "icon": "pencil",
                                                                "name": "Edit",
                                                                "onClick": [Function],
                                                                "type": "icon",
                                                              }
                                                            }
                                                            className="euiTableCellContent__hoverItem"
                                                            enabled={true}
                                                            item={
                                                              Object {
                                                                "appId": "1",
                                                                "description": "dashboard0 desc",
                                                                "editUrl": undefined,
                                                                "id": "dashboard0",
                                                                "title": "dashboard0",
                                                                "type": "dashboardSavedObjects",
                                                                "updated_at": undefined,
                                                                "viewUrl": undefined,
                                                              }
                                                            }
                                                            key="item_action_dashboard0_0"
                                                          >
                                                            <EuiToolTip
                                                              content="Edit"
                                                              delay="long"
                                                              position="top"
                                                            >
                                                              <span
                                                                className="euiToolTipAnchor"
                                                                onKeyUp={[Function]}
                                                                onMouseOut={[Function]}
                                                                onMouseOver={[Function]}
                                                              >
                                                                <EuiButtonIcon
                                                                  aria-labelledby="generated-id"
                                                                  className="euiTableCellContent__hoverItem"
                                                                  color="primary"
                                                                  iconType="pencil"
                                                                  isDisabled={false}
                                                                  onClick={[Function]}
                                                                >
                                                                  <button
                                                                    aria-labelledby="generated-id"
                                                                    className="euiButtonIcon euiButtonIcon--primary euiButtonIcon--empty euiButtonIcon--xSmall euiTableCellContent__hoverItem"
                                                                    disabled={false}
                                                                    onClick={[Function]}
                                                                    type="button"
                                                                  >
                                                                    <EuiIcon
                                                                      aria-hidden="true"
                                                                      className="euiButtonIcon__icon"
                                                                      color="inherit"
                                                                      size="m"
                                                                      type="pencil"
                                                                    >
                                                                      <span
                                                                        aria-hidden="true"
                                                                        className="euiButtonIcon__icon"
                                                                        color="inherit"
                                                                        data-euiicon-type="pencil"
                                                                        size="m"
                                                                      />
                                                                    </EuiIcon>
                                                                  </button>
                                                                </EuiButtonIcon>
                                                                <EuiScreenReaderOnly>
                                                                  <span
                                                                    className="euiScreenReaderOnly"
                                                                    id="generated-id"
                                                                  >
                                                                    Edit
                                                                  </span>
                                                                </EuiScreenReaderOnly>
                                                              </span>
                                                            </EuiToolTip>
                                                          </DefaultItemAction>
                                                        </ExpandedItemActions>
                                                      </div>
                                                    </td>
                                                  </EuiTableRowCell>
                                                </tr>
                                              </EuiTableRow>
                                              <EuiTableRow
                                                hasActions={true}
                                                isSelectable={true}
                                                isSelected={false}
                                              >
                                                <tr
                                                  className="euiTableRow euiTableRow-isSelectable euiTableRow-hasActions"
                                                >
                                                  <EuiTableRowCellCheckbox
                                                    key="_selection_column_dashboard1"
                                                  >
                                                    <td
                                                      className="euiTableRowCellCheckbox"
                                                    >
                                                      <div
                                                        className="euiTableCellContent"
                                                      >
                                                        <EuiI18n
                                                          default="Select this row"
                                                          token="euiBasicTable.selectThisRow"
                                                        >
                                                          <EuiCheckbox
                                                            aria-label="Select this row"
                                                            checked={false}
                                                            compressed={false}
                                                            data-test-subj="checkboxSelectRow-dashboard1"
                                                            disabled={false}
                                                            id="_selection_column_dashboard1-checkbox"
                                                            indeterminate={false}
                                                            onChange={[Function]}
                                                            title="Select this row"
                                                            type="inList"
                                                          >
                                                            <div
                                                              className="euiCheckbox euiCheckbox--inList euiCheckbox--noLabel"
                                                            >
                                                              <input
                                                                aria-label="Select this row"
                                                                checked={false}
                                                                className="euiCheckbox__input"
                                                                data-test-subj="checkboxSelectRow-dashboard1"
                                                                disabled={false}
                                                                id="_selection_column_dashboard1-checkbox"
                                                                onChange={[Function]}
                                                                title="Select this row"
                                                                type="checkbox"
                                                              />
                                                              <div
                                                                className="euiCheckbox__square"
                                                              />
                                                            </div>
                                                          </EuiCheckbox>
                                                        </EuiI18n>
                                                      </div>
                                                    </td>
                                                  </EuiTableRowCellCheckbox>
                                                  <EuiTableRowCell
                                                    align="left"
                                                    key="_data_column_title_dashboard1_0"
                                                    mobileOptions={
                                                      Object {
                                                        "header": "Title",
                                                        "render": undefined,
                                                      }
                                                    }
                                                    setScopeRow={false}
                                                    textOnly={false}
                                                  >
                                                    <td
                                                      className="euiTableRowCell"
                                                      style={
                                                        Object {
                                                          "width": undefined,
                                                        }
                                                      }
                                                    >
                                                      <div
                                                        className="euiTableRowCell__mobileHeader euiTableRowCell--hideForDesktop"
                                                      >
                                                        Title
                                                      </div>
                                                      <div
                                                        className="euiTableCellContent euiTableCellContent--overflowingContent"
                                                      >
                                                        <EuiLink
                                                          className=""
                                                          data-test-subj="dashboardListingTitleLink-dashboard1"
                                                          key=".0"
                                                        >
                                                          <button
                                                            className="euiLink euiLink--primary"
                                                            data-test-subj="dashboardListingTitleLink-dashboard1"
                                                            disabled={false}
                                                            type="button"
                                                          >
                                                            dashboard1
                                                          </button>
                                                        </EuiLink>
                                                      </div>
                                                    </td>
                                                  </EuiTableRowCell>
                                                  <EuiTableRowCell
                                                    align="left"
                                                    key="_data_column_type_dashboard1_1"
                                                    mobileOptions={
                                                      Object {
                                                        "header": "Type",
                                                        "render": undefined,
                                                      }
                                                    }
                                                    setScopeRow={false}
                                                    textOnly={true}
                                                  >
                                                    <td
                                                      className="euiTableRowCell"
                                                      style={
                                                        Object {
                                                          "width": undefined,
                                                        }
                                                      }
                                                    >
                                                      <div
                                                        className="euiTableRowCell__mobileHeader euiTableRowCell--hideForDesktop"
                                                      >
                                                        Type
                                                      </div>
                                                      <div
                                                        className="euiTableCellContent"
                                                      >
                                                        <span
                                                          className="euiTableCellContent__text"
                                                        >
                                                          dashboardSavedObjects
                                                        </span>
                                                      </div>
                                                    </td>
                                                  </EuiTableRowCell>
                                                  <EuiTableRowCell
                                                    align="left"
                                                    key="_data_column_description_dashboard1_2"
                                                    mobileOptions={
                                                      Object {
                                                        "header": "Description",
                                                        "render": undefined,
                                                      }
                                                    }
                                                    setScopeRow={false}
                                                    textOnly={true}
                                                  >
                                                    <td
                                                      className="euiTableRowCell"
                                                      style={
                                                        Object {
                                                          "width": undefined,
                                                        }
                                                      }
                                                    >
                                                      <div
                                                        className="euiTableRowCell__mobileHeader euiTableRowCell--hideForDesktop"
                                                      >
                                                        Description
                                                      </div>
                                                      <div
                                                        className="euiTableCellContent"
                                                      >
                                                        <span
                                                          className="euiTableCellContent__text"
                                                        >
                                                          dashboard1 desc
                                                        </span>
                                                      </div>
                                                    </td>
                                                  </EuiTableRowCell>
                                                  <EuiTableRowCell
                                                    align="left"
                                                    data-test-subj="updated-at"
                                                    key="_data_column_updated_at_dashboard1_3"
                                                    mobileOptions={
                                                      Object {
                                                        "header": "Last updated",
                                                        "render": undefined,
                                                      }
                                                    }
                                                    setScopeRow={false}
                                                    textOnly={false}
                                                  >
                                                    <td
                                                      className="euiTableRowCell"
                                                      data-test-subj="updated-at"
                                                      style={
                                                        Object {
                                                          "width": undefined,
                                                        }
                                                      }
                                                    >
                                                      <div
                                                        className="euiTableRowCell__mobileHeader euiTableRowCell--hideForDesktop"
                                                      >
                                                        Last updated
                                                      </div>
                                                      <div
                                                        className="euiTableCellContent euiTableCellContent--overflowingContent"
                                                      />
                                                    </td>
                                                  </EuiTableRowCell>
                                                  <EuiTableRowCell
                                                    align="right"
                                                    hasActions={true}
                                                    key="record_actions_dashboard1_4"
                                                    showOnHover={true}
                                                    textOnly={false}
                                                  >
                                                    <td
                                                      className="euiTableRowCell euiTableRowCell--hasActions"
                                                      style={
                                                        Object {
                                                          "width": undefined,
                                                        }
                                                      }
                                                    >
                                                      <div
                                                        className="euiTableCellContent euiTableCellContent--alignRight euiTableCellContent--showOnHover euiTableCellContent--overflowingContent"
                                                      >
                                                        <ExpandedItemActions
                                                          actionEnabled={[Function]}
                                                          actions={
                                                            Array [
                                                              Object {
                                                                "description": "Edit",
                                                                "enabled": [Function],
                                                                "icon": "pencil",
                                                                "name": "Edit",
                                                                "onClick": [Function],
                                                                "type": "icon",
                                                              },
                                                            ]
                                                          }
                                                          className="euiTableCellContent__hoverItem"
                                                          item={
                                                            Object {
                                                              "appId": "1",
                                                              "description": "dashboard1 desc",
                                                              "editUrl": undefined,
                                                              "id": "dashboard1",
                                                              "title": "dashboard1",
                                                              "type": "dashboardSavedObjects",
                                                              "updated_at": undefined,
                                                              "viewUrl": undefined,
                                                            }
                                                          }
                                                          itemId="dashboard1"
                                                          key=".0"
                                                        >
                                                          <DefaultItemAction
                                                            action={
                                                              Object {
                                                                "description": "Edit",
                                                                "enabled": [Function],
                                                                "icon": "pencil",
                                                                "name": "Edit",
                                                                "onClick": [Function],
                                                                "type": "icon",
                                                              }
                                                            }
                                                            className="euiTableCellContent__hoverItem"
                                                            enabled={true}
                                                            item={
                                                              Object {
                                                                "appId": "1",
                                                                "description": "dashboard1 desc",
                                                                "editUrl": undefined,
                                                                "id": "dashboard1",
                                                                "title": "dashboard1",
                                                                "type": "dashboardSavedObjects",
                                                                "updated_at": undefined,
                                                                "viewUrl": undefined,
                                                              }
                                                            }
                                                            key="item_action_dashboard1_0"
                                                          >
                                                            <EuiToolTip
                                                              content="Edit"
                                                              delay="long"
                                                              position="top"
                                                            >
                                                              <span
                                                                className="euiToolTipAnchor"
                                                                onKeyUp={[Function]}
                                                                onMouseOut={[Function]}
                                                                onMouseOver={[Function]}
                                                              >
                                                                <EuiButtonIcon
                                                                  aria-labelledby="generated-id"
                                                                  className="euiTableCellContent__hoverItem"
                                                                  color="primary"
                                                                  iconType="pencil"
                                                                  isDisabled={false}
                                                                  onClick={[Function]}
                                                                >
                                                                  <button
                                                                    aria-labelledby="generated-id"
                                                                    className="euiButtonIcon euiButtonIcon--primary euiButtonIcon--empty euiButtonIcon--xSmall euiTableCellContent__hoverItem"
                                                                    disabled={false}
                                                                    onClick={[Function]}
                                                                    type="button"
                                                                  >
                                                                    <EuiIcon
                                                                      aria-hidden="true"
                                                                      className="euiButtonIcon__icon"
                                                                      color="inherit"
                                                                      size="m"
                                                                      type="pencil"
                                                                    >
                                                                      <span
                                                                        aria-hidden="true"
                                                                        className="euiButtonIcon__icon"
                                                                        color="inherit"
                                                                        data-euiicon-type="pencil"
                                                                        size="m"
                                                                      />
                                                                    </EuiIcon>
                                                                  </button>
                                                                </EuiButtonIcon>
                                                                <EuiScreenReaderOnly>
                                                                  <span
                                                                    className="euiScreenReaderOnly"
                                                                    id="generated-id"
                                                                  >
                                                                    Edit
                                                                  </span>
                                                                </EuiScreenReaderOnly>
                                                              </span>
                                                            </EuiToolTip>
                                                          </DefaultItemAction>
                                                        </ExpandedItemActions>
                                                      </div>
                                                    </td>
                                                  </EuiTableRowCell>
                                                </tr>
                                              </EuiTableRow>
                                            </tbody>
                                          </EuiTableBody>
                                        </table>
                                      </EuiTable>
                                    </div>
                                    <PaginationBar
                                      aria-controls="__table_generated-id"
                                      onPageChange={[Function]}
                                      onPageSizeChange={[Function]}
                                      pagination={
                                        Object {
                                          "hidePerPageOptions": undefined,
                                          "pageIndex": 0,
                                          "pageSize": 10,
                                          "pageSizeOptions": Array [
                                            10,
                                            20,
                                            50,
                                          ],
                                          "totalItemCount": 2,
                                        }
                                      }
                                    >
                                      <div>
                                        <EuiSpacer
                                          size="m"
                                        >
                                          <div
                                            className="euiSpacer euiSpacer--m"
                                          />
                                        </EuiSpacer>
                                        <EuiTablePagination
                                          activePage={0}
                                          aria-controls="__table_generated-id"
                                          itemsPerPage={10}
                                          itemsPerPageOptions={
                                            Array [
                                              10,
                                              20,
                                              50,
                                            ]
                                          }
                                          onChangeItemsPerPage={[Function]}
                                          onChangePage={[Function]}
                                          pageCount={1}
                                        >
                                          <EuiFlexGroup
                                            alignItems="center"
                                            justifyContent="spaceBetween"
                                            responsive={false}
                                          >
                                            <div
                                              className="euiFlexGroup euiFlexGroup--gutterLarge euiFlexGroup--alignItemsCenter euiFlexGroup--justifyContentSpaceBetween euiFlexGroup--directionRow"
                                            >
                                              <EuiFlexItem
                                                grow={false}
                                              >
                                                <div
                                                  className="euiFlexItem euiFlexItem--flexGrowZero"
                                                >
                                                  <EuiPopover
                                                    anchorPosition="upRight"
                                                    button={
                                                      <EuiButtonEmpty
                                                        color="text"
                                                        data-test-subj="tablePaginationPopoverButton"
                                                        iconSide="right"
                                                        iconType="arrowDown"
                                                        onClick={[Function]}
                                                        size="xs"
                                                      >
                                                        <EuiI18n
                                                          default="Rows per page"
                                                          token="euiTablePagination.rowsPerPage"
                                                        />
                                                        : 
                                                        10
                                                      </EuiButtonEmpty>
                                                    }
                                                    closePopover={[Function]}
                                                    display="inlineBlock"
                                                    hasArrow={true}
                                                    isOpen={false}
                                                    ownFocus={true}
                                                    panelPaddingSize="none"
                                                  >
                                                    <div
                                                      className="euiPopover euiPopover--anchorUpRight"
                                                    >
                                                      <div
                                                        className="euiPopover__anchor"
                                                      >
                                                        <EuiButtonEmpty
                                                          color="text"
                                                          data-test-subj="tablePaginationPopoverButton"
                                                          iconSide="right"
                                                          iconType="arrowDown"
                                                          onClick={[Function]}
                                                          size="xs"
                                                        >
                                                          <button
                                                            className="euiButtonEmpty euiButtonEmpty--text euiButtonEmpty--xSmall"
                                                            data-test-subj="tablePaginationPopoverButton"
                                                            disabled={false}
                                                            onClick={[Function]}
                                                            type="button"
                                                          >
                                                            <EuiButtonContent
                                                              className="euiButtonEmpty__content"
                                                              iconSide="right"
                                                              iconSize="s"
                                                              iconType="arrowDown"
                                                              textProps={
                                                                Object {
                                                                  "className": "euiButtonEmpty__text",
                                                                }
                                                              }
                                                            >
                                                              <span
                                                                className="euiButtonContent euiButtonContent--iconRight euiButtonEmpty__content"
                                                              >
                                                                <EuiIcon
                                                                  className="euiButtonContent__icon"
                                                                  color="inherit"
                                                                  size="s"
                                                                  type="arrowDown"
                                                                >
                                                                  <span
                                                                    className="euiButtonContent__icon"
                                                                    color="inherit"
                                                                    data-euiicon-type="arrowDown"
                                                                    size="s"
                                                                  />
                                                                </EuiIcon>
                                                                <span
                                                                  className="euiButtonEmpty__text"
                                                                >
                                                                  <EuiI18n
                                                                    default="Rows per page"
                                                                    token="euiTablePagination.rowsPerPage"
                                                                  >
                                                                    Rows per page
                                                                  </EuiI18n>
                                                                  : 
                                                                  10
                                                                </span>
                                                              </span>
                                                            </EuiButtonContent>
                                                          </button>
                                                        </EuiButtonEmpty>
                                                      </div>
                                                    </div>
                                                  </EuiPopover>
                                                </div>
                                              </EuiFlexItem>
                                              <EuiFlexItem
                                                grow={false}
                                              >
                                                <div
                                                  className="euiFlexItem euiFlexItem--flexGrowZero"
                                                >
                                                  <EuiPagination
                                                    activePage={0}
                                                    aria-controls="__table_generated-id"
                                                    onPageClick={[Function]}
                                                    pageCount={1}
                                                  >
                                                    <nav
                                                      className="euiPagination"
                                                    >
                                                      <EuiI18n
                                                        default="Previous page, {page}"
                                                        token="euiPagination.previousPage"
                                                        values={
                                                          Object {
                                                            "page": 0,
                                                          }
                                                        }
                                                      >
                                                        <EuiI18n
                                                          default="Previous page"
                                                          token="euiPagination.disabledPreviousPage"
                                                        >
                                                          <EuiButtonIcon
                                                            aria-label="Previous page"
                                                            color="text"
                                                            data-test-subj="pagination-button-previous"
                                                            disabled={true}
                                                            iconType="arrowLeft"
                                                            onClick={[Function]}
                                                          >
                                                            <button
                                                              aria-label="Previous page"
                                                              className="euiButtonIcon euiButtonIcon--text euiButtonIcon--empty euiButtonIcon--xSmall"
                                                              data-test-subj="pagination-button-previous"
                                                              disabled={true}
                                                              onClick={[Function]}
                                                              type="button"
                                                            >
                                                              <EuiIcon
                                                                aria-hidden="true"
                                                                className="euiButtonIcon__icon"
                                                                color="inherit"
                                                                size="m"
                                                                type="arrowLeft"
                                                              >
                                                                <span
                                                                  aria-hidden="true"
                                                                  className="euiButtonIcon__icon"
                                                                  color="inherit"
                                                                  data-euiicon-type="arrowLeft"
                                                                  size="m"
                                                                />
                                                              </EuiIcon>
                                                            </button>
                                                          </EuiButtonIcon>
                                                        </EuiI18n>
                                                      </EuiI18n>
                                                      <ul
                                                        className="euiPagination__list"
                                                      >
                                                        <PaginationButton
                                                          key="0"
                                                          pageIndex={0}
                                                        >
                                                          <li
                                                            className="euiPagination__item"
                                                          >
                                                            <EuiPaginationButton
                                                              aria-controls="__table_generated-id"
                                                              hideOnMobile={true}
                                                              isActive={true}
                                                              onClick={[Function]}
                                                              pageIndex={0}
                                                              totalPages={1}
                                                            >
                                                              <EuiI18n
                                                                default="Page {page} of {totalPages}"
                                                                token="euiPaginationButton.longPageString"
                                                                values={
                                                                  Object {
                                                                    "page": 1,
                                                                    "totalPages": 1,
                                                                  }
                                                                }
                                                              >
                                                                <EuiI18n
                                                                  default="Page {page}"
                                                                  token="euiPaginationButton.shortPageString"
                                                                  values={
                                                                    Object {
                                                                      "page": 1,
                                                                    }
                                                                  }
                                                                >
                                                                  <EuiButtonEmpty
                                                                    aria-controls="__table_generated-id"
                                                                    aria-current={true}
                                                                    aria-label="Page 1 of 1"
                                                                    className="euiPaginationButton euiPaginationButton-isActive euiPaginationButton--hideOnMobile"
                                                                    color="text"
                                                                    data-test-subj="pagination-button-0"
                                                                    href="#__table_generated-id"
                                                                    isDisabled={true}
                                                                    onClick={[Function]}
                                                                    size="s"
                                                                  >
                                                                    <button
                                                                      aria-controls="__table_generated-id"
                                                                      aria-current={true}
                                                                      aria-label="Page 1 of 1"
                                                                      className="euiButtonEmpty euiButtonEmpty--text euiButtonEmpty--small euiButtonEmpty-isDisabled euiPaginationButton euiPaginationButton-isActive euiPaginationButton--hideOnMobile"
                                                                      data-test-subj="pagination-button-0"
                                                                      disabled={true}
                                                                      onClick={[Function]}
                                                                      type="button"
                                                                    >
                                                                      <EuiButtonContent
                                                                        className="euiButtonEmpty__content"
                                                                        iconSide="left"
                                                                        iconSize="m"
                                                                        textProps={
                                                                          Object {
                                                                            "className": "euiButtonEmpty__text",
                                                                          }
                                                                        }
                                                                      >
                                                                        <span
                                                                          className="euiButtonContent euiButtonEmpty__content"
                                                                        >
                                                                          <span
                                                                            className="euiButtonEmpty__text"
                                                                          >
                                                                            1
                                                                          </span>
                                                                        </span>
                                                                      </EuiButtonContent>
                                                                    </button>
                                                                  </EuiButtonEmpty>
                                                                </EuiI18n>
                                                              </EuiI18n>
                                                            </EuiPaginationButton>
                                                          </li>
                                                        </PaginationButton>
                                                      </ul>
                                                      <EuiI18n
                                                        default="Next page, {page}"
                                                        token="euiPagination.nextPage"
                                                        values={
                                                          Object {
                                                            "page": 2,
                                                          }
                                                        }
                                                      >
                                                        <EuiI18n
                                                          default="Next page"
                                                          token="euiPagination.disabledNextPage"
                                                        >
                                                          <EuiButtonIcon
                                                            aria-label="Next page"
                                                            color="text"
                                                            data-test-subj="pagination-button-next"
                                                            disabled={true}
                                                            iconType="arrowRight"
                                                            onClick={[Function]}
                                                          >
                                                            <button
                                                              aria-label="Next page"
                                                              className="euiButtonIcon euiButtonIcon--text euiButtonIcon--empty euiButtonIcon--xSmall"
                                                              data-test-subj="pagination-button-next"
                                                              disabled={true}
                                                              onClick={[Function]}
                                                              type="button"
                                                            >
                                                              <EuiIcon
                                                                aria-hidden="true"
                                                                className="euiButtonIcon__icon"
                                                                color="inherit"
                                                                size="m"
                                                                type="arrowRight"
                                                              >
                                                                <span
                                                                  aria-hidden="true"
                                                                  className="euiButtonIcon__icon"
                                                                  color="inherit"
                                                                  data-euiicon-type="arrowRight"
                                                                  size="m"
                                                                />
                                                              </EuiIcon>
                                                            </button>
                                                          </EuiButtonIcon>
                                                        </EuiI18n>
                                                      </EuiI18n>
                                                    </nav>
                                                  </EuiPagination>
                                                </div>
                                              </EuiFlexItem>
                                            </div>
                                          </EuiFlexGroup>
                                        </EuiTablePagination>
                                      </div>
                                    </PaginationBar>
                                  </div>
                                </EuiBasicTable>
                              </div>
                            </EuiInMemoryTable>
                          </div>
                        </div>
                      </EuiPanel>
                    </EuiPageContent>
                  </main>
                </EuiPageBody>
              </div>
            </EuiPage>
          </TableListView>
        </DashboardListing>
      </Provider>
    </PseudoLocaleWrapper>
  </IntlProvider>
</I18nProvider>
`;