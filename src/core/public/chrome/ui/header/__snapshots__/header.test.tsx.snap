// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Header handles visibility and lock changes 1`] = `
<Header
  appTitle$={
    BehaviorSubject {
      "_isScalar": false,
      "_value": "test",
      "closed": false,
      "hasError": false,
      "isStopped": false,
      "observers": Array [
        Subscriber {
          "_parentOrParents": null,
          "_subscriptions": Array [
            SubjectSubscription {
              "_parentOrParents": [Circular],
              "_subscriptions": null,
              "closed": false,
              "subject": [Circular],
              "subscriber": [Circular],
            },
          ],
          "closed": false,
          "destination": SafeSubscriber {
            "_complete": undefined,
            "_context": [Circular],
            "_error": undefined,
            "_next": [Function],
            "_parentOrParents": null,
            "_parentSubscriber": [Circular],
            "_subscriptions": null,
            "closed": false,
            "destination": Object {
              "closed": true,
              "complete": [Function],
              "error": [Function],
              "next": [Function],
            },
            "isStopped": false,
            "syncErrorThrowable": false,
            "syncErrorThrown": false,
            "syncErrorValue": null,
          },
          "isStopped": false,
          "syncErrorThrowable": true,
          "syncErrorThrown": false,
          "syncErrorValue": null,
        },
      ],
      "thrownError": null,
    }
  }
  application={
    Object {
      "applications$": BehaviorSubject {
        "_isScalar": false,
        "_value": Map {},
        "closed": false,
        "hasError": false,
        "isStopped": false,
        "observers": Array [],
        "thrownError": null,
      },
      "capabilities": Object {
        "catalogue": Object {},
        "management": Object {},
        "navLinks": Object {},
      },
      "currentActionMenu$": BehaviorSubject {
        "_isScalar": false,
        "_value": undefined,
        "closed": false,
        "hasError": false,
        "isStopped": false,
        "observers": Array [
          Subscriber {
            "_parentOrParents": null,
            "_subscriptions": Array [
              SubjectSubscription {
                "_parentOrParents": [Circular],
                "_subscriptions": null,
                "closed": false,
                "subject": [Circular],
                "subscriber": [Circular],
              },
            ],
            "closed": false,
            "destination": SafeSubscriber {
              "_complete": undefined,
              "_context": [Circular],
              "_error": undefined,
              "_next": [Function],
              "_parentOrParents": null,
              "_parentSubscriber": [Circular],
              "_subscriptions": null,
              "closed": false,
              "destination": Object {
                "closed": true,
                "complete": [Function],
                "error": [Function],
                "next": [Function],
              },
              "isStopped": false,
              "syncErrorThrowable": false,
              "syncErrorThrown": false,
              "syncErrorValue": null,
            },
            "isStopped": false,
            "syncErrorThrowable": true,
            "syncErrorThrown": false,
            "syncErrorValue": null,
          },
        ],
        "thrownError": null,
      },
      "currentAppId$": Observable {
        "_isScalar": false,
        "source": Subject {
          "_isScalar": false,
          "closed": false,
          "hasError": false,
          "isStopped": false,
          "observers": Array [
            Subscriber {
              "_parentOrParents": null,
              "_subscriptions": Array [
                SubjectSubscription {
                  "_parentOrParents": [Circular],
                  "_subscriptions": null,
                  "closed": false,
                  "subject": [Circular],
                  "subscriber": [Circular],
                },
              ],
              "closed": false,
              "destination": SafeSubscriber {
                "_complete": undefined,
                "_context": [Circular],
                "_error": undefined,
                "_next": [Function],
                "_parentOrParents": null,
                "_parentSubscriber": [Circular],
                "_subscriptions": null,
                "closed": false,
                "destination": Object {
                  "closed": true,
                  "complete": [Function],
                  "error": [Function],
                  "next": [Function],
                },
                "isStopped": false,
                "syncErrorThrowable": false,
                "syncErrorThrown": false,
                "syncErrorValue": null,
              },
              "isStopped": false,
              "syncErrorThrowable": true,
              "syncErrorThrown": false,
              "syncErrorValue": null,
            },
          ],
          "thrownError": null,
        },
      },
      "getComponent": [MockFunction],
      "getUrlForApp": [MockFunction],
      "history": Object {
        "action": "PUSH",
        "block": [MockFunction],
        "createHref": [MockFunction],
        "go": [MockFunction],
        "goBack": [MockFunction],
        "goForward": [MockFunction],
        "length": 1,
        "listen": [MockFunction],
        "location": Object {
          "hash": "",
          "key": "",
          "pathname": "/",
          "search": "",
          "state": undefined,
        },
        "push": [MockFunction],
        "replace": [MockFunction],
      },
      "navigateToApp": [MockFunction],
      "navigateToUrl": [MockFunction],
      "registerMountContext": [MockFunction],
    }
  }
  badge$={
    BehaviorSubject {
      "_isScalar": false,
      "_value": undefined,
      "closed": false,
      "hasError": false,
      "isStopped": false,
      "observers": Array [
        Subscriber {
          "_parentOrParents": null,
          "_subscriptions": Array [
            SubjectSubscription {
              "_parentOrParents": [Circular],
              "_subscriptions": null,
              "closed": false,
              "subject": [Circular],
              "subscriber": [Circular],
            },
          ],
          "closed": false,
          "destination": SafeSubscriber {
            "_complete": undefined,
            "_context": [Circular],
            "_error": undefined,
            "_next": [Function],
            "_parentOrParents": null,
            "_parentSubscriber": [Circular],
            "_subscriptions": null,
            "closed": false,
            "destination": Object {
              "closed": true,
              "complete": [Function],
              "error": [Function],
              "next": [Function],
            },
            "isStopped": false,
            "syncErrorThrowable": false,
            "syncErrorThrown": false,
            "syncErrorValue": null,
          },
          "isStopped": false,
          "syncErrorThrowable": true,
          "syncErrorThrown": false,
          "syncErrorValue": null,
        },
      ],
      "thrownError": null,
    }
  }
  basePath={
    BasePath {
      "basePath": "/test",
      "get": [Function],
      "prepend": [Function],
      "remove": [Function],
      "serverBasePath": "/test",
    }
  }
  branding={
    Object {
      "applicationTitle": "OpenSearch Dashboards",
      "darkMode": false,
      "logo": Object {
        "defaultUrl": "/",
      },
      "mark": Object {
        "defaultUrl": "/",
      },
    }
  }
  breadcrumbs$={
    BehaviorSubject {
      "_isScalar": false,
      "_value": Array [
        Object {
          "text": "test",
        },
      ],
      "closed": false,
      "hasError": false,
      "isStopped": false,
      "observers": Array [
        Subscriber {
          "_parentOrParents": null,
          "_subscriptions": Array [
            SubjectSubscription {
              "_parentOrParents": [Circular],
              "_subscriptions": null,
              "closed": false,
              "subject": [Circular],
              "subscriber": [Circular],
            },
          ],
          "closed": false,
          "destination": SafeSubscriber {
            "_complete": undefined,
            "_context": [Circular],
            "_error": undefined,
            "_next": [Function],
            "_parentOrParents": null,
            "_parentSubscriber": [Circular],
            "_subscriptions": null,
            "closed": false,
            "destination": Object {
              "closed": true,
              "complete": [Function],
              "error": [Function],
              "next": [Function],
            },
            "isStopped": false,
            "syncErrorThrowable": false,
            "syncErrorThrown": false,
            "syncErrorValue": null,
          },
          "isStopped": false,
          "syncErrorThrowable": true,
          "syncErrorThrown": false,
          "syncErrorValue": null,
        },
      ],
      "thrownError": null,
    }
  }
  customNavLink$={
    BehaviorSubject {
      "_isScalar": false,
      "_value": Object {
        "baseUrl": "",
        "href": "",
        "id": "cloud-deployment-link",
        "title": "Manage cloud deployment",
      },
      "closed": false,
      "hasError": false,
      "isStopped": false,
      "observers": Array [
        Subscriber {
          "_parentOrParents": null,
          "_subscriptions": Array [
            SubjectSubscription {
              "_parentOrParents": [Circular],
              "_subscriptions": null,
              "closed": false,
              "subject": [Circular],
              "subscriber": [Circular],
            },
          ],
          "closed": false,
          "destination": SafeSubscriber {
            "_complete": undefined,
            "_context": [Circular],
            "_error": undefined,
            "_next": [Function],
            "_parentOrParents": null,
            "_parentSubscriber": [Circular],
            "_subscriptions": null,
            "closed": false,
            "destination": Object {
              "closed": true,
              "complete": [Function],
              "error": [Function],
              "next": [Function],
            },
            "isStopped": false,
            "syncErrorThrowable": false,
            "syncErrorThrown": false,
            "syncErrorValue": null,
          },
          "isStopped": false,
          "syncErrorThrowable": true,
          "syncErrorThrown": false,
          "syncErrorValue": null,
        },
      ],
      "thrownError": null,
    }
  }
  forceAppSwitcherNavigation$={
    BehaviorSubject {
      "_isScalar": false,
      "_value": false,
      "closed": false,
      "hasError": false,
      "isStopped": false,
      "observers": Array [
        Subscriber {
          "_parentOrParents": null,
          "_subscriptions": Array [
            SubjectSubscription {
              "_parentOrParents": [Circular],
              "_subscriptions": null,
              "closed": false,
              "subject": [Circular],
              "subscriber": [Circular],
            },
          ],
          "closed": false,
          "destination": SafeSubscriber {
            "_complete": undefined,
            "_context": [Circular],
            "_error": undefined,
            "_next": [Function],
            "_parentOrParents": null,
            "_parentSubscriber": [Circular],
            "_subscriptions": null,
            "closed": false,
            "destination": Object {
              "closed": true,
              "complete": [Function],
              "error": [Function],
              "next": [Function],
            },
            "isStopped": false,
            "syncErrorThrowable": false,
            "syncErrorThrown": false,
            "syncErrorValue": null,
          },
          "isStopped": false,
          "syncErrorThrowable": true,
          "syncErrorThrown": false,
          "syncErrorValue": null,
        },
        Subscriber {
          "_parentOrParents": null,
          "_subscriptions": Array [
            SubjectSubscription {
              "_parentOrParents": [Circular],
              "_subscriptions": null,
              "closed": false,
              "subject": [Circular],
              "subscriber": [Circular],
            },
          ],
          "closed": false,
          "destination": SafeSubscriber {
            "_complete": undefined,
            "_context": [Circular],
            "_error": undefined,
            "_next": [Function],
            "_parentOrParents": null,
            "_parentSubscriber": [Circular],
            "_subscriptions": null,
            "closed": false,
            "destination": Object {
              "closed": true,
              "complete": [Function],
              "error": [Function],
              "next": [Function],
            },
            "isStopped": false,
            "syncErrorThrowable": false,
            "syncErrorThrown": false,
            "syncErrorValue": null,
          },
          "isStopped": false,
          "syncErrorThrowable": true,
          "syncErrorThrown": false,
          "syncErrorValue": null,
        },
      ],
      "thrownError": null,
    }
  }
  helpExtension$={
    BehaviorSubject {
      "_isScalar": false,
      "_value": undefined,
      "closed": false,
      "hasError": false,
      "isStopped": false,
      "observers": Array [
        InnerSubscriber {
          "_parentOrParents": CombineLatestSubscriber {
            "_parentOrParents": Subscriber {
              "_parentOrParents": null,
              "_subscriptions": Array [
                [Circular],
              ],
              "closed": false,
              "destination": SafeSubscriber {
                "_complete": undefined,
                "_context": [Circular],
                "_error": undefined,
                "_next": [Function],
                "_parentOrParents": null,
                "_parentSubscriber": [Circular],
                "_subscriptions": null,
                "closed": false,
                "destination": Object {
                  "closed": true,
                  "complete": [Function],
                  "error": [Function],
                  "next": [Function],
                },
                "isStopped": false,
                "syncErrorThrowable": false,
                "syncErrorThrown": false,
                "syncErrorValue": null,
              },
              "isStopped": false,
              "syncErrorThrowable": true,
              "syncErrorThrown": false,
              "syncErrorValue": null,
            },
            "_subscriptions": Array [
              [Circular],
              InnerSubscriber {
                "_parentOrParents": [Circular],
                "_subscriptions": Array [
                  SubjectSubscription {
                    "_parentOrParents": [Circular],
                    "_subscriptions": null,
                    "closed": false,
                    "subject": BehaviorSubject {
                      "_isScalar": false,
                      "_value": "",
                      "closed": false,
                      "hasError": false,
                      "isStopped": false,
                      "observers": Array [
                        [Circular],
                      ],
                      "thrownError": null,
                    },
                    "subscriber": [Circular],
                  },
                ],
                "closed": false,
                "destination": Object {
                  "closed": true,
                  "complete": [Function],
                  "error": [Function],
                  "next": [Function],
                },
                "index": 1,
                "isStopped": false,
                "outerIndex": 1,
                "outerValue": undefined,
                "parent": [Circular],
                "syncErrorThrowable": false,
                "syncErrorThrown": false,
                "syncErrorValue": null,
              },
            ],
            "active": 2,
            "closed": false,
            "destination": Subscriber {
              "_parentOrParents": null,
              "_subscriptions": Array [
                [Circular],
              ],
              "closed": false,
              "destination": SafeSubscriber {
                "_complete": undefined,
                "_context": [Circular],
                "_error": undefined,
                "_next": [Function],
                "_parentOrParents": null,
                "_parentSubscriber": [Circular],
                "_subscriptions": null,
                "closed": false,
                "destination": Object {
                  "closed": true,
                  "complete": [Function],
                  "error": [Function],
                  "next": [Function],
                },
                "isStopped": false,
                "syncErrorThrowable": false,
                "syncErrorThrown": false,
                "syncErrorValue": null,
              },
              "isStopped": false,
              "syncErrorThrowable": true,
              "syncErrorThrown": false,
              "syncErrorValue": null,
            },
            "isStopped": true,
            "observables": Array [
              [Circular],
              BehaviorSubject {
                "_isScalar": false,
                "_value": "",
                "closed": false,
                "hasError": false,
                "isStopped": false,
                "observers": Array [
                  InnerSubscriber {
                    "_parentOrParents": [Circular],
                    "_subscriptions": Array [
                      SubjectSubscription {
                        "_parentOrParents": [Circular],
                        "_subscriptions": null,
                        "closed": false,
                        "subject": [Circular],
                        "subscriber": [Circular],
                      },
                    ],
                    "closed": false,
                    "destination": Object {
                      "closed": true,
                      "complete": [Function],
                      "error": [Function],
                      "next": [Function],
                    },
                    "index": 1,
                    "isStopped": false,
                    "outerIndex": 1,
                    "outerValue": undefined,
                    "parent": [Circular],
                    "syncErrorThrowable": false,
                    "syncErrorThrown": false,
                    "syncErrorValue": null,
                  },
                ],
                "thrownError": null,
              },
            ],
            "resultSelector": undefined,
            "syncErrorThrowable": true,
            "syncErrorThrown": false,
            "syncErrorValue": null,
            "toRespond": 0,
            "values": Array [
              undefined,
              "",
            ],
          },
          "_subscriptions": Array [
            SubjectSubscription {
              "_parentOrParents": [Circular],
              "_subscriptions": null,
              "closed": false,
              "subject": [Circular],
              "subscriber": [Circular],
            },
          ],
          "closed": false,
          "destination": Object {
            "closed": true,
            "complete": [Function],
            "error": [Function],
            "next": [Function],
          },
          "index": 1,
          "isStopped": false,
          "outerIndex": 0,
          "outerValue": undefined,
          "parent": CombineLatestSubscriber {
            "_parentOrParents": Subscriber {
              "_parentOrParents": null,
              "_subscriptions": Array [
                [Circular],
              ],
              "closed": false,
              "destination": SafeSubscriber {
                "_complete": undefined,
                "_context": [Circular],
                "_error": undefined,
                "_next": [Function],
                "_parentOrParents": null,
                "_parentSubscriber": [Circular],
                "_subscriptions": null,
                "closed": false,
                "destination": Object {
                  "closed": true,
                  "complete": [Function],
                  "error": [Function],
                  "next": [Function],
                },
                "isStopped": false,
                "syncErrorThrowable": false,
                "syncErrorThrown": false,
                "syncErrorValue": null,
              },
              "isStopped": false,
              "syncErrorThrowable": true,
              "syncErrorThrown": false,
              "syncErrorValue": null,
            },
            "_subscriptions": Array [
              [Circular],
              InnerSubscriber {
                "_parentOrParents": [Circular],
                "_subscriptions": Array [
                  SubjectSubscription {
                    "_parentOrParents": [Circular],
                    "_subscriptions": null,
                    "closed": false,
                    "subject": BehaviorSubject {
                      "_isScalar": false,
                      "_value": "",
                      "closed": false,
                      "hasError": false,
                      "isStopped": false,
                      "observers": Array [
                        [Circular],
                      ],
                      "thrownError": null,
                    },
                    "subscriber": [Circular],
                  },
                ],
                "closed": false,
                "destination": Object {
                  "closed": true,
                  "complete": [Function],
                  "error": [Function],
                  "next": [Function],
                },
                "index": 1,
                "isStopped": false,
                "outerIndex": 1,
                "outerValue": undefined,
                "parent": [Circular],
                "syncErrorThrowable": false,
                "syncErrorThrown": false,
                "syncErrorValue": null,
              },
            ],
            "active": 2,
            "closed": false,
            "destination": Subscriber {
              "_parentOrParents": null,
              "_subscriptions": Array [
                [Circular],
              ],
              "closed": false,
              "destination": SafeSubscriber {
                "_complete": undefined,
                "_context": [Circular],
                "_error": undefined,
                "_next": [Function],
                "_parentOrParents": null,
                "_parentSubscriber": [Circular],
                "_subscriptions": null,
                "closed": false,
                "destination": Object {
                  "closed": true,
                  "complete": [Function],
                  "error": [Function],
                  "next": [Function],
                },
                "isStopped": false,
                "syncErrorThrowable": false,
                "syncErrorThrown": false,
                "syncErrorValue": null,
              },
              "isStopped": false,
              "syncErrorThrowable": true,
              "syncErrorThrown": false,
              "syncErrorValue": null,
            },
            "isStopped": true,
            "observables": Array [
              [Circular],
              BehaviorSubject {
                "_isScalar": false,
                "_value": "",
                "closed": false,
                "hasError": false,
                "isStopped": false,
                "observers": Array [
                  InnerSubscriber {
                    "_parentOrParents": [Circular],
                    "_subscriptions": Array [
                      SubjectSubscription {
                        "_parentOrParents": [Circular],
                        "_subscriptions": null,
                        "closed": false,
                        "subject": [Circular],
                        "subscriber": [Circular],
                      },
                    ],
                    "closed": false,
                    "destination": Object {
                      "closed": true,
                      "complete": [Function],
                      "error": [Function],
                      "next": [Function],
                    },
                    "index": 1,
                    "isStopped": false,
                    "outerIndex": 1,
                    "outerValue": undefined,
                    "parent": [Circular],
                    "syncErrorThrowable": false,
                    "syncErrorThrown": false,
                    "syncErrorValue": null,
                  },
                ],
                "thrownError": null,
              },
            ],
            "resultSelector": undefined,
            "syncErrorThrowable": true,
            "syncErrorThrown": false,
            "syncErrorValue": null,
            "toRespond": 0,
            "values": Array [
              undefined,
              "",
            ],
          },
          "syncErrorThrowable": false,
          "syncErrorThrown": false,
          "syncErrorValue": null,
        },
      ],
      "thrownError": null,
    }
  }
  helpSupportUrl$={
    BehaviorSubject {
      "_isScalar": false,
      "_value": "",
      "closed": false,
      "hasError": false,
      "isStopped": false,
      "observers": Array [
        InnerSubscriber {
          "_parentOrParents": CombineLatestSubscriber {
            "_parentOrParents": Subscriber {
              "_parentOrParents": null,
              "_subscriptions": Array [
                [Circular],
              ],
              "closed": false,
              "destination": SafeSubscriber {
                "_complete": undefined,
                "_context": [Circular],
                "_error": undefined,
                "_next": [Function],
                "_parentOrParents": null,
                "_parentSubscriber": [Circular],
                "_subscriptions": null,
                "closed": false,
                "destination": Object {
                  "closed": true,
                  "complete": [Function],
                  "error": [Function],
                  "next": [Function],
                },
                "isStopped": false,
                "syncErrorThrowable": false,
                "syncErrorThrown": false,
                "syncErrorValue": null,
              },
              "isStopped": false,
              "syncErrorThrowable": true,
              "syncErrorThrown": false,
              "syncErrorValue": null,
            },
            "_subscriptions": Array [
              InnerSubscriber {
                "_parentOrParents": [Circular],
                "_subscriptions": Array [
                  SubjectSubscription {
                    "_parentOrParents": [Circular],
                    "_subscriptions": null,
                    "closed": false,
                    "subject": BehaviorSubject {
                      "_isScalar": false,
                      "_value": undefined,
                      "closed": false,
                      "hasError": false,
                      "isStopped": false,
                      "observers": Array [
                        [Circular],
                      ],
                      "thrownError": null,
                    },
                    "subscriber": [Circular],
                  },
                ],
                "closed": false,
                "destination": Object {
                  "closed": true,
                  "complete": [Function],
                  "error": [Function],
                  "next": [Function],
                },
                "index": 1,
                "isStopped": false,
                "outerIndex": 0,
                "outerValue": undefined,
                "parent": [Circular],
                "syncErrorThrowable": false,
                "syncErrorThrown": false,
                "syncErrorValue": null,
              },
              [Circular],
            ],
            "active": 2,
            "closed": false,
            "destination": Subscriber {
              "_parentOrParents": null,
              "_subscriptions": Array [
                [Circular],
              ],
              "closed": false,
              "destination": SafeSubscriber {
                "_complete": undefined,
                "_context": [Circular],
                "_error": undefined,
                "_next": [Function],
                "_parentOrParents": null,
                "_parentSubscriber": [Circular],
                "_subscriptions": null,
                "closed": false,
                "destination": Object {
                  "closed": true,
                  "complete": [Function],
                  "error": [Function],
                  "next": [Function],
                },
                "isStopped": false,
                "syncErrorThrowable": false,
                "syncErrorThrown": false,
                "syncErrorValue": null,
              },
              "isStopped": false,
              "syncErrorThrowable": true,
              "syncErrorThrown": false,
              "syncErrorValue": null,
            },
            "isStopped": true,
            "observables": Array [
              BehaviorSubject {
                "_isScalar": false,
                "_value": undefined,
                "closed": false,
                "hasError": false,
                "isStopped": false,
                "observers": Array [
                  InnerSubscriber {
                    "_parentOrParents": [Circular],
                    "_subscriptions": Array [
                      SubjectSubscription {
                        "_parentOrParents": [Circular],
                        "_subscriptions": null,
                        "closed": false,
                        "subject": [Circular],
                        "subscriber": [Circular],
                      },
                    ],
                    "closed": false,
                    "destination": Object {
                      "closed": true,
                      "complete": [Function],
                      "error": [Function],
                      "next": [Function],
                    },
                    "index": 1,
                    "isStopped": false,
                    "outerIndex": 0,
                    "outerValue": undefined,
                    "parent": [Circular],
                    "syncErrorThrowable": false,
                    "syncErrorThrown": false,
                    "syncErrorValue": null,
                  },
                ],
                "thrownError": null,
              },
              [Circular],
            ],
            "resultSelector": undefined,
            "syncErrorThrowable": true,
            "syncErrorThrown": false,
            "syncErrorValue": null,
            "toRespond": 0,
            "values": Array [
              undefined,
              "",
            ],
          },
          "_subscriptions": Array [
            SubjectSubscription {
              "_parentOrParents": [Circular],
              "_subscriptions": null,
              "closed": false,
              "subject": [Circular],
              "subscriber": [Circular],
            },
          ],
          "closed": false,
          "destination": Object {
            "closed": true,
            "complete": [Function],
            "error": [Function],
            "next": [Function],
          },
          "index": 1,
          "isStopped": false,
          "outerIndex": 1,
          "outerValue": undefined,
          "parent": CombineLatestSubscriber {
            "_parentOrParents": Subscriber {
              "_parentOrParents": null,
              "_subscriptions": Array [
                [Circular],
              ],
              "closed": false,
              "destination": SafeSubscriber {
                "_complete": undefined,
                "_context": [Circular],
                "_error": undefined,
                "_next": [Function],
                "_parentOrParents": null,
                "_parentSubscriber": [Circular],
                "_subscriptions": null,
                "closed": false,
                "destination": Object {
                  "closed": true,
                  "complete": [Function],
                  "error": [Function],
                  "next": [Function],
                },
                "isStopped": false,
                "syncErrorThrowable": false,
                "syncErrorThrown": false,
                "syncErrorValue": null,
              },
              "isStopped": false,
              "syncErrorThrowable": true,
              "syncErrorThrown": false,
              "syncErrorValue": null,
            },
            "_subscriptions": Array [
              InnerSubscriber {
                "_parentOrParents": [Circular],
                "_subscriptions": Array [
                  SubjectSubscription {
                    "_parentOrParents": [Circular],
                    "_subscriptions": null,
                    "closed": false,
                    "subject": BehaviorSubject {
                      "_isScalar": false,
                      "_value": undefined,
                      "closed": false,
                      "hasError": false,
                      "isStopped": false,
                      "observers": Array [
                        [Circular],
                      ],
                      "thrownError": null,
                    },
                    "subscriber": [Circular],
                  },
                ],
                "closed": false,
                "destination": Object {
                  "closed": true,
                  "complete": [Function],
                  "error": [Function],
                  "next": [Function],
                },
                "index": 1,
                "isStopped": false,
                "outerIndex": 0,
                "outerValue": undefined,
                "parent": [Circular],
                "syncErrorThrowable": false,
                "syncErrorThrown": false,
                "syncErrorValue": null,
              },
              [Circular],
            ],
            "active": 2,
            "closed": false,
            "destination": Subscriber {
              "_parentOrParents": null,
              "_subscriptions": Array [
                [Circular],
              ],
              "closed": false,
              "destination": SafeSubscriber {
                "_complete": undefined,
                "_context": [Circular],
                "_error": undefined,
                "_next": [Function],
                "_parentOrParents": null,
                "_parentSubscriber": [Circular],
                "_subscriptions": null,
                "closed": false,
                "destination": Object {
                  "closed": true,
                  "complete": [Function],
                  "error": [Function],
                  "next": [Function],
                },
                "isStopped": false,
                "syncErrorThrowable": false,
                "syncErrorThrown": false,
                "syncErrorValue": null,
              },
              "isStopped": false,
              "syncErrorThrowable": true,
              "syncErrorThrown": false,
              "syncErrorValue": null,
            },
            "isStopped": true,
            "observables": Array [
              BehaviorSubject {
                "_isScalar": false,
                "_value": undefined,
                "closed": false,
                "hasError": false,
                "isStopped": false,
                "observers": Array [
                  InnerSubscriber {
                    "_parentOrParents": [Circular],
                    "_subscriptions": Array [
                      SubjectSubscription {
                        "_parentOrParents": [Circular],
                        "_subscriptions": null,
                        "closed": false,
                        "subject": [Circular],
                        "subscriber": [Circular],
                      },
                    ],
                    "closed": false,
                    "destination": Object {
                      "closed": true,
                      "complete": [Function],
                      "error": [Function],
                      "next": [Function],
                    },
                    "index": 1,
                    "isStopped": false,
                    "outerIndex": 0,
                    "outerValue": undefined,
                    "parent": [Circular],
                    "syncErrorThrowable": false,
                    "syncErrorThrown": false,
                    "syncErrorValue": null,
                  },
                ],
                "thrownError": null,
              },
              [Circular],
            ],
            "resultSelector": undefined,
            "syncErrorThrowable": true,
            "syncErrorThrown": false,
            "syncErrorValue": null,
            "toRespond": 0,
            "values": Array [
              undefined,
              "",
            ],
          },
          "syncErrorThrowable": false,
          "syncErrorThrown": false,
          "syncErrorValue": null,
        },
      ],
      "thrownError": null,
    }
  }
  homeHref="/"
  intl={
    Object {
      "defaultFormats": Object {},
      "defaultLocale": "en",
      "formatDate": [Function],
      "formatHTMLMessage": [Function],
      "formatMessage": [Function],
      "formatNumber": [Function],
      "formatPlural": [Function],
      "formatRelative": [Function],
      "formatTime": [Function],
      "formats": Object {
        "date": Object {
          "full": Object {
            "day": "numeric",
            "month": "long",
            "weekday": "long",
            "year": "numeric",
          },
          "long": Object {
            "day": "numeric",
            "month": "long",
            "year": "numeric",
          },
          "medium": Object {
            "day": "numeric",
            "month": "short",
            "year": "numeric",
          },
          "short": Object {
            "day": "numeric",
            "month": "numeric",
            "year": "2-digit",
          },
        },
        "number": Object {
          "currency": Object {
            "style": "currency",
          },
          "percent": Object {
            "style": "percent",
          },
        },
        "relative": Object {
          "days": Object {
            "units": "day",
          },
          "hours": Object {
            "units": "hour",
          },
          "minutes": Object {
            "units": "minute",
          },
          "months": Object {
            "units": "month",
          },
          "seconds": Object {
            "units": "second",
          },
          "years": Object {
            "units": "year",
          },
        },
        "time": Object {
          "full": Object {
            "hour": "numeric",
            "minute": "numeric",
            "second": "numeric",
            "timeZoneName": "short",
          },
          "long": Object {
            "hour": "numeric",
            "minute": "numeric",
            "second": "numeric",
            "timeZoneName": "short",
          },
          "medium": Object {
            "hour": "numeric",
            "minute": "numeric",
            "second": "numeric",
          },
          "short": Object {
            "hour": "numeric",
            "minute": "numeric",
          },
        },
      },
      "formatters": Object {
        "getDateTimeFormat": [Function],
        "getMessageFormat": [Function],
        "getNumberFormat": [Function],
        "getPluralFormat": [Function],
        "getRelativeFormat": [Function],
      },
      "locale": "en",
      "messages": Object {},
      "now": [Function],
      "onError": [Function],
      "textComponent": Symbol(react.fragment),
      "timeZone": null,
    }
  }
  isLocked$={
    BehaviorSubject {
      "_isScalar": false,
      "_value": true,
      "closed": false,
      "hasError": false,
      "isStopped": false,
      "observers": Array [
        Subscriber {
          "_parentOrParents": null,
          "_subscriptions": Array [
            SubjectSubscription {
              "_parentOrParents": [Circular],
              "_subscriptions": null,
              "closed": false,
              "subject": [Circular],
              "subscriber": [Circular],
            },
          ],
          "closed": false,
          "destination": SafeSubscriber {
            "_complete": undefined,
            "_context": [Circular],
            "_error": undefined,
            "_next": [Function],
            "_parentOrParents": null,
            "_parentSubscriber": [Circular],
            "_subscriptions": null,
            "closed": false,
            "destination": Object {
              "closed": true,
              "complete": [Function],
              "error": [Function],
              "next": [Function],
            },
            "isStopped": false,
            "syncErrorThrowable": false,
            "syncErrorThrown": false,
            "syncErrorValue": null,
          },
          "isStopped": false,
          "syncErrorThrowable": true,
          "syncErrorThrown": false,
          "syncErrorValue": null,
        },
      ],
      "thrownError": null,
    }
  }
  isVisible$={
    BehaviorSubject {
      "_isScalar": false,
      "_value": true,
      "closed": false,
      "hasError": false,
      "isStopped": false,
      "observers": Array [
        Subscriber {
          "_parentOrParents": null,
          "_subscriptions": Array [
            SubjectSubscription {
              "_parentOrParents": [Circular],
              "_subscriptions": null,
              "closed": false,
              "subject": [Circular],
              "subscriber": [Circular],
            },
          ],
          "closed": false,
          "destination": SafeSubscriber {
            "_complete": undefined,
            "_context": [Circular],
            "_error": undefined,
            "_next": [Function],
            "_parentOrParents": null,
            "_parentSubscriber": [Circular],
            "_subscriptions": null,
            "closed": false,
            "destination": Object {
              "closed": true,
              "complete": [Function],
              "error": [Function],
              "next": [Function],
            },
            "isStopped": false,
            "syncErrorThrowable": false,
            "syncErrorThrown": false,
            "syncErrorValue": null,
          },
          "isStopped": false,
          "syncErrorThrowable": true,
          "syncErrorThrown": false,
          "syncErrorValue": null,
        },
      ],
      "thrownError": null,
    }
  }
  loadingCount$={
    BehaviorSubject {
      "_isScalar": false,
      "_value": 0,
      "closed": false,
      "hasError": false,
      "isStopped": false,
      "observers": Array [
        Subscriber {
          "_parentOrParents": null,
          "_subscriptions": Array [
            SubjectSubscription {
              "_parentOrParents": [Circular],
              "_subscriptions": null,
              "closed": false,
              "subject": [Circular],
              "subscriber": [Circular],
            },
          ],
          "closed": false,
          "destination": SafeSubscriber {
            "_complete": undefined,
            "_context": [Circular],
            "_error": undefined,
            "_next": [Function],
            "_parentOrParents": null,
            "_parentSubscriber": [Circular],
            "_subscriptions": null,
            "closed": false,
            "destination": Object {
              "closed": true,
              "complete": [Function],
              "error": [Function],
              "next": [Function],
            },
            "isStopped": false,
            "syncErrorThrowable": false,
            "syncErrorThrown": false,
            "syncErrorValue": null,
          },
          "isStopped": false,
          "syncErrorThrowable": true,
          "syncErrorThrown": false,
          "syncErrorValue": null,
        },
        Subscriber {
          "_parentOrParents": null,
          "_subscriptions": Array [
            SubjectSubscription {
              "_parentOrParents": [Circular],
              "_subscriptions": null,
              "closed": false,
              "subject": [Circular],
              "subscriber": [Circular],
            },
          ],
          "closed": false,
          "destination": SafeSubscriber {
            "_complete": undefined,
            "_context": [Circular],
            "_error": undefined,
            "_next": [Function],
            "_parentOrParents": null,
            "_parentSubscriber": [Circular],
            "_subscriptions": null,
            "closed": false,
            "destination": Object {
              "closed": true,
              "complete": [Function],
              "error": [Function],
              "next": [Function],
            },
            "isStopped": false,
            "syncErrorThrowable": false,
            "syncErrorThrown": false,
            "syncErrorValue": null,
          },
          "isStopped": false,
          "syncErrorThrowable": true,
          "syncErrorThrown": false,
          "syncErrorValue": null,
        },
      ],
      "thrownError": null,
    }
  }
  navControlsCenter$={
    BehaviorSubject {
      "_isScalar": false,
      "_value": Array [],
      "closed": false,
      "hasError": false,
      "isStopped": false,
      "observers": Array [
        Subscriber {
          "_parentOrParents": null,
          "_subscriptions": Array [
            SubjectSubscription {
              "_parentOrParents": [Circular],
              "_subscriptions": null,
              "closed": false,
              "subject": [Circular],
              "subscriber": [Circular],
            },
          ],
          "closed": false,
          "destination": SafeSubscriber {
            "_complete": undefined,
            "_context": [Circular],
            "_error": undefined,
            "_next": [Function],
            "_parentOrParents": null,
            "_parentSubscriber": [Circular],
            "_subscriptions": null,
            "closed": false,
            "destination": Object {
              "closed": true,
              "complete": [Function],
              "error": [Function],
              "next": [Function],
            },
            "isStopped": false,
            "syncErrorThrowable": false,
            "syncErrorThrown": false,
            "syncErrorValue": null,
          },
          "isStopped": false,
          "syncErrorThrowable": true,
          "syncErrorThrown": false,
          "syncErrorValue": null,
        },
      ],
      "thrownError": null,
    }
  }
  navControlsExpandedCenter$={
    BehaviorSubject {
      "_isScalar": false,
      "_value": Array [],
      "closed": false,
      "hasError": false,
      "isStopped": false,
      "observers": Array [
        Subscriber {
          "_parentOrParents": null,
          "_subscriptions": Array [
            SubjectSubscription {
              "_parentOrParents": [Circular],
              "_subscriptions": null,
              "closed": false,
              "subject": [Circular],
              "subscriber": [Circular],
            },
          ],
          "closed": false,
          "destination": SafeSubscriber {
            "_complete": undefined,
            "_context": [Circular],
            "_error": undefined,
            "_next": [Function],
            "_parentOrParents": null,
            "_parentSubscriber": [Circular],
            "_subscriptions": null,
            "closed": false,
            "destination": Object {
              "closed": true,
              "complete": [Function],
              "error": [Function],
              "next": [Function],
            },
            "isStopped": false,
            "syncErrorThrowable": false,
            "syncErrorThrown": false,
            "syncErrorValue": null,
          },
          "isStopped": false,
          "syncErrorThrowable": true,
          "syncErrorThrown": false,
          "syncErrorValue": null,
        },
      ],
      "thrownError": null,
    }
  }
  navControlsExpandedRight$={
    BehaviorSubject {
      "_isScalar": false,
      "_value": Array [],
      "closed": false,
      "hasError": false,
      "isStopped": false,
      "observers": Array [
        Subscriber {
          "_parentOrParents": null,
          "_subscriptions": Array [
            SubjectSubscription {
              "_parentOrParents": [Circular],
              "_subscriptions": null,
              "closed": false,
              "subject": [Circular],
              "subscriber": [Circular],
            },
          ],
          "closed": false,
          "destination": SafeSubscriber {
            "_complete": undefined,
            "_context": [Circular],
            "_error": undefined,
            "_next": [Function],
            "_parentOrParents": null,
            "_parentSubscriber": [Circular],
            "_subscriptions": null,
            "closed": false,
            "destination": Object {
              "closed": true,
              "complete": [Function],
              "error": [Function],
              "next": [Function],
            },
            "isStopped": false,
            "syncErrorThrowable": false,
            "syncErrorThrown": false,
            "syncErrorValue": null,
          },
          "isStopped": false,
          "syncErrorThrowable": true,
          "syncErrorThrown": false,
          "syncErrorValue": null,
        },
      ],
      "thrownError": null,
    }
  }
  navControlsLeft$={
    BehaviorSubject {
      "_isScalar": false,
      "_value": Array [],
      "closed": false,
      "hasError": false,
      "isStopped": false,
      "observers": Array [
        Subscriber {
          "_parentOrParents": null,
          "_subscriptions": Array [
            SubjectSubscription {
              "_parentOrParents": [Circular],
              "_subscriptions": null,
              "closed": false,
              "subject": [Circular],
              "subscriber": [Circular],
            },
          ],
          "closed": false,
          "destination": SafeSubscriber {
            "_complete": undefined,
            "_context": [Circular],
            "_error": undefined,
            "_next": [Function],
            "_parentOrParents": null,
            "_parentSubscriber": [Circular],
            "_subscriptions": null,
            "closed": false,
            "destination": Object {
              "closed": true,
              "complete": [Function],
              "error": [Function],
              "next": [Function],
            },
            "isStopped": false,
            "syncErrorThrowable": false,
            "syncErrorThrown": false,
            "syncErrorValue": null,
          },
          "isStopped": false,
          "syncErrorThrowable": true,
          "syncErrorThrown": false,
          "syncErrorValue": null,
        },
      ],
      "thrownError": null,
    }
  }
  navControlsRight$={
    BehaviorSubject {
      "_isScalar": false,
      "_value": Array [],
      "closed": false,
      "hasError": false,
      "isStopped": false,
      "observers": Array [
        Subscriber {
          "_parentOrParents": null,
          "_subscriptions": Array [
            SubjectSubscription {
              "_parentOrParents": [Circular],
              "_subscriptions": null,
              "closed": false,
              "subject": [Circular],
              "subscriber": [Circular],
            },
          ],
          "closed": false,
          "destination": SafeSubscriber {
            "_complete": undefined,
            "_context": [Circular],
            "_error": undefined,
            "_next": [Function],
            "_parentOrParents": null,
            "_parentSubscriber": [Circular],
            "_subscriptions": null,
            "closed": false,
            "destination": Object {
              "closed": true,
              "complete": [Function],
              "error": [Function],
              "next": [Function],
            },
            "isStopped": false,
            "syncErrorThrowable": false,
            "syncErrorThrown": false,
            "syncErrorValue": null,
          },
          "isStopped": false,
          "syncErrorThrowable": true,
          "syncErrorThrown": false,
          "syncErrorValue": null,
        },
      ],
      "thrownError": null,
    }
  }
  navLinks$={
    BehaviorSubject {
      "_isScalar": false,
      "_value": Array [
        Object {
          "baseUrl": "",
          "href": "",
          "id": "opensearchDashboards",
          "title": "opensearchDashboards",
        },
      ],
      "closed": false,
      "hasError": false,
      "isStopped": false,
      "observers": Array [
        Subscriber {
          "_parentOrParents": null,
          "_subscriptions": Array [
            SubjectSubscription {
              "_parentOrParents": [Circular],
              "_subscriptions": null,
              "closed": false,
              "subject": [Circular],
              "subscriber": [Circular],
            },
          ],
          "closed": false,
          "destination": SafeSubscriber {
            "_complete": undefined,
            "_context": [Circular],
            "_error": undefined,
            "_next": [Function],
            "_parentOrParents": null,
            "_parentSubscriber": [Circular],
            "_subscriptions": null,
            "closed": false,
            "destination": Object {
              "closed": true,
              "complete": [Function],
              "error": [Function],
              "next": [Function],
            },
            "isStopped": false,
            "syncErrorThrowable": false,
            "syncErrorThrown": false,
            "syncErrorValue": null,
          },
          "isStopped": false,
          "syncErrorThrowable": true,
          "syncErrorThrown": false,
          "syncErrorValue": null,
        },
        Subscriber {
          "_parentOrParents": null,
          "_subscriptions": Array [
            SubjectSubscription {
              "_parentOrParents": [Circular],
              "_subscriptions": null,
              "closed": false,
              "subject": [Circular],
              "subscriber": [Circular],
            },
          ],
          "closed": false,
          "destination": SafeSubscriber {
            "_complete": undefined,
            "_context": [Circular],
            "_error": undefined,
            "_next": [Function],
            "_parentOrParents": null,
            "_parentSubscriber": [Circular],
            "_subscriptions": null,
            "closed": false,
            "destination": Object {
              "closed": true,
              "complete": [Function],
              "error": [Function],
              "next": [Function],
            },
            "isStopped": false,
            "syncErrorThrowable": false,
            "syncErrorThrown": false,
            "syncErrorValue": null,
          },
          "isStopped": false,
          "syncErrorThrowable": true,
          "syncErrorThrown": false,
          "syncErrorValue": null,
        },
        Subscriber {
          "_parentOrParents": null,
          "_subscriptions": Array [
            SubjectSubscription {
              "_parentOrParents": [Circular],
              "_subscriptions": null,
              "closed": false,
              "subject": [Circular],
              "subscriber": [Circular],
            },
          ],
          "closed": false,
          "destination": SafeSubscriber {
            "_complete": undefined,
            "_context": [Circular],
            "_error": undefined,
            "_next": [Function],
            "_parentOrParents": null,
            "_parentSubscriber": [Circular],
            "_subscriptions": null,
            "closed": false,
            "destination": Object {
              "closed": true,
              "complete": [Function],
              "error": [Function],
              "next": [Function],
            },
            "isStopped": false,
            "syncErrorThrowable": false,
            "syncErrorThrown": false,
            "syncErrorValue": null,
          },
          "isStopped": false,
          "syncErrorThrowable": true,
          "syncErrorThrown": false,
          "syncErrorValue": null,
        },
      ],
      "thrownError": null,
    }
  }
  onIsLockedUpdate={[Function]}
  opensearchDashboardsDocLink="/docs"
  opensearchDashboardsVersion="1.0.0"
  recentlyAccessed$={
    BehaviorSubject {
      "_isScalar": false,
      "_value": Array [
        Object {
          "id": "dashboard",
          "label": "dashboard",
          "link": "",
        },
      ],
      "closed": false,
      "hasError": false,
      "isStopped": false,
      "observers": Array [
        Subscriber {
          "_parentOrParents": null,
          "_subscriptions": Array [
            SubjectSubscription {
              "_parentOrParents": [Circular],
              "_subscriptions": null,
              "closed": false,
              "subject": [Circular],
              "subscriber": [Circular],
            },
          ],
          "closed": false,
          "destination": SafeSubscriber {
            "_complete": undefined,
            "_context": [Circular],
            "_error": undefined,
            "_next": [Function],
            "_parentOrParents": null,
            "_parentSubscriber": [Circular],
            "_subscriptions": null,
            "closed": false,
            "destination": Object {
              "closed": true,
              "complete": [Function],
              "error": [Function],
              "next": [Function],
            },
            "isStopped": false,
            "syncErrorThrowable": false,
            "syncErrorThrown": false,
            "syncErrorValue": null,
          },
          "isStopped": false,
          "syncErrorThrowable": true,
          "syncErrorThrown": false,
          "syncErrorValue": null,
        },
      ],
      "thrownError": null,
    }
  }
>
  <header
    className="hide-for-sharing headerGlobalNav"
    data-test-subj="headerGlobalNav"
  >
    <div
      id="globalHeaderBars"
    >
      <EuiHeader
        className="expandedHeader"
        position="fixed"
        sections={
          Array [
            Object {
              "borders": "none",
              "items": Array [
                <HeaderLogo
                  branding={
                    Object {
                      "applicationTitle": "OpenSearch Dashboards",
                      "darkMode": false,
                      "logo": Object {
                        "defaultUrl": "/",
                      },
                      "mark": Object {
                        "defaultUrl": "/",
                      },
                    }
                  }
                  forceNavigation$={
                    BehaviorSubject {
                      "_isScalar": false,
                      "_value": false,
                      "closed": false,
                      "hasError": false,
                      "isStopped": false,
                      "observers": Array [
                        Subscriber {
                          "_parentOrParents": null,
                          "_subscriptions": Array [
                            SubjectSubscription {
                              "_parentOrParents": [Circular],
                              "_subscriptions": null,
                              "closed": false,
                              "subject": [Circular],
                              "subscriber": [Circular],
                            },
                          ],
                          "closed": false,
                          "destination": SafeSubscriber {
                            "_complete": undefined,
                            "_context": [Circular],
                            "_error": undefined,
                            "_next": [Function],
                            "_parentOrParents": null,
                            "_parentSubscriber": [Circular],
                            "_subscriptions": null,
                            "closed": false,
                            "destination": Object {
                              "closed": true,
                              "complete": [Function],
                              "error": [Function],
                              "next": [Function],
                            },
                            "isStopped": false,
                            "syncErrorThrowable": false,
                            "syncErrorThrown": false,
                            "syncErrorValue": null,
                          },
                          "isStopped": false,
                          "syncErrorThrowable": true,
                          "syncErrorThrown": false,
                          "syncErrorValue": null,
                        },
                        Subscriber {
                          "_parentOrParents": null,
                          "_subscriptions": Array [
                            SubjectSubscription {
                              "_parentOrParents": [Circular],
                              "_subscriptions": null,
                              "closed": false,
                              "subject": [Circular],
                              "subscriber": [Circular],
                            },
                          ],
                          "closed": false,
                          "destination": SafeSubscriber {
                            "_complete": undefined,
                            "_context": [Circular],
                            "_error": undefined,
                            "_next": [Function],
                            "_parentOrParents": null,
                            "_parentSubscriber": [Circular],
                            "_subscriptions": null,
                            "closed": false,
                            "destination": Object {
                              "closed": true,
                              "complete": [Function],
                              "error": [Function],
                              "next": [Function],
                            },
                            "isStopped": false,
                            "syncErrorThrowable": false,
                            "syncErrorThrown": false,
                            "syncErrorValue": null,
                          },
                          "isStopped": false,
                          "syncErrorThrowable": true,
                          "syncErrorThrown": false,
                          "syncErrorValue": null,
                        },
                      ],
                      "thrownError": null,
                    }
                  }
                  href="/"
                  navLinks$={
                    BehaviorSubject {
                      "_isScalar": false,
                      "_value": Array [
                        Object {
                          "baseUrl": "",
                          "href": "",
                          "id": "opensearchDashboards",
                          "title": "opensearchDashboards",
                        },
                      ],
                      "closed": false,
                      "hasError": false,
                      "isStopped": false,
                      "observers": Array [
                        Subscriber {
                          "_parentOrParents": null,
                          "_subscriptions": Array [
                            SubjectSubscription {
                              "_parentOrParents": [Circular],
                              "_subscriptions": null,
                              "closed": false,
                              "subject": [Circular],
                              "subscriber": [Circular],
                            },
                          ],
                          "closed": false,
                          "destination": SafeSubscriber {
                            "_complete": undefined,
                            "_context": [Circular],
                            "_error": undefined,
                            "_next": [Function],
                            "_parentOrParents": null,
                            "_parentSubscriber": [Circular],
                            "_subscriptions": null,
                            "closed": false,
                            "destination": Object {
                              "closed": true,
                              "complete": [Function],
                              "error": [Function],
                              "next": [Function],
                            },
                            "isStopped": false,
                            "syncErrorThrowable": false,
                            "syncErrorThrown": false,
                            "syncErrorValue": null,
                          },
                          "isStopped": false,
                          "syncErrorThrowable": true,
                          "syncErrorThrown": false,
                          "syncErrorValue": null,
                        },
                        Subscriber {
                          "_parentOrParents": null,
                          "_subscriptions": Array [
                            SubjectSubscription {
                              "_parentOrParents": [Circular],
                              "_subscriptions": null,
                              "closed": false,
                              "subject": [Circular],
                              "subscriber": [Circular],
                            },
                          ],
                          "closed": false,
                          "destination": SafeSubscriber {
                            "_complete": undefined,
                            "_context": [Circular],
                            "_error": undefined,
                            "_next": [Function],
                            "_parentOrParents": null,
                            "_parentSubscriber": [Circular],
                            "_subscriptions": null,
                            "closed": false,
                            "destination": Object {
                              "closed": true,
                              "complete": [Function],
                              "error": [Function],
                              "next": [Function],
                            },
                            "isStopped": false,
                            "syncErrorThrowable": false,
                            "syncErrorThrown": false,
                            "syncErrorValue": null,
                          },
                          "isStopped": false,
                          "syncErrorThrowable": true,
                          "syncErrorThrown": false,
                          "syncErrorValue": null,
                        },
                        Subscriber {
                          "_parentOrParents": null,
                          "_subscriptions": Array [
                            SubjectSubscription {
                              "_parentOrParents": [Circular],
                              "_subscriptions": null,
                              "closed": false,
                              "subject": [Circular],
                              "subscriber": [Circular],
                            },
                          ],
                          "closed": false,
                          "destination": SafeSubscriber {
                            "_complete": undefined,
                            "_context": [Circular],
                            "_error": undefined,
                            "_next": [Function],
                            "_parentOrParents": null,
                            "_parentSubscriber": [Circular],
                            "_subscriptions": null,
                            "closed": false,
                            "destination": Object {
                              "closed": true,
                              "complete": [Function],
                              "error": [Function],
                              "next": [Function],
                            },
                            "isStopped": false,
                            "syncErrorThrowable": false,
                            "syncErrorThrown": false,
                            "syncErrorValue": null,
                          },
                          "isStopped": false,
                          "syncErrorThrowable": true,
                          "syncErrorThrown": false,
                          "syncErrorValue": null,
                        },
                      ],
                      "thrownError": null,
                    }
                  }
                  navigateToApp={[MockFunction]}
                />,
              ],
            },
            Object {
              "borders": "none",
              "items": Array [
                <EuiShowFor
                  sizes={
                    Array [
                      "m",
                      "l",
                      "xl",
                    ]
                  }
                >
                  <HeaderNavControls
                    navControls$={
                      BehaviorSubject {
                        "_isScalar": false,
                        "_value": Array [],
                        "closed": false,
                        "hasError": false,
                        "isStopped": false,
                        "observers": Array [
                          Subscriber {
                            "_parentOrParents": null,
                            "_subscriptions": Array [
                              SubjectSubscription {
                                "_parentOrParents": [Circular],
                                "_subscriptions": null,
                                "closed": false,
                                "subject": [Circular],
                                "subscriber": [Circular],
                              },
                            ],
                            "closed": false,
                            "destination": SafeSubscriber {
                              "_complete": undefined,
                              "_context": [Circular],
                              "_error": undefined,
                              "_next": [Function],
                              "_parentOrParents": null,
                              "_parentSubscriber": [Circular],
                              "_subscriptions": null,
                              "closed": false,
                              "destination": Object {
                                "closed": true,
                                "complete": [Function],
                                "error": [Function],
                                "next": [Function],
                              },
                              "isStopped": false,
                              "syncErrorThrowable": false,
                              "syncErrorThrown": false,
                              "syncErrorValue": null,
                            },
                            "isStopped": false,
                            "syncErrorThrowable": true,
                            "syncErrorThrown": false,
                            "syncErrorValue": null,
                          },
                        ],
                        "thrownError": null,
                      }
                    }
                  />
                </EuiShowFor>,
              ],
            },
            Object {
              "borders": "none",
              "items": Array [
                <EuiHideFor
                  sizes={
                    Array [
                      "m",
                      "l",
                      "xl",
                    ]
                  }
                >
                  <HeaderNavControls
                    navControls$={
                      BehaviorSubject {
                        "_isScalar": false,
                        "_value": Array [],
                        "closed": false,
                        "hasError": false,
                        "isStopped": false,
                        "observers": Array [
                          Subscriber {
                            "_parentOrParents": null,
                            "_subscriptions": Array [
                              SubjectSubscription {
                                "_parentOrParents": [Circular],
                                "_subscriptions": null,
                                "closed": false,
                                "subject": [Circular],
                                "subscriber": [Circular],
                              },
                            ],
                            "closed": false,
                            "destination": SafeSubscriber {
                              "_complete": undefined,
                              "_context": [Circular],
                              "_error": undefined,
                              "_next": [Function],
                              "_parentOrParents": null,
                              "_parentSubscriber": [Circular],
                              "_subscriptions": null,
                              "closed": false,
                              "destination": Object {
                                "closed": true,
                                "complete": [Function],
                                "error": [Function],
                                "next": [Function],
                              },
                              "isStopped": false,
                              "syncErrorThrowable": false,
                              "syncErrorThrown": false,
                              "syncErrorValue": null,
                            },
                            "isStopped": false,
                            "syncErrorThrowable": true,
                            "syncErrorThrown": false,
                            "syncErrorValue": null,
                          },
                        ],
                        "thrownError": null,
                      }
                    }
                  />
                </EuiHideFor>,
                <HeaderNavControls
                  navControls$={
                    BehaviorSubject {
                      "_isScalar": false,
                      "_value": Array [],
                      "closed": false,
                      "hasError": false,
                      "isStopped": false,
                      "observers": Array [
                        Subscriber {
                          "_parentOrParents": null,
                          "_subscriptions": Array [
                            SubjectSubscription {
                              "_parentOrParents": [Circular],
                              "_subscriptions": null,
                              "closed": false,
                              "subject": [Circular],
                              "subscriber": [Circular],
                            },
                          ],
                          "closed": false,
                          "destination": SafeSubscriber {
                            "_complete": undefined,
                            "_context": [Circular],
                            "_error": undefined,
                            "_next": [Function],
                            "_parentOrParents": null,
                            "_parentSubscriber": [Circular],
                            "_subscriptions": null,
                            "closed": false,
                            "destination": Object {
                              "closed": true,
                              "complete": [Function],
                              "error": [Function],
                              "next": [Function],
                            },
                            "isStopped": false,
                            "syncErrorThrowable": false,
                            "syncErrorThrown": false,
                            "syncErrorValue": null,
                          },
                          "isStopped": false,
                          "syncErrorThrowable": true,
                          "syncErrorThrown": false,
                          "syncErrorValue": null,
                        },
                      ],
                      "thrownError": null,
                    }
                  }
                />,
              ],
            },
          ]
        }
        theme="dark"
      >
        <div
          className="euiHeader euiHeader--dark euiHeader--fixed expandedHeader"
        >
          <EuiHeaderSection
            key="items-0"
          >
            <div
              className="euiHeaderSection euiHeaderSection--dontGrow euiHeaderSection--left"
            >
              <EuiHeaderSectionItem
                border="none"
                key="0"
              >
                <div
                  className="euiHeaderSectionItem"
                >
                  <HeaderLogo
                    branding={
                      Object {
                        "applicationTitle": "OpenSearch Dashboards",
                        "darkMode": false,
                        "logo": Object {
                          "defaultUrl": "/",
                        },
                        "mark": Object {
                          "defaultUrl": "/",
                        },
                      }
                    }
                    forceNavigation$={
                      BehaviorSubject {
                        "_isScalar": false,
                        "_value": false,
                        "closed": false,
                        "hasError": false,
                        "isStopped": false,
                        "observers": Array [
                          Subscriber {
                            "_parentOrParents": null,
                            "_subscriptions": Array [
                              SubjectSubscription {
                                "_parentOrParents": [Circular],
                                "_subscriptions": null,
                                "closed": false,
                                "subject": [Circular],
                                "subscriber": [Circular],
                              },
                            ],
                            "closed": false,
                            "destination": SafeSubscriber {
                              "_complete": undefined,
                              "_context": [Circular],
                              "_error": undefined,
                              "_next": [Function],
                              "_parentOrParents": null,
                              "_parentSubscriber": [Circular],
                              "_subscriptions": null,
                              "closed": false,
                              "destination": Object {
                                "closed": true,
                                "complete": [Function],
                                "error": [Function],
                                "next": [Function],
                              },
                              "isStopped": false,
                              "syncErrorThrowable": false,
                              "syncErrorThrown": false,
                              "syncErrorValue": null,
                            },
                            "isStopped": false,
                            "syncErrorThrowable": true,
                            "syncErrorThrown": false,
                            "syncErrorValue": null,
                          },
                          Subscriber {
                            "_parentOrParents": null,
                            "_subscriptions": Array [
                              SubjectSubscription {
                                "_parentOrParents": [Circular],
                                "_subscriptions": null,
                                "closed": false,
                                "subject": [Circular],
                                "subscriber": [Circular],
                              },
                            ],
                            "closed": false,
                            "destination": SafeSubscriber {
                              "_complete": undefined,
                              "_context": [Circular],
                              "_error": undefined,
                              "_next": [Function],
                              "_parentOrParents": null,
                              "_parentSubscriber": [Circular],
                              "_subscriptions": null,
                              "closed": false,
                              "destination": Object {
                                "closed": true,
                                "complete": [Function],
                                "error": [Function],
                                "next": [Function],
                              },
                              "isStopped": false,
                              "syncErrorThrowable": false,
                              "syncErrorThrown": false,
                              "syncErrorValue": null,
                            },
                            "isStopped": false,
                            "syncErrorThrowable": true,
                            "syncErrorThrown": false,
                            "syncErrorValue": null,
                          },
                        ],
                        "thrownError": null,
                      }
                    }
                    href="/"
                    navLinks$={
                      BehaviorSubject {
                        "_isScalar": false,
                        "_value": Array [
                          Object {
                            "baseUrl": "",
                            "href": "",
                            "id": "opensearchDashboards",
                            "title": "opensearchDashboards",
                          },
                        ],
                        "closed": false,
                        "hasError": false,
                        "isStopped": false,
                        "observers": Array [
                          Subscriber {
                            "_parentOrParents": null,
                            "_subscriptions": Array [
                              SubjectSubscription {
                                "_parentOrParents": [Circular],
                                "_subscriptions": null,
                                "closed": false,
                                "subject": [Circular],
                                "subscriber": [Circular],
                              },
                            ],
                            "closed": false,
                            "destination": SafeSubscriber {
                              "_complete": undefined,
                              "_context": [Circular],
                              "_error": undefined,
                              "_next": [Function],
                              "_parentOrParents": null,
                              "_parentSubscriber": [Circular],
                              "_subscriptions": null,
                              "closed": false,
                              "destination": Object {
                                "closed": true,
                                "complete": [Function],
                                "error": [Function],
                                "next": [Function],
                              },
                              "isStopped": false,
                              "syncErrorThrowable": false,
                              "syncErrorThrown": false,
                              "syncErrorValue": null,
                            },
                            "isStopped": false,
                            "syncErrorThrowable": true,
                            "syncErrorThrown": false,
                            "syncErrorValue": null,
                          },
                          Subscriber {
                            "_parentOrParents": null,
                            "_subscriptions": Array [
                              SubjectSubscription {
                                "_parentOrParents": [Circular],
                                "_subscriptions": null,
                                "closed": false,
                                "subject": [Circular],
                                "subscriber": [Circular],
                              },
                            ],
                            "closed": false,
                            "destination": SafeSubscriber {
                              "_complete": undefined,
                              "_context": [Circular],
                              "_error": undefined,
                              "_next": [Function],
                              "_parentOrParents": null,
                              "_parentSubscriber": [Circular],
                              "_subscriptions": null,
                              "closed": false,
                              "destination": Object {
                                "closed": true,
                                "complete": [Function],
                                "error": [Function],
                                "next": [Function],
                              },
                              "isStopped": false,
                              "syncErrorThrowable": false,
                              "syncErrorThrown": false,
                              "syncErrorValue": null,
                            },
                            "isStopped": false,
                            "syncErrorThrowable": true,
                            "syncErrorThrown": false,
                            "syncErrorValue": null,
                          },
                          Subscriber {
                            "_parentOrParents": null,
                            "_subscriptions": Array [
                              SubjectSubscription {
                                "_parentOrParents": [Circular],
                                "_subscriptions": null,
                                "closed": false,
                                "subject": [Circular],
                                "subscriber": [Circular],
                              },
                            ],
                            "closed": false,
                            "destination": SafeSubscriber {
                              "_complete": undefined,
                              "_context": [Circular],
                              "_error": undefined,
                              "_next": [Function],
                              "_parentOrParents": null,
                              "_parentSubscriber": [Circular],
                              "_subscriptions": null,
                              "closed": false,
                              "destination": Object {
                                "closed": true,
                                "complete": [Function],
                                "error": [Function],
                                "next": [Function],
                              },
                              "isStopped": false,
                              "syncErrorThrowable": false,
                              "syncErrorThrown": false,
                              "syncErrorValue": null,
                            },
                            "isStopped": false,
                            "syncErrorThrowable": true,
                            "syncErrorThrown": false,
                            "syncErrorValue": null,
                          },
                        ],
                        "thrownError": null,
                      }
                    }
                    navigateToApp={[MockFunction]}
                  >
                    <a
                      aria-label="Go to home page"
                      className="logoContainer"
                      data-test-subj="logo"
                      href="/"
                      onClick={[Function]}
                    >
                      <img
                        alt="OpenSearch Dashboards logo"
                        className="logoImage"
                        data-test-image-url="/"
                        data-test-subj="customLogo"
                        loading="lazy"
                        src="/"
                      />
                    </a>
                  </HeaderLogo>
                </div>
              </EuiHeaderSectionItem>
            </div>
          </EuiHeaderSection>
          <EuiHeaderSection
            key="items-1"
          >
            <div
              className="euiHeaderSection euiHeaderSection--dontGrow euiHeaderSection--left"
            >
              <EuiHeaderSectionItem
                border="none"
                key="0"
              >
                <div
                  className="euiHeaderSectionItem"
                >
                  <EuiShowFor
                    sizes={
                      Array [
                        "m",
                        "l",
                        "xl",
                      ]
                    }
                  >
                    <HeaderNavControls
                      navControls$={
                        BehaviorSubject {
                          "_isScalar": false,
                          "_value": Array [],
                          "closed": false,
                          "hasError": false,
                          "isStopped": false,
                          "observers": Array [
                            Subscriber {
                              "_parentOrParents": null,
                              "_subscriptions": Array [
                                SubjectSubscription {
                                  "_parentOrParents": [Circular],
                                  "_subscriptions": null,
                                  "closed": false,
                                  "subject": [Circular],
                                  "subscriber": [Circular],
                                },
                              ],
                              "closed": false,
                              "destination": SafeSubscriber {
                                "_complete": undefined,
                                "_context": [Circular],
                                "_error": undefined,
                                "_next": [Function],
                                "_parentOrParents": null,
                                "_parentSubscriber": [Circular],
                                "_subscriptions": null,
                                "closed": false,
                                "destination": Object {
                                  "closed": true,
                                  "complete": [Function],
                                  "error": [Function],
                                  "next": [Function],
                                },
                                "isStopped": false,
                                "syncErrorThrowable": false,
                                "syncErrorThrown": false,
                                "syncErrorValue": null,
                              },
                              "isStopped": false,
                              "syncErrorThrowable": true,
                              "syncErrorThrown": false,
                              "syncErrorValue": null,
                            },
                          ],
                          "thrownError": null,
                        }
                      }
                    />
                  </EuiShowFor>
                </div>
              </EuiHeaderSectionItem>
            </div>
          </EuiHeaderSection>
          <EuiHeaderSection
            key="items-2"
          >
            <div
              className="euiHeaderSection euiHeaderSection--dontGrow euiHeaderSection--left"
            >
              <EuiHeaderSectionItem
                border="none"
                key="0"
              >
                <div
                  className="euiHeaderSectionItem"
                >
                  <EuiHideFor
                    sizes={
                      Array [
                        "m",
                        "l",
                        "xl",
                      ]
                    }
                  />
                </div>
              </EuiHeaderSectionItem>
              <EuiHeaderSectionItem
                border="none"
                key="1"
              >
                <div
                  className="euiHeaderSectionItem"
                >
                  <HeaderNavControls
                    navControls$={
                      BehaviorSubject {
                        "_isScalar": false,
                        "_value": Array [],
                        "closed": false,
                        "hasError": false,
                        "isStopped": false,
                        "observers": Array [
                          Subscriber {
                            "_parentOrParents": null,
                            "_subscriptions": Array [
                              SubjectSubscription {
                                "_parentOrParents": [Circular],
                                "_subscriptions": null,
                                "closed": false,
                                "subject": [Circular],
                                "subscriber": [Circular],
                              },
                            ],
                            "closed": false,
                            "destination": SafeSubscriber {
                              "_complete": undefined,
                              "_context": [Circular],
                              "_error": undefined,
                              "_next": [Function],
                              "_parentOrParents": null,
                              "_parentSubscriber": [Circular],
                              "_subscriptions": null,
                              "closed": false,
                              "destination": Object {
                                "closed": true,
                                "complete": [Function],
                                "error": [Function],
                                "next": [Function],
                              },
                              "isStopped": false,
                              "syncErrorThrowable": false,
                              "syncErrorThrown": false,
                              "syncErrorValue": null,
                            },
                            "isStopped": false,
                            "syncErrorThrowable": true,
                            "syncErrorThrown": false,
                            "syncErrorValue": null,
                          },
                        ],
                        "thrownError": null,
                      }
                    }
                  />
                </div>
              </EuiHeaderSectionItem>
            </div>
          </EuiHeaderSection>
        </div>
      </EuiHeader>
      <EuiHeader
        className="primaryHeader"
        position="fixed"
      >
        <div
          className="euiHeader euiHeader--default euiHeader--fixed primaryHeader"
        >
          <EuiHeaderSection
            grow={false}
          >
            <div
              className="euiHeaderSection euiHeaderSection--dontGrow euiHeaderSection--left"
            >
              <EuiHeaderSectionItem
                border="right"
                className="header__toggleNavButtonSection"
              >
                <div
                  className="euiHeaderSectionItem euiHeaderSectionItem--borderRight header__toggleNavButtonSection"
                >
                  <EuiHeaderSectionItemButton
                    aria-controls="mockId"
                    aria-expanded={false}
                    aria-label="Toggle primary navigation"
                    aria-pressed={false}
                    data-test-subj="toggleNavButton"
                    onClick={[Function]}
                  >
                    <EuiButtonEmpty
                      aria-controls="mockId"
                      aria-expanded={false}
                      aria-label="Toggle primary navigation"
                      aria-pressed={false}
                      buttonRef={
                        Object {
                          "current": <button
                            aria-controls="mockId"
                            aria-expanded="false"
                            aria-label="Toggle primary navigation"
                            aria-pressed="false"
                            class="euiButtonEmpty euiButtonEmpty--text euiHeaderSectionItemButton"
                            data-test-subj="toggleNavButton"
                            type="button"
                          >
                            <span
                              class="euiButtonContent euiButtonEmpty__content"
                            >
                              <span
                                class="euiButtonEmpty__text"
                              >
                                <span
                                  class="euiHeaderSectionItemButton__content"
                                >
                                  <span
                                    data-euiicon-type="menu"
                                  />
                                </span>
                              </span>
                            </span>
                          </button>,
                        }
                      }
                      className="euiHeaderSectionItemButton"
                      color="text"
                      data-test-subj="toggleNavButton"
                      onClick={[Function]}
                    >
                      <button
                        aria-controls="mockId"
                        aria-expanded={false}
                        aria-label="Toggle primary navigation"
                        aria-pressed={false}
                        className="euiButtonEmpty euiButtonEmpty--text euiHeaderSectionItemButton"
                        data-test-subj="toggleNavButton"
                        disabled={false}
                        onClick={[Function]}
                        type="button"
                      >
                        <EuiButtonContent
                          className="euiButtonEmpty__content"
                          iconSide="left"
                          iconSize="m"
                          textProps={
                            Object {
                              "className": "euiButtonEmpty__text",
                            }
                          }
                        >
                          <span
                            className="euiButtonContent euiButtonEmpty__content"
                          >
                            <span
                              className="euiButtonEmpty__text"
                            >
                              <span
                                className="euiHeaderSectionItemButton__content"
                              >
                                <EuiIcon
                                  size="m"
                                  type="menu"
                                >
                                  <span
                                    data-euiicon-type="menu"
                                    size="m"
                                  />
                                </EuiIcon>
                              </span>
                            </span>
                          </span>
                        </EuiButtonContent>
                      </button>
                    </EuiButtonEmpty>
                  </EuiHeaderSectionItemButton>
                </div>
              </EuiHeaderSectionItem>
              <EuiHeaderSectionItem
                border="right"
              >
                <div
                  className="euiHeaderSectionItem euiHeaderSectionItem--borderRight"
                >
                  <HeaderNavControls
                    navControls$={
                      BehaviorSubject {
                        "_isScalar": false,
                        "_value": Array [],
                        "closed": false,
                        "hasError": false,
                        "isStopped": false,
                        "observers": Array [
                          Subscriber {
                            "_parentOrParents": null,
                            "_subscriptions": Array [
                              SubjectSubscription {
                                "_parentOrParents": [Circular],
                                "_subscriptions": null,
                                "closed": false,
                                "subject": [Circular],
                                "subscriber": [Circular],
                              },
                            ],
                            "closed": false,
                            "destination": SafeSubscriber {
                              "_complete": undefined,
                              "_context": [Circular],
                              "_error": undefined,
                              "_next": [Function],
                              "_parentOrParents": null,
                              "_parentSubscriber": [Circular],
                              "_subscriptions": null,
                              "closed": false,
                              "destination": Object {
                                "closed": true,
                                "complete": [Function],
                                "error": [Function],
                                "next": [Function],
                              },
                              "isStopped": false,
                              "syncErrorThrowable": false,
                              "syncErrorThrown": false,
                              "syncErrorValue": null,
                            },
                            "isStopped": false,
                            "syncErrorThrowable": true,
                            "syncErrorThrown": false,
                            "syncErrorValue": null,
                          },
                        ],
                        "thrownError": null,
                      }
                    }
                    side="left"
                  />
                </div>
              </EuiHeaderSectionItem>
              <EuiHeaderSectionItem
                border="right"
              >
                <div
                  className="euiHeaderSectionItem euiHeaderSectionItem--borderRight"
                >
                  <HomeLoader
                    branding={
                      Object {
                        "applicationTitle": "OpenSearch Dashboards",
                        "darkMode": false,
                        "logo": Object {
                          "defaultUrl": "/",
                        },
                        "mark": Object {
                          "defaultUrl": "/",
                        },
                      }
                    }
                    forceNavigation$={
                      BehaviorSubject {
                        "_isScalar": false,
                        "_value": false,
                        "closed": false,
                        "hasError": false,
                        "isStopped": false,
                        "observers": Array [
                          Subscriber {
                            "_parentOrParents": null,
                            "_subscriptions": Array [
                              SubjectSubscription {
                                "_parentOrParents": [Circular],
                                "_subscriptions": null,
                                "closed": false,
                                "subject": [Circular],
                                "subscriber": [Circular],
                              },
                            ],
                            "closed": false,
                            "destination": SafeSubscriber {
                              "_complete": undefined,
                              "_context": [Circular],
                              "_error": undefined,
                              "_next": [Function],
                              "_parentOrParents": null,
                              "_parentSubscriber": [Circular],
                              "_subscriptions": null,
                              "closed": false,
                              "destination": Object {
                                "closed": true,
                                "complete": [Function],
                                "error": [Function],
                                "next": [Function],
                              },
                              "isStopped": false,
                              "syncErrorThrowable": false,
                              "syncErrorThrown": false,
                              "syncErrorValue": null,
                            },
                            "isStopped": false,
                            "syncErrorThrowable": true,
                            "syncErrorThrown": false,
                            "syncErrorValue": null,
                          },
                          Subscriber {
                            "_parentOrParents": null,
                            "_subscriptions": Array [
                              SubjectSubscription {
                                "_parentOrParents": [Circular],
                                "_subscriptions": null,
                                "closed": false,
                                "subject": [Circular],
                                "subscriber": [Circular],
                              },
                            ],
                            "closed": false,
                            "destination": SafeSubscriber {
                              "_complete": undefined,
                              "_context": [Circular],
                              "_error": undefined,
                              "_next": [Function],
                              "_parentOrParents": null,
                              "_parentSubscriber": [Circular],
                              "_subscriptions": null,
                              "closed": false,
                              "destination": Object {
                                "closed": true,
                                "complete": [Function],
                                "error": [Function],
                                "next": [Function],
                              },
                              "isStopped": false,
                              "syncErrorThrowable": false,
                              "syncErrorThrown": false,
                              "syncErrorValue": null,
                            },
                            "isStopped": false,
                            "syncErrorThrowable": true,
                            "syncErrorThrown": false,
                            "syncErrorValue": null,
                          },
                        ],
                        "thrownError": null,
                      }
                    }
                    href="/"
                    loadingCount$={
                      BehaviorSubject {
                        "_isScalar": false,
                        "_value": 0,
                        "closed": false,
                        "hasError": false,
                        "isStopped": false,
                        "observers": Array [
                          Subscriber {
                            "_parentOrParents": null,
                            "_subscriptions": Array [
                              SubjectSubscription {
                                "_parentOrParents": [Circular],
                                "_subscriptions": null,
                                "closed": false,
                                "subject": [Circular],
                                "subscriber": [Circular],
                              },
                            ],
                            "closed": false,
                            "destination": SafeSubscriber {
                              "_complete": undefined,
                              "_context": [Circular],
                              "_error": undefined,
                              "_next": [Function],
                              "_parentOrParents": null,
                              "_parentSubscriber": [Circular],
                              "_subscriptions": null,
                              "closed": false,
                              "destination": Object {
                                "closed": true,
                                "complete": [Function],
                                "error": [Function],
                                "next": [Function],
                              },
                              "isStopped": false,
                              "syncErrorThrowable": false,
                              "syncErrorThrown": false,
                              "syncErrorValue": null,
                            },
                            "isStopped": false,
                            "syncErrorThrowable": true,
                            "syncErrorThrown": false,
                            "syncErrorValue": null,
                          },
                          Subscriber {
                            "_parentOrParents": null,
                            "_subscriptions": Array [
                              SubjectSubscription {
                                "_parentOrParents": [Circular],
                                "_subscriptions": null,
                                "closed": false,
                                "subject": [Circular],
                                "subscriber": [Circular],
                              },
                            ],
                            "closed": false,
                            "destination": SafeSubscriber {
                              "_complete": undefined,
                              "_context": [Circular],
                              "_error": undefined,
                              "_next": [Function],
                              "_parentOrParents": null,
                              "_parentSubscriber": [Circular],
                              "_subscriptions": null,
                              "closed": false,
                              "destination": Object {
                                "closed": true,
                                "complete": [Function],
                                "error": [Function],
                                "next": [Function],
                              },
                              "isStopped": false,
                              "syncErrorThrowable": false,
                              "syncErrorThrown": false,
                              "syncErrorValue": null,
                            },
                            "isStopped": false,
                            "syncErrorThrowable": true,
                            "syncErrorThrown": false,
                            "syncErrorValue": null,
                          },
                        ],
                        "thrownError": null,
                      }
                    }
                    navLinks$={
                      BehaviorSubject {
                        "_isScalar": false,
                        "_value": Array [
                          Object {
                            "baseUrl": "",
                            "href": "",
                            "id": "opensearchDashboards",
                            "title": "opensearchDashboards",
                          },
                        ],
                        "closed": false,
                        "hasError": false,
                        "isStopped": false,
                        "observers": Array [
                          Subscriber {
                            "_parentOrParents": null,
                            "_subscriptions": Array [
                              SubjectSubscription {
                                "_parentOrParents": [Circular],
                                "_subscriptions": null,
                                "closed": false,
                                "subject": [Circular],
                                "subscriber": [Circular],
                              },
                            ],
                            "closed": false,
                            "destination": SafeSubscriber {
                              "_complete": undefined,
                              "_context": [Circular],
                              "_error": undefined,
                              "_next": [Function],
                              "_parentOrParents": null,
                              "_parentSubscriber": [Circular],
                              "_subscriptions": null,
                              "closed": false,
                              "destination": Object {
                                "closed": true,
                                "complete": [Function],
                                "error": [Function],
                                "next": [Function],
                              },
                              "isStopped": false,
                              "syncErrorThrowable": false,
                              "syncErrorThrown": false,
                              "syncErrorValue": null,
                            },
                            "isStopped": false,
                            "syncErrorThrowable": true,
                            "syncErrorThrown": false,
                            "syncErrorValue": null,
                          },
                          Subscriber {
                            "_parentOrParents": null,
                            "_subscriptions": Array [
                              SubjectSubscription {
                                "_parentOrParents": [Circular],
                                "_subscriptions": null,
                                "closed": false,
                                "subject": [Circular],
                                "subscriber": [Circular],
                              },
                            ],
                            "closed": false,
                            "destination": SafeSubscriber {
                              "_complete": undefined,
                              "_context": [Circular],
                              "_error": undefined,
                              "_next": [Function],
                              "_parentOrParents": null,
                              "_parentSubscriber": [Circular],
                              "_subscriptions": null,
                              "closed": false,
                              "destination": Object {
                                "closed": true,
                                "complete": [Function],
                                "error": [Function],
                                "next": [Function],
                              },
                              "isStopped": false,
                              "syncErrorThrowable": false,
                              "syncErrorThrown": false,
                              "syncErrorValue": null,
                            },
                            "isStopped": false,
                            "syncErrorThrowable": true,
                            "syncErrorThrown": false,
                            "syncErrorValue": null,
                          },
                          Subscriber {
                            "_parentOrParents": null,
                            "_subscriptions": Array [
                              SubjectSubscription {
                                "_parentOrParents": [Circular],
                                "_subscriptions": null,
                                "closed": false,
                                "subject": [Circular],
                                "subscriber": [Circular],
                              },
                            ],
                            "closed": false,
                            "destination": SafeSubscriber {
                              "_complete": undefined,
                              "_context": [Circular],
                              "_error": undefined,
                              "_next": [Function],
                              "_parentOrParents": null,
                              "_parentSubscriber": [Circular],
                              "_subscriptions": null,
                              "closed": false,
                              "destination": Object {
                                "closed": true,
                                "complete": [Function],
                                "error": [Function],
                                "next": [Function],
                              },
                              "isStopped": false,
                              "syncErrorThrowable": false,
                              "syncErrorThrown": false,
                              "syncErrorValue": null,
                            },
                            "isStopped": false,
                            "syncErrorThrowable": true,
                            "syncErrorThrown": false,
                            "syncErrorValue": null,
                          },
                        ],
                        "thrownError": null,
                      }
                    }
                    navigateToApp={[MockFunction]}
                  >
                    <EuiHeaderSectionItemButton
                      aria-label="Go to home page"
                      className="header__homeLoaderNavButton"
                      data-test-subj="homeLoader"
                      href="/"
                      onClick={[Function]}
                      title="Go to home page"
                    >
                      <EuiButtonEmpty
                        aria-label="Go to home page"
                        buttonRef={
                          Object {
                            "current": <a
                              aria-label="Go to home page"
                              class="euiButtonEmpty euiButtonEmpty--text euiHeaderSectionItemButton header__homeLoaderNavButton"
                              data-test-subj="homeLoader"
                              href="/"
                              rel="noreferrer"
                              title="Go to home page"
                            >
                              <span
                                class="euiButtonContent euiButtonEmpty__content"
                              >
                                <span
                                  class="euiButtonEmpty__text"
                                >
                                  <span
                                    class="euiHeaderSectionItemButton__content"
                                  >
                                    <div
                                      class="homeIconContainer"
                                    >
                                      <span
                                        class="logoImage"
                                        data-euiicon-type="/"
                                        data-test-image-url="/"
                                        data-test-subj="customMark"
                                        title="OpenSearch Dashboards home"
                                      />
                                    </div>
                                    <div
                                      class="loaderContainer"
                                    >
                                      <span
                                        aria-hidden="true"
                                        aria-label="Loading content"
                                        class="euiLoadingSpinner euiLoadingSpinner--medium osdLoadingIndicator-hidden"
                                        data-test-subj="globalLoadingIndicator-hidden"
                                      />
                                    </div>
                                  </span>
                                </span>
                              </span>
                            </a>,
                          }
                        }
                        className="euiHeaderSectionItemButton header__homeLoaderNavButton"
                        color="text"
                        data-test-subj="homeLoader"
                        href="/"
                        onClick={[Function]}
                        title="Go to home page"
                      >
                        <a
                          aria-label="Go to home page"
                          className="euiButtonEmpty euiButtonEmpty--text euiHeaderSectionItemButton header__homeLoaderNavButton"
                          data-test-subj="homeLoader"
                          href="/"
                          onClick={[Function]}
                          rel="noreferrer"
                          title="Go to home page"
                        >
                          <EuiButtonContent
                            className="euiButtonEmpty__content"
                            iconSide="left"
                            iconSize="m"
                            textProps={
                              Object {
                                "className": "euiButtonEmpty__text",
                              }
                            }
                          >
                            <span
                              className="euiButtonContent euiButtonEmpty__content"
                            >
                              <span
                                className="euiButtonEmpty__text"
                              >
                                <span
                                  className="euiHeaderSectionItemButton__content"
                                >
                                  <div
                                    className="homeIconContainer"
                                  >
                                    <HomeIcon
                                      applicationTitle="OpenSearch Dashboards"
                                      darkMode={false}
                                      logo={
                                        Object {
                                          "defaultUrl": "/",
                                        }
                                      }
                                      mark={
                                        Object {
                                          "defaultUrl": "/",
                                        }
                                      }
                                    >
                                      <EuiIcon
                                        className="logoImage"
                                        data-test-image-url="/"
                                        data-test-subj="customMark"
                                        size="l"
                                        title="OpenSearch Dashboards home"
                                        type="/"
                                      >
                                        <span
                                          className="logoImage"
                                          data-euiicon-type="/"
                                          data-test-image-url="/"
                                          data-test-subj="customMark"
                                          size="l"
                                          title="OpenSearch Dashboards home"
                                        />
                                      </EuiIcon>
                                    </HomeIcon>
                                  </div>
                                  <div
                                    className="loaderContainer"
                                  >
                                    <LoadingIndicator
                                      loadingCount$={
                                        BehaviorSubject {
                                          "_isScalar": false,
                                          "_value": 0,
                                          "closed": false,
                                          "hasError": false,
                                          "isStopped": false,
                                          "observers": Array [
                                            Subscriber {
                                              "_parentOrParents": null,
                                              "_subscriptions": Array [
                                                SubjectSubscription {
                                                  "_parentOrParents": [Circular],
                                                  "_subscriptions": null,
                                                  "closed": false,
                                                  "subject": [Circular],
                                                  "subscriber": [Circular],
                                                },
                                              ],
                                              "closed": false,
                                              "destination": SafeSubscriber {
                                                "_complete": undefined,
                                                "_context": [Circular],
                                                "_error": undefined,
                                                "_next": [Function],
                                                "_parentOrParents": null,
                                                "_parentSubscriber": [Circular],
                                                "_subscriptions": null,
                                                "closed": false,
                                                "destination": Object {
                                                  "closed": true,
                                                  "complete": [Function],
                                                  "error": [Function],
                                                  "next": [Function],
                                                },
                                                "isStopped": false,
                                                "syncErrorThrowable": false,
                                                "syncErrorThrown": false,
                                                "syncErrorValue": null,
                                              },
                                              "isStopped": false,
                                              "syncErrorThrowable": true,
                                              "syncErrorThrown": false,
                                              "syncErrorValue": null,
                                            },
                                            Subscriber {
                                              "_parentOrParents": null,
                                              "_subscriptions": Array [
                                                SubjectSubscription {
                                                  "_parentOrParents": [Circular],
                                                  "_subscriptions": null,
                                                  "closed": false,
                                                  "subject": [Circular],
                                                  "subscriber": [Circular],
                                                },
                                              ],
                                              "closed": false,
                                              "destination": SafeSubscriber {
                                                "_complete": undefined,
                                                "_context": [Circular],
                                                "_error": undefined,
                                                "_next": [Function],
                                                "_parentOrParents": null,
                                                "_parentSubscriber": [Circular],
                                                "_subscriptions": null,
                                                "closed": false,
                                                "destination": Object {
                                                  "closed": true,
                                                  "complete": [Function],
                                                  "error": [Function],
                                                  "next": [Function],
                                                },
                                                "isStopped": false,
                                                "syncErrorThrowable": false,
                                                "syncErrorThrown": false,
                                                "syncErrorValue": null,
                                              },
                                              "isStopped": false,
                                              "syncErrorThrowable": true,
                                              "syncErrorThrown": false,
                                              "syncErrorValue": null,
                                            },
                                          ],
                                          "thrownError": null,
                                        }
                                      }
                                      showAsBar={false}
                                    >
                                      <EuiLoadingSpinner
                                        aria-hidden={true}
                                        aria-label="Loading content"
                                        className="osdLoadingIndicator-hidden"
                                        data-test-subj="globalLoadingIndicator-hidden"
                                      >
                                        <span
                                          aria-hidden={true}
                                          aria-label="Loading content"
                                          className="euiLoadingSpinner euiLoadingSpinner--medium osdLoadingIndicator-hidden"
                                          data-test-subj="globalLoadingIndicator-hidden"
                                        />
                                      </EuiLoadingSpinner>
                                    </LoadingIndicator>
                                  </div>
                                </span>
                              </span>
                            </span>
                          </EuiButtonContent>
                        </a>
                      </EuiButtonEmpty>
                    </EuiHeaderSectionItemButton>
                  </HomeLoader>
                </div>
              </EuiHeaderSectionItem>
            </div>
          </EuiHeaderSection>
          <HeaderBreadcrumbs
            appTitle$={
              BehaviorSubject {
                "_isScalar": false,
                "_value": "test",
                "closed": false,
                "hasError": false,
                "isStopped": false,
                "observers": Array [
                  Subscriber {
                    "_parentOrParents": null,
                    "_subscriptions": Array [
                      SubjectSubscription {
                        "_parentOrParents": [Circular],
                        "_subscriptions": null,
                        "closed": false,
                        "subject": [Circular],
                        "subscriber": [Circular],
                      },
                    ],
                    "closed": false,
                    "destination": SafeSubscriber {
                      "_complete": undefined,
                      "_context": [Circular],
                      "_error": undefined,
                      "_next": [Function],
                      "_parentOrParents": null,
                      "_parentSubscriber": [Circular],
                      "_subscriptions": null,
                      "closed": false,
                      "destination": Object {
                        "closed": true,
                        "complete": [Function],
                        "error": [Function],
                        "next": [Function],
                      },
                      "isStopped": false,
                      "syncErrorThrowable": false,
                      "syncErrorThrown": false,
                      "syncErrorValue": null,
                    },
                    "isStopped": false,
                    "syncErrorThrowable": true,
                    "syncErrorThrown": false,
                    "syncErrorValue": null,
                  },
                ],
                "thrownError": null,
              }
            }
            breadcrumbs$={
              BehaviorSubject {
                "_isScalar": false,
                "_value": Array [
                  Object {
                    "text": "test",
                  },
                ],
                "closed": false,
                "hasError": false,
                "isStopped": false,
                "observers": Array [
                  Subscriber {
                    "_parentOrParents": null,
                    "_subscriptions": Array [
                      SubjectSubscription {
                        "_parentOrParents": [Circular],
                        "_subscriptions": null,
                        "closed": false,
                        "subject": [Circular],
                        "subscriber": [Circular],
                      },
                    ],
                    "closed": false,
                    "destination": SafeSubscriber {
                      "_complete": undefined,
                      "_context": [Circular],
                      "_error": undefined,
                      "_next": [Function],
                      "_parentOrParents": null,
                      "_parentSubscriber": [Circular],
                      "_subscriptions": null,
                      "closed": false,
                      "destination": Object {
                        "closed": true,
                        "complete": [Function],
                        "error": [Function],
                        "next": [Function],
                      },
                      "isStopped": false,
                      "syncErrorThrowable": false,
                      "syncErrorThrown": false,
                      "syncErrorValue": null,
                    },
                    "isStopped": false,
                    "syncErrorThrowable": true,
                    "syncErrorThrown": false,
                    "syncErrorValue": null,
                  },
                ],
                "thrownError": null,
              }
            }
            isDarkMode={false}
          >
            <EuiHeaderBreadcrumbs
              breadcrumbs={
                Array [
                  Object {
                    "className": "osdBreadcrumbs",
                    "data-test-subj": "breadcrumb first last",
                    "text": "test",
                  },
                ]
              }
              className="osdHeaderBreadcrumbs"
              data-test-subj="breadcrumbs"
              max={10}
            >
              <EuiBreadcrumbs
                breadcrumbs={
                  Array [
                    Object {
                      "className": "osdBreadcrumbs",
                      "data-test-subj": "breadcrumb first last",
                      "text": "test",
                    },
                  ]
                }
                className="euiHeaderBreadcrumbs osdHeaderBreadcrumbs"
                data-test-subj="breadcrumbs"
                max={10}
                truncate={true}
              >
                <nav
                  aria-label="breadcrumb"
                  className="euiBreadcrumbs euiHeaderBreadcrumbs osdHeaderBreadcrumbs euiBreadcrumbs--truncate"
                  data-test-subj="breadcrumbs"
                >
                  <EuiInnerText>
                    <span
                      aria-current="page"
                      className="euiBreadcrumb osdBreadcrumbs euiBreadcrumb--last"
                      data-test-subj="breadcrumb first last"
                      title="test"
                    >
                      test
                    </span>
                  </EuiInnerText>
                </nav>
              </EuiBreadcrumbs>
            </EuiHeaderBreadcrumbs>
          </HeaderBreadcrumbs>
          <EuiHeaderSectionItem
            border="none"
          >
            <div
              className="euiHeaderSectionItem"
            >
              <HeaderBadge
                badge$={
                  BehaviorSubject {
                    "_isScalar": false,
                    "_value": undefined,
                    "closed": false,
                    "hasError": false,
                    "isStopped": false,
                    "observers": Array [
                      Subscriber {
                        "_parentOrParents": null,
                        "_subscriptions": Array [
                          SubjectSubscription {
                            "_parentOrParents": [Circular],
                            "_subscriptions": null,
                            "closed": false,
                            "subject": [Circular],
                            "subscriber": [Circular],
                          },
                        ],
                        "closed": false,
                        "destination": SafeSubscriber {
                          "_complete": undefined,
                          "_context": [Circular],
                          "_error": undefined,
                          "_next": [Function],
                          "_parentOrParents": null,
                          "_parentSubscriber": [Circular],
                          "_subscriptions": null,
                          "closed": false,
                          "destination": Object {
                            "closed": true,
                            "complete": [Function],
                            "error": [Function],
                            "next": [Function],
                          },
                          "isStopped": false,
                          "syncErrorThrowable": false,
                          "syncErrorThrown": false,
                          "syncErrorValue": null,
                        },
                        "isStopped": false,
                        "syncErrorThrowable": true,
                        "syncErrorThrown": false,
                        "syncErrorValue": null,
                      },
                    ],
                    "thrownError": null,
                  }
                }
              />
            </div>
          </EuiHeaderSectionItem>
          <EuiHeaderSection
            side="right"
          >
            <div
              className="euiHeaderSection euiHeaderSection--dontGrow euiHeaderSection--right"
            >
              <EuiHeaderSectionItem
                border="none"
              >
                <div
                  className="euiHeaderSectionItem"
                >
                  <HeaderActionMenu
                    actionMenu$={
                      BehaviorSubject {
                        "_isScalar": false,
                        "_value": undefined,
                        "closed": false,
                        "hasError": false,
                        "isStopped": false,
                        "observers": Array [
                          Subscriber {
                            "_parentOrParents": null,
                            "_subscriptions": Array [
                              SubjectSubscription {
                                "_parentOrParents": [Circular],
                                "_subscriptions": null,
                                "closed": false,
                                "subject": [Circular],
                                "subscriber": [Circular],
                              },
                            ],
                            "closed": false,
                            "destination": SafeSubscriber {
                              "_complete": undefined,
                              "_context": [Circular],
                              "_error": undefined,
                              "_next": [Function],
                              "_parentOrParents": null,
                              "_parentSubscriber": [Circular],
                              "_subscriptions": null,
                              "closed": false,
                              "destination": Object {
                                "closed": true,
                                "complete": [Function],
                                "error": [Function],
                                "next": [Function],
                              },
                              "isStopped": false,
                              "syncErrorThrowable": false,
                              "syncErrorThrown": false,
                              "syncErrorValue": null,
                            },
                            "isStopped": false,
                            "syncErrorThrowable": true,
                            "syncErrorThrown": false,
                            "syncErrorValue": null,
                          },
                        ],
                        "thrownError": null,
                      }
                    }
                  >
                    <div
                      data-test-subj="headerAppActionMenu"
                    />
                  </HeaderActionMenu>
                </div>
              </EuiHeaderSectionItem>
              <EuiHeaderSectionItem
                border="left"
              >
                <div
                  className="euiHeaderSectionItem euiHeaderSectionItem--borderLeft"
                >
                  <HeaderNavControls
                    navControls$={
                      BehaviorSubject {
                        "_isScalar": false,
                        "_value": Array [],
                        "closed": false,
                        "hasError": false,
                        "isStopped": false,
                        "observers": Array [
                          Subscriber {
                            "_parentOrParents": null,
                            "_subscriptions": Array [
                              SubjectSubscription {
                                "_parentOrParents": [Circular],
                                "_subscriptions": null,
                                "closed": false,
                                "subject": [Circular],
                                "subscriber": [Circular],
                              },
                            ],
                            "closed": false,
                            "destination": SafeSubscriber {
                              "_complete": undefined,
                              "_context": [Circular],
                              "_error": undefined,
                              "_next": [Function],
                              "_parentOrParents": null,
                              "_parentSubscriber": [Circular],
                              "_subscriptions": null,
                              "closed": false,
                              "destination": Object {
                                "closed": true,
                                "complete": [Function],
                                "error": [Function],
                                "next": [Function],
                              },
                              "isStopped": false,
                              "syncErrorThrowable": false,
                              "syncErrorThrown": false,
                              "syncErrorValue": null,
                            },
                            "isStopped": false,
                            "syncErrorThrowable": true,
                            "syncErrorThrown": false,
                            "syncErrorValue": null,
                          },
                        ],
                        "thrownError": null,
                      }
                    }
                  />
                </div>
              </EuiHeaderSectionItem>
              <EuiHeaderSectionItem
                border="left"
              >
                <div
                  className="euiHeaderSectionItem euiHeaderSectionItem--borderLeft"
                >
                  <HeaderNavControls
                    navControls$={
                      BehaviorSubject {
                        "_isScalar": false,
                        "_value": Array [],
                        "closed": false,
                        "hasError": false,
                        "isStopped": false,
                        "observers": Array [
                          Subscriber {
                            "_parentOrParents": null,
                            "_subscriptions": Array [
                              SubjectSubscription {
                                "_parentOrParents": [Circular],
                                "_subscriptions": null,
                                "closed": false,
                                "subject": [Circular],
                                "subscriber": [Circular],
                              },
                            ],
                            "closed": false,
                            "destination": SafeSubscriber {
                              "_complete": undefined,
                              "_context": [Circular],
                              "_error": undefined,
                              "_next": [Function],
                              "_parentOrParents": null,
                              "_parentSubscriber": [Circular],
                              "_subscriptions": null,
                              "closed": false,
                              "destination": Object {
                                "closed": true,
                                "complete": [Function],
                                "error": [Function],
                                "next": [Function],
                              },
                              "isStopped": false,
                              "syncErrorThrowable": false,
                              "syncErrorThrown": false,
                              "syncErrorValue": null,
                            },
                            "isStopped": false,
                            "syncErrorThrowable": true,
                            "syncErrorThrown": false,
                            "syncErrorValue": null,
                          },
                        ],
                        "thrownError": null,
                      }
                    }
                  />
                </div>
              </EuiHeaderSectionItem>
              <EuiHeaderSectionItem
                border="left"
              >
                <div
                  className="euiHeaderSectionItem euiHeaderSectionItem--borderLeft"
                >
                  <InjectIntl(HeaderHelpMenuUI)
                    helpExtension$={
                      BehaviorSubject {
                        "_isScalar": false,
                        "_value": undefined,
                        "closed": false,
                        "hasError": false,
                        "isStopped": false,
                        "observers": Array [
                          InnerSubscriber {
                            "_parentOrParents": CombineLatestSubscriber {
                              "_parentOrParents": Subscriber {
                                "_parentOrParents": null,
                                "_subscriptions": Array [
                                  [Circular],
                                ],
                                "closed": false,
                                "destination": SafeSubscriber {
                                  "_complete": undefined,
                                  "_context": [Circular],
                                  "_error": undefined,
                                  "_next": [Function],
                                  "_parentOrParents": null,
                                  "_parentSubscriber": [Circular],
                                  "_subscriptions": null,
                                  "closed": false,
                                  "destination": Object {
                                    "closed": true,
                                    "complete": [Function],
                                    "error": [Function],
                                    "next": [Function],
                                  },
                                  "isStopped": false,
                                  "syncErrorThrowable": false,
                                  "syncErrorThrown": false,
                                  "syncErrorValue": null,
                                },
                                "isStopped": false,
                                "syncErrorThrowable": true,
                                "syncErrorThrown": false,
                                "syncErrorValue": null,
                              },
                              "_subscriptions": Array [
                                [Circular],
                                InnerSubscriber {
                                  "_parentOrParents": [Circular],
                                  "_subscriptions": Array [
                                    SubjectSubscription {
                                      "_parentOrParents": [Circular],
                                      "_subscriptions": null,
                                      "closed": false,
                                      "subject": BehaviorSubject {
                                        "_isScalar": false,
                                        "_value": "",
                                        "closed": false,
                                        "hasError": false,
                                        "isStopped": false,
                                        "observers": Array [
                                          [Circular],
                                        ],
                                        "thrownError": null,
                                      },
                                      "subscriber": [Circular],
                                    },
                                  ],
                                  "closed": false,
                                  "destination": Object {
                                    "closed": true,
                                    "complete": [Function],
                                    "error": [Function],
                                    "next": [Function],
                                  },
                                  "index": 1,
                                  "isStopped": false,
                                  "outerIndex": 1,
                                  "outerValue": undefined,
                                  "parent": [Circular],
                                  "syncErrorThrowable": false,
                                  "syncErrorThrown": false,
                                  "syncErrorValue": null,
                                },
                              ],
                              "active": 2,
                              "closed": false,
                              "destination": Subscriber {
                                "_parentOrParents": null,
                                "_subscriptions": Array [
                                  [Circular],
                                ],
                                "closed": false,
                                "destination": SafeSubscriber {
                                  "_complete": undefined,
                                  "_context": [Circular],
                                  "_error": undefined,
                                  "_next": [Function],
                                  "_parentOrParents": null,
                                  "_parentSubscriber": [Circular],
                                  "_subscriptions": null,
                                  "closed": false,
                                  "destination": Object {
                                    "closed": true,
                                    "complete": [Function],
                                    "error": [Function],
                                    "next": [Function],
                                  },
                                  "isStopped": false,
                                  "syncErrorThrowable": false,
                                  "syncErrorThrown": false,
                                  "syncErrorValue": null,
                                },
                                "isStopped": false,
                                "syncErrorThrowable": true,
                                "syncErrorThrown": false,
                                "syncErrorValue": null,
                              },
                              "isStopped": true,
                              "observables": Array [
                                [Circular],
                                BehaviorSubject {
                                  "_isScalar": false,
                                  "_value": "",
                                  "closed": false,
                                  "hasError": false,
                                  "isStopped": false,
                                  "observers": Array [
                                    InnerSubscriber {
                                      "_parentOrParents": [Circular],
                                      "_subscriptions": Array [
                                        SubjectSubscription {
                                          "_parentOrParents": [Circular],
                                          "_subscriptions": null,
                                          "closed": false,
                                          "subject": [Circular],
                                          "subscriber": [Circular],
                                        },
                                      ],
                                      "closed": false,
                                      "destination": Object {
                                        "closed": true,
                                        "complete": [Function],
                                        "error": [Function],
                                        "next": [Function],
                                      },
                                      "index": 1,
                                      "isStopped": false,
                                      "outerIndex": 1,
                                      "outerValue": undefined,
                                      "parent": [Circular],
                                      "syncErrorThrowable": false,
                                      "syncErrorThrown": false,
                                      "syncErrorValue": null,
                                    },
                                  ],
                                  "thrownError": null,
                                },
                              ],
                              "resultSelector": undefined,
                              "syncErrorThrowable": true,
                              "syncErrorThrown": false,
                              "syncErrorValue": null,
                              "toRespond": 0,
                              "values": Array [
                                undefined,
                                "",
                              ],
                            },
                            "_subscriptions": Array [
                              SubjectSubscription {
                                "_parentOrParents": [Circular],
                                "_subscriptions": null,
                                "closed": false,
                                "subject": [Circular],
                                "subscriber": [Circular],
                              },
                            ],
                            "closed": false,
                            "destination": Object {
                              "closed": true,
                              "complete": [Function],
                              "error": [Function],
                              "next": [Function],
                            },
                            "index": 1,
                            "isStopped": false,
                            "outerIndex": 0,
                            "outerValue": undefined,
                            "parent": CombineLatestSubscriber {
                              "_parentOrParents": Subscriber {
                                "_parentOrParents": null,
                                "_subscriptions": Array [
                                  [Circular],
                                ],
                                "closed": false,
                                "destination": SafeSubscriber {
                                  "_complete": undefined,
                                  "_context": [Circular],
                                  "_error": undefined,
                                  "_next": [Function],
                                  "_parentOrParents": null,
                                  "_parentSubscriber": [Circular],
                                  "_subscriptions": null,
                                  "closed": false,
                                  "destination": Object {
                                    "closed": true,
                                    "complete": [Function],
                                    "error": [Function],
                                    "next": [Function],
                                  },
                                  "isStopped": false,
                                  "syncErrorThrowable": false,
                                  "syncErrorThrown": false,
                                  "syncErrorValue": null,
                                },
                                "isStopped": false,
                                "syncErrorThrowable": true,
                                "syncErrorThrown": false,
                                "syncErrorValue": null,
                              },
                              "_subscriptions": Array [
                                [Circular],
                                InnerSubscriber {
                                  "_parentOrParents": [Circular],
                                  "_subscriptions": Array [
                                    SubjectSubscription {
                                      "_parentOrParents": [Circular],
                                      "_subscriptions": null,
                                      "closed": false,
                                      "subject": BehaviorSubject {
                                        "_isScalar": false,
                                        "_value": "",
                                        "closed": false,
                                        "hasError": false,
                                        "isStopped": false,
                                        "observers": Array [
                                          [Circular],
                                        ],
                                        "thrownError": null,
                                      },
                                      "subscriber": [Circular],
                                    },
                                  ],
                                  "closed": false,
                                  "destination": Object {
                                    "closed": true,
                                    "complete": [Function],
                                    "error": [Function],
                                    "next": [Function],
                                  },
                                  "index": 1,
                                  "isStopped": false,
                                  "outerIndex": 1,
                                  "outerValue": undefined,
                                  "parent": [Circular],
                                  "syncErrorThrowable": false,
                                  "syncErrorThrown": false,
                                  "syncErrorValue": null,
                                },
                              ],
                              "active": 2,
                              "closed": false,
                              "destination": Subscriber {
                                "_parentOrParents": null,
                                "_subscriptions": Array [
                                  [Circular],
                                ],
                                "closed": false,
                                "destination": SafeSubscriber {
                                  "_complete": undefined,
                                  "_context": [Circular],
                                  "_error": undefined,
                                  "_next": [Function],
                                  "_parentOrParents": null,
                                  "_parentSubscriber": [Circular],
                                  "_subscriptions": null,
                                  "closed": false,
                                  "destination": Object {
                                    "closed": true,
                                    "complete": [Function],
                                    "error": [Function],
                                    "next": [Function],
                                  },
                                  "isStopped": false,
                                  "syncErrorThrowable": false,
                                  "syncErrorThrown": false,
                                  "syncErrorValue": null,
                                },
                                "isStopped": false,
                                "syncErrorThrowable": true,
                                "syncErrorThrown": false,
                                "syncErrorValue": null,
                              },
                              "isStopped": true,
                              "observables": Array [
                                [Circular],
                                BehaviorSubject {
                                  "_isScalar": false,
                                  "_value": "",
                                  "closed": false,
                                  "hasError": false,
                                  "isStopped": false,
                                  "observers": Array [
                                    InnerSubscriber {
                                      "_parentOrParents": [Circular],
                                      "_subscriptions": Array [
                                        SubjectSubscription {
                                          "_parentOrParents": [Circular],
                                          "_subscriptions": null,
                                          "closed": false,
                                          "subject": [Circular],
                                          "subscriber": [Circular],
                                        },
                                      ],
                                      "closed": false,
                                      "destination": Object {
                                        "closed": true,
                                        "complete": [Function],
                                        "error": [Function],
                                        "next": [Function],
                                      },
                                      "index": 1,
                                      "isStopped": false,
                                      "outerIndex": 1,
                                      "outerValue": undefined,
                                      "parent": [Circular],
                                      "syncErrorThrowable": false,
                                      "syncErrorThrown": false,
                                      "syncErrorValue": null,
                                    },
                                  ],
                                  "thrownError": null,
                                },
                              ],
                              "resultSelector": undefined,
                              "syncErrorThrowable": true,
                              "syncErrorThrown": false,
                              "syncErrorValue": null,
                              "toRespond": 0,
                              "values": Array [
                                undefined,
                                "",
                              ],
                            },
                            "syncErrorThrowable": false,
                            "syncErrorThrown": false,
                            "syncErrorValue": null,
                          },
                        ],
                        "thrownError": null,
                      }
                    }
                    helpSupportUrl$={
                      BehaviorSubject {
                        "_isScalar": false,
                        "_value": "",
                        "closed": false,
                        "hasError": false,
                        "isStopped": false,
                        "observers": Array [
                          InnerSubscriber {
                            "_parentOrParents": CombineLatestSubscriber {
                              "_parentOrParents": Subscriber {
                                "_parentOrParents": null,
                                "_subscriptions": Array [
                                  [Circular],
                                ],
                                "closed": false,
                                "destination": SafeSubscriber {
                                  "_complete": undefined,
                                  "_context": [Circular],
                                  "_error": undefined,
                                  "_next": [Function],
                                  "_parentOrParents": null,
                                  "_parentSubscriber": [Circular],
                                  "_subscriptions": null,
                                  "closed": false,
                                  "destination": Object {
                                    "closed": true,
                                    "complete": [Function],
                                    "error": [Function],
                                    "next": [Function],
                                  },
                                  "isStopped": false,
                                  "syncErrorThrowable": false,
                                  "syncErrorThrown": false,
                                  "syncErrorValue": null,
                                },
                                "isStopped": false,
                                "syncErrorThrowable": true,
                                "syncErrorThrown": false,
                                "syncErrorValue": null,
                              },
                              "_subscriptions": Array [
                                InnerSubscriber {
                                  "_parentOrParents": [Circular],
                                  "_subscriptions": Array [
                                    SubjectSubscription {
                                      "_parentOrParents": [Circular],
                                      "_subscriptions": null,
                                      "closed": false,
                                      "subject": BehaviorSubject {
                                        "_isScalar": false,
                                        "_value": undefined,
                                        "closed": false,
                                        "hasError": false,
                                        "isStopped": false,
                                        "observers": Array [
                                          [Circular],
                                        ],
                                        "thrownError": null,
                                      },
                                      "subscriber": [Circular],
                                    },
                                  ],
                                  "closed": false,
                                  "destination": Object {
                                    "closed": true,
                                    "complete": [Function],
                                    "error": [Function],
                                    "next": [Function],
                                  },
                                  "index": 1,
                                  "isStopped": false,
                                  "outerIndex": 0,
                                  "outerValue": undefined,
                                  "parent": [Circular],
                                  "syncErrorThrowable": false,
                                  "syncErrorThrown": false,
                                  "syncErrorValue": null,
                                },
                                [Circular],
                              ],
                              "active": 2,
                              "closed": false,
                              "destination": Subscriber {
                                "_parentOrParents": null,
                                "_subscriptions": Array [
                                  [Circular],
                                ],
                                "closed": false,
                                "destination": SafeSubscriber {
                                  "_complete": undefined,
                                  "_context": [Circular],
                                  "_error": undefined,
                                  "_next": [Function],
                                  "_parentOrParents": null,
                                  "_parentSubscriber": [Circular],
                                  "_subscriptions": null,
                                  "closed": false,
                                  "destination": Object {
                                    "closed": true,
                                    "complete": [Function],
                                    "error": [Function],
                                    "next": [Function],
                                  },
                                  "isStopped": false,
                                  "syncErrorThrowable": false,
                                  "syncErrorThrown": false,
                                  "syncErrorValue": null,
                                },
                                "isStopped": false,
                                "syncErrorThrowable": true,
                                "syncErrorThrown": false,
                                "syncErrorValue": null,
                              },
                              "isStopped": true,
                              "observables": Array [
                                BehaviorSubject {
                                  "_isScalar": false,
                                  "_value": undefined,
                                  "closed": false,
                                  "hasError": false,
                                  "isStopped": false,
                                  "observers": Array [
                                    InnerSubscriber {
                                      "_parentOrParents": [Circular],
                                      "_subscriptions": Array [
                                        SubjectSubscription {
                                          "_parentOrParents": [Circular],
                                          "_subscriptions": null,
                                          "closed": false,
                                          "subject": [Circular],
                                          "subscriber": [Circular],
                                        },
                                      ],
                                      "closed": false,
                                      "destination": Object {
                                        "closed": true,
                                        "complete": [Function],
                                        "error": [Function],
                                        "next": [Function],
                                      },
                                      "index": 1,
                                      "isStopped": false,
                                      "outerIndex": 0,
                                      "outerValue": undefined,
                                      "parent": [Circular],
                                      "syncErrorThrowable": false,
                                      "syncErrorThrown": false,
                                      "syncErrorValue": null,
                                    },
                                  ],
                                  "thrownError": null,
                                },
                                [Circular],
                              ],
                              "resultSelector": undefined,
                              "syncErrorThrowable": true,
                              "syncErrorThrown": false,
                              "syncErrorValue": null,
                              "toRespond": 0,
                              "values": Array [
                                undefined,
                                "",
                              ],
                            },
                            "_subscriptions": Array [
                              SubjectSubscription {
                                "_parentOrParents": [Circular],
                                "_subscriptions": null,
                                "closed": false,
                                "subject": [Circular],
                                "subscriber": [Circular],
                              },
                            ],
                            "closed": false,
                            "destination": Object {
                              "closed": true,
                              "complete": [Function],
                              "error": [Function],
                              "next": [Function],
                            },
                            "index": 1,
                            "isStopped": false,
                            "outerIndex": 1,
                            "outerValue": undefined,
                            "parent": CombineLatestSubscriber {
                              "_parentOrParents": Subscriber {
                                "_parentOrParents": null,
                                "_subscriptions": Array [
                                  [Circular],
                                ],
                                "closed": false,
                                "destination": SafeSubscriber {
                                  "_complete": undefined,
                                  "_context": [Circular],
                                  "_error": undefined,
                                  "_next": [Function],
                                  "_parentOrParents": null,
                                  "_parentSubscriber": [Circular],
                                  "_subscriptions": null,
                                  "closed": false,
                                  "destination": Object {
                                    "closed": true,
                                    "complete": [Function],
                                    "error": [Function],
                                    "next": [Function],
                                  },
                                  "isStopped": false,
                                  "syncErrorThrowable": false,
                                  "syncErrorThrown": false,
                                  "syncErrorValue": null,
                                },
                                "isStopped": false,
                                "syncErrorThrowable": true,
                                "syncErrorThrown": false,
                                "syncErrorValue": null,
                              },
                              "_subscriptions": Array [
                                InnerSubscriber {
                                  "_parentOrParents": [Circular],
                                  "_subscriptions": Array [
                                    SubjectSubscription {
                                      "_parentOrParents": [Circular],
                                      "_subscriptions": null,
                                      "closed": false,
                                      "subject": BehaviorSubject {
                                        "_isScalar": false,
                                        "_value": undefined,
                                        "closed": false,
                                        "hasError": false,
                                        "isStopped": false,
                                        "observers": Array [
                                          [Circular],
                                        ],
                                        "thrownError": null,
                                      },
                                      "subscriber": [Circular],
                                    },
                                  ],
                                  "closed": false,
                                  "destination": Object {
                                    "closed": true,
                                    "complete": [Function],
                                    "error": [Function],
                                    "next": [Function],
                                  },
                                  "index": 1,
                                  "isStopped": false,
                                  "outerIndex": 0,
                                  "outerValue": undefined,
                                  "parent": [Circular],
                                  "syncErrorThrowable": false,
                                  "syncErrorThrown": false,
                                  "syncErrorValue": null,
                                },
                                [Circular],
                              ],
                              "active": 2,
                              "closed": false,
                              "destination": Subscriber {
                                "_parentOrParents": null,
                                "_subscriptions": Array [
                                  [Circular],
                                ],
                                "closed": false,
                                "destination": SafeSubscriber {
                                  "_complete": undefined,
                                  "_context": [Circular],
                                  "_error": undefined,
                                  "_next": [Function],
                                  "_parentOrParents": null,
                                  "_parentSubscriber": [Circular],
                                  "_subscriptions": null,
                                  "closed": false,
                                  "destination": Object {
                                    "closed": true,
                                    "complete": [Function],
                                    "error": [Function],
                                    "next": [Function],
                                  },
                                  "isStopped": false,
                                  "syncErrorThrowable": false,
                                  "syncErrorThrown": false,
                                  "syncErrorValue": null,
                                },
                                "isStopped": false,
                                "syncErrorThrowable": true,
                                "syncErrorThrown": false,
                                "syncErrorValue": null,
                              },
                              "isStopped": true,
                              "observables": Array [
                                BehaviorSubject {
                                  "_isScalar": false,
                                  "_value": undefined,
                                  "closed": false,
                                  "hasError": false,
                                  "isStopped": false,
                                  "observers": Array [
                                    InnerSubscriber {
                                      "_parentOrParents": [Circular],
                                      "_subscriptions": Array [
                                        SubjectSubscription {
                                          "_parentOrParents": [Circular],
                                          "_subscriptions": null,
                                          "closed": false,
                                          "subject": [Circular],
                                          "subscriber": [Circular],
                                        },
                                      ],
                                      "closed": false,
                                      "destination": Object {
                                        "closed": true,
                                        "complete": [Function],
                                        "error": [Function],
                                        "next": [Function],
                                      },
                                      "index": 1,
                                      "isStopped": false,
                                      "outerIndex": 0,
                                      "outerValue": undefined,
                                      "parent": [Circular],
                                      "syncErrorThrowable": false,
                                      "syncErrorThrown": false,
                                      "syncErrorValue": null,
                                    },
                                  ],
                                  "thrownError": null,
                                },
                                [Circular],
                              ],
                              "resultSelector": undefined,
                              "syncErrorThrowable": true,
                              "syncErrorThrown": false,
                              "syncErrorValue": null,
                              "toRespond": 0,
                              "values": Array [
                                undefined,
                                "",
                              ],
                            },
                            "syncErrorThrowable": false,
                            "syncErrorThrown": false,
                            "syncErrorValue": null,
                          },
                        ],
                        "thrownError": null,
                      }
                    }
                    opensearchDashboardsDocLink="/docs"
                    opensearchDashboardsVersion="1.0.0"
                    useDefaultContent={true}
                  >
                    <HeaderHelpMenuUI
                      helpExtension$={
                        BehaviorSubject {
                          "_isScalar": false,
                          "_value": undefined,
                          "closed": false,
                          "hasError": false,
                          "isStopped": false,
                          "observers": Array [
                            InnerSubscriber {
                              "_parentOrParents": CombineLatestSubscriber {
                                "_parentOrParents": Subscriber {
                                  "_parentOrParents": null,
                                  "_subscriptions": Array [
                                    [Circular],
                                  ],
                                  "closed": false,
                                  "destination": SafeSubscriber {
                                    "_complete": undefined,
                                    "_context": [Circular],
                                    "_error": undefined,
                                    "_next": [Function],
                                    "_parentOrParents": null,
                                    "_parentSubscriber": [Circular],
                                    "_subscriptions": null,
                                    "closed": false,
                                    "destination": Object {
                                      "closed": true,
                                      "complete": [Function],
                                      "error": [Function],
                                      "next": [Function],
                                    },
                                    "isStopped": false,
                                    "syncErrorThrowable": false,
                                    "syncErrorThrown": false,
                                    "syncErrorValue": null,
                                  },
                                  "isStopped": false,
                                  "syncErrorThrowable": true,
                                  "syncErrorThrown": false,
                                  "syncErrorValue": null,
                                },
                                "_subscriptions": Array [
                                  [Circular],
                                  InnerSubscriber {
                                    "_parentOrParents": [Circular],
                                    "_subscriptions": Array [
                                      SubjectSubscription {
                                        "_parentOrParents": [Circular],
                                        "_subscriptions": null,
                                        "closed": false,
                                        "subject": BehaviorSubject {
                                          "_isScalar": false,
                                          "_value": "",
                                          "closed": false,
                                          "hasError": false,
                                          "isStopped": false,
                                          "observers": Array [
                                            [Circular],
                                          ],
                                          "thrownError": null,
                                        },
                                        "subscriber": [Circular],
                                      },
                                    ],
                                    "closed": false,
                                    "destination": Object {
                                      "closed": true,
                                      "complete": [Function],
                                      "error": [Function],
                                      "next": [Function],
                                    },
                                    "index": 1,
                                    "isStopped": false,
                                    "outerIndex": 1,
                                    "outerValue": undefined,
                                    "parent": [Circular],
                                    "syncErrorThrowable": false,
                                    "syncErrorThrown": false,
                                    "syncErrorValue": null,
                                  },
                                ],
                                "active": 2,
                                "closed": false,
                                "destination": Subscriber {
                                  "_parentOrParents": null,
                                  "_subscriptions": Array [
                                    [Circular],
                                  ],
                                  "closed": false,
                                  "destination": SafeSubscriber {
                                    "_complete": undefined,
                                    "_context": [Circular],
                                    "_error": undefined,
                                    "_next": [Function],
                                    "_parentOrParents": null,
                                    "_parentSubscriber": [Circular],
                                    "_subscriptions": null,
                                    "closed": false,
                                    "destination": Object {
                                      "closed": true,
                                      "complete": [Function],
                                      "error": [Function],
                                      "next": [Function],
                                    },
                                    "isStopped": false,
                                    "syncErrorThrowable": false,
                                    "syncErrorThrown": false,
                                    "syncErrorValue": null,
                                  },
                                  "isStopped": false,
                                  "syncErrorThrowable": true,
                                  "syncErrorThrown": false,
                                  "syncErrorValue": null,
                                },
                                "isStopped": true,
                                "observables": Array [
                                  [Circular],
                                  BehaviorSubject {
                                    "_isScalar": false,
                                    "_value": "",
                                    "closed": false,
                                    "hasError": false,
                                    "isStopped": false,
                                    "observers": Array [
                                      InnerSubscriber {
                                        "_parentOrParents": [Circular],
                                        "_subscriptions": Array [
                                          SubjectSubscription {
                                            "_parentOrParents": [Circular],
                                            "_subscriptions": null,
                                            "closed": false,
                                            "subject": [Circular],
                                            "subscriber": [Circular],
                                          },
                                        ],
                                        "closed": false,
                                        "destination": Object {
                                          "closed": true,
                                          "complete": [Function],
                                          "error": [Function],
                                          "next": [Function],
                                        },
                                        "index": 1,
                                        "isStopped": false,
                                        "outerIndex": 1,
                                        "outerValue": undefined,
                                        "parent": [Circular],
                                        "syncErrorThrowable": false,
                                        "syncErrorThrown": false,
                                        "syncErrorValue": null,
                                      },
                                    ],
                                    "thrownError": null,
                                  },
                                ],
                                "resultSelector": undefined,
                                "syncErrorThrowable": true,
                                "syncErrorThrown": false,
                                "syncErrorValue": null,
                                "toRespond": 0,
                                "values": Array [
                                  undefined,
                                  "",
                                ],
                              },
                              "_subscriptions": Array [
                                SubjectSubscription {
                                  "_parentOrParents": [Circular],
                                  "_subscriptions": null,
                                  "closed": false,
                                  "subject": [Circular],
                                  "subscriber": [Circular],
                                },
                              ],
                              "closed": false,
                              "destination": Object {
                                "closed": true,
                                "complete": [Function],
                                "error": [Function],
                                "next": [Function],
                              },
                              "index": 1,
                              "isStopped": false,
                              "outerIndex": 0,
                              "outerValue": undefined,
                              "parent": CombineLatestSubscriber {
                                "_parentOrParents": Subscriber {
                                  "_parentOrParents": null,
                                  "_subscriptions": Array [
                                    [Circular],
                                  ],
                                  "closed": false,
                                  "destination": SafeSubscriber {
                                    "_complete": undefined,
                                    "_context": [Circular],
                                    "_error": undefined,
                                    "_next": [Function],
                                    "_parentOrParents": null,
                                    "_parentSubscriber": [Circular],
                                    "_subscriptions": null,
                                    "closed": false,
                                    "destination": Object {
                                      "closed": true,
                                      "complete": [Function],
                                      "error": [Function],
                                      "next": [Function],
                                    },
                                    "isStopped": false,
                                    "syncErrorThrowable": false,
                                    "syncErrorThrown": false,
                                    "syncErrorValue": null,
                                  },
                                  "isStopped": false,
                                  "syncErrorThrowable": true,
                                  "syncErrorThrown": false,
                                  "syncErrorValue": null,
                                },
                                "_subscriptions": Array [
                                  [Circular],
                                  InnerSubscriber {
                                    "_parentOrParents": [Circular],
                                    "_subscriptions": Array [
                                      SubjectSubscription {
                                        "_parentOrParents": [Circular],
                                        "_subscriptions": null,
                                        "closed": false,
                                        "subject": BehaviorSubject {
                                          "_isScalar": false,
                                          "_value": "",
                                          "closed": false,
                                          "hasError": false,
                                          "isStopped": false,
                                          "observers": Array [
                                            [Circular],
                                          ],
                                          "thrownError": null,
                                        },
                                        "subscriber": [Circular],
                                      },
                                    ],
                                    "closed": false,
                                    "destination": Object {
                                      "closed": true,
                                      "complete": [Function],
                                      "error": [Function],
                                      "next": [Function],
                                    },
                                    "index": 1,
                                    "isStopped": false,
                                    "outerIndex": 1,
                                    "outerValue": undefined,
                                    "parent": [Circular],
                                    "syncErrorThrowable": false,
                                    "syncErrorThrown": false,
                                    "syncErrorValue": null,
                                  },
                                ],
                                "active": 2,
                                "closed": false,
                                "destination": Subscriber {
                                  "_parentOrParents": null,
                                  "_subscriptions": Array [
                                    [Circular],
                                  ],
                                  "closed": false,
                                  "destination": SafeSubscriber {
                                    "_complete": undefined,
                                    "_context": [Circular],
                                    "_error": undefined,
                                    "_next": [Function],
                                    "_parentOrParents": null,
                                    "_parentSubscriber": [Circular],
                                    "_subscriptions": null,
                                    "closed": false,
                                    "destination": Object {
                                      "closed": true,
                                      "complete": [Function],
                                      "error": [Function],
                                      "next": [Function],
                                    },
                                    "isStopped": false,
                                    "syncErrorThrowable": false,
                                    "syncErrorThrown": false,
                                    "syncErrorValue": null,
                                  },
                                  "isStopped": false,
                                  "syncErrorThrowable": true,
                                  "syncErrorThrown": false,
                                  "syncErrorValue": null,
                                },
                                "isStopped": true,
                                "observables": Array [
                                  [Circular],
                                  BehaviorSubject {
                                    "_isScalar": false,
                                    "_value": "",
                                    "closed": false,
                                    "hasError": false,
                                    "isStopped": false,
                                    "observers": Array [
                                      InnerSubscriber {
                                        "_parentOrParents": [Circular],
                                        "_subscriptions": Array [
                                          SubjectSubscription {
                                            "_parentOrParents": [Circular],
                                            "_subscriptions": null,
                                            "closed": false,
                                            "subject": [Circular],
                                            "subscriber": [Circular],
                                          },
                                        ],
                                        "closed": false,
                                        "destination": Object {
                                          "closed": true,
                                          "complete": [Function],
                                          "error": [Function],
                                          "next": [Function],
                                        },
                                        "index": 1,
                                        "isStopped": false,
                                        "outerIndex": 1,
                                        "outerValue": undefined,
                                        "parent": [Circular],
                                        "syncErrorThrowable": false,
                                        "syncErrorThrown": false,
                                        "syncErrorValue": null,
                                      },
                                    ],
                                    "thrownError": null,
                                  },
                                ],
                                "resultSelector": undefined,
                                "syncErrorThrowable": true,
                                "syncErrorThrown": false,
                                "syncErrorValue": null,
                                "toRespond": 0,
                                "values": Array [
                                  undefined,
                                  "",
                                ],
                              },
                              "syncErrorThrowable": false,
                              "syncErrorThrown": false,
                              "syncErrorValue": null,
                            },
                          ],
                          "thrownError": null,
                        }
                      }
                      helpSupportUrl$={
                        BehaviorSubject {
                          "_isScalar": false,
                          "_value": "",
                          "closed": false,
                          "hasError": false,
                          "isStopped": false,
                          "observers": Array [
                            InnerSubscriber {
                              "_parentOrParents": CombineLatestSubscriber {
                                "_parentOrParents": Subscriber {
                                  "_parentOrParents": null,
                                  "_subscriptions": Array [
                                    [Circular],
                                  ],
                                  "closed": false,
                                  "destination": SafeSubscriber {
                                    "_complete": undefined,
                                    "_context": [Circular],
                                    "_error": undefined,
                                    "_next": [Function],
                                    "_parentOrParents": null,
                                    "_parentSubscriber": [Circular],
                                    "_subscriptions": null,
                                    "closed": false,
                                    "destination": Object {
                                      "closed": true,
                                      "complete": [Function],
                                      "error": [Function],
                                      "next": [Function],
                                    },
                                    "isStopped": false,
                                    "syncErrorThrowable": false,
                                    "syncErrorThrown": false,
                                    "syncErrorValue": null,
                                  },
                                  "isStopped": false,
                                  "syncErrorThrowable": true,
                                  "syncErrorThrown": false,
                                  "syncErrorValue": null,
                                },
                                "_subscriptions": Array [
                                  InnerSubscriber {
                                    "_parentOrParents": [Circular],
                                    "_subscriptions": Array [
                                      SubjectSubscription {
                                        "_parentOrParents": [Circular],
                                        "_subscriptions": null,
                                        "closed": false,
                                        "subject": BehaviorSubject {
                                          "_isScalar": false,
                                          "_value": undefined,
                                          "closed": false,
                                          "hasError": false,
                                          "isStopped": false,
                                          "observers": Array [
                                            [Circular],
                                          ],
                                          "thrownError": null,
                                        },
                                        "subscriber": [Circular],
                                      },
                                    ],
                                    "closed": false,
                                    "destination": Object {
                                      "closed": true,
                                      "complete": [Function],
                                      "error": [Function],
                                      "next": [Function],
                                    },
                                    "index": 1,
                                    "isStopped": false,
                                    "outerIndex": 0,
                                    "outerValue": undefined,
                                    "parent": [Circular],
                                    "syncErrorThrowable": false,
                                    "syncErrorThrown": false,
                                    "syncErrorValue": null,
                                  },
                                  [Circular],
                                ],
                                "active": 2,
                                "closed": false,
                                "destination": Subscriber {
                                  "_parentOrParents": null,
                                  "_subscriptions": Array [
                                    [Circular],
                                  ],
                                  "closed": false,
                                  "destination": SafeSubscriber {
                                    "_complete": undefined,
                                    "_context": [Circular],
                                    "_error": undefined,
                                    "_next": [Function],
                                    "_parentOrParents": null,
                                    "_parentSubscriber": [Circular],
                                    "_subscriptions": null,
                                    "closed": false,
                                    "destination": Object {
                                      "closed": true,
                                      "complete": [Function],
                                      "error": [Function],
                                      "next": [Function],
                                    },
                                    "isStopped": false,
                                    "syncErrorThrowable": false,
                                    "syncErrorThrown": false,
                                    "syncErrorValue": null,
                                  },
                                  "isStopped": false,
                                  "syncErrorThrowable": true,
                                  "syncErrorThrown": false,
                                  "syncErrorValue": null,
                                },
                                "isStopped": true,
                                "observables": Array [
                                  BehaviorSubject {
                                    "_isScalar": false,
                                    "_value": undefined,
                                    "closed": false,
                                    "hasError": false,
                                    "isStopped": false,
                                    "observers": Array [
                                      InnerSubscriber {
                                        "_parentOrParents": [Circular],
                                        "_subscriptions": Array [
                                          SubjectSubscription {
                                            "_parentOrParents": [Circular],
                                            "_subscriptions": null,
                                            "closed": false,
                                            "subject": [Circular],
                                            "subscriber": [Circular],
                                          },
                                        ],
                                        "closed": false,
                                        "destination": Object {
                                          "closed": true,
                                          "complete": [Function],
                                          "error": [Function],
                                          "next": [Function],
                                        },
                                        "index": 1,
                                        "isStopped": false,
                                        "outerIndex": 0,
                                        "outerValue": undefined,
                                        "parent": [Circular],
                                        "syncErrorThrowable": false,
                                        "syncErrorThrown": false,
                                        "syncErrorValue": null,
                                      },
                                    ],
                                    "thrownError": null,
                                  },
                                  [Circular],
                                ],
                                "resultSelector": undefined,
                                "syncErrorThrowable": true,
                                "syncErrorThrown": false,
                                "syncErrorValue": null,
                                "toRespond": 0,
                                "values": Array [
                                  undefined,
                                  "",
                                ],
                              },
                              "_subscriptions": Array [
                                SubjectSubscription {
                                  "_parentOrParents": [Circular],
                                  "_subscriptions": null,
                                  "closed": false,
                                  "subject": [Circular],
                                  "subscriber": [Circular],
                                },
                              ],
                              "closed": false,
                              "destination": Object {
                                "closed": true,
                                "complete": [Function],
                                "error": [Function],
                                "next": [Function],
                              },
                              "index": 1,
                              "isStopped": false,
                              "outerIndex": 1,
                              "outerValue": undefined,
                              "parent": CombineLatestSubscriber {
                                "_parentOrParents": Subscriber {
                                  "_parentOrParents": null,
                                  "_subscriptions": Array [
                                    [Circular],
                                  ],
                                  "closed": false,
                                  "destination": SafeSubscriber {
                                    "_complete": undefined,
                                    "_context": [Circular],
                                    "_error": undefined,
                                    "_next": [Function],
                                    "_parentOrParents": null,
                                    "_parentSubscriber": [Circular],
                                    "_subscriptions": null,
                                    "closed": false,
                                    "destination": Object {
                                      "closed": true,
                                      "complete": [Function],
                                      "error": [Function],
                                      "next": [Function],
                                    },
                                    "isStopped": false,
                                    "syncErrorThrowable": false,
                                    "syncErrorThrown": false,
                                    "syncErrorValue": null,
                                  },
                                  "isStopped": false,
                                  "syncErrorThrowable": true,
                                  "syncErrorThrown": false,
                                  "syncErrorValue": null,
                                },
                                "_subscriptions": Array [
                                  InnerSubscriber {
                                    "_parentOrParents": [Circular],
                                    "_subscriptions": Array [
                                      SubjectSubscription {
                                        "_parentOrParents": [Circular],
                                        "_subscriptions": null,
                                        "closed": false,
                                        "subject": BehaviorSubject {
                                          "_isScalar": false,
                                          "_value": undefined,
                                          "closed": false,
                                          "hasError": false,
                                          "isStopped": false,
                                          "observers": Array [
                                            [Circular],
                                          ],
                                          "thrownError": null,
                                        },
                                        "subscriber": [Circular],
                                      },
                                    ],
                                    "closed": false,
                                    "destination": Object {
                                      "closed": true,
                                      "complete": [Function],
                                      "error": [Function],
                                      "next": [Function],
                                    },
                                    "index": 1,
                                    "isStopped": false,
                                    "outerIndex": 0,
                                    "outerValue": undefined,
                                    "parent": [Circular],
                                    "syncErrorThrowable": false,
                                    "syncErrorThrown": false,
                                    "syncErrorValue": null,
                                  },
                                  [Circular],
                                ],
                                "active": 2,
                                "closed": false,
                                "destination": Subscriber {
                                  "_parentOrParents": null,
                                  "_subscriptions": Array [
                                    [Circular],
                                  ],
                                  "closed": false,
                                  "destination": SafeSubscriber {
                                    "_complete": undefined,
                                    "_context": [Circular],
                                    "_error": undefined,
                                    "_next": [Function],
                                    "_parentOrParents": null,
                                    "_parentSubscriber": [Circular],
                                    "_subscriptions": null,
                                    "closed": false,
                                    "destination": Object {
                                      "closed": true,
                                      "complete": [Function],
                                      "error": [Function],
                                      "next": [Function],
                                    },
                                    "isStopped": false,
                                    "syncErrorThrowable": false,
                                    "syncErrorThrown": false,
                                    "syncErrorValue": null,
                                  },
                                  "isStopped": false,
                                  "syncErrorThrowable": true,
                                  "syncErrorThrown": false,
                                  "syncErrorValue": null,
                                },
                                "isStopped": true,
                                "observables": Array [
                                  BehaviorSubject {
                                    "_isScalar": false,
                                    "_value": undefined,
                                    "closed": false,
                                    "hasError": false,
                                    "isStopped": false,
                                    "observers": Array [
                                      InnerSubscriber {
                                        "_parentOrParents": [Circular],
                                        "_subscriptions": Array [
                                          SubjectSubscription {
                                            "_parentOrParents": [Circular],
                                            "_subscriptions": null,
                                            "closed": false,
                                            "subject": [Circular],
                                            "subscriber": [Circular],
                                          },
                                        ],
                                        "closed": false,
                                        "destination": Object {
                                          "closed": true,
                                          "complete": [Function],
                                          "error": [Function],
                                          "next": [Function],
                                        },
                                        "index": 1,
                                        "isStopped": false,
                                        "outerIndex": 0,
                                        "outerValue": undefined,
                                        "parent": [Circular],
                                        "syncErrorThrowable": false,
                                        "syncErrorThrown": false,
                                        "syncErrorValue": null,
                                      },
                                    ],
                                    "thrownError": null,
                                  },
                                  [Circular],
                                ],
                                "resultSelector": undefined,
                                "syncErrorThrowable": true,
                                "syncErrorThrown": false,
                                "syncErrorValue": null,
                                "toRespond": 0,
                                "values": Array [
                                  undefined,
                                  "",
                                ],
                              },
                              "syncErrorThrowable": false,
                              "syncErrorThrown": false,
                              "syncErrorValue": null,
                            },
                          ],
                          "thrownError": null,
                        }
                      }
                      intl={
                        Object {
                          "defaultFormats": Object {},
                          "defaultLocale": "en",
                          "formatDate": [Function],
                          "formatHTMLMessage": [Function],
                          "formatMessage": [Function],
                          "formatNumber": [Function],
                          "formatPlural": [Function],
                          "formatRelative": [Function],
                          "formatTime": [Function],
                          "formats": Object {
                            "date": Object {
                              "full": Object {
                                "day": "numeric",
                                "month": "long",
                                "weekday": "long",
                                "year": "numeric",
                              },
                              "long": Object {
                                "day": "numeric",
                                "month": "long",
                                "year": "numeric",
                              },
                              "medium": Object {
                                "day": "numeric",
                                "month": "short",
                                "year": "numeric",
                              },
                              "short": Object {
                                "day": "numeric",
                                "month": "numeric",
                                "year": "2-digit",
                              },
                            },
                            "number": Object {
                              "currency": Object {
                                "style": "currency",
                              },
                              "percent": Object {
                                "style": "percent",
                              },
                            },
                            "relative": Object {
                              "days": Object {
                                "units": "day",
                              },
                              "hours": Object {
                                "units": "hour",
                              },
                              "minutes": Object {
                                "units": "minute",
                              },
                              "months": Object {
                                "units": "month",
                              },
                              "seconds": Object {
                                "units": "second",
                              },
                              "years": Object {
                                "units": "year",
                              },
                            },
                            "time": Object {
                              "full": Object {
                                "hour": "numeric",
                                "minute": "numeric",
                                "second": "numeric",
                                "timeZoneName": "short",
                              },
                              "long": Object {
                                "hour": "numeric",
                                "minute": "numeric",
                                "second": "numeric",
                                "timeZoneName": "short",
                              },
                              "medium": Object {
                                "hour": "numeric",
                                "minute": "numeric",
                                "second": "numeric",
                              },
                              "short": Object {
                                "hour": "numeric",
                                "minute": "numeric",
                              },
                            },
                          },
                          "formatters": Object {
                            "getDateTimeFormat": [Function],
                            "getMessageFormat": [Function],
                            "getNumberFormat": [Function],
                            "getPluralFormat": [Function],
                            "getRelativeFormat": [Function],
                          },
                          "locale": "en",
                          "messages": Object {},
                          "now": [Function],
                          "onError": [Function],
                          "textComponent": Symbol(react.fragment),
                          "timeZone": null,
                        }
                      }
                      opensearchDashboardsDocLink="/docs"
                      opensearchDashboardsVersion="1.0.0"
                      useDefaultContent={true}
                    >
                      <EuiPopover
                        anchorPosition="downRight"
                        button={
                          <EuiHeaderSectionItemButton
                            aria-expanded={false}
                            aria-haspopup="true"
                            aria-label="Help menu"
                            onClick={[Function]}
                          >
                            <EuiIcon
                              size="m"
                              type="help"
                            />
                          </EuiHeaderSectionItemButton>
                        }
                        closePopover={[Function]}
                        data-test-subj="helpMenuButton"
                        display="inlineBlock"
                        hasArrow={true}
                        id="headerHelpMenu"
                        isOpen={false}
                        ownFocus={true}
                        panelPaddingSize="m"
                        repositionOnScroll={true}
                      >
                        <div
                          className="euiPopover euiPopover--anchorDownRight"
                          data-test-subj="helpMenuButton"
                          id="headerHelpMenu"
                        >
                          <div
                            className="euiPopover__anchor"
                          >
                            <EuiHeaderSectionItemButton
                              aria-expanded={false}
                              aria-haspopup="true"
                              aria-label="Help menu"
                              onClick={[Function]}
                            >
                              <EuiButtonEmpty
                                aria-expanded={false}
                                aria-haspopup="true"
                                aria-label="Help menu"
                                buttonRef={
                                  Object {
                                    "current": <button
                                      aria-expanded="false"
                                      aria-haspopup="true"
                                      aria-label="Help menu"
                                      class="euiButtonEmpty euiButtonEmpty--text euiHeaderSectionItemButton"
                                      type="button"
                                    >
                                      <span
                                        class="euiButtonContent euiButtonEmpty__content"
                                      >
                                        <span
                                          class="euiButtonEmpty__text"
                                        >
                                          <span
                                            class="euiHeaderSectionItemButton__content"
                                          >
                                            <span
                                              data-euiicon-type="help"
                                            />
                                          </span>
                                        </span>
                                      </span>
                                    </button>,
                                  }
                                }
                                className="euiHeaderSectionItemButton"
                                color="text"
                                onClick={[Function]}
                              >
                                <button
                                  aria-expanded={false}
                                  aria-haspopup="true"
                                  aria-label="Help menu"
                                  className="euiButtonEmpty euiButtonEmpty--text euiHeaderSectionItemButton"
                                  disabled={false}
                                  onClick={[Function]}
                                  type="button"
                                >
                                  <EuiButtonContent
                                    className="euiButtonEmpty__content"
                                    iconSide="left"
                                    iconSize="m"
                                    textProps={
                                      Object {
                                        "className": "euiButtonEmpty__text",
                                      }
                                    }
                                  >
                                    <span
                                      className="euiButtonContent euiButtonEmpty__content"
                                    >
                                      <span
                                        className="euiButtonEmpty__text"
                                      >
                                        <span
                                          className="euiHeaderSectionItemButton__content"
                                        >
                                          <EuiIcon
                                            size="m"
                                            type="help"
                                          >
                                            <span
                                              data-euiicon-type="help"
                                              size="m"
                                            />
                                          </EuiIcon>
                                        </span>
                                      </span>
                                    </span>
                                  </EuiButtonContent>
                                </button>
                              </EuiButtonEmpty>
                            </EuiHeaderSectionItemButton>
                          </div>
                        </div>
                      </EuiPopover>
                    </HeaderHelpMenuUI>
                  </InjectIntl(HeaderHelpMenuUI)>
                </div>
              </EuiHeaderSectionItem>
            </div>
          </EuiHeaderSection>
        </div>
      </EuiHeader>
    </div>
    <CollapsibleNav
      appId$={
        Observable {
          "_isScalar": false,
          "source": Subject {
            "_isScalar": false,
            "closed": false,
            "hasError": false,
            "isStopped": false,
            "observers": Array [
              Subscriber {
                "_parentOrParents": null,
                "_subscriptions": Array [
                  SubjectSubscription {
                    "_parentOrParents": [Circular],
                    "_subscriptions": null,
                    "closed": false,
                    "subject": [Circular],
                    "subscriber": [Circular],
                  },
                ],
                "closed": false,
                "destination": SafeSubscriber {
                  "_complete": undefined,
                  "_context": [Circular],
                  "_error": undefined,
                  "_next": [Function],
                  "_parentOrParents": null,
                  "_parentSubscriber": [Circular],
                  "_subscriptions": null,
                  "closed": false,
                  "destination": Object {
                    "closed": true,
                    "complete": [Function],
                    "error": [Function],
                    "next": [Function],
                  },
                  "isStopped": false,
                  "syncErrorThrowable": false,
                  "syncErrorThrown": false,
                  "syncErrorValue": null,
                },
                "isStopped": false,
                "syncErrorThrowable": true,
                "syncErrorThrown": false,
                "syncErrorValue": null,
              },
            ],
            "thrownError": null,
          },
        }
      }
      basePath={
        BasePath {
          "basePath": "/test",
          "get": [Function],
          "prepend": [Function],
          "remove": [Function],
          "serverBasePath": "/test",
        }
      }
      branding={
        Object {
          "applicationTitle": "OpenSearch Dashboards",
          "darkMode": false,
          "logo": Object {
            "defaultUrl": "/",
          },
          "mark": Object {
            "defaultUrl": "/",
          },
        }
      }
      closeNav={[Function]}
      customNavLink$={
        BehaviorSubject {
          "_isScalar": false,
          "_value": Object {
            "baseUrl": "",
            "href": "",
            "id": "cloud-deployment-link",
            "title": "Manage cloud deployment",
          },
          "closed": false,
          "hasError": false,
          "isStopped": false,
          "observers": Array [
            Subscriber {
              "_parentOrParents": null,
              "_subscriptions": Array [
                SubjectSubscription {
                  "_parentOrParents": [Circular],
                  "_subscriptions": null,
                  "closed": false,
                  "subject": [Circular],
                  "subscriber": [Circular],
                },
              ],
              "closed": false,
              "destination": SafeSubscriber {
                "_complete": undefined,
                "_context": [Circular],
                "_error": undefined,
                "_next": [Function],
                "_parentOrParents": null,
                "_parentSubscriber": [Circular],
                "_subscriptions": null,
                "closed": false,
                "destination": Object {
                  "closed": true,
                  "complete": [Function],
                  "error": [Function],
                  "next": [Function],
                },
                "isStopped": false,
                "syncErrorThrowable": false,
                "syncErrorThrown": false,
                "syncErrorValue": null,
              },
              "isStopped": false,
              "syncErrorThrowable": true,
              "syncErrorThrown": false,
              "syncErrorValue": null,
            },
          ],
          "thrownError": null,
        }
      }
      homeHref="/"
      id="mockId"
      isLocked={true}
      isNavOpen={false}
      navLinks$={
        BehaviorSubject {
          "_isScalar": false,
          "_value": Array [
            Object {
              "baseUrl": "",
              "href": "",
              "id": "opensearchDashboards",
              "title": "opensearchDashboards",
            },
          ],
          "closed": false,
          "hasError": false,
          "isStopped": false,
          "observers": Array [
            Subscriber {
              "_parentOrParents": null,
              "_subscriptions": Array [
                SubjectSubscription {
                  "_parentOrParents": [Circular],
                  "_subscriptions": null,
                  "closed": false,
                  "subject": [Circular],
                  "subscriber": [Circular],
                },
              ],
              "closed": false,
              "destination": SafeSubscriber {
                "_complete": undefined,
                "_context": [Circular],
                "_error": undefined,
                "_next": [Function],
                "_parentOrParents": null,
                "_parentSubscriber": [Circular],
                "_subscriptions": null,
                "closed": false,
                "destination": Object {
                  "closed": true,
                  "complete": [Function],
                  "error": [Function],
                  "next": [Function],
                },
                "isStopped": false,
                "syncErrorThrowable": false,
                "syncErrorThrown": false,
                "syncErrorValue": null,
              },
              "isStopped": false,
              "syncErrorThrowable": true,
              "syncErrorThrown": false,
              "syncErrorValue": null,
            },
            Subscriber {
              "_parentOrParents": null,
              "_subscriptions": Array [
                SubjectSubscription {
                  "_parentOrParents": [Circular],
                  "_subscriptions": null,
                  "closed": false,
                  "subject": [Circular],
                  "subscriber": [Circular],
                },
              ],
              "closed": false,
              "destination": SafeSubscriber {
                "_complete": undefined,
                "_context": [Circular],
                "_error": undefined,
                "_next": [Function],
                "_parentOrParents": null,
                "_parentSubscriber": [Circular],
                "_subscriptions": null,
                "closed": false,
                "destination": Object {
                  "closed": true,
                  "complete": [Function],
                  "error": [Function],
                  "next": [Function],
                },
                "isStopped": false,
                "syncErrorThrowable": false,
                "syncErrorThrown": false,
                "syncErrorValue": null,
              },
              "isStopped": false,
              "syncErrorThrowable": true,
              "syncErrorThrown": false,
              "syncErrorValue": null,
            },
            Subscriber {
              "_parentOrParents": null,
              "_subscriptions": Array [
                SubjectSubscription {
                  "_parentOrParents": [Circular],
                  "_subscriptions": null,
                  "closed": false,
                  "subject": [Circular],
                  "subscriber": [Circular],
                },
              ],
              "closed": false,
              "destination": SafeSubscriber {
                "_complete": undefined,
                "_context": [Circular],
                "_error": undefined,
                "_next": [Function],
                "_parentOrParents": null,
                "_parentSubscriber": [Circular],
                "_subscriptions": null,
                "closed": false,
                "destination": Object {
                  "closed": true,
                  "complete": [Function],
                  "error": [Function],
                  "next": [Function],
                },
                "isStopped": false,
                "syncErrorThrowable": false,
                "syncErrorThrown": false,
                "syncErrorValue": null,
              },
              "isStopped": false,
              "syncErrorThrowable": true,
              "syncErrorThrown": false,
              "syncErrorValue": null,
            },
          ],
          "thrownError": null,
        }
      }
      navigateToApp={[MockFunction]}
      navigateToUrl={[MockFunction]}
      onIsLockedUpdate={[Function]}
      recentlyAccessed$={
        BehaviorSubject {
          "_isScalar": false,
          "_value": Array [
            Object {
              "id": "dashboard",
              "label": "dashboard",
              "link": "",
            },
          ],
          "closed": false,
          "hasError": false,
          "isStopped": false,
          "observers": Array [
            Subscriber {
              "_parentOrParents": null,
              "_subscriptions": Array [
                SubjectSubscription {
                  "_parentOrParents": [Circular],
                  "_subscriptions": null,
                  "closed": false,
                  "subject": [Circular],
                  "subscriber": [Circular],
                },
              ],
              "closed": false,
              "destination": SafeSubscriber {
                "_complete": undefined,
                "_context": [Circular],
                "_error": undefined,
                "_next": [Function],
                "_parentOrParents": null,
                "_parentSubscriber": [Circular],
                "_subscriptions": null,
                "closed": false,
                "destination": Object {
                  "closed": true,
                  "complete": [Function],
                  "error": [Function],
                  "next": [Function],
                },
                "isStopped": false,
                "syncErrorThrowable": false,
                "syncErrorThrown": false,
                "syncErrorValue": null,
              },
              "isStopped": false,
              "syncErrorThrowable": true,
              "syncErrorThrown": false,
              "syncErrorValue": null,
            },
          ],
          "thrownError": null,
        }
      }
    >
      <EuiCollapsibleNav
        aria-label="Primary"
        data-test-subj="collapsibleNav"
        id="mockId"
        isDocked={true}
        isOpen={false}
        onClose={[Function]}
        outsideClickCloses={false}
      >
        <EuiFlyout
          aria-label="Primary"
          as="nav"
          className="euiCollapsibleNav"
          closeButtonPosition="outside"
          data-test-subj="collapsibleNav"
          hideCloseButton={true}
          id="mockId"
          onClose={[Function]}
          outsideClickCloses={false}
          ownFocus={true}
          paddingSize="none"
          pushMinBreakpoint="l"
          role={null}
          side="left"
          size={320}
          type="push"
        >
          <nav
            data-eui="EuiFlyout"
            data-test-subj="collapsibleNav"
            role={null}
          >
            <EuiFlexItem
              grow={false}
              style={
                Object {
                  "flexShrink": 0,
                }
              }
            >
              <div
                className="euiFlexItem euiFlexItem--flexGrowZero"
                style={
                  Object {
                    "flexShrink": 0,
                  }
                }
              >
                <EuiCollapsibleNavGroup
                  background="light"
                  className="eui-yScroll"
                  style={
                    Object {
                      "maxHeight": "40vh",
                    }
                  }
                >
                  <div
                    className="euiCollapsibleNavGroup euiCollapsibleNavGroup--light eui-yScroll"
                    id="mockId"
                    style={
                      Object {
                        "maxHeight": "40vh",
                      }
                    }
                  >
                    <div
                      className="euiCollapsibleNavGroup__children"
                    >
                      <EuiListGroup
                        color="text"
                        gutterSize="none"
                        listItems={
                          Array [
                            Object {
                              "data-test-subj": "collapsibleNavCustomNavLink",
                              "href": "",
                              "icon": undefined,
                              "iconType": undefined,
                              "isActive": false,
                              "isDisabled": undefined,
                              "label": "Manage cloud deployment",
                              "onClick": [Function],
                            },
                          ]
                        }
                        maxWidth="none"
                        size="s"
                      >
                        <ul
                          className="euiListGroup"
                          style={
                            Object {
                              "maxWidth": "none",
                            }
                          }
                        >
                          <EuiListGroupItem
                            color="text"
                            data-test-subj="collapsibleNavCustomNavLink"
                            href=""
                            isActive={false}
                            key="title-0"
                            label="Manage cloud deployment"
                            onClick={[Function]}
                            showToolTip={false}
                            size="s"
                            wrapText={false}
                          >
                            <li
                              className="euiListGroupItem euiListGroupItem--small euiListGroupItem--text euiListGroupItem-isClickable"
                            >
                              <button
                                className="euiListGroupItem__button"
                                data-test-subj="collapsibleNavCustomNavLink"
                                disabled={false}
                                onClick={[Function]}
                                type="button"
                              >
                                <span
                                  className="euiListGroupItem__label"
                                  title="Manage cloud deployment"
                                >
                                  Manage cloud deployment
                                </span>
                              </button>
                            </li>
                          </EuiListGroupItem>
                        </ul>
                      </EuiListGroup>
                    </div>
                  </div>
                </EuiCollapsibleNavGroup>
              </div>
            </EuiFlexItem>
            <EuiHorizontalRule
              margin="none"
            >
              <hr
                className="euiHorizontalRule euiHorizontalRule--full"
              />
            </EuiHorizontalRule>
            <EuiCollapsibleNavGroup
              background="light"
              data-test-subj="collapsibleNavGroup-recentlyViewed"
              initialIsOpen={true}
              isCollapsible={true}
              key="recentlyViewed"
              onToggle={[Function]}
              title="Recently viewed"
            >
              <EuiAccordion
                arrowDisplay="right"
                buttonClassName="euiCollapsibleNavGroup__heading"
                buttonContent={
                  <EuiFlexGroup
                    alignItems="center"
                    gutterSize="m"
                    responsive={false}
                  >
                    <EuiFlexItem>
                      <EuiTitle
                        size="xxs"
                      >
                        <h3
                          className="euiCollapsibleNavGroup__title"
                          id="mockId__title"
                        >
                          Recently viewed
                        </h3>
                      </EuiTitle>
                    </EuiFlexItem>
                  </EuiFlexGroup>
                }
                className="euiCollapsibleNavGroup euiCollapsibleNavGroup--light euiCollapsibleNavGroup--withHeading"
                data-test-subj="collapsibleNavGroup-recentlyViewed"
                id="mockId"
                initialIsOpen={true}
                isLoading={false}
                isLoadingMessage={false}
                onToggle={[Function]}
                paddingSize="none"
              >
                <div
                  className="euiAccordion euiAccordion-isOpen euiCollapsibleNavGroup euiCollapsibleNavGroup--light euiCollapsibleNavGroup--withHeading"
                  data-test-subj="collapsibleNavGroup-recentlyViewed"
                  onToggle={[Function]}
                >
                  <div
                    className="euiAccordion__triggerWrapper"
                  >
                    <button
                      aria-controls="mockId"
                      aria-expanded={true}
                      className="euiAccordion__button euiAccordion__buttonReverse euiCollapsibleNavGroup__heading"
                      id="mockId"
                      onClick={[Function]}
                      type="button"
                    >
                      <span
                        className="euiAccordion__iconWrapper"
                      >
                        <EuiIcon
                          className="euiAccordion__icon euiAccordion__icon-isOpen"
                          size="m"
                          type="arrowRight"
                        >
                          <span
                            className="euiAccordion__icon euiAccordion__icon-isOpen"
                            data-euiicon-type="arrowRight"
                            size="m"
                          />
                        </EuiIcon>
                      </span>
                      <span
                        className="euiIEFlexWrapFix"
                      >
                        <EuiFlexGroup
                          alignItems="center"
                          gutterSize="m"
                          responsive={false}
                        >
                          <div
                            className="euiFlexGroup euiFlexGroup--gutterMedium euiFlexGroup--alignItemsCenter euiFlexGroup--directionRow"
                          >
                            <EuiFlexItem>
                              <div
                                className="euiFlexItem"
                              >
                                <EuiTitle
                                  size="xxs"
                                >
                                  <h3
                                    className="euiTitle euiTitle--xxsmall euiCollapsibleNavGroup__title"
                                    id="mockId__title"
                                  >
                                    Recently viewed
                                  </h3>
                                </EuiTitle>
                              </div>
                            </EuiFlexItem>
                          </div>
                        </EuiFlexGroup>
                      </span>
                    </button>
                  </div>
                  <div
                    aria-labelledby="mockId"
                    className="euiAccordion__childWrapper"
                    id="mockId"
                    role="region"
                    tabIndex={-1}
                  >
                    <EuiResizeObserver
                      onResize={[Function]}
                    >
                      <div>
                        <div
                          className=""
                        >
                          <div
                            className="euiCollapsibleNavGroup__children"
                          >
                            <EuiListGroup
                              aria-label="Recently viewed links"
                              className="osdCollapsibleNav__recentsListGroup"
                              color="subdued"
                              gutterSize="none"
                              listItems={
                                Array [
                                  Object {
                                    "aria-label": "dashboard, type: opensearchDashboards",
                                    "data-test-subj": "collapsibleNavAppLink--recent",
                                    "href": "http://localhost/",
                                    "label": "dashboard",
                                    "onClick": [Function],
                                    "title": "dashboard, type: opensearchDashboards",
                                  },
                                ]
                              }
                              maxWidth="none"
                              size="s"
                            >
                              <ul
                                aria-label="Recently viewed links"
                                className="euiListGroup osdCollapsibleNav__recentsListGroup"
                                style={
                                  Object {
                                    "maxWidth": "none",
                                  }
                                }
                              >
                                <EuiListGroupItem
                                  aria-label="dashboard, type: opensearchDashboards"
                                  color="subdued"
                                  data-test-subj="collapsibleNavAppLink--recent"
                                  href="http://localhost/"
                                  key="title-0"
                                  label="dashboard"
                                  onClick={[Function]}
                                  showToolTip={false}
                                  size="s"
                                  title="dashboard, type: opensearchDashboards"
                                  wrapText={false}
                                >
                                  <li
                                    className="euiListGroupItem euiListGroupItem--small euiListGroupItem--subdued euiListGroupItem-isClickable"
                                  >
                                    <a
                                      aria-label="dashboard, type: opensearchDashboards"
                                      className="euiListGroupItem__button"
                                      data-test-subj="collapsibleNavAppLink--recent"
                                      href="http://localhost/"
                                      onClick={[Function]}
                                      rel="noreferrer"
                                      title="dashboard, type: opensearchDashboards"
                                    >
                                      <span
                                        className="euiListGroupItem__label"
                                        title="dashboard"
                                      >
                                        dashboard
                                      </span>
                                    </a>
                                  </li>
                                </EuiListGroupItem>
                              </ul>
                            </EuiListGroup>
                          </div>
                        </div>
                      </div>
                    </EuiResizeObserver>
                  </div>
                </div>
              </EuiAccordion>
            </EuiCollapsibleNavGroup>
            <EuiHorizontalRule
              margin="none"
            >
              <hr
                className="euiHorizontalRule euiHorizontalRule--full"
              />
            </EuiHorizontalRule>
            <EuiFlexItem
              className="eui-yScroll"
            >
              <div
                className="euiFlexItem eui-yScroll"
              >
                <EuiCollapsibleNavGroup
                  data-test-subj="collapsibleNavGroup-noCategory"
                  key="0"
                >
                  <div
                    className="euiCollapsibleNavGroup"
                    data-test-subj="collapsibleNavGroup-noCategory"
                    id="mockId"
                  >
                    <div
                      className="euiCollapsibleNavGroup__children"
                    >
                      <EuiListGroup
                        flush={true}
                      >
                        <ul
                          className="euiListGroup euiListGroup-flush euiListGroup--gutterSmall euiListGroup-maxWidthDefault"
                        >
                          <EuiListGroupItem
                            color="text"
                            data-test-subj="collapsibleNavAppLink"
                            href=""
                            isActive={false}
                            label="opensearchDashboards"
                            onClick={[Function]}
                            size="s"
                          >
                            <li
                              className="euiListGroupItem euiListGroupItem--small euiListGroupItem--text euiListGroupItem-isClickable"
                            >
                              <button
                                className="euiListGroupItem__button"
                                data-test-subj="collapsibleNavAppLink"
                                disabled={false}
                                onClick={[Function]}
                                type="button"
                              >
                                <span
                                  className="euiListGroupItem__label"
                                  title="opensearchDashboards"
                                >
                                  opensearchDashboards
                                </span>
                              </button>
                            </li>
                          </EuiListGroupItem>
                        </ul>
                      </EuiListGroup>
                    </div>
                  </div>
                </EuiCollapsibleNavGroup>
                <EuiShowFor
                  sizes={
                    Array [
                      "l",
                      "xl",
                    ]
                  }
                >
                  <EuiCollapsibleNavGroup>
                    <div
                      className="euiCollapsibleNavGroup"
                      id="mockId"
                    >
                      <div
                        className="euiCollapsibleNavGroup__children"
                      >
                        <EuiListGroup
                          flush={true}
                        >
                          <ul
                            className="euiListGroup euiListGroup-flush euiListGroup--gutterSmall euiListGroup-maxWidthDefault"
                          >
                            <EuiListGroupItem
                              aria-label="Undock primary navigation"
                              buttonRef={
                                Object {
                                  "current": <button
                                    aria-label="Undock primary navigation"
                                    class="euiListGroupItem__button"
                                    data-test-subj="collapsible-nav-lock"
                                    type="button"
                                  >
                                    <span
                                      class="euiListGroupItem__icon"
                                      color="inherit"
                                      data-euiicon-type="lock"
                                    />
                                    <span
                                      class="euiListGroupItem__label"
                                      title="Undock navigation"
                                    >
                                      Undock navigation
                                    </span>
                                  </button>,
                                }
                              }
                              color="subdued"
                              data-test-subj="collapsible-nav-lock"
                              iconType="lock"
                              label="Undock navigation"
                              onClick={[Function]}
                              size="xs"
                            >
                              <li
                                className="euiListGroupItem euiListGroupItem--xSmall euiListGroupItem--subdued euiListGroupItem-isClickable"
                              >
                                <button
                                  aria-label="Undock primary navigation"
                                  className="euiListGroupItem__button"
                                  data-test-subj="collapsible-nav-lock"
                                  disabled={false}
                                  onClick={[Function]}
                                  type="button"
                                >
                                  <EuiIcon
                                    className="euiListGroupItem__icon"
                                    color="inherit"
                                    type="lock"
                                  >
                                    <span
                                      className="euiListGroupItem__icon"
                                      color="inherit"
                                      data-euiicon-type="lock"
                                    />
                                  </EuiIcon>
                                  <span
                                    className="euiListGroupItem__label"
                                    title="Undock navigation"
                                  >
                                    Undock navigation
                                  </span>
                                </button>
                              </li>
                            </EuiListGroupItem>
                          </ul>
                        </EuiListGroup>
                      </div>
                    </div>
                  </EuiCollapsibleNavGroup>
                </EuiShowFor>
              </div>
            </EuiFlexItem>
          </nav>
        </EuiFlyout>
      </EuiCollapsibleNav>
    </CollapsibleNav>
  </header>
</Header>
`;

exports[`Header renders condensed header 1`] = `
<Header
  appTitle$={
    BehaviorSubject {
      "_isScalar": false,
      "_value": "test",
      "closed": false,
      "hasError": false,
      "isStopped": false,
      "observers": Array [
        Subscriber {
          "_parentOrParents": null,
          "_subscriptions": Array [
            SubjectSubscription {
              "_parentOrParents": [Circular],
              "_subscriptions": null,
              "closed": false,
              "subject": [Circular],
              "subscriber": [Circular],
            },
          ],
          "closed": false,
          "destination": SafeSubscriber {
            "_complete": undefined,
            "_context": [Circular],
            "_error": undefined,
            "_next": [Function],
            "_parentOrParents": null,
            "_parentSubscriber": [Circular],
            "_subscriptions": null,
            "closed": false,
            "destination": Object {
              "closed": true,
              "complete": [Function],
              "error": [Function],
              "next": [Function],
            },
            "isStopped": false,
            "syncErrorThrowable": false,
            "syncErrorThrown": false,
            "syncErrorValue": null,
          },
          "isStopped": false,
          "syncErrorThrowable": true,
          "syncErrorThrown": false,
          "syncErrorValue": null,
        },
      ],
      "thrownError": null,
    }
  }
  application={
    Object {
      "applications$": BehaviorSubject {
        "_isScalar": false,
        "_value": Map {},
        "closed": false,
        "hasError": false,
        "isStopped": false,
        "observers": Array [],
        "thrownError": null,
      },
      "capabilities": Object {
        "catalogue": Object {},
        "management": Object {},
        "navLinks": Object {},
      },
      "currentActionMenu$": BehaviorSubject {
        "_isScalar": false,
        "_value": undefined,
        "closed": false,
        "hasError": false,
        "isStopped": false,
        "observers": Array [
          Subscriber {
            "_parentOrParents": null,
            "_subscriptions": Array [
              SubjectSubscription {
                "_parentOrParents": [Circular],
                "_subscriptions": null,
                "closed": false,
                "subject": [Circular],
                "subscriber": [Circular],
              },
            ],
            "closed": false,
            "destination": SafeSubscriber {
              "_complete": undefined,
              "_context": [Circular],
              "_error": undefined,
              "_next": [Function],
              "_parentOrParents": null,
              "_parentSubscriber": [Circular],
              "_subscriptions": null,
              "closed": false,
              "destination": Object {
                "closed": true,
                "complete": [Function],
                "error": [Function],
                "next": [Function],
              },
              "isStopped": false,
              "syncErrorThrowable": false,
              "syncErrorThrown": false,
              "syncErrorValue": null,
            },
            "isStopped": false,
            "syncErrorThrowable": true,
            "syncErrorThrown": false,
            "syncErrorValue": null,
          },
        ],
        "thrownError": null,
      },
      "currentAppId$": Observable {
        "_isScalar": false,
        "source": Subject {
          "_isScalar": false,
          "closed": false,
          "hasError": false,
          "isStopped": false,
          "observers": Array [
            Subscriber {
              "_parentOrParents": null,
              "_subscriptions": Array [
                SubjectSubscription {
                  "_parentOrParents": [Circular],
                  "_subscriptions": null,
                  "closed": false,
                  "subject": [Circular],
                  "subscriber": [Circular],
                },
              ],
              "closed": false,
              "destination": SafeSubscriber {
                "_complete": undefined,
                "_context": [Circular],
                "_error": undefined,
                "_next": [Function],
                "_parentOrParents": null,
                "_parentSubscriber": [Circular],
                "_subscriptions": null,
                "closed": false,
                "destination": Object {
                  "closed": true,
                  "complete": [Function],
                  "error": [Function],
                  "next": [Function],
                },
                "isStopped": false,
                "syncErrorThrowable": false,
                "syncErrorThrown": false,
                "syncErrorValue": null,
              },
              "isStopped": false,
              "syncErrorThrowable": true,
              "syncErrorThrown": false,
              "syncErrorValue": null,
            },
          ],
          "thrownError": null,
        },
      },
      "getComponent": [MockFunction],
      "getUrlForApp": [MockFunction],
      "history": Object {
        "action": "PUSH",
        "block": [MockFunction],
        "createHref": [MockFunction],
        "go": [MockFunction],
        "goBack": [MockFunction],
        "goForward": [MockFunction],
        "length": 1,
        "listen": [MockFunction],
        "location": Object {
          "hash": "",
          "key": "",
          "pathname": "/",
          "search": "",
          "state": undefined,
        },
        "push": [MockFunction],
        "replace": [MockFunction],
      },
      "navigateToApp": [MockFunction],
      "navigateToUrl": [MockFunction],
      "registerMountContext": [MockFunction],
    }
  }
  badge$={
    BehaviorSubject {
      "_isScalar": false,
      "_value": undefined,
      "closed": false,
      "hasError": false,
      "isStopped": false,
      "observers": Array [
        Subscriber {
          "_parentOrParents": null,
          "_subscriptions": Array [
            SubjectSubscription {
              "_parentOrParents": [Circular],
              "_subscriptions": null,
              "closed": false,
              "subject": [Circular],
              "subscriber": [Circular],
            },
          ],
          "closed": false,
          "destination": SafeSubscriber {
            "_complete": undefined,
            "_context": [Circular],
            "_error": undefined,
            "_next": [Function],
            "_parentOrParents": null,
            "_parentSubscriber": [Circular],
            "_subscriptions": null,
            "closed": false,
            "destination": Object {
              "closed": true,
              "complete": [Function],
              "error": [Function],
              "next": [Function],
            },
            "isStopped": false,
            "syncErrorThrowable": false,
            "syncErrorThrown": false,
            "syncErrorValue": null,
          },
          "isStopped": false,
          "syncErrorThrowable": true,
          "syncErrorThrown": false,
          "syncErrorValue": null,
        },
      ],
      "thrownError": null,
    }
  }
  basePath={
    BasePath {
      "basePath": "/test",
      "get": [Function],
      "prepend": [Function],
      "remove": [Function],
      "serverBasePath": "/test",
    }
  }
  branding={
    Object {
      "applicationTitle": "Foobar Dashboards",
      "darkMode": false,
      "logo": Object {
        "defaultUrl": "/foo",
      },
      "mark": Object {
        "defaultUrl": "/foo",
      },
      "useExpandedHeader": false,
    }
  }
  breadcrumbs$={
    BehaviorSubject {
      "_isScalar": false,
      "_value": Array [],
      "closed": false,
      "hasError": false,
      "isStopped": false,
      "observers": Array [
        Subscriber {
          "_parentOrParents": null,
          "_subscriptions": Array [
            SubjectSubscription {
              "_parentOrParents": [Circular],
              "_subscriptions": null,
              "closed": false,
              "subject": [Circular],
              "subscriber": [Circular],
            },
          ],
          "closed": false,
          "destination": SafeSubscriber {
            "_complete": undefined,
            "_context": [Circular],
            "_error": undefined,
            "_next": [Function],
            "_parentOrParents": null,
            "_parentSubscriber": [Circular],
            "_subscriptions": null,
            "closed": false,
            "destination": Object {
              "closed": true,
              "complete": [Function],
              "error": [Function],
              "next": [Function],
            },
            "isStopped": false,
            "syncErrorThrowable": false,
            "syncErrorThrown": false,
            "syncErrorValue": null,
          },
          "isStopped": false,
          "syncErrorThrowable": true,
          "syncErrorThrown": false,
          "syncErrorValue": null,
        },
      ],
      "thrownError": null,
    }
  }
  customNavLink$={
    BehaviorSubject {
      "_isScalar": false,
      "_value": undefined,
      "closed": false,
      "hasError": false,
      "isStopped": false,
      "observers": Array [
        Subscriber {
          "_parentOrParents": null,
          "_subscriptions": Array [
            SubjectSubscription {
              "_parentOrParents": [Circular],
              "_subscriptions": null,
              "closed": false,
              "subject": [Circular],
              "subscriber": [Circular],
            },
          ],
          "closed": false,
          "destination": SafeSubscriber {
            "_complete": undefined,
            "_context": [Circular],
            "_error": undefined,
            "_next": [Function],
            "_parentOrParents": null,
            "_parentSubscriber": [Circular],
            "_subscriptions": null,
            "closed": false,
            "destination": Object {
              "closed": true,
              "complete": [Function],
              "error": [Function],
              "next": [Function],
            },
            "isStopped": false,
            "syncErrorThrowable": false,
            "syncErrorThrown": false,
            "syncErrorValue": null,
          },
          "isStopped": false,
          "syncErrorThrowable": true,
          "syncErrorThrown": false,
          "syncErrorValue": null,
        },
      ],
      "thrownError": null,
    }
  }
  forceAppSwitcherNavigation$={
    BehaviorSubject {
      "_isScalar": false,
      "_value": false,
      "closed": false,
      "hasError": false,
      "isStopped": false,
      "observers": Array [
        Subscriber {
          "_parentOrParents": null,
          "_subscriptions": Array [
            SubjectSubscription {
              "_parentOrParents": [Circular],
              "_subscriptions": null,
              "closed": false,
              "subject": [Circular],
              "subscriber": [Circular],
            },
          ],
          "closed": false,
          "destination": SafeSubscriber {
            "_complete": undefined,
            "_context": [Circular],
            "_error": undefined,
            "_next": [Function],
            "_parentOrParents": null,
            "_parentSubscriber": [Circular],
            "_subscriptions": null,
            "closed": false,
            "destination": Object {
              "closed": true,
              "complete": [Function],
              "error": [Function],
              "next": [Function],
            },
            "isStopped": false,
            "syncErrorThrowable": false,
            "syncErrorThrown": false,
            "syncErrorValue": null,
          },
          "isStopped": false,
          "syncErrorThrowable": true,
          "syncErrorThrown": false,
          "syncErrorValue": null,
        },
      ],
      "thrownError": null,
    }
  }
  helpExtension$={
    BehaviorSubject {
      "_isScalar": false,
      "_value": undefined,
      "closed": false,
      "hasError": false,
      "isStopped": false,
      "observers": Array [
        InnerSubscriber {
          "_parentOrParents": CombineLatestSubscriber {
            "_parentOrParents": Subscriber {
              "_parentOrParents": null,
              "_subscriptions": Array [
                [Circular],
              ],
              "closed": false,
              "destination": SafeSubscriber {
                "_complete": undefined,
                "_context": [Circular],
                "_error": undefined,
                "_next": [Function],
                "_parentOrParents": null,
                "_parentSubscriber": [Circular],
                "_subscriptions": null,
                "closed": false,
                "destination": Object {
                  "closed": true,
                  "complete": [Function],
                  "error": [Function],
                  "next": [Function],
                },
                "isStopped": false,
                "syncErrorThrowable": false,
                "syncErrorThrown": false,
                "syncErrorValue": null,
              },
              "isStopped": false,
              "syncErrorThrowable": true,
              "syncErrorThrown": false,
              "syncErrorValue": null,
            },
            "_subscriptions": Array [
              [Circular],
              InnerSubscriber {
                "_parentOrParents": [Circular],
                "_subscriptions": Array [
                  SubjectSubscription {
                    "_parentOrParents": [Circular],
                    "_subscriptions": null,
                    "closed": false,
                    "subject": BehaviorSubject {
                      "_isScalar": false,
                      "_value": "",
                      "closed": false,
                      "hasError": false,
                      "isStopped": false,
                      "observers": Array [
                        [Circular],
                      ],
                      "thrownError": null,
                    },
                    "subscriber": [Circular],
                  },
                ],
                "closed": false,
                "destination": Object {
                  "closed": true,
                  "complete": [Function],
                  "error": [Function],
                  "next": [Function],
                },
                "index": 1,
                "isStopped": false,
                "outerIndex": 1,
                "outerValue": undefined,
                "parent": [Circular],
                "syncErrorThrowable": false,
                "syncErrorThrown": false,
                "syncErrorValue": null,
              },
            ],
            "active": 2,
            "closed": false,
            "destination": Subscriber {
              "_parentOrParents": null,
              "_subscriptions": Array [
                [Circular],
              ],
              "closed": false,
              "destination": SafeSubscriber {
                "_complete": undefined,
                "_context": [Circular],
                "_error": undefined,
                "_next": [Function],
                "_parentOrParents": null,
                "_parentSubscriber": [Circular],
                "_subscriptions": null,
                "closed": false,
                "destination": Object {
                  "closed": true,
                  "complete": [Function],
                  "error": [Function],
                  "next": [Function],
                },
                "isStopped": false,
                "syncErrorThrowable": false,
                "syncErrorThrown": false,
                "syncErrorValue": null,
              },
              "isStopped": false,
              "syncErrorThrowable": true,
              "syncErrorThrown": false,
              "syncErrorValue": null,
            },
            "isStopped": true,
            "observables": Array [
              [Circular],
              BehaviorSubject {
                "_isScalar": false,
                "_value": "",
                "closed": false,
                "hasError": false,
                "isStopped": false,
                "observers": Array [
                  InnerSubscriber {
                    "_parentOrParents": [Circular],
                    "_subscriptions": Array [
                      SubjectSubscription {
                        "_parentOrParents": [Circular],
                        "_subscriptions": null,
                        "closed": false,
                        "subject": [Circular],
                        "subscriber": [Circular],
                      },
                    ],
                    "closed": false,
                    "destination": Object {
                      "closed": true,
                      "complete": [Function],
                      "error": [Function],
                      "next": [Function],
                    },
                    "index": 1,
                    "isStopped": false,
                    "outerIndex": 1,
                    "outerValue": undefined,
                    "parent": [Circular],
                    "syncErrorThrowable": false,
                    "syncErrorThrown": false,
                    "syncErrorValue": null,
                  },
                ],
                "thrownError": null,
              },
            ],
            "resultSelector": undefined,
            "syncErrorThrowable": true,
            "syncErrorThrown": false,
            "syncErrorValue": null,
            "toRespond": 0,
            "values": Array [
              undefined,
              "",
            ],
          },
          "_subscriptions": Array [
            SubjectSubscription {
              "_parentOrParents": [Circular],
              "_subscriptions": null,
              "closed": false,
              "subject": [Circular],
              "subscriber": [Circular],
            },
          ],
          "closed": false,
          "destination": Object {
            "closed": true,
            "complete": [Function],
            "error": [Function],
            "next": [Function],
          },
          "index": 1,
          "isStopped": false,
          "outerIndex": 0,
          "outerValue": undefined,
          "parent": CombineLatestSubscriber {
            "_parentOrParents": Subscriber {
              "_parentOrParents": null,
              "_subscriptions": Array [
                [Circular],
              ],
              "closed": false,
              "destination": SafeSubscriber {
                "_complete": undefined,
                "_context": [Circular],
                "_error": undefined,
                "_next": [Function],
                "_parentOrParents": null,
                "_parentSubscriber": [Circular],
                "_subscriptions": null,
                "closed": false,
                "destination": Object {
                  "closed": true,
                  "complete": [Function],
                  "error": [Function],
                  "next": [Function],
                },
                "isStopped": false,
                "syncErrorThrowable": false,
                "syncErrorThrown": false,
                "syncErrorValue": null,
              },
              "isStopped": false,
              "syncErrorThrowable": true,
              "syncErrorThrown": false,
              "syncErrorValue": null,
            },
            "_subscriptions": Array [
              [Circular],
              InnerSubscriber {
                "_parentOrParents": [Circular],
                "_subscriptions": Array [
                  SubjectSubscription {
                    "_parentOrParents": [Circular],
                    "_subscriptions": null,
                    "closed": false,
                    "subject": BehaviorSubject {
                      "_isScalar": false,
                      "_value": "",
                      "closed": false,
                      "hasError": false,
                      "isStopped": false,
                      "observers": Array [
                        [Circular],
                      ],
                      "thrownError": null,
                    },
                    "subscriber": [Circular],
                  },
                ],
                "closed": false,
                "destination": Object {
                  "closed": true,
                  "complete": [Function],
                  "error": [Function],
                  "next": [Function],
                },
                "index": 1,
                "isStopped": false,
                "outerIndex": 1,
                "outerValue": undefined,
                "parent": [Circular],
                "syncErrorThrowable": false,
                "syncErrorThrown": false,
                "syncErrorValue": null,
              },
            ],
            "active": 2,
            "closed": false,
            "destination": Subscriber {
              "_parentOrParents": null,
              "_subscriptions": Array [
                [Circular],
              ],
              "closed": false,
              "destination": SafeSubscriber {
                "_complete": undefined,
                "_context": [Circular],
                "_error": undefined,
                "_next": [Function],
                "_parentOrParents": null,
                "_parentSubscriber": [Circular],
                "_subscriptions": null,
                "closed": false,
                "destination": Object {
                  "closed": true,
                  "complete": [Function],
                  "error": [Function],
                  "next": [Function],
                },
                "isStopped": false,
                "syncErrorThrowable": false,
                "syncErrorThrown": false,
                "syncErrorValue": null,
              },
              "isStopped": false,
              "syncErrorThrowable": true,
              "syncErrorThrown": false,
              "syncErrorValue": null,
            },
            "isStopped": true,
            "observables": Array [
              [Circular],
              BehaviorSubject {
                "_isScalar": false,
                "_value": "",
                "closed": false,
                "hasError": false,
                "isStopped": false,
                "observers": Array [
                  InnerSubscriber {
                    "_parentOrParents": [Circular],
                    "_subscriptions": Array [
                      SubjectSubscription {
                        "_parentOrParents": [Circular],
                        "_subscriptions": null,
                        "closed": false,
                        "subject": [Circular],
                        "subscriber": [Circular],
                      },
                    ],
                    "closed": false,
                    "destination": Object {
                      "closed": true,
                      "complete": [Function],
                      "error": [Function],
                      "next": [Function],
                    },
                    "index": 1,
                    "isStopped": false,
                    "outerIndex": 1,
                    "outerValue": undefined,
                    "parent": [Circular],
                    "syncErrorThrowable": false,
                    "syncErrorThrown": false,
                    "syncErrorValue": null,
                  },
                ],
                "thrownError": null,
              },
            ],
            "resultSelector": undefined,
            "syncErrorThrowable": true,
            "syncErrorThrown": false,
            "syncErrorValue": null,
            "toRespond": 0,
            "values": Array [
              undefined,
              "",
            ],
          },
          "syncErrorThrowable": false,
          "syncErrorThrown": false,
          "syncErrorValue": null,
        },
      ],
      "thrownError": null,
    }
  }
  helpSupportUrl$={
    BehaviorSubject {
      "_isScalar": false,
      "_value": "",
      "closed": false,
      "hasError": false,
      "isStopped": false,
      "observers": Array [
        InnerSubscriber {
          "_parentOrParents": CombineLatestSubscriber {
            "_parentOrParents": Subscriber {
              "_parentOrParents": null,
              "_subscriptions": Array [
                [Circular],
              ],
              "closed": false,
              "destination": SafeSubscriber {
                "_complete": undefined,
                "_context": [Circular],
                "_error": undefined,
                "_next": [Function],
                "_parentOrParents": null,
                "_parentSubscriber": [Circular],
                "_subscriptions": null,
                "closed": false,
                "destination": Object {
                  "closed": true,
                  "complete": [Function],
                  "error": [Function],
                  "next": [Function],
                },
                "isStopped": false,
                "syncErrorThrowable": false,
                "syncErrorThrown": false,
                "syncErrorValue": null,
              },
              "isStopped": false,
              "syncErrorThrowable": true,
              "syncErrorThrown": false,
              "syncErrorValue": null,
            },
            "_subscriptions": Array [
              InnerSubscriber {
                "_parentOrParents": [Circular],
                "_subscriptions": Array [
                  SubjectSubscription {
                    "_parentOrParents": [Circular],
                    "_subscriptions": null,
                    "closed": false,
                    "subject": BehaviorSubject {
                      "_isScalar": false,
                      "_value": undefined,
                      "closed": false,
                      "hasError": false,
                      "isStopped": false,
                      "observers": Array [
                        [Circular],
                      ],
                      "thrownError": null,
                    },
                    "subscriber": [Circular],
                  },
                ],
                "closed": false,
                "destination": Object {
                  "closed": true,
                  "complete": [Function],
                  "error": [Function],
                  "next": [Function],
                },
                "index": 1,
                "isStopped": false,
                "outerIndex": 0,
                "outerValue": undefined,
                "parent": [Circular],
                "syncErrorThrowable": false,
                "syncErrorThrown": false,
                "syncErrorValue": null,
              },
              [Circular],
            ],
            "active": 2,
            "closed": false,
            "destination": Subscriber {
              "_parentOrParents": null,
              "_subscriptions": Array [
                [Circular],
              ],
              "closed": false,
              "destination": SafeSubscriber {
                "_complete": undefined,
                "_context": [Circular],
                "_error": undefined,
                "_next": [Function],
                "_parentOrParents": null,
                "_parentSubscriber": [Circular],
                "_subscriptions": null,
                "closed": false,
                "destination": Object {
                  "closed": true,
                  "complete": [Function],
                  "error": [Function],
                  "next": [Function],
                },
                "isStopped": false,
                "syncErrorThrowable": false,
                "syncErrorThrown": false,
                "syncErrorValue": null,
              },
              "isStopped": false,
              "syncErrorThrowable": true,
              "syncErrorThrown": false,
              "syncErrorValue": null,
            },
            "isStopped": true,
            "observables": Array [
              BehaviorSubject {
                "_isScalar": false,
                "_value": undefined,
                "closed": false,
                "hasError": false,
                "isStopped": false,
                "observers": Array [
                  InnerSubscriber {
                    "_parentOrParents": [Circular],
                    "_subscriptions": Array [
                      SubjectSubscription {
                        "_parentOrParents": [Circular],
                        "_subscriptions": null,
                        "closed": false,
                        "subject": [Circular],
                        "subscriber": [Circular],
                      },
                    ],
                    "closed": false,
                    "destination": Object {
                      "closed": true,
                      "complete": [Function],
                      "error": [Function],
                      "next": [Function],
                    },
                    "index": 1,
                    "isStopped": false,
                    "outerIndex": 0,
                    "outerValue": undefined,
                    "parent": [Circular],
                    "syncErrorThrowable": false,
                    "syncErrorThrown": false,
                    "syncErrorValue": null,
                  },
                ],
                "thrownError": null,
              },
              [Circular],
            ],
            "resultSelector": undefined,
            "syncErrorThrowable": true,
            "syncErrorThrown": false,
            "syncErrorValue": null,
            "toRespond": 0,
            "values": Array [
              undefined,
              "",
            ],
          },
          "_subscriptions": Array [
            SubjectSubscription {
              "_parentOrParents": [Circular],
              "_subscriptions": null,
              "closed": false,
              "subject": [Circular],
              "subscriber": [Circular],
            },
          ],
          "closed": false,
          "destination": Object {
            "closed": true,
            "complete": [Function],
            "error": [Function],
            "next": [Function],
          },
          "index": 1,
          "isStopped": false,
          "outerIndex": 1,
          "outerValue": undefined,
          "parent": CombineLatestSubscriber {
            "_parentOrParents": Subscriber {
              "_parentOrParents": null,
              "_subscriptions": Array [
                [Circular],
              ],
              "closed": false,
              "destination": SafeSubscriber {
                "_complete": undefined,
                "_context": [Circular],
                "_error": undefined,
                "_next": [Function],
                "_parentOrParents": null,
                "_parentSubscriber": [Circular],
                "_subscriptions": null,
                "closed": false,
                "destination": Object {
                  "closed": true,
                  "complete": [Function],
                  "error": [Function],
                  "next": [Function],
                },
                "isStopped": false,
                "syncErrorThrowable": false,
                "syncErrorThrown": false,
                "syncErrorValue": null,
              },
              "isStopped": false,
              "syncErrorThrowable": true,
              "syncErrorThrown": false,
              "syncErrorValue": null,
            },
            "_subscriptions": Array [
              InnerSubscriber {
                "_parentOrParents": [Circular],
                "_subscriptions": Array [
                  SubjectSubscription {
                    "_parentOrParents": [Circular],
                    "_subscriptions": null,
                    "closed": false,
                    "subject": BehaviorSubject {
                      "_isScalar": false,
                      "_value": undefined,
                      "closed": false,
                      "hasError": false,
                      "isStopped": false,
                      "observers": Array [
                        [Circular],
                      ],
                      "thrownError": null,
                    },
                    "subscriber": [Circular],
                  },
                ],
                "closed": false,
                "destination": Object {
                  "closed": true,
                  "complete": [Function],
                  "error": [Function],
                  "next": [Function],
                },
                "index": 1,
                "isStopped": false,
                "outerIndex": 0,
                "outerValue": undefined,
                "parent": [Circular],
                "syncErrorThrowable": false,
                "syncErrorThrown": false,
                "syncErrorValue": null,
              },
              [Circular],
            ],
            "active": 2,
            "closed": false,
            "destination": Subscriber {
              "_parentOrParents": null,
              "_subscriptions": Array [
                [Circular],
              ],
              "closed": false,
              "destination": SafeSubscriber {
                "_complete": undefined,
                "_context": [Circular],
                "_error": undefined,
                "_next": [Function],
                "_parentOrParents": null,
                "_parentSubscriber": [Circular],
                "_subscriptions": null,
                "closed": false,
                "destination": Object {
                  "closed": true,
                  "complete": [Function],
                  "error": [Function],
                  "next": [Function],
                },
                "isStopped": false,
                "syncErrorThrowable": false,
                "syncErrorThrown": false,
                "syncErrorValue": null,
              },
              "isStopped": false,
              "syncErrorThrowable": true,
              "syncErrorThrown": false,
              "syncErrorValue": null,
            },
            "isStopped": true,
            "observables": Array [
              BehaviorSubject {
                "_isScalar": false,
                "_value": undefined,
                "closed": false,
                "hasError": false,
                "isStopped": false,
                "observers": Array [
                  InnerSubscriber {
                    "_parentOrParents": [Circular],
                    "_subscriptions": Array [
                      SubjectSubscription {
                        "_parentOrParents": [Circular],
                        "_subscriptions": null,
                        "closed": false,
                        "subject": [Circular],
                        "subscriber": [Circular],
                      },
                    ],
                    "closed": false,
                    "destination": Object {
                      "closed": true,
                      "complete": [Function],
                      "error": [Function],
                      "next": [Function],
                    },
                    "index": 1,
                    "isStopped": false,
                    "outerIndex": 0,
                    "outerValue": undefined,
                    "parent": [Circular],
                    "syncErrorThrowable": false,
                    "syncErrorThrown": false,
                    "syncErrorValue": null,
                  },
                ],
                "thrownError": null,
              },
              [Circular],
            ],
            "resultSelector": undefined,
            "syncErrorThrowable": true,
            "syncErrorThrown": false,
            "syncErrorValue": null,
            "toRespond": 0,
            "values": Array [
              undefined,
              "",
            ],
          },
          "syncErrorThrowable": false,
          "syncErrorThrown": false,
          "syncErrorValue": null,
        },
      ],
      "thrownError": null,
    }
  }
  homeHref="/"
  intl={
    Object {
      "defaultFormats": Object {},
      "defaultLocale": "en",
      "formatDate": [Function],
      "formatHTMLMessage": [Function],
      "formatMessage": [Function],
      "formatNumber": [Function],
      "formatPlural": [Function],
      "formatRelative": [Function],
      "formatTime": [Function],
      "formats": Object {
        "date": Object {
          "full": Object {
            "day": "numeric",
            "month": "long",
            "weekday": "long",
            "year": "numeric",
          },
          "long": Object {
            "day": "numeric",
            "month": "long",
            "year": "numeric",
          },
          "medium": Object {
            "day": "numeric",
            "month": "short",
            "year": "numeric",
          },
          "short": Object {
            "day": "numeric",
            "month": "numeric",
            "year": "2-digit",
          },
        },
        "number": Object {
          "currency": Object {
            "style": "currency",
          },
          "percent": Object {
            "style": "percent",
          },
        },
        "relative": Object {
          "days": Object {
            "units": "day",
          },
          "hours": Object {
            "units": "hour",
          },
          "minutes": Object {
            "units": "minute",
          },
          "months": Object {
            "units": "month",
          },
          "seconds": Object {
            "units": "second",
          },
          "years": Object {
            "units": "year",
          },
        },
        "time": Object {
          "full": Object {
            "hour": "numeric",
            "minute": "numeric",
            "second": "numeric",
            "timeZoneName": "short",
          },
          "long": Object {
            "hour": "numeric",
            "minute": "numeric",
            "second": "numeric",
            "timeZoneName": "short",
          },
          "medium": Object {
            "hour": "numeric",
            "minute": "numeric",
            "second": "numeric",
          },
          "short": Object {
            "hour": "numeric",
            "minute": "numeric",
          },
        },
      },
      "formatters": Object {
        "getDateTimeFormat": [Function],
        "getMessageFormat": [Function],
        "getNumberFormat": [Function],
        "getPluralFormat": [Function],
        "getRelativeFormat": [Function],
      },
      "locale": "en",
      "messages": Object {},
      "now": [Function],
      "onError": [Function],
      "textComponent": Symbol(react.fragment),
      "timeZone": null,
    }
  }
  isLocked$={
    BehaviorSubject {
      "_isScalar": false,
      "_value": false,
      "closed": false,
      "hasError": false,
      "isStopped": false,
      "observers": Array [
        Subscriber {
          "_parentOrParents": null,
          "_subscriptions": Array [
            SubjectSubscription {
              "_parentOrParents": [Circular],
              "_subscriptions": null,
              "closed": false,
              "subject": [Circular],
              "subscriber": [Circular],
            },
          ],
          "closed": false,
          "destination": SafeSubscriber {
            "_complete": undefined,
            "_context": [Circular],
            "_error": undefined,
            "_next": [Function],
            "_parentOrParents": null,
            "_parentSubscriber": [Circular],
            "_subscriptions": null,
            "closed": false,
            "destination": Object {
              "closed": true,
              "complete": [Function],
              "error": [Function],
              "next": [Function],
            },
            "isStopped": false,
            "syncErrorThrowable": false,
            "syncErrorThrown": false,
            "syncErrorValue": null,
          },
          "isStopped": false,
          "syncErrorThrowable": true,
          "syncErrorThrown": false,
          "syncErrorValue": null,
        },
      ],
      "thrownError": null,
    }
  }
  isVisible$={
    BehaviorSubject {
      "_isScalar": false,
      "_value": true,
      "closed": false,
      "hasError": false,
      "isStopped": false,
      "observers": Array [
        Subscriber {
          "_parentOrParents": null,
          "_subscriptions": Array [
            SubjectSubscription {
              "_parentOrParents": [Circular],
              "_subscriptions": null,
              "closed": false,
              "subject": [Circular],
              "subscriber": [Circular],
            },
          ],
          "closed": false,
          "destination": SafeSubscriber {
            "_complete": undefined,
            "_context": [Circular],
            "_error": undefined,
            "_next": [Function],
            "_parentOrParents": null,
            "_parentSubscriber": [Circular],
            "_subscriptions": null,
            "closed": false,
            "destination": Object {
              "closed": true,
              "complete": [Function],
              "error": [Function],
              "next": [Function],
            },
            "isStopped": false,
            "syncErrorThrowable": false,
            "syncErrorThrown": false,
            "syncErrorValue": null,
          },
          "isStopped": false,
          "syncErrorThrowable": true,
          "syncErrorThrown": false,
          "syncErrorValue": null,
        },
      ],
      "thrownError": null,
    }
  }
  loadingCount$={
    BehaviorSubject {
      "_isScalar": false,
      "_value": 0,
      "closed": false,
      "hasError": false,
      "isStopped": false,
      "observers": Array [
        Subscriber {
          "_parentOrParents": null,
          "_subscriptions": Array [
            SubjectSubscription {
              "_parentOrParents": [Circular],
              "_subscriptions": null,
              "closed": false,
              "subject": [Circular],
              "subscriber": [Circular],
            },
          ],
          "closed": false,
          "destination": SafeSubscriber {
            "_complete": undefined,
            "_context": [Circular],
            "_error": undefined,
            "_next": [Function],
            "_parentOrParents": null,
            "_parentSubscriber": [Circular],
            "_subscriptions": null,
            "closed": false,
            "destination": Object {
              "closed": true,
              "complete": [Function],
              "error": [Function],
              "next": [Function],
            },
            "isStopped": false,
            "syncErrorThrowable": false,
            "syncErrorThrown": false,
            "syncErrorValue": null,
          },
          "isStopped": false,
          "syncErrorThrowable": true,
          "syncErrorThrown": false,
          "syncErrorValue": null,
        },
        Subscriber {
          "_parentOrParents": null,
          "_subscriptions": Array [
            SubjectSubscription {
              "_parentOrParents": [Circular],
              "_subscriptions": null,
              "closed": false,
              "subject": [Circular],
              "subscriber": [Circular],
            },
          ],
          "closed": false,
          "destination": SafeSubscriber {
            "_complete": undefined,
            "_context": [Circular],
            "_error": undefined,
            "_next": [Function],
            "_parentOrParents": null,
            "_parentSubscriber": [Circular],
            "_subscriptions": null,
            "closed": false,
            "destination": Object {
              "closed": true,
              "complete": [Function],
              "error": [Function],
              "next": [Function],
            },
            "isStopped": false,
            "syncErrorThrowable": false,
            "syncErrorThrown": false,
            "syncErrorValue": null,
          },
          "isStopped": false,
          "syncErrorThrowable": true,
          "syncErrorThrown": false,
          "syncErrorValue": null,
        },
      ],
      "thrownError": null,
    }
  }
  navControlsCenter$={
    BehaviorSubject {
      "_isScalar": false,
      "_value": Array [],
      "closed": false,
      "hasError": false,
      "isStopped": false,
      "observers": Array [
        Subscriber {
          "_parentOrParents": null,
          "_subscriptions": Array [
            SubjectSubscription {
              "_parentOrParents": [Circular],
              "_subscriptions": null,
              "closed": false,
              "subject": [Circular],
              "subscriber": [Circular],
            },
          ],
          "closed": false,
          "destination": SafeSubscriber {
            "_complete": undefined,
            "_context": [Circular],
            "_error": undefined,
            "_next": [Function],
            "_parentOrParents": null,
            "_parentSubscriber": [Circular],
            "_subscriptions": null,
            "closed": false,
            "destination": Object {
              "closed": true,
              "complete": [Function],
              "error": [Function],
              "next": [Function],
            },
            "isStopped": false,
            "syncErrorThrowable": false,
            "syncErrorThrown": false,
            "syncErrorValue": null,
          },
          "isStopped": false,
          "syncErrorThrowable": true,
          "syncErrorThrown": false,
          "syncErrorValue": null,
        },
      ],
      "thrownError": null,
    }
  }
  navControlsExpandedCenter$={
    BehaviorSubject {
      "_isScalar": false,
      "_value": Array [],
      "closed": false,
      "hasError": false,
      "isStopped": false,
      "observers": Array [],
      "thrownError": null,
    }
  }
  navControlsExpandedRight$={
    BehaviorSubject {
      "_isScalar": false,
      "_value": Array [],
      "closed": false,
      "hasError": false,
      "isStopped": false,
      "observers": Array [],
      "thrownError": null,
    }
  }
  navControlsLeft$={
    BehaviorSubject {
      "_isScalar": false,
      "_value": Array [],
      "closed": false,
      "hasError": false,
      "isStopped": false,
      "observers": Array [
        Subscriber {
          "_parentOrParents": null,
          "_subscriptions": Array [
            SubjectSubscription {
              "_parentOrParents": [Circular],
              "_subscriptions": null,
              "closed": false,
              "subject": [Circular],
              "subscriber": [Circular],
            },
          ],
          "closed": false,
          "destination": SafeSubscriber {
            "_complete": undefined,
            "_context": [Circular],
            "_error": undefined,
            "_next": [Function],
            "_parentOrParents": null,
            "_parentSubscriber": [Circular],
            "_subscriptions": null,
            "closed": false,
            "destination": Object {
              "closed": true,
              "complete": [Function],
              "error": [Function],
              "next": [Function],
            },
            "isStopped": false,
            "syncErrorThrowable": false,
            "syncErrorThrown": false,
            "syncErrorValue": null,
          },
          "isStopped": false,
          "syncErrorThrowable": true,
          "syncErrorThrown": false,
          "syncErrorValue": null,
        },
      ],
      "thrownError": null,
    }
  }
  navControlsRight$={
    BehaviorSubject {
      "_isScalar": false,
      "_value": Array [],
      "closed": false,
      "hasError": false,
      "isStopped": false,
      "observers": Array [
        Subscriber {
          "_parentOrParents": null,
          "_subscriptions": Array [
            SubjectSubscription {
              "_parentOrParents": [Circular],
              "_subscriptions": null,
              "closed": false,
              "subject": [Circular],
              "subscriber": [Circular],
            },
          ],
          "closed": false,
          "destination": SafeSubscriber {
            "_complete": undefined,
            "_context": [Circular],
            "_error": undefined,
            "_next": [Function],
            "_parentOrParents": null,
            "_parentSubscriber": [Circular],
            "_subscriptions": null,
            "closed": false,
            "destination": Object {
              "closed": true,
              "complete": [Function],
              "error": [Function],
              "next": [Function],
            },
            "isStopped": false,
            "syncErrorThrowable": false,
            "syncErrorThrown": false,
            "syncErrorValue": null,
          },
          "isStopped": false,
          "syncErrorThrowable": true,
          "syncErrorThrown": false,
          "syncErrorValue": null,
        },
      ],
      "thrownError": null,
    }
  }
  navLinks$={
    BehaviorSubject {
      "_isScalar": false,
      "_value": Array [],
      "closed": false,
      "hasError": false,
      "isStopped": false,
      "observers": Array [
        Subscriber {
          "_parentOrParents": null,
          "_subscriptions": Array [
            SubjectSubscription {
              "_parentOrParents": [Circular],
              "_subscriptions": null,
              "closed": false,
              "subject": [Circular],
              "subscriber": [Circular],
            },
          ],
          "closed": false,
          "destination": SafeSubscriber {
            "_complete": undefined,
            "_context": [Circular],
            "_error": undefined,
            "_next": [Function],
            "_parentOrParents": null,
            "_parentSubscriber": [Circular],
            "_subscriptions": null,
            "closed": false,
            "destination": Object {
              "closed": true,
              "complete": [Function],
              "error": [Function],
              "next": [Function],
            },
            "isStopped": false,
            "syncErrorThrowable": false,
            "syncErrorThrown": false,
            "syncErrorValue": null,
          },
          "isStopped": false,
          "syncErrorThrowable": true,
          "syncErrorThrown": false,
          "syncErrorValue": null,
        },
        Subscriber {
          "_parentOrParents": null,
          "_subscriptions": Array [
            SubjectSubscription {
              "_parentOrParents": [Circular],
              "_subscriptions": null,
              "closed": false,
              "subject": [Circular],
              "subscriber": [Circular],
            },
          ],
          "closed": false,
          "destination": SafeSubscriber {
            "_complete": undefined,
            "_context": [Circular],
            "_error": undefined,
            "_next": [Function],
            "_parentOrParents": null,
            "_parentSubscriber": [Circular],
            "_subscriptions": null,
            "closed": false,
            "destination": Object {
              "closed": true,
              "complete": [Function],
              "error": [Function],
              "next": [Function],
            },
            "isStopped": false,
            "syncErrorThrowable": false,
            "syncErrorThrown": false,
            "syncErrorValue": null,
          },
          "isStopped": false,
          "syncErrorThrowable": true,
          "syncErrorThrown": false,
          "syncErrorValue": null,
        },
      ],
      "thrownError": null,
    }
  }
  onIsLockedUpdate={[Function]}
  opensearchDashboardsDocLink="/docs"
  opensearchDashboardsVersion="1.0.0"
  recentlyAccessed$={
    BehaviorSubject {
      "_isScalar": false,
      "_value": Array [],
      "closed": false,
      "hasError": false,
      "isStopped": false,
      "observers": Array [
        Subscriber {
          "_parentOrParents": null,
          "_subscriptions": Array [
            SubjectSubscription {
              "_parentOrParents": [Circular],
              "_subscriptions": null,
              "closed": false,
              "subject": [Circular],
              "subscriber": [Circular],
            },
          ],
          "closed": false,
          "destination": SafeSubscriber {
            "_complete": undefined,
            "_context": [Circular],
            "_error": undefined,
            "_next": [Function],
            "_parentOrParents": null,
            "_parentSubscriber": [Circular],
            "_subscriptions": null,
            "closed": false,
            "destination": Object {
              "closed": true,
              "complete": [Function],
              "error": [Function],
              "next": [Function],
            },
            "isStopped": false,
            "syncErrorThrowable": false,
            "syncErrorThrown": false,
            "syncErrorValue": null,
          },
          "isStopped": false,
          "syncErrorThrowable": true,
          "syncErrorThrown": false,
          "syncErrorValue": null,
        },
      ],
      "thrownError": null,
    }
  }
>
  <header
    className="hide-for-sharing headerGlobalNav"
    data-test-subj="headerGlobalNav"
  >
    <div
      id="globalHeaderBars"
    >
      <EuiHeader
        className="primaryHeader"
        position="fixed"
      >
        <div
          className="euiHeader euiHeader--default euiHeader--fixed primaryHeader"
        >
          <EuiHeaderSection
            grow={false}
          >
            <div
              className="euiHeaderSection euiHeaderSection--dontGrow euiHeaderSection--left"
            >
              <EuiHeaderSectionItem
                border="right"
                className="header__toggleNavButtonSection"
              >
                <div
                  className="euiHeaderSectionItem euiHeaderSectionItem--borderRight header__toggleNavButtonSection"
                >
                  <EuiHeaderSectionItemButton
                    aria-controls="mockId"
                    aria-expanded={false}
                    aria-label="Toggle primary navigation"
                    aria-pressed={false}
                    data-test-subj="toggleNavButton"
                    onClick={[Function]}
                  >
                    <EuiButtonEmpty
                      aria-controls="mockId"
                      aria-expanded={false}
                      aria-label="Toggle primary navigation"
                      aria-pressed={false}
                      buttonRef={
                        Object {
                          "current": <button
                            aria-controls="mockId"
                            aria-expanded="false"
                            aria-label="Toggle primary navigation"
                            aria-pressed="false"
                            class="euiButtonEmpty euiButtonEmpty--text euiHeaderSectionItemButton"
                            data-test-subj="toggleNavButton"
                            type="button"
                          >
                            <span
                              class="euiButtonContent euiButtonEmpty__content"
                            >
                              <span
                                class="euiButtonEmpty__text"
                              >
                                <span
                                  class="euiHeaderSectionItemButton__content"
                                >
                                  <span
                                    data-euiicon-type="menu"
                                  />
                                </span>
                              </span>
                            </span>
                          </button>,
                        }
                      }
                      className="euiHeaderSectionItemButton"
                      color="text"
                      data-test-subj="toggleNavButton"
                      onClick={[Function]}
                    >
                      <button
                        aria-controls="mockId"
                        aria-expanded={false}
                        aria-label="Toggle primary navigation"
                        aria-pressed={false}
                        className="euiButtonEmpty euiButtonEmpty--text euiHeaderSectionItemButton"
                        data-test-subj="toggleNavButton"
                        disabled={false}
                        onClick={[Function]}
                        type="button"
                      >
                        <EuiButtonContent
                          className="euiButtonEmpty__content"
                          iconSide="left"
                          iconSize="m"
                          textProps={
                            Object {
                              "className": "euiButtonEmpty__text",
                            }
                          }
                        >
                          <span
                            className="euiButtonContent euiButtonEmpty__content"
                          >
                            <span
                              className="euiButtonEmpty__text"
                            >
                              <span
                                className="euiHeaderSectionItemButton__content"
                              >
                                <EuiIcon
                                  size="m"
                                  type="menu"
                                >
                                  <span
                                    data-euiicon-type="menu"
                                    size="m"
                                  />
                                </EuiIcon>
                              </span>
                            </span>
                          </span>
                        </EuiButtonContent>
                      </button>
                    </EuiButtonEmpty>
                  </EuiHeaderSectionItemButton>
                </div>
              </EuiHeaderSectionItem>
              <EuiHeaderSectionItem
                border="right"
              >
                <div
                  className="euiHeaderSectionItem euiHeaderSectionItem--borderRight"
                >
                  <HeaderNavControls
                    navControls$={
                      BehaviorSubject {
                        "_isScalar": false,
                        "_value": Array [],
                        "closed": false,
                        "hasError": false,
                        "isStopped": false,
                        "observers": Array [
                          Subscriber {
                            "_parentOrParents": null,
                            "_subscriptions": Array [
                              SubjectSubscription {
                                "_parentOrParents": [Circular],
                                "_subscriptions": null,
                                "closed": false,
                                "subject": [Circular],
                                "subscriber": [Circular],
                              },
                            ],
                            "closed": false,
                            "destination": SafeSubscriber {
                              "_complete": undefined,
                              "_context": [Circular],
                              "_error": undefined,
                              "_next": [Function],
                              "_parentOrParents": null,
                              "_parentSubscriber": [Circular],
                              "_subscriptions": null,
                              "closed": false,
                              "destination": Object {
                                "closed": true,
                                "complete": [Function],
                                "error": [Function],
                                "next": [Function],
                              },
                              "isStopped": false,
                              "syncErrorThrowable": false,
                              "syncErrorThrown": false,
                              "syncErrorValue": null,
                            },
                            "isStopped": false,
                            "syncErrorThrowable": true,
                            "syncErrorThrown": false,
                            "syncErrorValue": null,
                          },
                        ],
                        "thrownError": null,
                      }
                    }
                    side="left"
                  />
                </div>
              </EuiHeaderSectionItem>
              <EuiHeaderSectionItem
                border="right"
              >
                <div
                  className="euiHeaderSectionItem euiHeaderSectionItem--borderRight"
                >
                  <HomeLoader
                    branding={
                      Object {
                        "applicationTitle": "Foobar Dashboards",
                        "darkMode": false,
                        "logo": Object {
                          "defaultUrl": "/foo",
                        },
                        "mark": Object {
                          "defaultUrl": "/foo",
                        },
                        "useExpandedHeader": false,
                      }
                    }
                    forceNavigation$={
                      BehaviorSubject {
                        "_isScalar": false,
                        "_value": false,
                        "closed": false,
                        "hasError": false,
                        "isStopped": false,
                        "observers": Array [
                          Subscriber {
                            "_parentOrParents": null,
                            "_subscriptions": Array [
                              SubjectSubscription {
                                "_parentOrParents": [Circular],
                                "_subscriptions": null,
                                "closed": false,
                                "subject": [Circular],
                                "subscriber": [Circular],
                              },
                            ],
                            "closed": false,
                            "destination": SafeSubscriber {
                              "_complete": undefined,
                              "_context": [Circular],
                              "_error": undefined,
                              "_next": [Function],
                              "_parentOrParents": null,
                              "_parentSubscriber": [Circular],
                              "_subscriptions": null,
                              "closed": false,
                              "destination": Object {
                                "closed": true,
                                "complete": [Function],
                                "error": [Function],
                                "next": [Function],
                              },
                              "isStopped": false,
                              "syncErrorThrowable": false,
                              "syncErrorThrown": false,
                              "syncErrorValue": null,
                            },
                            "isStopped": false,
                            "syncErrorThrowable": true,
                            "syncErrorThrown": false,
                            "syncErrorValue": null,
                          },
                        ],
                        "thrownError": null,
                      }
                    }
                    href="/"
                    loadingCount$={
                      BehaviorSubject {
                        "_isScalar": false,
                        "_value": 0,
                        "closed": false,
                        "hasError": false,
                        "isStopped": false,
                        "observers": Array [
                          Subscriber {
                            "_parentOrParents": null,
                            "_subscriptions": Array [
                              SubjectSubscription {
                                "_parentOrParents": [Circular],
                                "_subscriptions": null,
                                "closed": false,
                                "subject": [Circular],
                                "subscriber": [Circular],
                              },
                            ],
                            "closed": false,
                            "destination": SafeSubscriber {
                              "_complete": undefined,
                              "_context": [Circular],
                              "_error": undefined,
                              "_next": [Function],
                              "_parentOrParents": null,
                              "_parentSubscriber": [Circular],
                              "_subscriptions": null,
                              "closed": false,
                              "destination": Object {
                                "closed": true,
                                "complete": [Function],
                                "error": [Function],
                                "next": [Function],
                              },
                              "isStopped": false,
                              "syncErrorThrowable": false,
                              "syncErrorThrown": false,
                              "syncErrorValue": null,
                            },
                            "isStopped": false,
                            "syncErrorThrowable": true,
                            "syncErrorThrown": false,
                            "syncErrorValue": null,
                          },
                          Subscriber {
                            "_parentOrParents": null,
                            "_subscriptions": Array [
                              SubjectSubscription {
                                "_parentOrParents": [Circular],
                                "_subscriptions": null,
                                "closed": false,
                                "subject": [Circular],
                                "subscriber": [Circular],
                              },
                            ],
                            "closed": false,
                            "destination": SafeSubscriber {
                              "_complete": undefined,
                              "_context": [Circular],
                              "_error": undefined,
                              "_next": [Function],
                              "_parentOrParents": null,
                              "_parentSubscriber": [Circular],
                              "_subscriptions": null,
                              "closed": false,
                              "destination": Object {
                                "closed": true,
                                "complete": [Function],
                                "error": [Function],
                                "next": [Function],
                              },
                              "isStopped": false,
                              "syncErrorThrowable": false,
                              "syncErrorThrown": false,
                              "syncErrorValue": null,
                            },
                            "isStopped": false,
                            "syncErrorThrowable": true,
                            "syncErrorThrown": false,
                            "syncErrorValue": null,
                          },
                        ],
                        "thrownError": null,
                      }
                    }
                    navLinks$={
                      BehaviorSubject {
                        "_isScalar": false,
                        "_value": Array [],
                        "closed": false,
                        "hasError": false,
                        "isStopped": false,
                        "observers": Array [
                          Subscriber {
                            "_parentOrParents": null,
                            "_subscriptions": Array [
                              SubjectSubscription {
                                "_parentOrParents": [Circular],
                                "_subscriptions": null,
                                "closed": false,
                                "subject": [Circular],
                                "subscriber": [Circular],
                              },
                            ],
                            "closed": false,
                            "destination": SafeSubscriber {
                              "_complete": undefined,
                              "_context": [Circular],
                              "_error": undefined,
                              "_next": [Function],
                              "_parentOrParents": null,
                              "_parentSubscriber": [Circular],
                              "_subscriptions": null,
                              "closed": false,
                              "destination": Object {
                                "closed": true,
                                "complete": [Function],
                                "error": [Function],
                                "next": [Function],
                              },
                              "isStopped": false,
                              "syncErrorThrowable": false,
                              "syncErrorThrown": false,
                              "syncErrorValue": null,
                            },
                            "isStopped": false,
                            "syncErrorThrowable": true,
                            "syncErrorThrown": false,
                            "syncErrorValue": null,
                          },
                          Subscriber {
                            "_parentOrParents": null,
                            "_subscriptions": Array [
                              SubjectSubscription {
                                "_parentOrParents": [Circular],
                                "_subscriptions": null,
                                "closed": false,
                                "subject": [Circular],
                                "subscriber": [Circular],
                              },
                            ],
                            "closed": false,
                            "destination": SafeSubscriber {
                              "_complete": undefined,
                              "_context": [Circular],
                              "_error": undefined,
                              "_next": [Function],
                              "_parentOrParents": null,
                              "_parentSubscriber": [Circular],
                              "_subscriptions": null,
                              "closed": false,
                              "destination": Object {
                                "closed": true,
                                "complete": [Function],
                                "error": [Function],
                                "next": [Function],
                              },
                              "isStopped": false,
                              "syncErrorThrowable": false,
                              "syncErrorThrown": false,
                              "syncErrorValue": null,
                            },
                            "isStopped": false,
                            "syncErrorThrowable": true,
                            "syncErrorThrown": false,
                            "syncErrorValue": null,
                          },
                        ],
                        "thrownError": null,
                      }
                    }
                    navigateToApp={[MockFunction]}
                  >
                    <EuiHeaderSectionItemButton
                      aria-label="Go to home page"
                      className="header__homeLoaderNavButton"
                      data-test-subj="homeLoader"
                      href="/"
                      onClick={[Function]}
                      title="Go to home page"
                    >
                      <EuiButtonEmpty
                        aria-label="Go to home page"
                        buttonRef={
                          Object {
                            "current": <a
                              aria-label="Go to home page"
                              class="euiButtonEmpty euiButtonEmpty--text euiHeaderSectionItemButton header__homeLoaderNavButton"
                              data-test-subj="homeLoader"
                              href="/"
                              rel="noreferrer"
                              title="Go to home page"
                            >
                              <span
                                class="euiButtonContent euiButtonEmpty__content"
                              >
                                <span
                                  class="euiButtonEmpty__text"
                                >
                                  <span
                                    class="euiHeaderSectionItemButton__content"
                                  >
                                    <div
                                      class="homeIconContainer"
                                    >
                                      <span
                                        class="logoImage"
                                        data-euiicon-type="/foo"
                                        data-test-image-url="/foo"
                                        data-test-subj="customMark"
                                        title="Foobar Dashboards home"
                                      />
                                    </div>
                                    <div
                                      class="loaderContainer"
                                    >
                                      <span
                                        aria-hidden="true"
                                        aria-label="Loading content"
                                        class="euiLoadingSpinner euiLoadingSpinner--medium osdLoadingIndicator-hidden"
                                        data-test-subj="globalLoadingIndicator-hidden"
                                      />
                                    </div>
                                  </span>
                                </span>
                              </span>
                            </a>,
                          }
                        }
                        className="euiHeaderSectionItemButton header__homeLoaderNavButton"
                        color="text"
                        data-test-subj="homeLoader"
                        href="/"
                        onClick={[Function]}
                        title="Go to home page"
                      >
                        <a
                          aria-label="Go to home page"
                          className="euiButtonEmpty euiButtonEmpty--text euiHeaderSectionItemButton header__homeLoaderNavButton"
                          data-test-subj="homeLoader"
                          href="/"
                          onClick={[Function]}
                          rel="noreferrer"
                          title="Go to home page"
                        >
                          <EuiButtonContent
                            className="euiButtonEmpty__content"
                            iconSide="left"
                            iconSize="m"
                            textProps={
                              Object {
                                "className": "euiButtonEmpty__text",
                              }
                            }
                          >
                            <span
                              className="euiButtonContent euiButtonEmpty__content"
                            >
                              <span
                                className="euiButtonEmpty__text"
                              >
                                <span
                                  className="euiHeaderSectionItemButton__content"
                                >
                                  <div
                                    className="homeIconContainer"
                                  >
                                    <HomeIcon
                                      applicationTitle="Foobar Dashboards"
                                      darkMode={false}
                                      logo={
                                        Object {
                                          "defaultUrl": "/foo",
                                        }
                                      }
                                      mark={
                                        Object {
                                          "defaultUrl": "/foo",
                                        }
                                      }
                                      useExpandedHeader={false}
                                    >
                                      <EuiIcon
                                        className="logoImage"
                                        data-test-image-url="/foo"
                                        data-test-subj="customMark"
                                        size="l"
                                        title="Foobar Dashboards home"
                                        type="/foo"
                                      >
                                        <span
                                          className="logoImage"
                                          data-euiicon-type="/foo"
                                          data-test-image-url="/foo"
                                          data-test-subj="customMark"
                                          size="l"
                                          title="Foobar Dashboards home"
                                        />
                                      </EuiIcon>
                                    </HomeIcon>
                                  </div>
                                  <div
                                    className="loaderContainer"
                                  >
                                    <LoadingIndicator
                                      loadingCount$={
                                        BehaviorSubject {
                                          "_isScalar": false,
                                          "_value": 0,
                                          "closed": false,
                                          "hasError": false,
                                          "isStopped": false,
                                          "observers": Array [
                                            Subscriber {
                                              "_parentOrParents": null,
                                              "_subscriptions": Array [
                                                SubjectSubscription {
                                                  "_parentOrParents": [Circular],
                                                  "_subscriptions": null,
                                                  "closed": false,
                                                  "subject": [Circular],
                                                  "subscriber": [Circular],
                                                },
                                              ],
                                              "closed": false,
                                              "destination": SafeSubscriber {
                                                "_complete": undefined,
                                                "_context": [Circular],
                                                "_error": undefined,
                                                "_next": [Function],
                                                "_parentOrParents": null,
                                                "_parentSubscriber": [Circular],
                                                "_subscriptions": null,
                                                "closed": false,
                                                "destination": Object {
                                                  "closed": true,
                                                  "complete": [Function],
                                                  "error": [Function],
                                                  "next": [Function],
                                                },
                                                "isStopped": false,
                                                "syncErrorThrowable": false,
                                                "syncErrorThrown": false,
                                                "syncErrorValue": null,
                                              },
                                              "isStopped": false,
                                              "syncErrorThrowable": true,
                                              "syncErrorThrown": false,
                                              "syncErrorValue": null,
                                            },
                                            Subscriber {
                                              "_parentOrParents": null,
                                              "_subscriptions": Array [
                                                SubjectSubscription {
                                                  "_parentOrParents": [Circular],
                                                  "_subscriptions": null,
                                                  "closed": false,
                                                  "subject": [Circular],
                                                  "subscriber": [Circular],
                                                },
                                              ],
                                              "closed": false,
                                              "destination": SafeSubscriber {
                                                "_complete": undefined,
                                                "_context": [Circular],
                                                "_error": undefined,
                                                "_next": [Function],
                                                "_parentOrParents": null,
                                                "_parentSubscriber": [Circular],
                                                "_subscriptions": null,
                                                "closed": false,
                                                "destination": Object {
                                                  "closed": true,
                                                  "complete": [Function],
                                                  "error": [Function],
                                                  "next": [Function],
                                                },
                                                "isStopped": false,
                                                "syncErrorThrowable": false,
                                                "syncErrorThrown": false,
                                                "syncErrorValue": null,
                                              },
                                              "isStopped": false,
                                              "syncErrorThrowable": true,
                                              "syncErrorThrown": false,
                                              "syncErrorValue": null,
                                            },
                                          ],
                                          "thrownError": null,
                                        }
                                      }
                                      showAsBar={false}
                                    >
                                      <EuiLoadingSpinner
                                        aria-hidden={true}
                                        aria-label="Loading content"
                                        className="osdLoadingIndicator-hidden"
                                        data-test-subj="globalLoadingIndicator-hidden"
                                      >
                                        <span
                                          aria-hidden={true}
                                          aria-label="Loading content"
                                          className="euiLoadingSpinner euiLoadingSpinner--medium osdLoadingIndicator-hidden"
                                          data-test-subj="globalLoadingIndicator-hidden"
                                        />
                                      </EuiLoadingSpinner>
                                    </LoadingIndicator>
                                  </div>
                                </span>
                              </span>
                            </span>
                          </EuiButtonContent>
                        </a>
                      </EuiButtonEmpty>
                    </EuiHeaderSectionItemButton>
                  </HomeLoader>
                </div>
              </EuiHeaderSectionItem>
            </div>
          </EuiHeaderSection>
          <HeaderBreadcrumbs
            appTitle$={
              BehaviorSubject {
                "_isScalar": false,
                "_value": "test",
                "closed": false,
                "hasError": false,
                "isStopped": false,
                "observers": Array [
                  Subscriber {
                    "_parentOrParents": null,
                    "_subscriptions": Array [
                      SubjectSubscription {
                        "_parentOrParents": [Circular],
                        "_subscriptions": null,
                        "closed": false,
                        "subject": [Circular],
                        "subscriber": [Circular],
                      },
                    ],
                    "closed": false,
                    "destination": SafeSubscriber {
                      "_complete": undefined,
                      "_context": [Circular],
                      "_error": undefined,
                      "_next": [Function],
                      "_parentOrParents": null,
                      "_parentSubscriber": [Circular],
                      "_subscriptions": null,
                      "closed": false,
                      "destination": Object {
                        "closed": true,
                        "complete": [Function],
                        "error": [Function],
                        "next": [Function],
                      },
                      "isStopped": false,
                      "syncErrorThrowable": false,
                      "syncErrorThrown": false,
                      "syncErrorValue": null,
                    },
                    "isStopped": false,
                    "syncErrorThrowable": true,
                    "syncErrorThrown": false,
                    "syncErrorValue": null,
                  },
                ],
                "thrownError": null,
              }
            }
            breadcrumbs$={
              BehaviorSubject {
                "_isScalar": false,
                "_value": Array [],
                "closed": false,
                "hasError": false,
                "isStopped": false,
                "observers": Array [
                  Subscriber {
                    "_parentOrParents": null,
                    "_subscriptions": Array [
                      SubjectSubscription {
                        "_parentOrParents": [Circular],
                        "_subscriptions": null,
                        "closed": false,
                        "subject": [Circular],
                        "subscriber": [Circular],
                      },
                    ],
                    "closed": false,
                    "destination": SafeSubscriber {
                      "_complete": undefined,
                      "_context": [Circular],
                      "_error": undefined,
                      "_next": [Function],
                      "_parentOrParents": null,
                      "_parentSubscriber": [Circular],
                      "_subscriptions": null,
                      "closed": false,
                      "destination": Object {
                        "closed": true,
                        "complete": [Function],
                        "error": [Function],
                        "next": [Function],
                      },
                      "isStopped": false,
                      "syncErrorThrowable": false,
                      "syncErrorThrown": false,
                      "syncErrorValue": null,
                    },
                    "isStopped": false,
                    "syncErrorThrowable": true,
                    "syncErrorThrown": false,
                    "syncErrorValue": null,
                  },
                ],
                "thrownError": null,
              }
            }
            isDarkMode={false}
          >
            <EuiHeaderBreadcrumbs
              breadcrumbs={
                Array [
                  Object {
                    "className": "osdBreadcrumbs",
                    "data-test-subj": "breadcrumb first",
                    "text": "test",
                  },
                ]
              }
              className="osdHeaderBreadcrumbs"
              data-test-subj="breadcrumbs"
              max={10}
            >
              <EuiBreadcrumbs
                breadcrumbs={
                  Array [
                    Object {
                      "className": "osdBreadcrumbs",
                      "data-test-subj": "breadcrumb first",
                      "text": "test",
                    },
                  ]
                }
                className="euiHeaderBreadcrumbs osdHeaderBreadcrumbs"
                data-test-subj="breadcrumbs"
                max={10}
                truncate={true}
              >
                <nav
                  aria-label="breadcrumb"
                  className="euiBreadcrumbs euiHeaderBreadcrumbs osdHeaderBreadcrumbs euiBreadcrumbs--truncate"
                  data-test-subj="breadcrumbs"
                >
                  <EuiInnerText>
                    <span
                      aria-current="page"
                      className="euiBreadcrumb osdBreadcrumbs euiBreadcrumb--last"
                      data-test-subj="breadcrumb first"
                      title="test"
                    >
                      test
                    </span>
                  </EuiInnerText>
                </nav>
              </EuiBreadcrumbs>
            </EuiHeaderBreadcrumbs>
          </HeaderBreadcrumbs>
          <EuiHeaderSectionItem
            border="none"
          >
            <div
              className="euiHeaderSectionItem"
            >
              <HeaderBadge
                badge$={
                  BehaviorSubject {
                    "_isScalar": false,
                    "_value": undefined,
                    "closed": false,
                    "hasError": false,
                    "isStopped": false,
                    "observers": Array [
                      Subscriber {
                        "_parentOrParents": null,
                        "_subscriptions": Array [
                          SubjectSubscription {
                            "_parentOrParents": [Circular],
                            "_subscriptions": null,
                            "closed": false,
                            "subject": [Circular],
                            "subscriber": [Circular],
                          },
                        ],
                        "closed": false,
                        "destination": SafeSubscriber {
                          "_complete": undefined,
                          "_context": [Circular],
                          "_error": undefined,
                          "_next": [Function],
                          "_parentOrParents": null,
                          "_parentSubscriber": [Circular],
                          "_subscriptions": null,
                          "closed": false,
                          "destination": Object {
                            "closed": true,
                            "complete": [Function],
                            "error": [Function],
                            "next": [Function],
                          },
                          "isStopped": false,
                          "syncErrorThrowable": false,
                          "syncErrorThrown": false,
                          "syncErrorValue": null,
                        },
                        "isStopped": false,
                        "syncErrorThrowable": true,
                        "syncErrorThrown": false,
                        "syncErrorValue": null,
                      },
                    ],
                    "thrownError": null,
                  }
                }
              />
            </div>
          </EuiHeaderSectionItem>
          <EuiHeaderSection
            side="right"
          >
            <div
              className="euiHeaderSection euiHeaderSection--dontGrow euiHeaderSection--right"
            >
              <EuiHeaderSectionItem
                border="none"
              >
                <div
                  className="euiHeaderSectionItem"
                >
                  <HeaderActionMenu
                    actionMenu$={
                      BehaviorSubject {
                        "_isScalar": false,
                        "_value": undefined,
                        "closed": false,
                        "hasError": false,
                        "isStopped": false,
                        "observers": Array [
                          Subscriber {
                            "_parentOrParents": null,
                            "_subscriptions": Array [
                              SubjectSubscription {
                                "_parentOrParents": [Circular],
                                "_subscriptions": null,
                                "closed": false,
                                "subject": [Circular],
                                "subscriber": [Circular],
                              },
                            ],
                            "closed": false,
                            "destination": SafeSubscriber {
                              "_complete": undefined,
                              "_context": [Circular],
                              "_error": undefined,
                              "_next": [Function],
                              "_parentOrParents": null,
                              "_parentSubscriber": [Circular],
                              "_subscriptions": null,
                              "closed": false,
                              "destination": Object {
                                "closed": true,
                                "complete": [Function],
                                "error": [Function],
                                "next": [Function],
                              },
                              "isStopped": false,
                              "syncErrorThrowable": false,
                              "syncErrorThrown": false,
                              "syncErrorValue": null,
                            },
                            "isStopped": false,
                            "syncErrorThrowable": true,
                            "syncErrorThrown": false,
                            "syncErrorValue": null,
                          },
                        ],
                        "thrownError": null,
                      }
                    }
                  >
                    <div
                      data-test-subj="headerAppActionMenu"
                    />
                  </HeaderActionMenu>
                </div>
              </EuiHeaderSectionItem>
              <EuiHeaderSectionItem
                border="left"
              >
                <div
                  className="euiHeaderSectionItem euiHeaderSectionItem--borderLeft"
                >
                  <HeaderNavControls
                    navControls$={
                      BehaviorSubject {
                        "_isScalar": false,
                        "_value": Array [],
                        "closed": false,
                        "hasError": false,
                        "isStopped": false,
                        "observers": Array [
                          Subscriber {
                            "_parentOrParents": null,
                            "_subscriptions": Array [
                              SubjectSubscription {
                                "_parentOrParents": [Circular],
                                "_subscriptions": null,
                                "closed": false,
                                "subject": [Circular],
                                "subscriber": [Circular],
                              },
                            ],
                            "closed": false,
                            "destination": SafeSubscriber {
                              "_complete": undefined,
                              "_context": [Circular],
                              "_error": undefined,
                              "_next": [Function],
                              "_parentOrParents": null,
                              "_parentSubscriber": [Circular],
                              "_subscriptions": null,
                              "closed": false,
                              "destination": Object {
                                "closed": true,
                                "complete": [Function],
                                "error": [Function],
                                "next": [Function],
                              },
                              "isStopped": false,
                              "syncErrorThrowable": false,
                              "syncErrorThrown": false,
                              "syncErrorValue": null,
                            },
                            "isStopped": false,
                            "syncErrorThrowable": true,
                            "syncErrorThrown": false,
                            "syncErrorValue": null,
                          },
                        ],
                        "thrownError": null,
                      }
                    }
                  />
                </div>
              </EuiHeaderSectionItem>
              <EuiHeaderSectionItem
                border="left"
              >
                <div
                  className="euiHeaderSectionItem euiHeaderSectionItem--borderLeft"
                >
                  <HeaderNavControls
                    navControls$={
                      BehaviorSubject {
                        "_isScalar": false,
                        "_value": Array [],
                        "closed": false,
                        "hasError": false,
                        "isStopped": false,
                        "observers": Array [
                          Subscriber {
                            "_parentOrParents": null,
                            "_subscriptions": Array [
                              SubjectSubscription {
                                "_parentOrParents": [Circular],
                                "_subscriptions": null,
                                "closed": false,
                                "subject": [Circular],
                                "subscriber": [Circular],
                              },
                            ],
                            "closed": false,
                            "destination": SafeSubscriber {
                              "_complete": undefined,
                              "_context": [Circular],
                              "_error": undefined,
                              "_next": [Function],
                              "_parentOrParents": null,
                              "_parentSubscriber": [Circular],
                              "_subscriptions": null,
                              "closed": false,
                              "destination": Object {
                                "closed": true,
                                "complete": [Function],
                                "error": [Function],
                                "next": [Function],
                              },
                              "isStopped": false,
                              "syncErrorThrowable": false,
                              "syncErrorThrown": false,
                              "syncErrorValue": null,
                            },
                            "isStopped": false,
                            "syncErrorThrowable": true,
                            "syncErrorThrown": false,
                            "syncErrorValue": null,
                          },
                        ],
                        "thrownError": null,
                      }
                    }
                  />
                </div>
              </EuiHeaderSectionItem>
              <EuiHeaderSectionItem
                border="left"
              >
                <div
                  className="euiHeaderSectionItem euiHeaderSectionItem--borderLeft"
                >
                  <InjectIntl(HeaderHelpMenuUI)
                    helpExtension$={
                      BehaviorSubject {
                        "_isScalar": false,
                        "_value": undefined,
                        "closed": false,
                        "hasError": false,
                        "isStopped": false,
                        "observers": Array [
                          InnerSubscriber {
                            "_parentOrParents": CombineLatestSubscriber {
                              "_parentOrParents": Subscriber {
                                "_parentOrParents": null,
                                "_subscriptions": Array [
                                  [Circular],
                                ],
                                "closed": false,
                                "destination": SafeSubscriber {
                                  "_complete": undefined,
                                  "_context": [Circular],
                                  "_error": undefined,
                                  "_next": [Function],
                                  "_parentOrParents": null,
                                  "_parentSubscriber": [Circular],
                                  "_subscriptions": null,
                                  "closed": false,
                                  "destination": Object {
                                    "closed": true,
                                    "complete": [Function],
                                    "error": [Function],
                                    "next": [Function],
                                  },
                                  "isStopped": false,
                                  "syncErrorThrowable": false,
                                  "syncErrorThrown": false,
                                  "syncErrorValue": null,
                                },
                                "isStopped": false,
                                "syncErrorThrowable": true,
                                "syncErrorThrown": false,
                                "syncErrorValue": null,
                              },
                              "_subscriptions": Array [
                                [Circular],
                                InnerSubscriber {
                                  "_parentOrParents": [Circular],
                                  "_subscriptions": Array [
                                    SubjectSubscription {
                                      "_parentOrParents": [Circular],
                                      "_subscriptions": null,
                                      "closed": false,
                                      "subject": BehaviorSubject {
                                        "_isScalar": false,
                                        "_value": "",
                                        "closed": false,
                                        "hasError": false,
                                        "isStopped": false,
                                        "observers": Array [
                                          [Circular],
                                        ],
                                        "thrownError": null,
                                      },
                                      "subscriber": [Circular],
                                    },
                                  ],
                                  "closed": false,
                                  "destination": Object {
                                    "closed": true,
                                    "complete": [Function],
                                    "error": [Function],
                                    "next": [Function],
                                  },
                                  "index": 1,
                                  "isStopped": false,
                                  "outerIndex": 1,
                                  "outerValue": undefined,
                                  "parent": [Circular],
                                  "syncErrorThrowable": false,
                                  "syncErrorThrown": false,
                                  "syncErrorValue": null,
                                },
                              ],
                              "active": 2,
                              "closed": false,
                              "destination": Subscriber {
                                "_parentOrParents": null,
                                "_subscriptions": Array [
                                  [Circular],
                                ],
                                "closed": false,
                                "destination": SafeSubscriber {
                                  "_complete": undefined,
                                  "_context": [Circular],
                                  "_error": undefined,
                                  "_next": [Function],
                                  "_parentOrParents": null,
                                  "_parentSubscriber": [Circular],
                                  "_subscriptions": null,
                                  "closed": false,
                                  "destination": Object {
                                    "closed": true,
                                    "complete": [Function],
                                    "error": [Function],
                                    "next": [Function],
                                  },
                                  "isStopped": false,
                                  "syncErrorThrowable": false,
                                  "syncErrorThrown": false,
                                  "syncErrorValue": null,
                                },
                                "isStopped": false,
                                "syncErrorThrowable": true,
                                "syncErrorThrown": false,
                                "syncErrorValue": null,
                              },
                              "isStopped": true,
                              "observables": Array [
                                [Circular],
                                BehaviorSubject {
                                  "_isScalar": false,
                                  "_value": "",
                                  "closed": false,
                                  "hasError": false,
                                  "isStopped": false,
                                  "observers": Array [
                                    InnerSubscriber {
                                      "_parentOrParents": [Circular],
                                      "_subscriptions": Array [
                                        SubjectSubscription {
                                          "_parentOrParents": [Circular],
                                          "_subscriptions": null,
                                          "closed": false,
                                          "subject": [Circular],
                                          "subscriber": [Circular],
                                        },
                                      ],
                                      "closed": false,
                                      "destination": Object {
                                        "closed": true,
                                        "complete": [Function],
                                        "error": [Function],
                                        "next": [Function],
                                      },
                                      "index": 1,
                                      "isStopped": false,
                                      "outerIndex": 1,
                                      "outerValue": undefined,
                                      "parent": [Circular],
                                      "syncErrorThrowable": false,
                                      "syncErrorThrown": false,
                                      "syncErrorValue": null,
                                    },
                                  ],
                                  "thrownError": null,
                                },
                              ],
                              "resultSelector": undefined,
                              "syncErrorThrowable": true,
                              "syncErrorThrown": false,
                              "syncErrorValue": null,
                              "toRespond": 0,
                              "values": Array [
                                undefined,
                                "",
                              ],
                            },
                            "_subscriptions": Array [
                              SubjectSubscription {
                                "_parentOrParents": [Circular],
                                "_subscriptions": null,
                                "closed": false,
                                "subject": [Circular],
                                "subscriber": [Circular],
                              },
                            ],
                            "closed": false,
                            "destination": Object {
                              "closed": true,
                              "complete": [Function],
                              "error": [Function],
                              "next": [Function],
                            },
                            "index": 1,
                            "isStopped": false,
                            "outerIndex": 0,
                            "outerValue": undefined,
                            "parent": CombineLatestSubscriber {
                              "_parentOrParents": Subscriber {
                                "_parentOrParents": null,
                                "_subscriptions": Array [
                                  [Circular],
                                ],
                                "closed": false,
                                "destination": SafeSubscriber {
                                  "_complete": undefined,
                                  "_context": [Circular],
                                  "_error": undefined,
                                  "_next": [Function],
                                  "_parentOrParents": null,
                                  "_parentSubscriber": [Circular],
                                  "_subscriptions": null,
                                  "closed": false,
                                  "destination": Object {
                                    "closed": true,
                                    "complete": [Function],
                                    "error": [Function],
                                    "next": [Function],
                                  },
                                  "isStopped": false,
                                  "syncErrorThrowable": false,
                                  "syncErrorThrown": false,
                                  "syncErrorValue": null,
                                },
                                "isStopped": false,
                                "syncErrorThrowable": true,
                                "syncErrorThrown": false,
                                "syncErrorValue": null,
                              },
                              "_subscriptions": Array [
                                [Circular],
                                InnerSubscriber {
                                  "_parentOrParents": [Circular],
                                  "_subscriptions": Array [
                                    SubjectSubscription {
                                      "_parentOrParents": [Circular],
                                      "_subscriptions": null,
                                      "closed": false,
                                      "subject": BehaviorSubject {
                                        "_isScalar": false,
                                        "_value": "",
                                        "closed": false,
                                        "hasError": false,
                                        "isStopped": false,
                                        "observers": Array [
                                          [Circular],
                                        ],
                                        "thrownError": null,
                                      },
                                      "subscriber": [Circular],
                                    },
                                  ],
                                  "closed": false,
                                  "destination": Object {
                                    "closed": true,
                                    "complete": [Function],
                                    "error": [Function],
                                    "next": [Function],
                                  },
                                  "index": 1,
                                  "isStopped": false,
                                  "outerIndex": 1,
                                  "outerValue": undefined,
                                  "parent": [Circular],
                                  "syncErrorThrowable": false,
                                  "syncErrorThrown": false,
                                  "syncErrorValue": null,
                                },
                              ],
                              "active": 2,
                              "closed": false,
                              "destination": Subscriber {
                                "_parentOrParents": null,
                                "_subscriptions": Array [
                                  [Circular],
                                ],
                                "closed": false,
                                "destination": SafeSubscriber {
                                  "_complete": undefined,
                                  "_context": [Circular],
                                  "_error": undefined,
                                  "_next": [Function],
                                  "_parentOrParents": null,
                                  "_parentSubscriber": [Circular],
                                  "_subscriptions": null,
                                  "closed": false,
                                  "destination": Object {
                                    "closed": true,
                                    "complete": [Function],
                                    "error": [Function],
                                    "next": [Function],
                                  },
                                  "isStopped": false,
                                  "syncErrorThrowable": false,
                                  "syncErrorThrown": false,
                                  "syncErrorValue": null,
                                },
                                "isStopped": false,
                                "syncErrorThrowable": true,
                                "syncErrorThrown": false,
                                "syncErrorValue": null,
                              },
                              "isStopped": true,
                              "observables": Array [
                                [Circular],
                                BehaviorSubject {
                                  "_isScalar": false,
                                  "_value": "",
                                  "closed": false,
                                  "hasError": false,
                                  "isStopped": false,
                                  "observers": Array [
                                    InnerSubscriber {
                                      "_parentOrParents": [Circular],
                                      "_subscriptions": Array [
                                        SubjectSubscription {
                                          "_parentOrParents": [Circular],
                                          "_subscriptions": null,
                                          "closed": false,
                                          "subject": [Circular],
                                          "subscriber": [Circular],
                                        },
                                      ],
                                      "closed": false,
                                      "destination": Object {
                                        "closed": true,
                                        "complete": [Function],
                                        "error": [Function],
                                        "next": [Function],
                                      },
                                      "index": 1,
                                      "isStopped": false,
                                      "outerIndex": 1,
                                      "outerValue": undefined,
                                      "parent": [Circular],
                                      "syncErrorThrowable": false,
                                      "syncErrorThrown": false,
                                      "syncErrorValue": null,
                                    },
                                  ],
                                  "thrownError": null,
                                },
                              ],
                              "resultSelector": undefined,
                              "syncErrorThrowable": true,
                              "syncErrorThrown": false,
                              "syncErrorValue": null,
                              "toRespond": 0,
                              "values": Array [
                                undefined,
                                "",
                              ],
                            },
                            "syncErrorThrowable": false,
                            "syncErrorThrown": false,
                            "syncErrorValue": null,
                          },
                        ],
                        "thrownError": null,
                      }
                    }
                    helpSupportUrl$={
                      BehaviorSubject {
                        "_isScalar": false,
                        "_value": "",
                        "closed": false,
                        "hasError": false,
                        "isStopped": false,
                        "observers": Array [
                          InnerSubscriber {
                            "_parentOrParents": CombineLatestSubscriber {
                              "_parentOrParents": Subscriber {
                                "_parentOrParents": null,
                                "_subscriptions": Array [
                                  [Circular],
                                ],
                                "closed": false,
                                "destination": SafeSubscriber {
                                  "_complete": undefined,
                                  "_context": [Circular],
                                  "_error": undefined,
                                  "_next": [Function],
                                  "_parentOrParents": null,
                                  "_parentSubscriber": [Circular],
                                  "_subscriptions": null,
                                  "closed": false,
                                  "destination": Object {
                                    "closed": true,
                                    "complete": [Function],
                                    "error": [Function],
                                    "next": [Function],
                                  },
                                  "isStopped": false,
                                  "syncErrorThrowable": false,
                                  "syncErrorThrown": false,
                                  "syncErrorValue": null,
                                },
                                "isStopped": false,
                                "syncErrorThrowable": true,
                                "syncErrorThrown": false,
                                "syncErrorValue": null,
                              },
                              "_subscriptions": Array [
                                InnerSubscriber {
                                  "_parentOrParents": [Circular],
                                  "_subscriptions": Array [
                                    SubjectSubscription {
                                      "_parentOrParents": [Circular],
                                      "_subscriptions": null,
                                      "closed": false,
                                      "subject": BehaviorSubject {
                                        "_isScalar": false,
                                        "_value": undefined,
                                        "closed": false,
                                        "hasError": false,
                                        "isStopped": false,
                                        "observers": Array [
                                          [Circular],
                                        ],
                                        "thrownError": null,
                                      },
                                      "subscriber": [Circular],
                                    },
                                  ],
                                  "closed": false,
                                  "destination": Object {
                                    "closed": true,
                                    "complete": [Function],
                                    "error": [Function],
                                    "next": [Function],
                                  },
                                  "index": 1,
                                  "isStopped": false,
                                  "outerIndex": 0,
                                  "outerValue": undefined,
                                  "parent": [Circular],
                                  "syncErrorThrowable": false,
                                  "syncErrorThrown": false,
                                  "syncErrorValue": null,
                                },
                                [Circular],
                              ],
                              "active": 2,
                              "closed": false,
                              "destination": Subscriber {
                                "_parentOrParents": null,
                                "_subscriptions": Array [
                                  [Circular],
                                ],
                                "closed": false,
                                "destination": SafeSubscriber {
                                  "_complete": undefined,
                                  "_context": [Circular],
                                  "_error": undefined,
                                  "_next": [Function],
                                  "_parentOrParents": null,
                                  "_parentSubscriber": [Circular],
                                  "_subscriptions": null,
                                  "closed": false,
                                  "destination": Object {
                                    "closed": true,
                                    "complete": [Function],
                                    "error": [Function],
                                    "next": [Function],
                                  },
                                  "isStopped": false,
                                  "syncErrorThrowable": false,
                                  "syncErrorThrown": false,
                                  "syncErrorValue": null,
                                },
                                "isStopped": false,
                                "syncErrorThrowable": true,
                                "syncErrorThrown": false,
                                "syncErrorValue": null,
                              },
                              "isStopped": true,
                              "observables": Array [
                                BehaviorSubject {
                                  "_isScalar": false,
                                  "_value": undefined,
                                  "closed": false,
                                  "hasError": false,
                                  "isStopped": false,
                                  "observers": Array [
                                    InnerSubscriber {
                                      "_parentOrParents": [Circular],
                                      "_subscriptions": Array [
                                        SubjectSubscription {
                                          "_parentOrParents": [Circular],
                                          "_subscriptions": null,
                                          "closed": false,
                                          "subject": [Circular],
                                          "subscriber": [Circular],
                                        },
                                      ],
                                      "closed": false,
                                      "destination": Object {
                                        "closed": true,
                                        "complete": [Function],
                                        "error": [Function],
                                        "next": [Function],
                                      },
                                      "index": 1,
                                      "isStopped": false,
                                      "outerIndex": 0,
                                      "outerValue": undefined,
                                      "parent": [Circular],
                                      "syncErrorThrowable": false,
                                      "syncErrorThrown": false,
                                      "syncErrorValue": null,
                                    },
                                  ],
                                  "thrownError": null,
                                },
                                [Circular],
                              ],
                              "resultSelector": undefined,
                              "syncErrorThrowable": true,
                              "syncErrorThrown": false,
                              "syncErrorValue": null,
                              "toRespond": 0,
                              "values": Array [
                                undefined,
                                "",
                              ],
                            },
                            "_subscriptions": Array [
                              SubjectSubscription {
                                "_parentOrParents": [Circular],
                                "_subscriptions": null,
                                "closed": false,
                                "subject": [Circular],
                                "subscriber": [Circular],
                              },
                            ],
                            "closed": false,
                            "destination": Object {
                              "closed": true,
                              "complete": [Function],
                              "error": [Function],
                              "next": [Function],
                            },
                            "index": 1,
                            "isStopped": false,
                            "outerIndex": 1,
                            "outerValue": undefined,
                            "parent": CombineLatestSubscriber {
                              "_parentOrParents": Subscriber {
                                "_parentOrParents": null,
                                "_subscriptions": Array [
                                  [Circular],
                                ],
                                "closed": false,
                                "destination": SafeSubscriber {
                                  "_complete": undefined,
                                  "_context": [Circular],
                                  "_error": undefined,
                                  "_next": [Function],
                                  "_parentOrParents": null,
                                  "_parentSubscriber": [Circular],
                                  "_subscriptions": null,
                                  "closed": false,
                                  "destination": Object {
                                    "closed": true,
                                    "complete": [Function],
                                    "error": [Function],
                                    "next": [Function],
                                  },
                                  "isStopped": false,
                                  "syncErrorThrowable": false,
                                  "syncErrorThrown": false,
                                  "syncErrorValue": null,
                                },
                                "isStopped": false,
                                "syncErrorThrowable": true,
                                "syncErrorThrown": false,
                                "syncErrorValue": null,
                              },
                              "_subscriptions": Array [
                                InnerSubscriber {
                                  "_parentOrParents": [Circular],
                                  "_subscriptions": Array [
                                    SubjectSubscription {
                                      "_parentOrParents": [Circular],
                                      "_subscriptions": null,
                                      "closed": false,
                                      "subject": BehaviorSubject {
                                        "_isScalar": false,
                                        "_value": undefined,
                                        "closed": false,
                                        "hasError": false,
                                        "isStopped": false,
                                        "observers": Array [
                                          [Circular],
                                        ],
                                        "thrownError": null,
                                      },
                                      "subscriber": [Circular],
                                    },
                                  ],
                                  "closed": false,
                                  "destination": Object {
                                    "closed": true,
                                    "complete": [Function],
                                    "error": [Function],
                                    "next": [Function],
                                  },
                                  "index": 1,
                                  "isStopped": false,
                                  "outerIndex": 0,
                                  "outerValue": undefined,
                                  "parent": [Circular],
                                  "syncErrorThrowable": false,
                                  "syncErrorThrown": false,
                                  "syncErrorValue": null,
                                },
                                [Circular],
                              ],
                              "active": 2,
                              "closed": false,
                              "destination": Subscriber {
                                "_parentOrParents": null,
                                "_subscriptions": Array [
                                  [Circular],
                                ],
                                "closed": false,
                                "destination": SafeSubscriber {
                                  "_complete": undefined,
                                  "_context": [Circular],
                                  "_error": undefined,
                                  "_next": [Function],
                                  "_parentOrParents": null,
                                  "_parentSubscriber": [Circular],
                                  "_subscriptions": null,
                                  "closed": false,
                                  "destination": Object {
                                    "closed": true,
                                    "complete": [Function],
                                    "error": [Function],
                                    "next": [Function],
                                  },
                                  "isStopped": false,
                                  "syncErrorThrowable": false,
                                  "syncErrorThrown": false,
                                  "syncErrorValue": null,
                                },
                                "isStopped": false,
                                "syncErrorThrowable": true,
                                "syncErrorThrown": false,
                                "syncErrorValue": null,
                              },
                              "isStopped": true,
                              "observables": Array [
                                BehaviorSubject {
                                  "_isScalar": false,
                                  "_value": undefined,
                                  "closed": false,
                                  "hasError": false,
                                  "isStopped": false,
                                  "observers": Array [
                                    InnerSubscriber {
                                      "_parentOrParents": [Circular],
                                      "_subscriptions": Array [
                                        SubjectSubscription {
                                          "_parentOrParents": [Circular],
                                          "_subscriptions": null,
                                          "closed": false,
                                          "subject": [Circular],
                                          "subscriber": [Circular],
                                        },
                                      ],
                                      "closed": false,
                                      "destination": Object {
                                        "closed": true,
                                        "complete": [Function],
                                        "error": [Function],
                                        "next": [Function],
                                      },
                                      "index": 1,
                                      "isStopped": false,
                                      "outerIndex": 0,
                                      "outerValue": undefined,
                                      "parent": [Circular],
                                      "syncErrorThrowable": false,
                                      "syncErrorThrown": false,
                                      "syncErrorValue": null,
                                    },
                                  ],
                                  "thrownError": null,
                                },
                                [Circular],
                              ],
                              "resultSelector": undefined,
                              "syncErrorThrowable": true,
                              "syncErrorThrown": false,
                              "syncErrorValue": null,
                              "toRespond": 0,
                              "values": Array [
                                undefined,
                                "",
                              ],
                            },
                            "syncErrorThrowable": false,
                            "syncErrorThrown": false,
                            "syncErrorValue": null,
                          },
                        ],
                        "thrownError": null,
                      }
                    }
                    opensearchDashboardsDocLink="/docs"
                    opensearchDashboardsVersion="1.0.0"
                    useDefaultContent={true}
                  >
                    <HeaderHelpMenuUI
                      helpExtension$={
                        BehaviorSubject {
                          "_isScalar": false,
                          "_value": undefined,
                          "closed": false,
                          "hasError": false,
                          "isStopped": false,
                          "observers": Array [
                            InnerSubscriber {
                              "_parentOrParents": CombineLatestSubscriber {
                                "_parentOrParents": Subscriber {
                                  "_parentOrParents": null,
                                  "_subscriptions": Array [
                                    [Circular],
                                  ],
                                  "closed": false,
                                  "destination": SafeSubscriber {
                                    "_complete": undefined,
                                    "_context": [Circular],
                                    "_error": undefined,
                                    "_next": [Function],
                                    "_parentOrParents": null,
                                    "_parentSubscriber": [Circular],
                                    "_subscriptions": null,
                                    "closed": false,
                                    "destination": Object {
                                      "closed": true,
                                      "complete": [Function],
                                      "error": [Function],
                                      "next": [Function],
                                    },
                                    "isStopped": false,
                                    "syncErrorThrowable": false,
                                    "syncErrorThrown": false,
                                    "syncErrorValue": null,
                                  },
                                  "isStopped": false,
                                  "syncErrorThrowable": true,
                                  "syncErrorThrown": false,
                                  "syncErrorValue": null,
                                },
                                "_subscriptions": Array [
                                  [Circular],
                                  InnerSubscriber {
                                    "_parentOrParents": [Circular],
                                    "_subscriptions": Array [
                                      SubjectSubscription {
                                        "_parentOrParents": [Circular],
                                        "_subscriptions": null,
                                        "closed": false,
                                        "subject": BehaviorSubject {
                                          "_isScalar": false,
                                          "_value": "",
                                          "closed": false,
                                          "hasError": false,
                                          "isStopped": false,
                                          "observers": Array [
                                            [Circular],
                                          ],
                                          "thrownError": null,
                                        },
                                        "subscriber": [Circular],
                                      },
                                    ],
                                    "closed": false,
                                    "destination": Object {
                                      "closed": true,
                                      "complete": [Function],
                                      "error": [Function],
                                      "next": [Function],
                                    },
                                    "index": 1,
                                    "isStopped": false,
                                    "outerIndex": 1,
                                    "outerValue": undefined,
                                    "parent": [Circular],
                                    "syncErrorThrowable": false,
                                    "syncErrorThrown": false,
                                    "syncErrorValue": null,
                                  },
                                ],
                                "active": 2,
                                "closed": false,
                                "destination": Subscriber {
                                  "_parentOrParents": null,
                                  "_subscriptions": Array [
                                    [Circular],
                                  ],
                                  "closed": false,
                                  "destination": SafeSubscriber {
                                    "_complete": undefined,
                                    "_context": [Circular],
                                    "_error": undefined,
                                    "_next": [Function],
                                    "_parentOrParents": null,
                                    "_parentSubscriber": [Circular],
                                    "_subscriptions": null,
                                    "closed": false,
                                    "destination": Object {
                                      "closed": true,
                                      "complete": [Function],
                                      "error": [Function],
                                      "next": [Function],
                                    },
                                    "isStopped": false,
                                    "syncErrorThrowable": false,
                                    "syncErrorThrown": false,
                                    "syncErrorValue": null,
                                  },
                                  "isStopped": false,
                                  "syncErrorThrowable": true,
                                  "syncErrorThrown": false,
                                  "syncErrorValue": null,
                                },
                                "isStopped": true,
                                "observables": Array [
                                  [Circular],
                                  BehaviorSubject {
                                    "_isScalar": false,
                                    "_value": "",
                                    "closed": false,
                                    "hasError": false,
                                    "isStopped": false,
                                    "observers": Array [
                                      InnerSubscriber {
                                        "_parentOrParents": [Circular],
                                        "_subscriptions": Array [
                                          SubjectSubscription {
                                            "_parentOrParents": [Circular],
                                            "_subscriptions": null,
                                            "closed": false,
                                            "subject": [Circular],
                                            "subscriber": [Circular],
                                          },
                                        ],
                                        "closed": false,
                                        "destination": Object {
                                          "closed": true,
                                          "complete": [Function],
                                          "error": [Function],
                                          "next": [Function],
                                        },
                                        "index": 1,
                                        "isStopped": false,
                                        "outerIndex": 1,
                                        "outerValue": undefined,
                                        "parent": [Circular],
                                        "syncErrorThrowable": false,
                                        "syncErrorThrown": false,
                                        "syncErrorValue": null,
                                      },
                                    ],
                                    "thrownError": null,
                                  },
                                ],
                                "resultSelector": undefined,
                                "syncErrorThrowable": true,
                                "syncErrorThrown": false,
                                "syncErrorValue": null,
                                "toRespond": 0,
                                "values": Array [
                                  undefined,
                                  "",
                                ],
                              },
                              "_subscriptions": Array [
                                SubjectSubscription {
                                  "_parentOrParents": [Circular],
                                  "_subscriptions": null,
                                  "closed": false,
                                  "subject": [Circular],
                                  "subscriber": [Circular],
                                },
                              ],
                              "closed": false,
                              "destination": Object {
                                "closed": true,
                                "complete": [Function],
                                "error": [Function],
                                "next": [Function],
                              },
                              "index": 1,
                              "isStopped": false,
                              "outerIndex": 0,
                              "outerValue": undefined,
                              "parent": CombineLatestSubscriber {
                                "_parentOrParents": Subscriber {
                                  "_parentOrParents": null,
                                  "_subscriptions": Array [
                                    [Circular],
                                  ],
                                  "closed": false,
                                  "destination": SafeSubscriber {
                                    "_complete": undefined,
                                    "_context": [Circular],
                                    "_error": undefined,
                                    "_next": [Function],
                                    "_parentOrParents": null,
                                    "_parentSubscriber": [Circular],
                                    "_subscriptions": null,
                                    "closed": false,
                                    "destination": Object {
                                      "closed": true,
                                      "complete": [Function],
                                      "error": [Function],
                                      "next": [Function],
                                    },
                                    "isStopped": false,
                                    "syncErrorThrowable": false,
                                    "syncErrorThrown": false,
                                    "syncErrorValue": null,
                                  },
                                  "isStopped": false,
                                  "syncErrorThrowable": true,
                                  "syncErrorThrown": false,
                                  "syncErrorValue": null,
                                },
                                "_subscriptions": Array [
                                  [Circular],
                                  InnerSubscriber {
                                    "_parentOrParents": [Circular],
                                    "_subscriptions": Array [
                                      SubjectSubscription {
                                        "_parentOrParents": [Circular],
                                        "_subscriptions": null,
                                        "closed": false,
                                        "subject": BehaviorSubject {
                                          "_isScalar": false,
                                          "_value": "",
                                          "closed": false,
                                          "hasError": false,
                                          "isStopped": false,
                                          "observers": Array [
                                            [Circular],
                                          ],
                                          "thrownError": null,
                                        },
                                        "subscriber": [Circular],
                                      },
                                    ],
                                    "closed": false,
                                    "destination": Object {
                                      "closed": true,
                                      "complete": [Function],
                                      "error": [Function],
                                      "next": [Function],
                                    },
                                    "index": 1,
                                    "isStopped": false,
                                    "outerIndex": 1,
                                    "outerValue": undefined,
                                    "parent": [Circular],
                                    "syncErrorThrowable": false,
                                    "syncErrorThrown": false,
                                    "syncErrorValue": null,
                                  },
                                ],
                                "active": 2,
                                "closed": false,
                                "destination": Subscriber {
                                  "_parentOrParents": null,
                                  "_subscriptions": Array [
                                    [Circular],
                                  ],
                                  "closed": false,
                                  "destination": SafeSubscriber {
                                    "_complete": undefined,
                                    "_context": [Circular],
                                    "_error": undefined,
                                    "_next": [Function],
                                    "_parentOrParents": null,
                                    "_parentSubscriber": [Circular],
                                    "_subscriptions": null,
                                    "closed": false,
                                    "destination": Object {
                                      "closed": true,
                                      "complete": [Function],
                                      "error": [Function],
                                      "next": [Function],
                                    },
                                    "isStopped": false,
                                    "syncErrorThrowable": false,
                                    "syncErrorThrown": false,
                                    "syncErrorValue": null,
                                  },
                                  "isStopped": false,
                                  "syncErrorThrowable": true,
                                  "syncErrorThrown": false,
                                  "syncErrorValue": null,
                                },
                                "isStopped": true,
                                "observables": Array [
                                  [Circular],
                                  BehaviorSubject {
                                    "_isScalar": false,
                                    "_value": "",
                                    "closed": false,
                                    "hasError": false,
                                    "isStopped": false,
                                    "observers": Array [
                                      InnerSubscriber {
                                        "_parentOrParents": [Circular],
                                        "_subscriptions": Array [
                                          SubjectSubscription {
                                            "_parentOrParents": [Circular],
                                            "_subscriptions": null,
                                            "closed": false,
                                            "subject": [Circular],
                                            "subscriber": [Circular],
                                          },
                                        ],
                                        "closed": false,
                                        "destination": Object {
                                          "closed": true,
                                          "complete": [Function],
                                          "error": [Function],
                                          "next": [Function],
                                        },
                                        "index": 1,
                                        "isStopped": false,
                                        "outerIndex": 1,
                                        "outerValue": undefined,
                                        "parent": [Circular],
                                        "syncErrorThrowable": false,
                                        "syncErrorThrown": false,
                                        "syncErrorValue": null,
                                      },
                                    ],
                                    "thrownError": null,
                                  },
                                ],
                                "resultSelector": undefined,
                                "syncErrorThrowable": true,
                                "syncErrorThrown": false,
                                "syncErrorValue": null,
                                "toRespond": 0,
                                "values": Array [
                                  undefined,
                                  "",
                                ],
                              },
                              "syncErrorThrowable": false,
                              "syncErrorThrown": false,
                              "syncErrorValue": null,
                            },
                          ],
                          "thrownError": null,
                        }
                      }
                      helpSupportUrl$={
                        BehaviorSubject {
                          "_isScalar": false,
                          "_value": "",
                          "closed": false,
                          "hasError": false,
                          "isStopped": false,
                          "observers": Array [
                            InnerSubscriber {
                              "_parentOrParents": CombineLatestSubscriber {
                                "_parentOrParents": Subscriber {
                                  "_parentOrParents": null,
                                  "_subscriptions": Array [
                                    [Circular],
                                  ],
                                  "closed": false,
                                  "destination": SafeSubscriber {
                                    "_complete": undefined,
                                    "_context": [Circular],
                                    "_error": undefined,
                                    "_next": [Function],
                                    "_parentOrParents": null,
                                    "_parentSubscriber": [Circular],
                                    "_subscriptions": null,
                                    "closed": false,
                                    "destination": Object {
                                      "closed": true,
                                      "complete": [Function],
                                      "error": [Function],
                                      "next": [Function],
                                    },
                                    "isStopped": false,
                                    "syncErrorThrowable": false,
                                    "syncErrorThrown": false,
                                    "syncErrorValue": null,
                                  },
                                  "isStopped": false,
                                  "syncErrorThrowable": true,
                                  "syncErrorThrown": false,
                                  "syncErrorValue": null,
                                },
                                "_subscriptions": Array [
                                  InnerSubscriber {
                                    "_parentOrParents": [Circular],
                                    "_subscriptions": Array [
                                      SubjectSubscription {
                                        "_parentOrParents": [Circular],
                                        "_subscriptions": null,
                                        "closed": false,
                                        "subject": BehaviorSubject {
                                          "_isScalar": false,
                                          "_value": undefined,
                                          "closed": false,
                                          "hasError": false,
                                          "isStopped": false,
                                          "observers": Array [
                                            [Circular],
                                          ],
                                          "thrownError": null,
                                        },
                                        "subscriber": [Circular],
                                      },
                                    ],
                                    "closed": false,
                                    "destination": Object {
                                      "closed": true,
                                      "complete": [Function],
                                      "error": [Function],
                                      "next": [Function],
                                    },
                                    "index": 1,
                                    "isStopped": false,
                                    "outerIndex": 0,
                                    "outerValue": undefined,
                                    "parent": [Circular],
                                    "syncErrorThrowable": false,
                                    "syncErrorThrown": false,
                                    "syncErrorValue": null,
                                  },
                                  [Circular],
                                ],
                                "active": 2,
                                "closed": false,
                                "destination": Subscriber {
                                  "_parentOrParents": null,
                                  "_subscriptions": Array [
                                    [Circular],
                                  ],
                                  "closed": false,
                                  "destination": SafeSubscriber {
                                    "_complete": undefined,
                                    "_context": [Circular],
                                    "_error": undefined,
                                    "_next": [Function],
                                    "_parentOrParents": null,
                                    "_parentSubscriber": [Circular],
                                    "_subscriptions": null,
                                    "closed": false,
                                    "destination": Object {
                                      "closed": true,
                                      "complete": [Function],
                                      "error": [Function],
                                      "next": [Function],
                                    },
                                    "isStopped": false,
                                    "syncErrorThrowable": false,
                                    "syncErrorThrown": false,
                                    "syncErrorValue": null,
                                  },
                                  "isStopped": false,
                                  "syncErrorThrowable": true,
                                  "syncErrorThrown": false,
                                  "syncErrorValue": null,
                                },
                                "isStopped": true,
                                "observables": Array [
                                  BehaviorSubject {
                                    "_isScalar": false,
                                    "_value": undefined,
                                    "closed": false,
                                    "hasError": false,
                                    "isStopped": false,
                                    "observers": Array [
                                      InnerSubscriber {
                                        "_parentOrParents": [Circular],
                                        "_subscriptions": Array [
                                          SubjectSubscription {
                                            "_parentOrParents": [Circular],
                                            "_subscriptions": null,
                                            "closed": false,
                                            "subject": [Circular],
                                            "subscriber": [Circular],
                                          },
                                        ],
                                        "closed": false,
                                        "destination": Object {
                                          "closed": true,
                                          "complete": [Function],
                                          "error": [Function],
                                          "next": [Function],
                                        },
                                        "index": 1,
                                        "isStopped": false,
                                        "outerIndex": 0,
                                        "outerValue": undefined,
                                        "parent": [Circular],
                                        "syncErrorThrowable": false,
                                        "syncErrorThrown": false,
                                        "syncErrorValue": null,
                                      },
                                    ],
                                    "thrownError": null,
                                  },
                                  [Circular],
                                ],
                                "resultSelector": undefined,
                                "syncErrorThrowable": true,
                                "syncErrorThrown": false,
                                "syncErrorValue": null,
                                "toRespond": 0,
                                "values": Array [
                                  undefined,
                                  "",
                                ],
                              },
                              "_subscriptions": Array [
                                SubjectSubscription {
                                  "_parentOrParents": [Circular],
                                  "_subscriptions": null,
                                  "closed": false,
                                  "subject": [Circular],
                                  "subscriber": [Circular],
                                },
                              ],
                              "closed": false,
                              "destination": Object {
                                "closed": true,
                                "complete": [Function],
                                "error": [Function],
                                "next": [Function],
                              },
                              "index": 1,
                              "isStopped": false,
                              "outerIndex": 1,
                              "outerValue": undefined,
                              "parent": CombineLatestSubscriber {
                                "_parentOrParents": Subscriber {
                                  "_parentOrParents": null,
                                  "_subscriptions": Array [
                                    [Circular],
                                  ],
                                  "closed": false,
                                  "destination": SafeSubscriber {
                                    "_complete": undefined,
                                    "_context": [Circular],
                                    "_error": undefined,
                                    "_next": [Function],
                                    "_parentOrParents": null,
                                    "_parentSubscriber": [Circular],
                                    "_subscriptions": null,
                                    "closed": false,
                                    "destination": Object {
                                      "closed": true,
                                      "complete": [Function],
                                      "error": [Function],
                                      "next": [Function],
                                    },
                                    "isStopped": false,
                                    "syncErrorThrowable": false,
                                    "syncErrorThrown": false,
                                    "syncErrorValue": null,
                                  },
                                  "isStopped": false,
                                  "syncErrorThrowable": true,
                                  "syncErrorThrown": false,
                                  "syncErrorValue": null,
                                },
                                "_subscriptions": Array [
                                  InnerSubscriber {
                                    "_parentOrParents": [Circular],
                                    "_subscriptions": Array [
                                      SubjectSubscription {
                                        "_parentOrParents": [Circular],
                                        "_subscriptions": null,
                                        "closed": false,
                                        "subject": BehaviorSubject {
                                          "_isScalar": false,
                                          "_value": undefined,
                                          "closed": false,
                                          "hasError": false,
                                          "isStopped": false,
                                          "observers": Array [
                                            [Circular],
                                          ],
                                          "thrownError": null,
                                        },
                                        "subscriber": [Circular],
                                      },
                                    ],
                                    "closed": false,
                                    "destination": Object {
                                      "closed": true,
                                      "complete": [Function],
                                      "error": [Function],
                                      "next": [Function],
                                    },
                                    "index": 1,
                                    "isStopped": false,
                                    "outerIndex": 0,
                                    "outerValue": undefined,
                                    "parent": [Circular],
                                    "syncErrorThrowable": false,
                                    "syncErrorThrown": false,
                                    "syncErrorValue": null,
                                  },
                                  [Circular],
                                ],
                                "active": 2,
                                "closed": false,
                                "destination": Subscriber {
                                  "_parentOrParents": null,
                                  "_subscriptions": Array [
                                    [Circular],
                                  ],
                                  "closed": false,
                                  "destination": SafeSubscriber {
                                    "_complete": undefined,
                                    "_context": [Circular],
                                    "_error": undefined,
                                    "_next": [Function],
                                    "_parentOrParents": null,
                                    "_parentSubscriber": [Circular],
                                    "_subscriptions": null,
                                    "closed": false,
                                    "destination": Object {
                                      "closed": true,
                                      "complete": [Function],
                                      "error": [Function],
                                      "next": [Function],
                                    },
                                    "isStopped": false,
                                    "syncErrorThrowable": false,
                                    "syncErrorThrown": false,
                                    "syncErrorValue": null,
                                  },
                                  "isStopped": false,
                                  "syncErrorThrowable": true,
                                  "syncErrorThrown": false,
                                  "syncErrorValue": null,
                                },
                                "isStopped": true,
                                "observables": Array [
                                  BehaviorSubject {
                                    "_isScalar": false,
                                    "_value": undefined,
                                    "closed": false,
                                    "hasError": false,
                                    "isStopped": false,
                                    "observers": Array [
                                      InnerSubscriber {
                                        "_parentOrParents": [Circular],
                                        "_subscriptions": Array [
                                          SubjectSubscription {
                                            "_parentOrParents": [Circular],
                                            "_subscriptions": null,
                                            "closed": false,
                                            "subject": [Circular],
                                            "subscriber": [Circular],
                                          },
                                        ],
                                        "closed": false,
                                        "destination": Object {
                                          "closed": true,
                                          "complete": [Function],
                                          "error": [Function],
                                          "next": [Function],
                                        },
                                        "index": 1,
                                        "isStopped": false,
                                        "outerIndex": 0,
                                        "outerValue": undefined,
                                        "parent": [Circular],
                                        "syncErrorThrowable": false,
                                        "syncErrorThrown": false,
                                        "syncErrorValue": null,
                                      },
                                    ],
                                    "thrownError": null,
                                  },
                                  [Circular],
                                ],
                                "resultSelector": undefined,
                                "syncErrorThrowable": true,
                                "syncErrorThrown": false,
                                "syncErrorValue": null,
                                "toRespond": 0,
                                "values": Array [
                                  undefined,
                                  "",
                                ],
                              },
                              "syncErrorThrowable": false,
                              "syncErrorThrown": false,
                              "syncErrorValue": null,
                            },
                          ],
                          "thrownError": null,
                        }
                      }
                      intl={
                        Object {
                          "defaultFormats": Object {},
                          "defaultLocale": "en",
                          "formatDate": [Function],
                          "formatHTMLMessage": [Function],
                          "formatMessage": [Function],
                          "formatNumber": [Function],
                          "formatPlural": [Function],
                          "formatRelative": [Function],
                          "formatTime": [Function],
                          "formats": Object {
                            "date": Object {
                              "full": Object {
                                "day": "numeric",
                                "month": "long",
                                "weekday": "long",
                                "year": "numeric",
                              },
                              "long": Object {
                                "day": "numeric",
                                "month": "long",
                                "year": "numeric",
                              },
                              "medium": Object {
                                "day": "numeric",
                                "month": "short",
                                "year": "numeric",
                              },
                              "short": Object {
                                "day": "numeric",
                                "month": "numeric",
                                "year": "2-digit",
                              },
                            },
                            "number": Object {
                              "currency": Object {
                                "style": "currency",
                              },
                              "percent": Object {
                                "style": "percent",
                              },
                            },
                            "relative": Object {
                              "days": Object {
                                "units": "day",
                              },
                              "hours": Object {
                                "units": "hour",
                              },
                              "minutes": Object {
                                "units": "minute",
                              },
                              "months": Object {
                                "units": "month",
                              },
                              "seconds": Object {
                                "units": "second",
                              },
                              "years": Object {
                                "units": "year",
                              },
                            },
                            "time": Object {
                              "full": Object {
                                "hour": "numeric",
                                "minute": "numeric",
                                "second": "numeric",
                                "timeZoneName": "short",
                              },
                              "long": Object {
                                "hour": "numeric",
                                "minute": "numeric",
                                "second": "numeric",
                                "timeZoneName": "short",
                              },
                              "medium": Object {
                                "hour": "numeric",
                                "minute": "numeric",
                                "second": "numeric",
                              },
                              "short": Object {
                                "hour": "numeric",
                                "minute": "numeric",
                              },
                            },
                          },
                          "formatters": Object {
                            "getDateTimeFormat": [Function],
                            "getMessageFormat": [Function],
                            "getNumberFormat": [Function],
                            "getPluralFormat": [Function],
                            "getRelativeFormat": [Function],
                          },
                          "locale": "en",
                          "messages": Object {},
                          "now": [Function],
                          "onError": [Function],
                          "textComponent": Symbol(react.fragment),
                          "timeZone": null,
                        }
                      }
                      opensearchDashboardsDocLink="/docs"
                      opensearchDashboardsVersion="1.0.0"
                      useDefaultContent={true}
                    >
                      <EuiPopover
                        anchorPosition="downRight"
                        button={
                          <EuiHeaderSectionItemButton
                            aria-expanded={false}
                            aria-haspopup="true"
                            aria-label="Help menu"
                            onClick={[Function]}
                          >
                            <EuiIcon
                              size="m"
                              type="help"
                            />
                          </EuiHeaderSectionItemButton>
                        }
                        closePopover={[Function]}
                        data-test-subj="helpMenuButton"
                        display="inlineBlock"
                        hasArrow={true}
                        id="headerHelpMenu"
                        isOpen={false}
                        ownFocus={true}
                        panelPaddingSize="m"
                        repositionOnScroll={true}
                      >
                        <div
                          className="euiPopover euiPopover--anchorDownRight"
                          data-test-subj="helpMenuButton"
                          id="headerHelpMenu"
                        >
                          <div
                            className="euiPopover__anchor"
                          >
                            <EuiHeaderSectionItemButton
                              aria-expanded={false}
                              aria-haspopup="true"
                              aria-label="Help menu"
                              onClick={[Function]}
                            >
                              <EuiButtonEmpty
                                aria-expanded={false}
                                aria-haspopup="true"
                                aria-label="Help menu"
                                buttonRef={
                                  Object {
                                    "current": <button
                                      aria-expanded="false"
                                      aria-haspopup="true"
                                      aria-label="Help menu"
                                      class="euiButtonEmpty euiButtonEmpty--text euiHeaderSectionItemButton"
                                      type="button"
                                    >
                                      <span
                                        class="euiButtonContent euiButtonEmpty__content"
                                      >
                                        <span
                                          class="euiButtonEmpty__text"
                                        >
                                          <span
                                            class="euiHeaderSectionItemButton__content"
                                          >
                                            <span
                                              data-euiicon-type="help"
                                            />
                                          </span>
                                        </span>
                                      </span>
                                    </button>,
                                  }
                                }
                                className="euiHeaderSectionItemButton"
                                color="text"
                                onClick={[Function]}
                              >
                                <button
                                  aria-expanded={false}
                                  aria-haspopup="true"
                                  aria-label="Help menu"
                                  className="euiButtonEmpty euiButtonEmpty--text euiHeaderSectionItemButton"
                                  disabled={false}
                                  onClick={[Function]}
                                  type="button"
                                >
                                  <EuiButtonContent
                                    className="euiButtonEmpty__content"
                                    iconSide="left"
                                    iconSize="m"
                                    textProps={
                                      Object {
                                        "className": "euiButtonEmpty__text",
                                      }
                                    }
                                  >
                                    <span
                                      className="euiButtonContent euiButtonEmpty__content"
                                    >
                                      <span
                                        className="euiButtonEmpty__text"
                                      >
                                        <span
                                          className="euiHeaderSectionItemButton__content"
                                        >
                                          <EuiIcon
                                            size="m"
                                            type="help"
                                          >
                                            <span
                                              data-euiicon-type="help"
                                              size="m"
                                            />
                                          </EuiIcon>
                                        </span>
                                      </span>
                                    </span>
                                  </EuiButtonContent>
                                </button>
                              </EuiButtonEmpty>
                            </EuiHeaderSectionItemButton>
                          </div>
                        </div>
                      </EuiPopover>
                    </HeaderHelpMenuUI>
                  </InjectIntl(HeaderHelpMenuUI)>
                </div>
              </EuiHeaderSectionItem>
            </div>
          </EuiHeaderSection>
        </div>
      </EuiHeader>
    </div>
    <CollapsibleNav
      appId$={
        Observable {
          "_isScalar": false,
          "source": Subject {
            "_isScalar": false,
            "closed": false,
            "hasError": false,
            "isStopped": false,
            "observers": Array [
              Subscriber {
                "_parentOrParents": null,
                "_subscriptions": Array [
                  SubjectSubscription {
                    "_parentOrParents": [Circular],
                    "_subscriptions": null,
                    "closed": false,
                    "subject": [Circular],
                    "subscriber": [Circular],
                  },
                ],
                "closed": false,
                "destination": SafeSubscriber {
                  "_complete": undefined,
                  "_context": [Circular],
                  "_error": undefined,
                  "_next": [Function],
                  "_parentOrParents": null,
                  "_parentSubscriber": [Circular],
                  "_subscriptions": null,
                  "closed": false,
                  "destination": Object {
                    "closed": true,
                    "complete": [Function],
                    "error": [Function],
                    "next": [Function],
                  },
                  "isStopped": false,
                  "syncErrorThrowable": false,
                  "syncErrorThrown": false,
                  "syncErrorValue": null,
                },
                "isStopped": false,
                "syncErrorThrowable": true,
                "syncErrorThrown": false,
                "syncErrorValue": null,
              },
            ],
            "thrownError": null,
          },
        }
      }
      basePath={
        BasePath {
          "basePath": "/test",
          "get": [Function],
          "prepend": [Function],
          "remove": [Function],
          "serverBasePath": "/test",
        }
      }
      branding={
        Object {
          "applicationTitle": "Foobar Dashboards",
          "darkMode": false,
          "logo": Object {
            "defaultUrl": "/foo",
          },
          "mark": Object {
            "defaultUrl": "/foo",
          },
          "useExpandedHeader": false,
        }
      }
      closeNav={[Function]}
      customNavLink$={
        BehaviorSubject {
          "_isScalar": false,
          "_value": undefined,
          "closed": false,
          "hasError": false,
          "isStopped": false,
          "observers": Array [
            Subscriber {
              "_parentOrParents": null,
              "_subscriptions": Array [
                SubjectSubscription {
                  "_parentOrParents": [Circular],
                  "_subscriptions": null,
                  "closed": false,
                  "subject": [Circular],
                  "subscriber": [Circular],
                },
              ],
              "closed": false,
              "destination": SafeSubscriber {
                "_complete": undefined,
                "_context": [Circular],
                "_error": undefined,
                "_next": [Function],
                "_parentOrParents": null,
                "_parentSubscriber": [Circular],
                "_subscriptions": null,
                "closed": false,
                "destination": Object {
                  "closed": true,
                  "complete": [Function],
                  "error": [Function],
                  "next": [Function],
                },
                "isStopped": false,
                "syncErrorThrowable": false,
                "syncErrorThrown": false,
                "syncErrorValue": null,
              },
              "isStopped": false,
              "syncErrorThrowable": true,
              "syncErrorThrown": false,
              "syncErrorValue": null,
            },
          ],
          "thrownError": null,
        }
      }
      homeHref="/"
      id="mockId"
      isLocked={false}
      isNavOpen={false}
      navLinks$={
        BehaviorSubject {
          "_isScalar": false,
          "_value": Array [],
          "closed": false,
          "hasError": false,
          "isStopped": false,
          "observers": Array [
            Subscriber {
              "_parentOrParents": null,
              "_subscriptions": Array [
                SubjectSubscription {
                  "_parentOrParents": [Circular],
                  "_subscriptions": null,
                  "closed": false,
                  "subject": [Circular],
                  "subscriber": [Circular],
                },
              ],
              "closed": false,
              "destination": SafeSubscriber {
                "_complete": undefined,
                "_context": [Circular],
                "_error": undefined,
                "_next": [Function],
                "_parentOrParents": null,
                "_parentSubscriber": [Circular],
                "_subscriptions": null,
                "closed": false,
                "destination": Object {
                  "closed": true,
                  "complete": [Function],
                  "error": [Function],
                  "next": [Function],
                },
                "isStopped": false,
                "syncErrorThrowable": false,
                "syncErrorThrown": false,
                "syncErrorValue": null,
              },
              "isStopped": false,
              "syncErrorThrowable": true,
              "syncErrorThrown": false,
              "syncErrorValue": null,
            },
            Subscriber {
              "_parentOrParents": null,
              "_subscriptions": Array [
                SubjectSubscription {
                  "_parentOrParents": [Circular],
                  "_subscriptions": null,
                  "closed": false,
                  "subject": [Circular],
                  "subscriber": [Circular],
                },
              ],
              "closed": false,
              "destination": SafeSubscriber {
                "_complete": undefined,
                "_context": [Circular],
                "_error": undefined,
                "_next": [Function],
                "_parentOrParents": null,
                "_parentSubscriber": [Circular],
                "_subscriptions": null,
                "closed": false,
                "destination": Object {
                  "closed": true,
                  "complete": [Function],
                  "error": [Function],
                  "next": [Function],
                },
                "isStopped": false,
                "syncErrorThrowable": false,
                "syncErrorThrown": false,
                "syncErrorValue": null,
              },
              "isStopped": false,
              "syncErrorThrowable": true,
              "syncErrorThrown": false,
              "syncErrorValue": null,
            },
          ],
          "thrownError": null,
        }
      }
      navigateToApp={[MockFunction]}
      navigateToUrl={[MockFunction]}
      onIsLockedUpdate={[Function]}
      recentlyAccessed$={
        BehaviorSubject {
          "_isScalar": false,
          "_value": Array [],
          "closed": false,
          "hasError": false,
          "isStopped": false,
          "observers": Array [
            Subscriber {
              "_parentOrParents": null,
              "_subscriptions": Array [
                SubjectSubscription {
                  "_parentOrParents": [Circular],
                  "_subscriptions": null,
                  "closed": false,
                  "subject": [Circular],
                  "subscriber": [Circular],
                },
              ],
              "closed": false,
              "destination": SafeSubscriber {
                "_complete": undefined,
                "_context": [Circular],
                "_error": undefined,
                "_next": [Function],
                "_parentOrParents": null,
                "_parentSubscriber": [Circular],
                "_subscriptions": null,
                "closed": false,
                "destination": Object {
                  "closed": true,
                  "complete": [Function],
                  "error": [Function],
                  "next": [Function],
                },
                "isStopped": false,
                "syncErrorThrowable": false,
                "syncErrorThrown": false,
                "syncErrorValue": null,
              },
              "isStopped": false,
              "syncErrorThrowable": true,
              "syncErrorThrown": false,
              "syncErrorValue": null,
            },
          ],
          "thrownError": null,
        }
      }
    >
      <EuiCollapsibleNav
        aria-label="Primary"
        data-test-subj="collapsibleNav"
        id="mockId"
        isDocked={false}
        isOpen={false}
        onClose={[Function]}
        outsideClickCloses={false}
      />
    </CollapsibleNav>
  </header>
</Header>
`;
