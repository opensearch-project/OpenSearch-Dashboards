[[upgrade-migrations]]
=== Upgrade migrations

Every time {osd} is upgraded it checks to see if all saved objects, such as dashboards, visualizations, and index patterns, are compatible with the new version. If any saved objects need to be updated, then the automatic saved object migration process is kicked off.

NOTE: 6.7 includes an https://www.elastic.co/guide/en/opensearch-dashboards/6.7/upgrade-assistant.html[Upgrade Assistant]
to help you prepare for your upgrade to 7.0. To access the assistant, go to *Management > 7.0 Upgrade Assistant*.

WARNING: The following instructions assumes {osd} is using the default index names. If the `opensearch-dashboards.index` or `xpack.tasks.index` configuration settings were changed these instructions will have to be adapted accordingly.

[float]
[[upgrade-migrations-process]]
==== Background

Saved objects are stored in two indices: 

* `.opensearch_dashboards_N`, or if set, the `opensearch-dashboards.index` configuration setting
* `.opensearch_dashboards_task_manager_N`, or if set, the `xpack.tasks.index` configuration setting
 
For each of these indices, `N` is a number that increments every time {osd} runs an upgrade migration on that index. The index aliases `.opensearchDashboards` and `.opensearch_dashboards_task_manager` point to the most up-to-date index.

While {osd} is starting up and before serving any HTTP traffic, it checks to see if any internal mapping changes or data transformations for existing saved objects are required.

When changes are necessary, a new migration is started. To ensure that only one {osd} instance performs the migration, each instance will attempt to obtain a migration lock by creating a new `.opensearch_dashboards_N+1` index. The instance that succeeds in creating the index will then read batches of documents from the existing index, migrate them, and write them to the new index. Once the objects are migrated, the lock is released by pointing the `.opensearchDashboards` index alias the new upgraded `.opensearch_dashboards_N+1` index. 

Instances that failed to acquire a lock will log `Another OpenSearchDashboards instance appears to be migrating the index. Waiting for that migration to complete`. The instance will then wait until `.opensearchDashboards` points to an upgraded index before starting up and serving HTTP traffic.

NOTE: Prior to 6.5.0, saved objects were stored directly in an index named `.opensearchDashboards`. After upgrading to version 6.5+, {osd} will migrate this index into `.opensearch_dashboards_N` and set `.opensearchDashboards` up as an index alias. +
Prior to 7.4.0, task manager tasks were stored directly in an index name `.opensearch_dashboards_task_manager`. After upgrading to version 7.4+, {osd} will migrate this index into `.opensearch_dashboards_task_manager_N` and set `.opensearch_dashboards_task_manager` up as an index alias.

[float]
[[preventing-migration-failures]]
==== Preventing migration failures
This section highlights common causes of {osd} upgrade failures and how to prevent them.

[float]
===== Corrupt saved objects
We highly recommend testing your {osd} upgrade in a development cluster to discover and remedy problems caused by corrupt documents, especially when there are custom integrations creating saved objects in your environment. Saved objects that were corrupted through manual editing or integrations will cause migration failures with a log message like `Failed to transform document. Transform: index-pattern:7.0.0\n Doc: {...}` or `Unable to migrate the corrupt Saved Object document ...`. Corrupt documents will have to be fixed or deleted before an upgrade migration can succeed.

[float]
===== User defined index templates that causes new `.opensearchDashboards*` indices to have incompatible settings or mappings
Matching index templates which specify `settings.refresh_interval` or `mappings` are known to interfere with {osd} upgrades.

Prevention: narrow down the index patterns of any user-defined index templates to ensure that these won't apply to new `.opensearchDashboards*` indices.

Note: {osd} < 6.5 creates it's own index template called `opensearch_dashboards_index_template:.opensearchDashboards` and index pattern `.opensearchDashboards`. This index template will not interfere and does not need to be changed or removed.

[float]
===== An unhealthy {opensearch} cluster
Problems with your {opensearch} cluster can prevent {osd} upgrades from succeeding. Ensure that your cluster has:

 * enough free disk space, at least twice the amount of storage taken up by the `.opensearchDashboards` and `.opensearch_dashboards_task_manager` indices
 * sufficient heap size
 * a "green" cluster status

[float]
===== Running different versions of {osd} connected to the same {opensearch} index
OpenSearchDashboards does not support rolling upgrades. Stop all {osd} instances before starting a newer version to prevent upgrade failures and data loss.

[float]
===== Incompatible `xpack.tasks.index` configuration setting
For {osd} < 7.5.1, if the task manager index is set to `.tasks` with the configuration setting `xpack.tasks.index: ".tasks"`, upgrade migrations will fail. {osd} 7.5.1 and later prevents this by refusing to start with an incompatible configuration setting.

[float]
[[resolve-migrations-failures]]
==== Resolving migration failures

If {osd} terminates unexpectedly while migrating a saved object index, manual intervention is required before {osd} will attempt to perform the migration again. Follow the advice in (preventing migration failures)[preventing-migration-failures] before retrying a migration upgrade.

As mentioned above, {osd} will create a migration lock for each index that requires a migration by creating a new `.opensearch_dashboards_N+1` index. For example: if the `.opensearch_dashboards_task_manager` alias is pointing to `.opensearch_dashboards_task_manager_5` then the first {osd} that succeeds in creating `.opensearch_dashboards_task_manager_6` will obtain the lock to start migrations.

However, if the instance that obtained the lock fails to migrate the index, all other {osd} instances will be blocked from performing this migration. This includes the instance that originally obtained the lock, it will be blocked from retrying the migration even when restarted.

[float]
===== Retry a migration by restoring a backup snapshot:

1. Before proceeding ensure that you have a recent and successful backup snapshot of all `.opensearchDashboards*` indices.
2. Shutdown all {osd} instances to be 100% sure that there are no instances currently performing a migration.
3. Delete all saved object indices with `DELETE /.opensearchDashboards*`
4. Restore the `.opensearchDashboards* indices and their aliases from the backup snapshot. See {opensearch} {ref}/modules-snapshots.html[snapshots]
5. Start up all {osd} instances to retry the upgrade migration.

[float]
===== (Not recommended) Retry a migration without a backup snapshot:

1. Shutdown all {osd} instances to be 100% sure that there are no instances currently performing a migration.
2. Identify any migration locks by comparing the output of `GET /_cat/aliases` and `GET /_cat/indices`. If e.g. `.opensearchDashboards` is pointing to `.opensearch_dashboards_4` and there is a `.opensearch_dashboards_5` index, the `.opensearch_dashboards_5` index will act like a migration lock blocking further attempts. Be sure to check both the `.opensearchDashboards` and `.opensearch_dashboards_task_manager` aliases and their indices.
3. Remove any migration locks e.g. `DELETE /.opensearch_dashboards_5`. 
4. Start up all {osd} instances.

[float]
[[upgrade-migrations-rolling-back]]
==== Rolling back to a previous version of {osd}

If you've followed the advice in (preventing migration failures)[preventing-migration-failures] and (resolving migration failures)[resolve-migrations-failures] and {osd} is still not able to upgrade successfully, you might choose to rollback {osd} until you're able to identify the root cause.

WARNING: Before rolling back {osd}, ensure that the version you wish to rollback to is compatible with your {opensearch} cluster. If the version you're rolling back to is not compatible, you will have to also rollback {opensearch}. +
Any changes made after an upgrade will be lost when rolling back to a previous version.

In order to rollback after a failed upgrade migration, the saved object indices might also have to be rolled back to be compatible with the previous {opensearchDashboards} version. 

[float]
===== Rollback by restoring a backup snapshot:

1. Before proceeding ensure that you have a recent and successful backup snapshot of all `.opensearchDashboards*` indices.
2. Shutdown all {osd} instances to be 100% sure that there are no instances currently performing a migration.
3. Delete all saved object indices with `DELETE /.opensearchDashboards*`
4. Restore the `.opensearchDashboards* indices and their aliases from the backup snapshot. See {opensearch} {ref}/modules-snapshots.html[snapshots]
5. Start up all {osd} instances on the older version you wish to rollback to.

[float]
===== (Not recommended) Rollback without a backup snapshot:

WARNING: {osd} does not run a migration for every saved object index on every upgrade. A {osd} version upgrade can cause no migrations, migrate only the `.opensearchDashboards` or the `.opensearch_dashboards_task_manager` index or both. Carefully read the logs to ensure that you're only deleting indices created by a later version of {osd} to avoid data loss.

1. Shutdown all {osd} instances to be 100% sure that there are no {osd} instances currently performing a migration.
2. Create a backup snapshot of the `.opensearchDashboards*` indices.
3. Use the logs from the upgraded instances to identify which indices {osd} attempted to upgrade. The server logs will contain an entry like `[savedobjects-service] Creating index .opensearch_dashboards_4.` and/or `[savedobjects-service] Creating index .opensearch_dashboards_task_manager_2.` If no indices were created after upgrading {osd} then no further action is required to perform a rollback, skip ahead to step (5). If you're running multiple {osd} instances, be sure to inspect all instances' logs.
4. Delete each of the indices identified in step (2). e.g. `DELETE /.opensearch_dashboards_task_manager_2`
5. Inspect the output of `GET /_cat/aliases`. If either the `.opensearchDashboards` and/or `.opensearch_dashboards_task_manager` alias is missing, these will have to be created manually. Find the latest index from the output of `GET /_cat/indices` and create the missing alias to point to the latest index. E.g. if the `.opensearchDashboards` alias was missing and the latest index is `.opensearch_dashboards_3` create a new alias with `POST /.opensearch_dashboards_3/_aliases/.opensearchDashboards`.
6. Start up {osd} on the older version you wish to rollback to.

[float]
[[upgrade-migrations-old-indices]]
==== Handling old `.opensearch_dashboards_N` indices

After migrations have completed, there will be multiple {osd} indices in {opensearch}: (`.opensearch_dashboards_1`, `.opensearch_dashboards_2`, etc). {osd} only uses the index that the `.opensearchDashboards` alias points to. The other {osd} indices can be safely deleted, but are left around as a matter of historical record, and to facilitate rolling {osd} back to a previous version.