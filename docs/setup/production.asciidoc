[[production]]
== Use {osd} in a production environment

* <<configuring-opensearch-dashboards-shield>>
* <<csp-strict-mode>>
* <<enabling-ssl>>
* <<load-balancing-opensearch>>
* <<load-balancing-opensearch-dashboards>>
* <<high-availability>>
* <<memory>>

How you deploy OpenSearchDashboards largely depends on your use case. If you are the only user,
you can run OpenSearchDashboards on your local machine and configure it to point to whatever
OpenSearch instance you want to interact with. Conversely, if you have a large
number of heavy OpenSearchDashboards users, you might need to load balance across multiple
OpenSearchDashboards instances that are all connected to the same OpenSearch instance.

While OpenSearchDashboards isn't terribly resource intensive, we still recommend running OpenSearchDashboards
separate from  your OpenSearch data or master nodes. To distribute OpenSearchDashboards
traffic across the nodes in your OpenSearch cluster, you can run OpenSearchDashboards
and an OpenSearch client node on the same machine. For more information, see
<<load-balancing-opensearch, Load balancing across multiple OpenSearch nodes>>.

[float]
[[configuring-opensearch-dashboards-shield]]
=== Use {stack} {security-features}

You can use {stack} {security-features} to control what {opensearch} data users can
access through OpenSearchDashboards.

When {security-features} are enabled, OpenSearchDashboards users have to log in. They need to
have a role granting <<opensearch-dashboards-privileges, OpenSearchDashboards privileges>> as well as access
to the indices they will be working with in OpenSearchDashboards.

If a user loads a OpenSearchDashboards dashboard that accesses data in an index that they
are not authorized to view, they get an error that indicates the index does
not exist.

For more information on granting access to OpenSearchDashboards, see <<xpack-security-authorization>>.

[float]
[[csp-strict-mode]]
=== Require Content Security Policy

OpenSearchDashboards uses a Content Security Policy to help prevent the browser from allowing
unsafe scripting, but older browsers will silently ignore this policy. If your
organization does not need to support Internet Explorer 11 or much older
versions of our other supported browsers, we recommend that you enable OpenSearchDashboards's
`strict` mode for content security policy, which will block access to OpenSearchDashboards
for any browser that does not enforce even a rudimentary set of CSP
protections.

To do this, set `csp.strict` to `true` in your `opensearch_dashboards.yml`:

--------
csp.strict: true
--------


[float]
[[enabling-ssl]]
=== Enable SSL

See <<configuring-tls>>.

[float]
[[load-balancing-opensearch]]
=== Load Balancing across multiple {opensearch} nodes
If you have multiple nodes in your OpenSearch cluster, the easiest way to distribute OpenSearchDashboards requests
across the nodes is to run an OpenSearch _Coordinating only_ node on the same machine as OpenSearchDashboards.
OpenSearch Coordinating only nodes are essentially smart load balancers that are part of the cluster. They
process incoming HTTP requests, redirect operations to the other nodes in the cluster as needed, and
gather and return the results. For more information, see
{ref}/modules-node.html[Node] in the OpenSearch reference.

To use a local client node to load balance OpenSearchDashboards requests:

. Install OpenSearch on the same machine as OpenSearchDashboards.
. Configure the node as a Coordinating only node. In `opensearch.yml`, set `node.data`, `node.master` and `node.ingest` to `false`:
+
--------
# 3. You want this node to be neither master nor data node nor ingest node, but
#    to act as a "search load balancer" (fetching data from nodes,
#    aggregating results, etc.)
#
node.master: false
node.data: false
node.ingest: false
--------
. Configure the client node to join your OpenSearch cluster. In `opensearch.yml`, set the `cluster.name` to the
name of your cluster.
+
--------
cluster.name: "my_cluster"
--------
. Check your transport and HTTP host configs in `opensearch.yml` under `network.host` and `transport.host`. The `transport.host` needs to be on the network reachable to the cluster members, the `network.host` is the network for the HTTP connection for OpenSearchDashboards (localhost:9200 by default).
+
--------
network.host: localhost
http.port: 9200

# by default transport.host refers to network.host
transport.host: <external ip>
transport.tcp.port: 9300 - 9400
--------
. Make sure OpenSearchDashboards is configured to point to your local client node. In `opensearch_dashboards.yml`, the `opensearch.hosts` setting should be set to
`["localhost:9200"]`.
+
--------
# The OpenSearch instance to use for all your queries.
opensearch.hosts: ["http://localhost:9200"]
--------

[float]
[[load-balancing-opensearch-dashboards]]
=== Load balancing across multiple OpenSearchDashboards instances
To serve multiple OpenSearchDashboards installations behind a load balancer, you must change the configuration. See {opensearch-dashboards-ref}/settings.html[Configuring OpenSearchDashboards] for details on each setting.

Settings unique across each OpenSearchDashboards instance:
--------
server.uuid
server.name
--------

Settings unique across each host (for example, running multiple installations on the same virtual machine):
--------
logging.dest
path.data
pid.file
server.port
--------

Settings that must be the same:
--------
xpack.security.encryptionKey //decrypting session information
xpack.reporting.encryptionKey //decrypting reports
xpack.encryptedSavedObjects.encryptionKey // decrypting saved objects
xpack.encryptedSavedObjects.keyRotation.decryptionOnlyKeys // saved objects encryption key rotation, if any
--------

Separate configuration files can be used from the command line by using the `-c` flag:
--------
bin/opensearch-dashboards -c config/instance1.yml
bin/opensearch-dashboards -c config/instance2.yml
--------

[float]
[[high-availability]]
=== High availability across multiple {opensearch} nodes
OpenSearchDashboards can be configured to connect to multiple OpenSearch nodes in the same cluster.  In situations where a node becomes unavailable,
OpenSearchDashboards will transparently connect to an available node and continue operating.  Requests to available hosts will be routed in a round robin fashion.

Currently the Console application is limited to connecting to the first node listed.

In opensearch_dashboards.yml:
--------
opensearch.hosts:
  - http://opensearch1:9200
  - http://opensearch2:9200
--------

Related configurations include `opensearch.sniffInterval`, `opensearch.sniffOnStart`, and `opensearch.sniffOnConnectionFault`.
These can be used to automatically update the list of hosts as a cluster is resized.  Parameters can be found on the {opensearch-dashboards-ref}/settings.html[settings page].

[float]
[[memory]]
=== Memory
OpenSearchDashboards has a default maximum memory limit of 1.4 GB, and in most cases, we recommend leaving this unconfigured.  In some scenarios, such as large reporting jobs,
it may make sense to tweak limits to meet more specific requirements.

You can modify this limit by setting `--max-old-space-size` in the `node.options` config file that can be found inside `opensearch-dashboards/config` folder or any other configured with the environment variable `OSD_PATH_CONF` (for example in debian based system would be `/etc/opensearch-dashboards`).

The option accepts a limit in MB:
--------
--max-old-space-size=2048
--------
