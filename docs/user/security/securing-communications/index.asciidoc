[[configuring-tls]]
=== Encrypt communications in {osd}
++++
<titleabbrev>Encrypt communications</titleabbrev>
++++

Secure Sockets Layer (SSL) and Transport Layer Security (TLS) provide encryption for data-in-transit. While these terms are often used
interchangeably, {osd} supports only TLS, which supersedes the old SSL protocols.

Browsers send traffic to {osd} and {osd} sends traffic to {opensearch}. These communication channels are configured separately to use TLS.

TLS requires X.509 certificates to authenticate the communicating parties and perform encryption of data-in-transit. Each certificate
contains a public key and has an associated -- but separate -- private key; these keys are used for cryptographic operations. {osd}
supports certificates and private keys in PEM or PKCS#12 format.

[[configuring-tls-browser-osd]]
==== Encrypt traffic between the browser and {osd}

NOTE: You do not need to enable the {opensearch} {security-features} for this type of encryption.

. Obtain a server certificate and private key for {osd}.
+
--
{osd} will need to use this "server certificate" and corresponding private key when receiving connections from web browsers.

When you obtain a server certificate, you must set its subject alternative name (SAN) correctly to ensure that modern web browsers with
hostname verification will trust it. You can set one or more SANs to the {osd} server's fully-qualified domain name (FQDN), hostname, or IP
address. When choosing the SAN, you should pick whichever attribute you will be using to connect to {osd} in your browser, which is likely
the FQDN in a production environment.

You may choose to generate a signed certificate and private key using the {ref}/certutil.html[`opensearch-certutil`] tool.
For example:

[source,sh]
--------------------------------------------------------------------------------
bin/opensearch-certutil cert -name opensearch-dashboards-server -dns localhost,127.0.0.1
--------------------------------------------------------------------------------

This will produce a PKCS#12 file named `opensearch-dashboards-server.p12`, which contains the server certificate and private key.

NOTE: In this example, the server certificate is signed by a locally-generated certificate authority (CA). This is not suitable for a
production environment, and it will result in warnings in your web browser until you configure your browser to trust the certificate. Steps
to configure certificate trust vary depending upon your browser and operating system. If you want to obtain a server certificate for a
production environment, you can instead generate a certificate signing request (CSR) with `opensearch-certutil` using
{ref}/certutil.html#certutil-csr[CSR mode].
--

. Configure {osd} to access the server certificate and private key.

.. If your server certificate and private key are contained in a PKCS#12 file:
+
--
Specify your PKCS#12 file in `opensearch_dashboards.yml`:

[source,yaml]
--------------------------------------------------------------------------------
server.ssl.keystore.path: "/path/to/opensearch-dashboards-server.p12"
--------------------------------------------------------------------------------

If your PKCS#12 file is encrypted, add the decryption password to your <<secure-settings,{osd} keystore>>:

[source,yaml]
--------------------------------------------------------------------------------
bin/opensearch-dashboards-keystore add server.ssl.keystore.password
--------------------------------------------------------------------------------

NOTE: If you used `opensearch-certutil` to generate a PKCS#12 file and you did not specify a password, the file is encrypted, and you
need to set `server.ssl.keystore.password` to an empty string.
--

.. Otherwise, if your server certificate and private key are in PEM format:
+
--
Specify your server certificate and private key in `opensearch_dashboards.yml`:

[source,yaml]
--------------------------------------------------------------------------------
server.ssl.certificate: "/path/to/opensearch-dashboards-server.crt"
server.ssl.key: "/path/to/opensearch-dashboards-server.key"
--------------------------------------------------------------------------------

If your private key is encrypted, add the decryption password to your <<secure-settings,{osd} keystore>>:

[source,yaml]
--------------------------------------------------------------------------------
bin/opensearch-dashboards-keystore add server.ssl.keyPassphrase
--------------------------------------------------------------------------------
--

+
For more information about settings for certificates and keys, see <<settings,{osd} configuration settings>>.

. Configure {osd} to enable TLS for inbound connections.
+
--
Specify that TLS is used in `opensearch_dashboards.yml`:

[source,yaml]
--------------------------------------------------------------------------------
server.ssl.enabled: true
--------------------------------------------------------------------------------
--

. Restart {osd}.

After making these changes, you must always access {osd} via HTTPS. For example, `https://localhost:5601`.

[[configuring-tls-osd-opensearch]]
==== Encrypt traffic between {osd} and {opensearch}

NOTE: To perform this step, you must {ref}/configuring-security.html[enable the {opensearch} {security-features}] or you must have a proxy that
provides an HTTPS endpoint for {opensearch}.

. {ref}/configuring-tls.html#tls-http[Enable TLS on the HTTP layer in {opensearch}].

. Obtain the certificate authority (CA) certificate chain for {opensearch}.
+
{osd} needs the appropriate CA certificate chain to properly establish trust when connecting to {opensearch}.

.. If you followed the {opensearch} documentation for {ref}/configuring-tls.html#node-certificates[generating node certificates] and used the
`opensearch-certutil http` command, check the `opensearch-dashboards` directory in its output. Depending on what options you chose, the output may
include the CA certificate chain in PEM format.

.. Otherwise, you likely have a PKCS#12 file for each your {opensearch} nodes. You can extract the CA certificate chain from one of these files. For
example:
+
--
[source,sh]
--------------------------------------------------------------------------------
openssl pkcs12 -in elastic-certificates.p12 -cacerts -nokeys -out opensearch-ca.pem
--------------------------------------------------------------------------------

This will produce a PEM-formatted file named `opensearch-ca.pem` that contains all CA certificates from the PKCS#12 file.
--

. Configure {osd} to trust the {opensearch} CA certificate chain for the HTTP layer.

.. If your CA certificate chain is in PEM format:
+
--
Specify one or more CA certificates in `opensearch_dashboards.yml`:

[source,yaml]
--------------------------------------------------------------------------------
opensearch.ssl.certificateAuthorities: ["/path/to/opensearch-ca.pem"]
--------------------------------------------------------------------------------
--

.. Otherwise, if your CA certificate chain is contained in a PKCS#12 file:
+
--
WARNING: You should not use a PKCS#12 file that contains a private key. This is an unnecessary security risk. If you only have a PKCS#12
file that contains a private key, a safer approach is to extract the CA certificate chain in PEM format.

Specify your PKCS#12 file in `opensearch_dashboards.yml`:

[source,yaml]
--------------------------------------------------------------------------------
opensearch.ssl.truststore.path: "/path/to/opensearch-ca.p12"
--------------------------------------------------------------------------------

If your PKCS#12 file is encrypted, add the decryption password to your <<secure-settings,{osd} keystore>>:

[source,yaml]
--------------------------------------------------------------------------------
bin/opensearch-dashboards-keystore add opensearch.ssl.truststore.password
--------------------------------------------------------------------------------

NOTE: If you used `opensearch-certutil` to generate a PKCS#12 file and you did not specify a password, the file is encrypted, and you
need to set `server.ssl.truststore.password` to an empty string.
--

+
For more information about settings for certificates and keys, see <<settings,{osd} configuration settings>>.

. Configure {osd} to enable TLS for outbound connections to {opensearch}.
+
--
Specify the HTTPS URL for {opensearch} in `opensearch_dashboards.yml`:

[source,yaml]
--------------------------------------------------------------------------------
opensearch.hosts: ["https://<your_opensearch_host>.com:9200"]
--------------------------------------------------------------------------------

NOTE: Using the HTTPS protocol results in a default `opensearch.ssl.verificationMode` option of `full`, which utilizes hostname
verification. For more information about this setting, see <<settings,{osd} configuration settings>>.
--

If the Elastic {monitor-features} are enabled and you have set up a separate {opensearch} monitoring cluster, you can also configure {osd} to
connect to the monitoring cluster via HTTPS. The steps are the same, but each setting is prefixed by `monitoring.`. For
example, `monitoring.ui.opensearch.hosts`, `monitoring.ui.opensearch.ssl.truststore.path`, etc.
