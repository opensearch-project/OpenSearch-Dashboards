[[development-security]]
== Security

{osd} has generally been able to implement security transparently to core and plugin developers, and this largely remains the case. {osd} on two methods that the {opensearch} `Cluster` provides: `callWithRequest` and `callWithInternalUser`. 

`callWithRequest` executes requests against {opensearch} using the authentication credentials of the {osd} end-user. So, if you log into {osd} with the user of `foo` when `callWithRequest` is used, {osd} execute the request against {opensearch} as the user `foo`. Historically, `callWithRequest` has been used extensively to perform actions that are initiated at the request of {osd} end-users.

`callWithInternalUser` executes requests against {opensearch} using the internal {osd} server user, and has historically been used for performing actions that aren't initiated by {osd} end users; for example, creating the initial `.opensearch-dashboards` index or performing health checks against {opensearch}.

However, with the changes that role-based access control (RBAC) introduces, this is no longer cut and dry. {osd} now requires all access to the `.opensearch-dashboards` index goes through the `SavedObjectsClient`. This used to be a best practice, as the `SavedObjectsClient` was responsible for translating the documents stored in {opensearch} to and from Saved Objects, but RBAC is now taking advantage of this abstraction to implement access control and determine when to use `callWithRequest` versus `callWithInternalUser`.

include::rbac.asciidoc[leveloffset=+1]

include::feature-registration.asciidoc[leveloffset=+1]
