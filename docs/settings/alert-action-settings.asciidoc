[role="xpack"]
[[alert-action-settings-osd]]
=== Alerting and action settings in {osd}
++++
<titleabbrev>Alerting and action settings</titleabbrev>
++++

Alerts and actions are enabled by default in {osd}, but require you configure the following in order to use them:

. <<using-opensearch-dashboards-with-security,Set up {osd} to work with {stack} {security-features}>>.
. <<configuring-tls-osd-opensearch,Set up TLS encryption between {osd} and {opensearch}>>.
. If you are using an *on-premises* Elastic Stack deployment, <<general-alert-action-settings,specify a value for `xpack.encryptedSavedObjects.encryptionKey`>>.

You can configure the following settings in the `opensearch_dashboards.yml` file.


[float]
[[general-alert-action-settings]]
==== General settings

[cols="2*<"]
|===

| `xpack.encryptedSavedObjects.encryptionKey`
  | A string of 32 or more characters used to encrypt sensitive properties on alerts and actions before they're stored in {opensearch}. Third party credentials &mdash; such as the username and password used to connect to an SMTP service &mdash; are an example of encrypted properties. +
  +
  If not set, {osd} will generate a random key on startup, but all alert and action functions will be blocked. Generated keys are not allowed for alerts and actions because when a new key is generated on restart, existing encrypted data becomes inaccessible. For the same reason, alerts and actions in high-availability deployments of {osd} will behave unexpectedly if the key isn't the same on all instances of {osd}. +
  +
  Although the key can be specified in clear text in `opensearch_dashboards.yml`, it's recommended to store this key securely in the <<secure-settings,{osd} Keystore>>.
  Be sure to back up the encryption key value somewhere safe, as your alerts and actions will cease to function due to decryption failures should you lose it.  If you want to rotate the encryption key, be sure to follow the instructions on <<encryption-key-rotation, encryption key rotation>>.

|===

[float]
[[action-settings]]
==== Action settings

[cols="2*<"]
|===

| `xpack.actions.allowedHosts` {opensearchs-icon}
  | A list of hostnames that {osd} is allowed to connect to when built-in actions are triggered. It defaults to `[*]`, allowing any host, but keep in mind the potential for SSRF attacks when hosts are not explicitly added to the allowed hosts. An empty list `[]` can be used to block built-in actions from making any external connections. +
  +
  Note that hosts associated with built-in actions, such as Slack and PagerDuty, are not automatically added to allowed hosts. If you are not using the default `[*]` setting, you must ensure that the corresponding endpoints are added to the allowed hosts as well.

| `xpack.actions.enabledActionTypes` {opensearchs-icon}
  | A list of action types that are enabled. It defaults to `[*]`, enabling all types. The names for built-in {osd} action types are prefixed with a `.` and include: `.server-log`, `.slack`, `.email`, `.index`, `.pagerduty`, and `.webhook`. An empty list `[]` will disable all action types. +
  +
  Disabled action types will not appear as an option when creating new connectors, but existing connectors and actions of that type will remain in {osd} and will not function.

|===

[float]
[[alert-settings]]
==== Alert settings

You do not need to configure any additional settings to use alerting in {osd}.
